// Generated by Haxe 3.3.0
(function ($hx_exports, $global) { "use strict";
$hx_exports["openfl"] = $hx_exports["openfl"] || {};
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.main = function() {
	ApplicationMain.config = { build : "2", company : "sk", file : "lobby", fps : 60, name : "hit5", orientation : "", packageName : "com.redpeakgames.cloud9.lobby", version : "1.0.0", windows : [{ allowHighDPI : false, antialiasing : 0, background : 0, borderless : false, depthBuffer : false, display : 0, fullscreen : false, hardware : true, height : 900, hidden : null, maximized : null, minimized : null, parameters : "{}", resizable : true, stencilBuffer : true, title : "hit5", vsync : false, width : 1200, x : null, y : null}]};
};
ApplicationMain.create = function() {
	var app = new openfl_display_Application();
	app.create(ApplicationMain.config);
	var library = new DefaultAssetLibrary();
	lime_utils_Assets.registerLibrary("default",library);
	ApplicationMain.preloader = new openfl_display_Preloader(new com_redpeakgames_cloud9_game_Preloader());
	app.setPreloader(ApplicationMain.preloader);
	ApplicationMain.preloader.create(ApplicationMain.config);
	ApplicationMain.preloader.onComplete.add(ApplicationMain.init);
	ApplicationMain.preloader.addLibrary(library);
	ApplicationMain.preloader.load();
	app.exec();
};
ApplicationMain.embed = $hx_exports["lime"]["embed"] = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") {
		htmlElement = window.document.getElementById(js_Boot.__cast(element , String));
	} else if(element == null) {
		htmlElement = window.document.createElement("div");
	} else {
		htmlElement = element;
	}
	var color = null;
	if(background != null && background != "") {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) {
			color = Std.parseInt(background);
		} else {
			color = Std.parseInt("0x" + background);
		}
	}
	if(width == null) {
		width = 0;
	}
	if(height == null) {
		height = 0;
	}
	ApplicationMain.config.windows[0].background = color;
	ApplicationMain.config.windows[0].element = htmlElement;
	ApplicationMain.config.windows[0].width = width;
	ApplicationMain.config.windows[0].height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
ApplicationMain._embed = $hx_exports["openfl"]["embed"] = function(element,width,height,background,assetsPrefix) {
	ApplicationMain.embed(element,width,height,background,assetsPrefix);
};
ApplicationMain.init = function() {
	var loaded = 0;
	var total = 0;
	ApplicationMain.preloader = null;
	if(total == 0) {
		ApplicationMain.start();
	}
};
ApplicationMain.start = function() {
	try {
		new DocumentClass();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		openfl_Lib.current.stage.__handleError(e);
	}
	openfl_Lib.current.stage.dispatchEvent(new openfl_events_Event("resize",false,false));
	if(openfl_Lib.current.stage.window.__fullscreen) {
		openfl_Lib.current.stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
	}
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) {
		return 0;
	} else if(l1.priority > l2.priority) {
		return -1;
	} else {
		return 1;
	}
};
openfl_events_EventDispatcher.prototype = {
	__eventMap: null
	,__iterators: null
	,__targetDispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(listener == null) {
			return;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		var _this = this.__eventMap;
		if(!(__map_reserved[type] != null?_this.existsReserved(type):_this.h.hasOwnProperty(type))) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			var _this1 = this.__eventMap;
			if(__map_reserved[type] != null) {
				_this1.setReserved(type,list);
			} else {
				_this1.h[type] = list;
			}
			var _this2 = this.__iterators;
			var value = [iterator];
			if(__map_reserved[type] != null) {
				_this2.setReserved(type,value);
			} else {
				_this2.h[type] = value;
			}
		} else {
			var _this3 = this.__eventMap;
			var list1 = __map_reserved[type] != null?_this3.getReserved(type):_this3.h[type];
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) if(list1[_g1++].match(listener,useCapture)) {
				return;
			}
			var _this4 = this.__iterators;
			var iterators = __map_reserved[type] != null?_this4.getReserved(type):_this4.h[type];
			var _g2 = 0;
			while(_g2 < iterators.length) {
				var iterator1 = iterators[_g2];
				++_g2;
				if(iterator1.active) {
					iterator1.copy();
				}
			}
			list1.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			list1.sort(openfl_events_EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		var _this = this.__eventMap;
		if(__map_reserved[type] != null) {
			return _this.existsReserved(type);
		} else {
			return _this.h.hasOwnProperty(type);
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null || listener == null) {
			return;
		}
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null?_this.getReserved(type):_this.h[type];
		if(list == null) {
			return;
		}
		var _this1 = this.__iterators;
		var iterators = __map_reserved[type] != null?_this1.getReserved(type):_this1.h[type];
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			this.__eventMap.remove(type);
			this.__iterators.remove(type);
		}
		var _this2 = this.__eventMap;
		if(!new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys()).hasNext()) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,toString: function() {
		var full = Type.getClassName(js_Boot.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.type;
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null?_this.getReserved(type):_this.h[type];
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var _this1 = this.__iterators;
		var iterators = __map_reserved[type] != null?_this1.getReserved(type):_this1.h[type];
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.reset(list);
		var tmp = iterator;
		while(tmp.hasNext()) {
			var listener = tmp.next();
			if(listener == null) {
				continue;
			}
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
		}
		if(iterator != iterators[0]) {
			HxOverrides.remove(iterators,iterator);
		}
		return true;
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__blendMode: null
	,__transform: null
	,__worldTransform: null
	,__worldColorTransform: null
	,__renderCairo: null
	,__renderCairoMask: null
	,__renderCanvas: null
	,__renderCanvasMask: null
	,__renderGL: null
	,__updateChildren: null
	,__updateTransforms: null
	,__updateMask: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	opaqueBackground: null
	,parent: null
	,scale9Grid: null
	,stage: null
	,__alpha: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cairo: null
	,__children: null
	,__filters: null
	,__forceCacheAsBitmap: null
	,__graphics: null
	,__interactive: null
	,__isMask: null
	,__loaderInfo: null
	,__mask: null
	,__name: null
	,__objectTransform: null
	,__renderable: null
	,__renderDirty: null
	,__renderParent: null
	,__renderTransform: null
	,__renderTransformCache: null
	,__renderTransformChanged: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scrollRect: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldZ: null
	,__canvas: null
	,__context: null
	,__style: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			var _this = openfl_display_DisplayObject.__broadcastEvents;
			if(!(__map_reserved[type] != null?_this.existsReserved(type):_this.h.hasOwnProperty(type))) {
				var _this1 = openfl_display_DisplayObject.__broadcastEvents;
				var value = [];
				if(__map_reserved[type] != null) {
					_this1.setReserved(type,value);
				} else {
					_this1.h[type] = value;
				}
			}
			var _this2 = openfl_display_DisplayObject.__broadcastEvents;
			var dispatchers = __map_reserved[type] != null?_this2.getReserved(type):_this2.h[type];
			if(dispatchers.indexOf(this) == -1) {
				dispatchers.push(this);
			}
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(js_Boot.__instanceof(event,openfl_events_MouseEvent)) {
			var mouseEvent = event;
			var _this = this.__getRenderTransform();
			mouseEvent.stageX = mouseEvent.localX * _this.a + mouseEvent.localY * _this.c + _this.tx;
			var _this1 = this.__getRenderTransform();
			mouseEvent.stageY = mouseEvent.localX * _this1.b + mouseEvent.localY * _this1.d + _this1.ty;
		} else if(js_Boot.__instanceof(event,openfl_events_TouchEvent)) {
			var touchEvent = event;
			var _this2 = this.__getRenderTransform();
			touchEvent.stageX = touchEvent.localX * _this2.a + touchEvent.localY * _this2.c + _this2.tx;
			var _this3 = this.__getRenderTransform();
			touchEvent.stageY = touchEvent.localX * _this3.b + touchEvent.localY * _this3.d + _this3.ty;
		}
		return openfl_events_EventDispatcher.prototype.dispatchEvent.call(this,event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix;
		if(targetCoordinateSpace != null) {
			matrix = this.__getWorldTransform().clone();
			matrix.concat(targetCoordinateSpace.__getWorldTransform().clone().invert());
		} else {
			matrix = openfl_geom_Matrix.__temp;
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		pos = pos.clone();
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			pos.x = -_this.tx;
			pos.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - pos.y) + _this.d * (pos.x - _this.tx));
			pos.y = 1.0 / norm * (_this.a * (pos.y - _this.ty) + _this.b * (_this.tx - pos.x));
			pos.x = px;
		}
		return pos;
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			return this.getBounds(this).intersects(obj.getBounds(this));
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		if(this.stage != null) {
			return this.__hitTest(x,y,shapeFlag,null,true,this);
		} else {
			return false;
		}
	}
	,localToGlobal: function(point) {
		return this.__getRenderTransform().transformPoint(point);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				var _this = openfl_display_DisplayObject.__broadcastEvents;
				if(__map_reserved[type] != null?_this.existsReserved(type):_this.h.hasOwnProperty(type)) {
					var _this1 = openfl_display_DisplayObject.__broadcastEvents;
					HxOverrides.remove(__map_reserved[type] != null?_this1.getReserved(type):_this1.h[type],this);
				}
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) {
			this.__graphics.__cleanup();
		}
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
		return this.__dispatchEvent(event);
	}
	,__dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			this.parent.__dispatchEvent(event);
		}
		return result;
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) {
			this.__getBounds(rect,matrix);
		} else {
			var r = openfl_geom_Rectangle.__temp;
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(matrix.tx,matrix.ty,r.width,r.height);
		}
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		if(this.__transformDirty || openfl_display_DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			if(this.parent == null) {
				if(transformDirty) {
					this.__update(true,false);
				}
			} else {
				while(current != this.stage) {
					list.push(current);
					current = current.parent;
					if(current != this.stage && current.__transformDirty) {
						transformDirty = true;
					}
				}
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.get_visible() || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
				return true;
			}
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		if(this.__graphics != null) {
			this.__graphics.__readGraphicsData(graphicsData);
		}
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoDisplayObject.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!(this.opaqueBackground == null && this.__graphics == null)) {
			if(!(!this.__renderable || this.__worldAlpha <= 0)) {
				if(this.opaqueBackground != null && this.get_width() > 0 && this.get_height() > 0) {
					renderSession.maskManager.pushObject(this);
					var context = renderSession.context;
					var transform = this.__renderTransform;
					if(renderSession.roundPixels) {
						context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
					} else {
						context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
					}
					var color = this.opaqueBackground;
					context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
					context.fillRect(0,0,this.get_width(),this.get_height());
					renderSession.maskManager.popObject(this);
				}
				if(this.__graphics != null) {
					if(!(!this.__renderable || this.__worldAlpha <= 0)) {
						var graphics = this.__graphics;
						if(graphics != null) {
							openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
							var width = graphics.__width;
							var height = graphics.__height;
							if(graphics.__canvas != null) {
								var context1 = renderSession.context;
								var scrollRect = this.__scrollRect;
								if(width > 0 && height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
									renderSession.maskManager.pushObject(this);
									context1.globalAlpha = this.__worldAlpha;
									var transform1 = graphics.__worldTransform;
									if(renderSession.roundPixels) {
										context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx | 0,transform1.ty | 0);
									} else {
										context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
									}
									context1.drawImage(graphics.__canvas,0,0);
									renderSession.maskManager.popObject(this);
								}
							}
						}
					}
				}
			}
		}
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		}
	}
	,__renderDOM: function(renderSession) {
		var tmp = this.opaqueBackground != null && this.get_width() > 0 && this.get_height() > 0;
		var graphics = this.__graphics;
		if(this.stage != null && this.__worldVisible && this.__renderable && graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
			if(graphics.__dirty || this.__worldAlphaChanged || this.__canvas == null && graphics.__canvas != null) {
				if(graphics.__canvas != null) {
					if(this.__canvas != graphics.__canvas) {
						if(this.__canvas != null) {
							renderSession.element.removeChild(this.__canvas);
						}
						this.__canvas = graphics.__canvas;
						this.__context = graphics.__context;
						openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
					}
				} else if(this.__canvas != null) {
					renderSession.element.removeChild(this.__canvas);
					this.__canvas = null;
					this.__style = null;
				}
			}
			if(this.__canvas != null) {
				renderSession.maskManager.pushObject(this);
				var cacheTransform = this.__renderTransform;
				this.__renderTransform = graphics.__worldTransform;
				if(graphics.__transformDirty) {
					graphics.__transformDirty = false;
					this.__renderTransformChanged = true;
				}
				openfl__$internal_renderer_dom_DOMRenderer.updateClip(this,renderSession);
				openfl__$internal_renderer_dom_DOMRenderer.applyStyle(this,renderSession,true,true,true);
				this.__renderTransform = cacheTransform;
				renderSession.maskManager.popObject(this);
			}
		} else if(this.__canvas != null) {
			renderSession.element.removeChild(this.__canvas);
			this.__canvas = null;
			this.__style = null;
		}
	}
	,__renderGL: function(renderSession) {
		if(!(this.opaqueBackground == null && this.__graphics == null)) {
			if(!(!this.__renderable || this.__worldAlpha <= 0)) {
				if(this.opaqueBackground != null && this.get_width() > 0 && this.get_height() > 0) {
					renderSession.maskManager.pushObject(this);
					var gl = renderSession.gl;
					var rect = openfl_geom_Rectangle.__temp;
					rect.setTo(0,0,this.get_width(),this.get_height());
					renderSession.maskManager.pushRect(rect,this.__renderTransform);
					var color = this.opaqueBackground;
					gl.clearColor((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1);
					gl.clear(gl.COLOR_BUFFER_BIT);
					renderSession.maskManager.popRect();
					renderSession.maskManager.popObject(this);
				}
				if(this.__graphics != null) {
					if(!(!this.__renderable || this.__worldAlpha <= 0)) {
						var graphics = this.__graphics;
						if(graphics != null) {
							openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
							if(graphics.__bitmap != null && graphics.__visible) {
								var renderer = renderSession.renderer;
								var gl1 = renderSession.gl;
								renderSession.blendModeManager.setBlendMode(this.get_blendMode());
								renderSession.maskManager.pushObject(this);
								var shader = renderSession.filterManager.pushObject(this);
								shader.get_data().uImage0.input = graphics.__bitmap;
								shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
								shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
								renderSession.shaderManager.setShader(shader);
								gl1.bindBuffer(gl1.ARRAY_BUFFER,graphics.__bitmap.getBuffer(gl1,this.__worldAlpha));
								gl1.vertexAttribPointer(shader.get_data().aPosition.index,3,gl1.FLOAT,false,24,0);
								gl1.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl1.FLOAT,false,24,12);
								gl1.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl1.FLOAT,false,24,20);
								gl1.drawArrays(gl1.TRIANGLE_STRIP,0,4);
								renderSession.filterManager.popObject(this);
								renderSession.maskManager.popObject(this);
							}
						}
					}
				}
			}
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
	}
	,__stopAllMovieClips: function() {
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask && (this.parent == null || !this.parent.__isMask);
		this.__updateTransforms();
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
		if(maskGraphics != null) {
			this.__updateMask(maskGraphics);
		}
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) {
				this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			}
			var __parent = this.parent != null?this.parent:this.__renderParent;
			if(__parent != null) {
				this.__worldAlpha = this.get_alpha() * __parent.__worldAlpha;
				this.__worldColorTransform.__combine(__parent.__worldColorTransform);
				if(this.get_blendMode() == null || this.get_blendMode() == 10) {
					this.__blendMode = __parent.__blendMode;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
			}
			if(updateChildren && this.__renderDirty) {
				this.__renderDirty = false;
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask && (this.parent == null || !this.parent.__isMask);
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.overrideMatrix(this.__worldTransform);
			maskGraphics.__commands.append(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) {
				maskGraphics.__bounds = new openfl_geom_Rectangle();
			}
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided?overrideTransform:this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(this.__renderTransform == null) {
			this.__renderTransform = new openfl_geom_Matrix();
		}
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			this.__worldTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__worldTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__worldTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__worldTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__worldTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__worldTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
			parentTransform = this.parent.__renderTransform;
			this.__renderTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__renderTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__renderTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__renderTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__renderTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__renderTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__worldTransform.copyFrom(local);
			this.__renderTransform.copyFrom(local);
		}
		if(this.__scrollRect != null) {
			var _this = this.__renderTransform;
			var px = -this.__scrollRect.x;
			var py = -this.__scrollRect.y;
			_this.tx = px * _this.a + py * _this.c + _this.tx;
			_this.ty = px * _this.b + py * _this.d + _this.ty;
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value == null) {
			value = 10;
		}
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) {
			return this.__cacheAsBitmap;
		} else {
			return true;
		}
	}
	,set_cacheAsBitmap: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return this.__cacheAsBitmapMatrix = value.clone();
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
		} else {
			this.__filters = null;
		}
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return value;
	}
	,get_height: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.height;
	}
	,set_height: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.height) {
			this.set_scaleY(value / bounds.height);
		} else {
			this.set_scaleY(1);
		}
		return value;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) {
			return openfl_Lib.current.__loaderInfo;
		}
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			var _this = this.__mask;
			if(!_this.__transformDirty) {
				_this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			var _this1 = this.__mask;
			if(!_this1.__renderDirty) {
				_this1.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(value != null) {
			value.__isMask = true;
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null?this.stage.__mouseX:openfl_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null?this.stage.__mouseY:openfl_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.tx;
		} else {
			return 1.0 / norm * (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx));
		}
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null?this.stage.__mouseX:openfl_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null?this.stage.__mouseY:openfl_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.ty;
		} else {
			return 1.0 / norm * (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX));
		}
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) {
			return openfl_Lib.current;
		}
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			var __scaleX = this.get_scaleX();
			var __scaleY = this.get_scaleY();
			this.__transform.a = this.__rotationCosine * __scaleX;
			this.__transform.b = this.__rotationSine * __scaleX;
			this.__transform.c = -this.__rotationSine * __scaleY;
			this.__transform.d = this.__rotationCosine * __scaleY;
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,get_scaleX: function() {
		if(this.__transform.b == 0) {
			return this.__transform.a;
		} else {
			return Math.sqrt(this.__transform.a * this.__transform.a + this.__transform.b * this.__transform.b);
		}
	}
	,set_scaleX: function(value) {
		if(this.__transform.b == 0) {
			if(value != this.__transform.a) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = value;
		} else {
			var a = this.__rotationCosine * value;
			var b = this.__rotationSine * value;
			if(this.__transform.a != a || this.__transform.b != b) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = a;
			this.__transform.b = b;
		}
		return value;
	}
	,get_scaleY: function() {
		if(this.__transform.c == 0) {
			return this.__transform.d;
		} else {
			return Math.sqrt(this.__transform.c * this.__transform.c + this.__transform.d * this.__transform.d);
		}
	}
	,set_scaleY: function(value) {
		if(this.__transform.c == 0) {
			if(value != this.__transform.d) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.d = value;
		} else {
			var c = -this.__rotationSine * value;
			var d = this.__rotationCosine * value;
			if(this.__transform.d != d || this.__transform.c != c) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.c = c;
			this.__transform.d = d;
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) {
			return null;
		}
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
		}
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
		this.__objectTransform.set_matrix(value.get_matrix());
		this.__objectTransform.set_colorTransform(value.get_colorTransform().__clone());
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.width;
	}
	,set_width: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.width) {
			this.set_scaleX(value / bounds.width);
		} else {
			this.set_scaleX(1);
		}
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",get_loaderInfo:"get_loaderInfo",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = false;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,tabIndex: null
	,__tabEnabled: null
	,requestSoftKeyboard: function() {
		openfl_Lib.notImplemented({ fileName : "InteractiveObject.hx", lineNumber : 42, className : "openfl.display.InteractiveObject", methodName : "requestSoftKeyboard"});
		return false;
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,get_tabEnabled: function() {
		return this.__tabEnabled;
	}
	,set_tabEnabled: function(value) {
		return this.__tabEnabled = value;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,tabChildren: null
	,__removedChildren: null
	,addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) {
			throw new js__$Boot_HaxeError("Invalid index position " + index);
		}
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
			}
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) {
				this.__setStageReference(this.stage);
			}
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event("added",true);
			event.target = child;
			child.__dispatchEvent(event);
			if(addedToStage) {
				child.__dispatchChildren(new openfl_events_Event("addedToStage",false,false));
			}
		}
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.__children[index];
		}
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) {
				return i;
			}
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			child.__dispatchEvent(new openfl_events_Event("removed",true));
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) {
					this.stage.set_focus(null);
				}
				child.__dispatchChildren(new openfl_events_Event("removedFromStage",false,false));
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.removeChild(this.__children[index]);
		}
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) {
				return;
			}
		}
		if(beginIndex > this.__children.length - 1) {
			return;
		} else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
		}
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			--numRemovals;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) {
				return child;
			}
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,stopAllMovieClips: function() {
		this.__stopAllMovieClips();
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = this.__children.indexOf(child1);
			var index2 = this.__children.indexOf(child2);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
	}
	,__dispatchChildren: function(event) {
		var success = this.__dispatchEvent(event);
		if(success && this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchChildren(event)) {
					return false;
				}
			}
		}
		return success;
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0) {
				continue;
			}
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0 || child.__isMask) {
				continue;
			}
			child.__getRenderBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__temp;
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				return false;
			}
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i]);
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		openfl_display_InteractiveObject.prototype.__readGraphicsData.call(this,graphicsData,recurse);
		if(recurse) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__readGraphicsData(graphicsData,recurse);
			}
		}
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairo(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.get_length()) {
			var orphan = _g11.get(_g2);
			++_g2;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		renderSession.maskManager.popObject(this);
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairoMask(renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.get_length()) {
			var orphan = _g11.get(_g2);
			++_g2;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__renderDOM: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderSession);
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.get_length()) {
			var orphan = _g11.get(_g2);
			++_g2;
			if(orphan.stage == null) {
				orphan.__renderDOM(renderSession);
			}
		}
		this.__removedChildren.set_length(0);
		renderSession.maskManager.popObject(this);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
		renderSession.maskManager.pushObject(this);
		renderSession.filterManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.get_length()) {
			var orphan = _g11.get(_g2);
			++_g2;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		renderSession.filterManager.popObject(this);
		renderSession.maskManager.popObject(this);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__stopAllMovieClips: function() {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__stopAllMovieClips();
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	buttonMode: null
	,dropTarget: null
	,hitArea: null
	,useHandCursor: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
		if(this.stage != null) {
			this.stage.__startDrag(this,lockCenter,bounds);
		}
	}
	,stopDrag: function() {
		if(this.stage != null) {
			this.stage.__stopDrag(this);
		}
	}
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		} else {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__scrollRect != null) {
				var point = openfl_geom_Point.__temp;
				point.setTo(x,y);
				var _this = this.__getRenderTransform();
				var norm = _this.a * _this.d - _this.b * _this.c;
				if(norm == 0) {
					point.x = -_this.tx;
					point.y = -_this.ty;
				} else {
					var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
					point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
					point.x = px;
				}
				if(!this.__scrollRect.containsPoint(point)) {
					return false;
				}
			}
			if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				return interactiveOnly;
			} else if((!interactiveOnly || this.mouseEnabled) && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(!this.__tabEnabled) {
			return this.buttonMode;
		} else {
			return true;
		}
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var com_redpeakgames_cloud9_Main = function() {
	openfl_display_Sprite.call(this);
	this.set_name("cloud9.Main");
	this.isLobby = true;
	this.udt = new com_redpeakgames_cloud9_game_UserData();
	this.popups = [];
	this.isFirstSlot = false;
	this.isSkipPurchaseResult = false;
	this.setListener();
	openfl_system_Security.allowDomain("*");
	openfl_system_Security.allowInsecureDomain("*");
	try {
		openfl_external_ExternalInterface.addCallback("balanceUpdated",$bind(this,this.balanceUpdated));
		openfl_external_ExternalInterface.addCallback("buyFailed",$bind(this,this.buyFailed));
		openfl_external_ExternalInterface.addCallback("sentGift",$bind(this,this.sentGift));
		openfl_external_ExternalInterface.addCallback("sentInvite",$bind(this,this.sentInvite));
		openfl_external_ExternalInterface.addCallback("cashSpin",$bind(this,this.cashSpin));
		openfl_external_ExternalInterface.addCallback("coinBought",$bind(this,this.coinBought));
		openfl_external_ExternalInterface.addCallback("eventBuy",$bind(this,this.eventBuy));
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
			haxe_Log.trace(e.toString(),{ fileName : "Main.hx", lineNumber : 113, className : "com.redpeakgames.cloud9.Main", methodName : "new"});
		} else throw(e);
	}
	this.startLobby();
	com_redpeakgames_cloud9_ExternalLoaderManager.init(this.parent);
	new com_redpeakgames_cloud9_utils_Http(this.udt.url + "data/external.json",$bind(this,this.onLoadExternal),$bind(this,this.onLoadErrorExternal)).request();
};
$hxClasses["com.redpeakgames.cloud9.Main"] = com_redpeakgames_cloud9_Main;
com_redpeakgames_cloud9_Main.__name__ = ["com","redpeakgames","cloud9","Main"];
com_redpeakgames_cloud9_Main.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_Main.prototype = $extend(openfl_display_Sprite.prototype,{
	topMenu: null
	,lobby: null
	,isLobby: null
	,loader: null
	,popups: null
	,udt: null
	,welcome: null
	,nosee: null
	,like: null
	,extra: null
	,ctree: null
	,sboost: null
	,isFirstSlot: null
	,isGamePaused: null
	,sharePost: null
	,isSharePosting: null
	,isSkipPurchaseResult: null
	,onLoadExternal: function(e) {
		var loader = e.target;
		haxe_Log.trace(loader.data,{ fileName : "Main.hx", lineNumber : 129, className : "com.redpeakgames.cloud9.Main", methodName : "onLoadExternal"});
		var external = JSON.parse(loader.data);
		if(external.swf != null) {
			this.setSharedObject();
			var swfList = external.swf;
			var _g = 0;
			while(_g < swfList.length) {
				var swf = swfList[_g];
				++_g;
				this.makeExternalSwf(swf.name,swf.preload,swf.attach,parseFloat(swf.x),parseFloat(swf.y),swf.url);
			}
		}
	}
	,onLoadErrorExternal: function(e) {
		haxe_Log.trace("main.onLoadErrorExternal() : " + Std.string(e),{ fileName : "Main.hx", lineNumber : 144, className : "com.redpeakgames.cloud9.Main", methodName : "onLoadErrorExternal"});
	}
	,setListener: function() {
		openfl_Lib.current.stage.addEventListener("fullScreen",$bind(this,this.onFullscreen));
		this.addEventListener("ge.status.change",$bind(this,this.onChangeStatus));
		this.addEventListener("ge.balance.changed",$bind(this,this.onBalanceChanged));
		this.addEventListener("ge.add.coin",$bind(this,this.onAddCoin));
		this.addEventListener("ge.add.dia",$bind(this,this.onAddDia));
		this.addEventListener("ge.refresh.dia.delayed",$bind(this,this.onDiaDelayedRefresh));
		this.addEventListener("ge.slot.coin.changed",$bind(this,this.onSlotCoinChanged));
		this.addEventListener("ge.slot.dia.changed",$bind(this,this.onSlotDiaChanged));
		this.addEventListener("ge.topmenu.coin.changed",$bind(this,this.onTopCoinChanged));
		this.addEventListener("ge.topmenu.dia.changed",$bind(this,this.onTopDiaChanged));
		this.addEventListener("ge.dailywheel.close",$bind(this,this.onDailyWheelClosed));
		this.addEventListener("ge.dailywheel.time.changed",$bind(this,this.onDailyWheelTimeChanged));
		this.addEventListener("ge.open.diawheel",$bind(this,this.onOpenDiaWheel));
		this.addEventListener("ge.open.luckyspin",$bind(this,this.onOpenLuckySpin));
		this.addEventListener("ge.luckyspin.close",$bind(this,this.onLuckySpinClosed));
		this.addEventListener("ge.mute",$bind(this,this.onMute));
		this.addEventListener("ge.mute.bgm",$bind(this,this.onMuteBgm));
		this.addEventListener("ge.open.collect",$bind(this,this.onOpenCollect));
		this.addEventListener("ge.close.gift",$bind(this,this.onCloseGift));
		this.addEventListener("ge.reload",$bind(this,this.onReload));
		this.addEventListener("ge.net.error",$bind(this,this.onNetError));
		this.addEventListener("ge.to.lobby",$bind(this,this.onToLobby));
		this.addEventListener("ge.general.close",$bind(this,this.onGeneralClose));
		this.addEventListener("ge.close.levelup",$bind(this,this.onLevelupClosed));
		this.addEventListener("ge.close.voucher",$bind(this,this.onCloseVoucher));
		this.addEventListener("ge.open.adjustbet",$bind(this,this.onAdjustBet));
		this.addEventListener("ge.bet.changed",$bind(this,this.onBetChanged));
		this.addEventListener("ge.open.shop",$bind(this,this.onOpenShop));
		this.addEventListener("ge.open.bankrupt",$bind(this,this.onOpenBankrupt));
		this.addEventListener("ge.open.hitthefive",$bind(this,this.onHitTheFive));
		this.addEventListener("ge.selected.slot",$bind(this,this.onSelectSlot));
		this.addEventListener("ge.loaded.slot",$bind(this,this.onLoadedSlot));
		this.addEventListener("ge.start.freespin",$bind(this,this.onStartFreeSpin));
		this.addEventListener("ge.end.freespin",$bind(this,this.onEndFreeSpin));
		this.addEventListener("ge.bigwin.end",$bind(this,this.onBigwinEnd));
		this.addEventListener("ge.open.newslot",$bind(this,this.onNewSlot));
		this.addEventListener("ge.open.rcongrats",$bind(this,this.onRCongrats));
		this.addEventListener("ge.close.rmembers",$bind(this,this.onCloseRmembers));
		this.addEventListener("ge.open.rmembers",$bind(this,this.onOpenRmembers));
		this.addEventListener("ge.spin.luckyspin",$bind(this,this.onSpinLuckySpin));
		this.addEventListener("ge.to.normalscreen",$bind(this,this.onToNormalScreen));
		this.addEventListener("ge.update.condideal",$bind(this,this.onUpdateConditionalData));
		this.addEventListener("ge.request.condideal",$bind(this,this.onRequestConditionalData));
		this.addEventListener("ge.close.condideal",$bind(this,this.onCloseConditionalDeal));
		this.addEventListener("ge.open.reward.popup",$bind(this,this.onOpenRewardPopup));
		this.addEventListener("ge.reward.countchange",$bind(this,this.onRewardCountChange));
		this.addEventListener("ge.enable.keyboardspin",$bind(this,this.onEnableKeyboardSpin));
		this.addEventListener("ge.post.share",$bind(this,this.onSharePost));
		this.addEventListener("ge.open.profile",$bind(this,this.onOpenProfile));
		this.addEventListener("ge.close.profile",$bind(this,this.onCloseProfile));
		this.addEventListener("ge.change.slot",$bind(this,this.onChangeSlot));
		this.addEventListener("get.open.purchage",$bind(this,this.onPurchase));
		this.addEventListener("ge.skip.purchaseresult",$bind(this,this.onSkipPurchaseResult));
		this.addEventListener("ge.get.reward",$bind(this,this.onGetReward));
		this.addEventListener("ge.close.mystery",$bind(this,this.onCloseMysteryBox));
		this.addEventListener("ge.open.leaderboard",$bind(this,this.onOpenLeaderBoard));
		this.addEventListener("ge.change.giftnumber",$bind(this,this.onChangeGiftNumber));
		this.addEventListener("ge.close.externalloader",$bind(this,this.onCloseExternalLoader));
		this.addEventListener("ge.get.event",$bind(this,this.onReceivedEventResponse));
		this.addEventListener("ge.get.salesfromslot",$bind(this,this.onReceivedSales));
		this.addEventListener("ge.spin.game",$bind(this,this.onSpinCount));
		this.addEventListener("ge.open.doubleup",$bind(this,this.onOpenDoubleUp));
		this.addEventListener("ge.close.doubleup",$bind(this,this.onCloseDoubleUp));
		this.addEventListener("ge.refresh.cointree",$bind(this,this.onRefreshCoinTree));
		this.addEventListener("ge.upgrade.cointree",$bind(this,this.onUpgradeCoinTree));
		this.addEventListener("ge.close.cointree",$bind(this,this.onCloseCoinTree));
		this.addEventListener("ge.game.pause",$bind(this,this.onGamepause));
		this.addEventListener("ge.game.resume",$bind(this,this.onGameResume));
		this.addEventListener("ge.game.spin",$bind(this,this.onGameSpin));
		this.addEventListener("ge.open.superboostpopup",$bind(this,this.onOpenSuperBoostPopup));
		this.addEventListener("ge.off.superboost",$bind(this,this.onSuperBoostOff));
		this.addEventListener("ge.open.tournamentpackagepopup",$bind(this,this.onOpenTournamentPackagePopup));
		this.addEventListener("ge.participation.tournament",$bind(this,this.onParticipation));
		this.addEventListener("ge.open.empty.tournament",$bind(this,this.onOpenEmptyTournament));
		this.addEventListener("ge.result.tournament",$bind(this,this.onTournamentResult));
		this.addEventListener("ge.open.tournamentlist",$bind(this,this.onOpenTournamentList));
		this.addEventListener("ge.player.refresh",$bind(this,this.refreshPlayers));
	}
	,onOpenDoubleUp: function(e) {
		if(this.isLobby == false) {
			if(e.data.length > 0) {
				var data = JSON.parse(e.data);
				this.topMenu.openDoubleUpTag(data.x,data.y,data.fy);
			} else {
				this.topMenu.openDoubleUp();
			}
		}
	}
	,onCloseDoubleUp: function(e) {
		var data = JSON.parse(e.data);
		if(data.type == "tag") {
			this.topMenu.closeDoubleUpTag();
		} else {
			this.topMenu.closeDoubleUp(data.prize,data.coin,data.type);
		}
	}
	,onRefreshCoinTree: function(e) {
		this.topMenu.refreshTreeCounter(JSON.parse(e.data));
	}
	,onUpgradeCoinTree: function(e) {
		var data = JSON.parse(e.data);
		this.topMenu.upgradeCoinTree(data.grade,data.meta);
	}
	,onCloseCoinTree: function(e) {
		this.topMenu.closeCoinTree();
	}
	,onGamepause: function(e) {
		if(this.loader != null) {
			try {
				this.callLoaderMethod("pause",[]);
				this.isGamePaused = true;
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				haxe_Log.trace(err,{ fileName : "Main.hx", lineNumber : 289, className : "com.redpeakgames.cloud9.Main", methodName : "onGamepause"});
			}
		}
	}
	,onGameResume: function(e) {
		if(this.isGamePaused == false) {
			return;
		}
		if(this.loader != null) {
			try {
				this.callLoaderMethod("resume",[]);
				this.isGamePaused = false;
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				haxe_Log.trace(err,{ fileName : "Main.hx", lineNumber : 304, className : "com.redpeakgames.cloud9.Main", methodName : "onGameResume"});
			}
		}
	}
	,onGameSpin: function(e) {
		this.topMenu.superBoostSpin();
	}
	,onOpenSuperBoostPopup: function(e) {
		this.topMenu.openSuperBoostPopup();
	}
	,onSuperBoostOff: function(e) {
		this.topMenu.setSuperBoostOff();
	}
	,onOpenTournamentPackagePopup: function(e) {
		this.topMenu.openTournamentPackagePopup(e.data);
	}
	,onSpinCount: function(e) {
		var data = JSON.parse(e.data);
		if(data.count != null) {
			Std.parseInt(data.count);
		}
	}
	,onReceivedEventResponse: function(e) {
		JSON.parse(e.data);
	}
	,onReceivedSales: function(e) {
		var json = null;
		try {
			json = JSON.parse(e.data);
		} catch( err ) {
			haxe_CallStack.lastException = err;
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace(err,{ fileName : "Main.hx", lineNumber : 350, className : "com.redpeakgames.cloud9.Main", methodName : "onReceivedSales"});
		}
		if(json == null) {
			return;
		}
		com_redpeakgames_cloud9_utils_Console.log("json : " + Std.string(json));
		com_redpeakgames_cloud9_utils_Console.log("low data : " + e.data);
		if(json.type == "sboost" && json.data == "popup") {
			this.onGamepause(null);
			this.topMenu.openSuperBoostPopup();
		}
		if(json.type == "rbox" && json.data == "popup") {
			this.onGamepause(null);
			this.topMenu.openRandomBoxPopup();
		}
		if(json.tournament != null) {
			if(json.type == "tournament" && json.data == "popup") {
				haxe_Log.trace(json.tournament,{ fileName : "Main.hx", lineNumber : 373, className : "com.redpeakgames.cloud9.Main", methodName : "onReceivedSales"});
				this.topMenu.openTournament(null,"time.package",json.tournament);
			} else {
				this.topMenu.openTournament(null,"time",json.tournament);
			}
		}
	}
	,onCloseExternalLoader: function(e) {
		com_redpeakgames_cloud9_ExternalLoaderManager.unload(e.data);
	}
	,onEnableKeyboardSpin: function(e) {
		this.topMenu.enableToKeyboardSpin(Std.parseInt(e.data) == 1);
	}
	,onBigwinEnd: function(e) {
		this.topMenu.showCongrats();
	}
	,onTopCoinChanged: function(e) {
		if(this.loader != null) {
			this.callLoaderMethod("updateBalance",[e.data]);
		}
	}
	,onTopDiaChanged: function(e) {
		if(this.loader != null) {
			this.callLoaderMethod("updateDia",[Std.parseInt(e.data)]);
		}
	}
	,onHitTheFive: function(e) {
		if(this.isLobby == false) {
			var data = JSON.parse(e.data);
			this.topMenu.openHitTheFive(data.x,data.y,data.prize);
		}
	}
	,onStartFreeSpin: function(e) {
		if(this.topMenu.isTutorial == true) {
			com_redpeakgames_cloud9_utils_Trace.trace(this.udt.url,this.udt.uid,this.udt.sig,"tuto_spin_free");
		}
	}
	,onEndFreeSpin: function(e) {
		if(this.topMenu.isTutorial == true) {
			this.topMenu.endTutorialGame();
			com_redpeakgames_cloud9_utils_Trace.trace(this.udt.url,this.udt.uid,this.udt.sig,"tuto_end_free");
		}
	}
	,onLoadedSlot: function(e) {
		if(this.topMenu.isTutorial == true) {
			this.topMenu.startTutorialGame();
			this.isFirstSlot = true;
		}
		if(js_Boot.__cast(Reflect.field(e.target,"name") , String) != "cloud9.luckyspin") {
			this.topMenu.set_rewardNoticeVisible(true);
			this.topMenu.contentIntroduceVisible(true);
			var slotIcon = this.getSlotIconCurrentPlaying();
			if(slotIcon != null) {
				if(slotIcon.get_mbox() != 0) {
					if(slotIcon.sid == 1029) {
						this.topMenu.mysteryBoxSetPos(1429,426);
					} else {
						this.topMenu.mysteryBoxSetPos();
					}
					this.topMenu.mysteryBoxStart(slotIcon.get_mbox());
				}
				if(slotIcon.sid == 2009) {
					if(this.topMenu.canvasGetCoin != null) {
						this.topMenu.canvasGetCoin.set_visible(true);
					}
				}
				this.callLoaderMethod("onMuteBgm",[com_redpeakgames_cloud9_Global.muteBgm]);
				this.topMenu.canvasCoinTreeVisible(true);
				this.topMenu.superBoostDiaTagVisible(true);
				this.topMenu.randomBoxTagVisible(true);
			}
		}
	}
	,onSelectSlot: function(e) {
		if(this.topMenu.isTutorial == true) {
			this.topMenu.resetTutorialLobby();
		} else if(this.isFirstSlot) {
			this.isFirstSlot = false;
			com_redpeakgames_cloud9_utils_Trace.trace(this.udt.url,this.udt.uid,this.udt.sig,"sel_slot");
		}
		this.topMenu.onClickGotoSlot(null);
		this.topMenu.replaceGotoSlotList(this.topMenu.games);
	}
	,onSpinLuckySpin: function(e) {
		this.lobby.addMegaSpinCount();
	}
	,startLobby: function() {
		this.topMenu = new com_redpeakgames_cloud9_TopMenu(this.udt);
		this.topMenu.treeData = this.ctree != null?this.ctree:null;
		if(this.sboost != null && this.sboost.remain != null && this.sboost.scount != null) {
			this.topMenu.startSuperBoost(Std.parseInt(this.sboost.remain),Std.parseInt(this.sboost.scount));
		}
		this.topMenu.shopRemainTime = this.extra != null && Object.prototype.hasOwnProperty.call(this.extra,"bremain") && this.extra.bremain != null?Std.parseInt(this.extra.bremain):7200;
		this.addChild(this.topMenu);
		this.topMenu.set_lobby(false);
		this.lobby = new com_redpeakgames_cloud9_Lobby(this.udt);
		this.lobby.start();
		this.addChildAt(this.lobby,0);
		this.topMenu.setStatus(this.udt.lev,this.udt.exp,this.udt.mexp,this.udt.vlev);
		this.topMenu.set_dia(this.udt.dia);
		this.topMenu.set_coin(this.udt.coin);
		this.topMenu.firstCoin = this.udt.coin;
		haxe_Timer.delay(function() {
			try {
				openfl_external_ExternalInterface.call("delayedCall");
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
					haxe_Log.trace(e.toString(),{ fileName : "Main.hx", lineNumber : 535, className : "com.redpeakgames.cloud9.Main", methodName : "startLobby"});
				} else throw(e);
			}
		},1000);
		this.managingFirstCoinShow();
		this.setPopup();
		this.openRemainingPopup();
		this.addChild(new com_redpeakgames_cloud9_utils_FPS_$Mem(10,10,16777215));
	}
	,managingFirstCoinShow: function() {
		if(this.welcome == 1) {
			com_redpeakgames_cloud9_TopMenu.coinAdjust.add(100000);
			com_redpeakgames_cloud9_TopMenu.diaAdjust.add(10);
			this.topMenu.isTutorial = true;
		} else {
			if(this.udt.newday == 1) {
				var json = JSON.parse(openfl_Assets.getText("data/sr7.json"));
				com_redpeakgames_cloud9_TopMenu.coinAdjust.add(Std.parseInt(json.rewards[this.udt.serial - 1].count));
			}
			if(this.nosee > 0) {
				com_redpeakgames_cloud9_TopMenu.coinAdjust.add(this.nosee);
			}
			if(this.welcome == 2) {
				com_redpeakgames_cloud9_TopMenu.coinAdjust.add(500000);
				com_redpeakgames_cloud9_TopMenu.diaAdjust.add(20);
			}
		}
		var _g_head = com_redpeakgames_cloud9_TopMenu.coinAdjust.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var _g = this.topMenu;
			var a = _g.get_coin();
			var b = new haxe__$Int64__$_$_$Int64(val >> 31,val);
			var high = a.high - b.high | 0;
			var low = a.low - b.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low) < 0) {
				--high;
				high = high | 0;
			}
			_g.set_coin(new haxe__$Int64__$_$_$Int64(high,low));
		}
		var _g_head1 = com_redpeakgames_cloud9_TopMenu.diaAdjust.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var _g1 = this.topMenu;
			_g1.set_dia(_g1.get_dia() - val1);
		}
	}
	,openRemainingPopup: function() {
		if(this.popups.length != 0) {
			(this.popups.shift())();
		}
	}
	,setPopup: function() {
		var _gthis = this;
		if(this.udt.gift != 0) {
			this.topMenu.makeGiftAlarm(1392,78);
		}
		if(this.welcome == 1 && this.topMenu.isTutorial) {
			this.topMenu.showWelcome(this.welcome);
		} else {
			this.popups.push(function() {
				_gthis.topMenu.openLastTournamentResult();
			});
			if(this.udt.newday == 1) {
				if(this.udt.gift != 0) {
					this.popups.push(function() {
						_gthis.topMenu.openCollect();
					});
				}
				this.popups.push(function() {
					_gthis.topMenu.openBonusStreak(_gthis.udt.serial,true);
				});
			}
			if(this.nosee > 0) {
				this.popups.push(function() {
					_gthis.topMenu.openOmg(_gthis.nosee);
				});
			}
			if(this.welcome > 1) {
				this.popups.push(function() {
					_gthis.topMenu.showWelcome(_gthis.welcome);
				});
			}
			if(this.udt.lev <= 20) {
				var a = this.udt.coin;
				var b = new haxe__$Int64__$_$_$Int64(0,200000);
				var v = a.high - b.high | 0;
				if(v != 0) {
					v = v;
				} else {
					v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
				}
				if((a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) >= 0) {
					if(this.like != 1 && this.udt.lev > 1) {
						this.popups.push(function() {
							_gthis.topMenu.openLikeUs(_gthis.udt);
						});
					}
				} else {
					var tmp;
					var a1 = this.udt.coin;
					var b1 = new haxe__$Int64__$_$_$Int64(0,200000);
					var v1 = a1.high - b1.high | 0;
					if(v1 != 0) {
						v1 = v1;
					} else {
						v1 = haxe__$Int32_Int32_$Impl_$.ucompare(a1.low,b1.low);
					}
					if((a1.high < 0?b1.high < 0?v1:-1:b1.high >= 0?v1:1) < 0) {
						var a2 = this.udt.coin;
						var b2 = new haxe__$Int64__$_$_$Int64(0,100000);
						var v2 = a2.high - b2.high | 0;
						if(v2 != 0) {
							v2 = v2;
						} else {
							v2 = haxe__$Int32_Int32_$Impl_$.ucompare(a2.low,b2.low);
						}
						tmp = (a2.high < 0?b2.high < 0?v2:-1:b2.high >= 0?v2:1) >= 0;
					} else {
						tmp = false;
					}
					if(tmp) {
						if(this.like != 1 && this.udt.lev > 1) {
							this.popups.push(function() {
								_gthis.topMenu.openLikeUs(_gthis.udt);
							});
						}
						if(this.udt.buyCount == 0) {
							this.popups.push(function() {
								_gthis.topMenu.onClickFirstPurchase(null);
							});
						}
					} else {
						if(this.udt.wheel == 0) {
							this.popups.push(function() {
								_gthis.topMenu.openDailyWheel(_gthis.lobby.friends.get_inAppFriends().length);
							});
						}
						if(this.udt.buyCount == 0) {
							this.popups.push(function() {
								_gthis.topMenu.onClickFirstPurchase(null);
							});
						}
					}
				}
			} else if(this.udt.lev > 20 && this.udt.lev <= 50) {
				var a3 = this.udt.coin;
				var b3 = new haxe__$Int64__$_$_$Int64(0,200000);
				var v3 = a3.high - b3.high | 0;
				if(v3 != 0) {
					v3 = v3;
				} else {
					v3 = haxe__$Int32_Int32_$Impl_$.ucompare(a3.low,b3.low);
				}
				if((a3.high < 0?b3.high < 0?v3:-1:b3.high >= 0?v3:1) >= 0) {
					if(this.udt.buyCount == 0) {
						this.popups.push(function() {
							_gthis.topMenu.onClickFirstPurchase(null);
						});
					}
				} else if(this.udt.buyCount == 0) {
					if(this.udt.wheel == 0) {
						this.popups.push(function() {
							_gthis.topMenu.openDailyWheel(_gthis.lobby.friends.get_inAppFriends().length);
						});
					}
				} else if(this.udt.wheel == 0) {
					this.popups.push(function() {
						_gthis.topMenu.openDailyWheel(_gthis.lobby.friends.get_inAppFriends().length);
					});
				}
				if(this.udt.buyCount > 0) {
					if(this.udt.vlev != 1) {
						this.popups.push(function() {
							_gthis.topMenu.openRMembers("rshop");
						});
					}
				}
			} else {
				var a4 = this.udt.coin;
				var b4 = new haxe__$Int64__$_$_$Int64(0,200000);
				var v4 = a4.high - b4.high | 0;
				if(v4 != 0) {
					v4 = v4;
				} else {
					v4 = haxe__$Int32_Int32_$Impl_$.ucompare(a4.low,b4.low);
				}
				if((a4.high < 0?b4.high < 0?v4:-1:b4.high >= 0?v4:1) < 0) {
					if(this.udt.wheel == 0) {
						this.popups.push(function() {
							_gthis.topMenu.openDailyWheel(_gthis.lobby.friends.get_inAppFriends().length);
						});
					}
				}
			}
			if(this.udt.bonus < 0) {
				this.popups.push(function() {
					_gthis.topMenu.openLinkBonus(_gthis.udt.bonus);
				});
			} else if(this.udt.bonus == 1 && this.udt.newday != 1) {
				this.popups.push(function() {
					_gthis.topMenu.openCollect();
				});
			}
			this.popups.push(function() {
				_gthis.topMenu.onClickExclusive(null);
			});
			if(this.udt.buyCount == 0) {
				this.popups.push(function() {
					_gthis.topMenu.onClickFirstPurchase(null);
				});
			}
			if(this.udt.lev == 1) {
				this.popups.push($bind(this,this.openLike));
			}
		}
	}
	,backtoLobbyPopup: function() {
		var _gthis = this;
		if(this.udt.gift != 0) {
			this.popups.push(function() {
				_gthis.topMenu.openCollect();
			});
		}
		if(this.welcome != 1 && !this.topMenu.isTutorial) {
			if(this.udt.lev > 20) {
				if(!(this.udt.lev > 20 && this.udt.lev <= 50)) {
					var tmp;
					if(this.udt.buyCount == 0) {
						var a = this.udt.coin;
						var b = new haxe__$Int64__$_$_$Int64(0,200000);
						var v = a.high - b.high | 0;
						if(v != 0) {
							v = v;
						} else {
							v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
						}
						tmp = (a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) < 0;
					} else {
						tmp = false;
					}
					if(tmp) {
						this.popups.push(function() {
							_gthis.topMenu.onClickFirstPurchase(null);
						});
					}
				}
			}
		} else {
			this.popups.push(function() {
				_gthis.topMenu.onClickFirstPurchase(null);
			});
		}
	}
	,loadFlashvars: function() {
		if(this.stage.get_loaderInfo().parameters.sig != null) {
			this.udt.sig = this.stage.get_loaderInfo().parameters.sig;
		}
		if(this.stage.get_loaderInfo().parameters.name != null) {
			this.udt.name = this.stage.get_loaderInfo().parameters.name;
		}
		if(this.stage.get_loaderInfo().parameters.lev != null) {
			this.udt.lev = Std.parseInt(this.stage.get_loaderInfo().parameters.lev);
		}
		if(this.stage.get_loaderInfo().parameters.uid != null) {
			this.udt.uid = this.stage.get_loaderInfo().parameters.uid;
		}
		if(this.stage.get_loaderInfo().parameters.exp != null) {
			this.udt.exp = haxe_Int64Helper.parseString(this.stage.get_loaderInfo().parameters.exp);
		}
		if(this.stage.get_loaderInfo().parameters.mexp != null) {
			this.udt.mexp = haxe_Int64Helper.parseString(this.stage.get_loaderInfo().parameters.mexp);
		}
		if(this.stage.get_loaderInfo().parameters.coin != null) {
			this.udt.coin = haxe_Int64Helper.parseString(this.stage.get_loaderInfo().parameters.coin);
		}
		if(this.stage.get_loaderInfo().parameters.dia != null) {
			this.udt.dia = Std.parseInt(this.stage.get_loaderInfo().parameters.dia);
		}
		if(this.stage.get_loaderInfo().parameters.vlev != null) {
			this.udt.vlev = Std.parseInt(this.stage.get_loaderInfo().parameters.vlev);
		}
		if(this.stage.get_loaderInfo().parameters.url != null) {
			if(this.stage.get_loaderInfo().parameters.url.indexOf("http") == -1) {
				this.udt.url = "https://" + this.stage.get_loaderInfo().parameters.url;
			} else {
				this.udt.url = this.stage.get_loaderInfo().parameters.url;
			}
		}
		if(this.stage.get_loaderInfo().parameters.picture != null) {
			var s = this.stage.get_loaderInfo().parameters.picture;
			this.udt.picture = decodeURIComponent(s.split("+").join(" "));
		}
		if(this.stage.get_loaderInfo().parameters.newday != null) {
			this.udt.newday = Std.parseInt(this.stage.get_loaderInfo().parameters.newday);
		}
		if(this.stage.get_loaderInfo().parameters.serial != null) {
			this.udt.serial = Std.parseInt(this.stage.get_loaderInfo().parameters.serial);
		}
		if(this.stage.get_loaderInfo().parameters.prize != null) {
			this.udt.prize = Std.parseInt(this.stage.get_loaderInfo().parameters.prize);
		}
		if(this.stage.get_loaderInfo().parameters.gift != null) {
			this.udt.gift = Std.parseInt(this.stage.get_loaderInfo().parameters.gift);
		}
		if(this.stage.get_loaderInfo().parameters.wheel != null) {
			this.udt.wheel = Std.parseInt(this.stage.get_loaderInfo().parameters.wheel);
		}
		if(this.stage.get_loaderInfo().parameters.spin != null) {
			this.udt.spin = Std.parseInt(this.stage.get_loaderInfo().parameters.spin);
		}
		if(this.stage.get_loaderInfo().parameters.played != null) {
			this.udt.played = Std.parseInt(this.stage.get_loaderInfo().parameters.played);
		}
		if(this.stage.get_loaderInfo().parameters.bonus != null) {
			this.udt.bonus = Std.parseInt(this.stage.get_loaderInfo().parameters.bonus);
		}
		if(this.stage.get_loaderInfo().parameters.bcount != null) {
			this.udt.buyCount = Std.parseInt(this.stage.get_loaderInfo().parameters.bcount);
		}
		if(this.stage.get_loaderInfo().parameters.scount != null) {
			this.udt.scount = Std.parseInt(this.stage.get_loaderInfo().parameters.scount);
		}
		if(this.stage.get_loaderInfo().parameters.welcome != null) {
			this.welcome = Std.parseInt(this.stage.get_loaderInfo().parameters.welcome);
		}
		if(this.stage.get_loaderInfo().parameters.nosee != null) {
			this.nosee = Std.parseInt(this.stage.get_loaderInfo().parameters.nosee);
		}
		if(this.stage.get_loaderInfo().parameters.like != null) {
			this.like = Std.parseInt(this.stage.get_loaderInfo().parameters.like);
		}
		if(this.stage.get_loaderInfo().parameters.extra != null) {
			this.extra = JSON.parse(this.stage.get_loaderInfo().parameters.extra);
		}
		if(this.stage.get_loaderInfo().parameters.ctree != null) {
			this.ctree = JSON.parse(this.stage.get_loaderInfo().parameters.ctree);
		}
		if(this.stage.get_loaderInfo().parameters.sound != null) {
			com_redpeakgames_cloud9_Global.mute = Std.parseInt(this.stage.get_loaderInfo().parameters.sound) != 1;
		}
		if(this.stage.get_loaderInfo().parameters.sboost != null) {
			this.sboost = JSON.parse(this.stage.get_loaderInfo().parameters.sboost);
		}
		this.udt.sig = "34f26844c063b66220dbc362c6bf9155";
	}
	,setExtraCondition: function() {
		if(this.extra == null) {
			return;
		}
		if(Object.prototype.hasOwnProperty.call(this.extra,"fse") && this.extra.fse != null) {
			if(Std.parseInt(this.extra.fse) == 0) {
				com_redpeakgames_cloud9_TopMenu.getCoinOpenAvailable = true;
			}
		}
		if(Object.prototype.hasOwnProperty.call(this.extra,"ota") && this.extra.ota != null) {
			com_redpeakgames_cloud9_TopMenu.remainOpenToAll = Std.parseInt(this.extra.ota);
		}
	}
	,setStageProperties: function() {
		this.stage.scaleMode = 2;
		this.stage.align = 6;
		this.stage.addEventListener("resize",$bind(this,this.onResize));
	}
	,onResize: function(e) {
		if(this.lobby == this.getChildAt(0)) {
			this.lobby.resize(openfl_Lib.application.__windows[0].__width);
		} else {
			com_redpeakgames_cloud9_utils_DynamicCall.method(com_redpeakgames_cloud9_utils_DynamicCall.method(this.getChildAt(0).content,"getChildAt",[0]),"resize",[openfl_Lib.application.__windows[0].__width]);
		}
		if(this.topMenu != null) {
			this.topMenu.resize(openfl_Lib.application.__windows[0].__width);
		}
	}
	,loadLobby: function() {
		if(this.loader != null) {
			this.loader.unload();
			this.removeChild(this.loader);
			this.loader = null;
		}
		this.lobby.insertBg();
		this.lobby.startJpsTimer();
		this.addChildAt(this.lobby,0);
		if(com_redpeakgames_cloud9_Global.mute == false) {
			this.lobby.sound(com_redpeakgames_cloud9_Global.mute);
		}
		this.isLobby = true;
		this.topMenu.set_lobby(false);
		this.topMenu.stepTextVisible(true);
		this.topMenu.conditionalBtnCanvas.set_x(1334);
		this.topMenu.set_conditionalBtnVisible(true);
		this.topMenu.set_rewardNoticeVisible(false);
		this.topMenu.onClickGotoSlot(null);
		this.topMenu.canvasCoinTreeVisible(false);
		this.topMenu.superBoostDiaTagVisible(false);
		this.topMenu.randomBoxTagVisible(false);
		if(this.topMenu.canvasGetCoin != null) {
			this.topMenu.canvasGetCoin.set_visible(false);
		}
	}
	,loadSlot: function(name) {
		this.lobby.bgmTimer.stop();
		this._loadSlot(name);
		try {
			this.topMenu.stepTextVisible(false);
			this.removeChild(this.lobby);
			this.lobby.removeBg();
			this.isLobby = false;
			this.topMenu.set_lobby(true);
		} catch( err ) {
			haxe_CallStack.lastException = err;
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace(err,{ fileName : "Main.hx", lineNumber : 869, className : "com.redpeakgames.cloud9.Main", methodName : "loadSlot"});
		}
	}
	,loadNextSlot: function(name) {
		if(this.loader != null) {
			this.removeChild(this.loader);
			this.loader = null;
		}
		this._loadSlot(name);
		this.topMenu.removeAdditionalWindows(false);
	}
	,_loadSlot: function(name) {
		this.setSharedObject();
		try {
			this.loader = new openfl_display_Loader();
			this.loader.set_name("Main.loader");
			this.loader.load(new openfl_net_URLRequest(name),new openfl_system_LoaderContext(false,new openfl_system_ApplicationDomain()));
			this.loader.set_y(114);
			this.addChildAt(this.loader,0);
			this.isLobby = false;
			this.topMenu.voucherRecommendListUpdate();
			this.topMenu.set_conditionalBtnVisible(false);
			this.topMenu.set_rewardNoticeVisible(false);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
				haxe_Log.trace(e.toString(),{ fileName : "Main.hx", lineNumber : 912, className : "com.redpeakgames.cloud9.Main", methodName : "_loadSlot"});
			} else throw(e);
		}
	}
	,setSharedObject: function() {
		var so = openfl_net_SharedObject.getLocal("cnc.redpeakgames","/");
		so.data.coin = haxe__$Int64_Int64_$Impl_$.toString(this.topMenu.get_coin());
		so.data.uid = this.udt.uid;
		so.data.sig = this.udt.sig;
		so.data.url = this.udt.url;
		so.data.dia = this.udt.dia;
		so.data.lev = this.udt.lev;
		so.data.vlev = this.udt.vlev;
		so.data.mute = com_redpeakgames_cloud9_Global.mute;
		so.data.type = this.lobby == null && this.isLobby?"":this.lobby.slotType;
		so.flush();
	}
	,callLoaderMethod: function(methodName,args) {
		if(this.loader != null) {
			return com_redpeakgames_cloud9_utils_DynamicCall.method(com_redpeakgames_cloud9_utils_DynamicCall.method(this.loader.content,"getChildAt",[0]),methodName,args);
		}
		return null;
	}
	,getSlotIconCurrentPlaying: function() {
		if(this.loader == null) {
			return null;
		}
		var slotIcon = this.lobby.getSlotIconByName(this.loader.contentLoaderInfo.url);
		if(slotIcon != null) {
			return slotIcon;
		}
		return null;
	}
	,onChangeStatus: function(e) {
		var status = JSON.parse(e.data);
		this.udt.lev = status.lev;
		this.udt.vlev = status.vlev;
		this.topMenu.changeStatus(status.lev,haxe_Int64Helper.parseString(status.exp),haxe_Int64Helper.parseString(status.mexp),status.rcoin,status.rdia,status.rrp,status.vlev,status.vcorder,status.vcprize);
	}
	,onBalanceChanged: function(e) {
		haxe_Log.trace(e.data,{ fileName : "Main.hx", lineNumber : 970, className : "com.redpeakgames.cloud9.Main", methodName : "onBalanceChanged"});
		var balance = JSON.parse(e.data);
		var bcoin = new haxe__$Int64__$_$_$Int64(0,0);
		if(balance.coin != null) {
			var o = balance.coin;
			var tmp;
			var tmp1;
			if(o == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(o.__properties__) {
					tmp = o.__properties__["get_" + "high"];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = o[tmp]();
				} else {
					tmp1 = o.high;
				}
			}
			if(tmp1 != null) {
				bcoin = new haxe__$Int64__$_$_$Int64(balance.coin.high,balance.coin.low);
			} else {
				bcoin = haxe_Int64Helper.parseString(balance.coin);
			}
		}
		var bdia = this.udt.dia;
		if(balance.dia != null) {
			bdia = Std.parseInt(balance.dia);
		}
		var showAddedCoin = false;
		if(balance.showAddedCoin != null) {
			showAddedCoin = balance.showAddedCoin;
		}
		if(balance.udtCoinChange == null || balance.udtCoinChange != null && balance.udtCoinChange == true) {
			this.udt.coin = bcoin;
		}
		this.topMenu.balanceChanged(bcoin,bdia,showAddedCoin);
	}
	,onAddCoin: function(e) {
		var addedCoin = new haxe__$Int64__$_$_$Int64(0,0);
		try {
			addedCoin = haxe_Int64Helper.parseString(e.data);
		} catch( err ) {
			haxe_CallStack.lastException = err;
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace(err,{ fileName : "Main.hx", lineNumber : 1001, className : "com.redpeakgames.cloud9.Main", methodName : "onAddCoin"});
		}
		var b = new haxe__$Int64__$_$_$Int64(0,0);
		if(addedCoin.high != b.high || addedCoin.low != b.low) {
			this.topMenu.addCoin(addedCoin);
		}
	}
	,onAddDia: function(e) {
		var addedDia = 0;
		try {
			addedDia = Std.parseInt(e.data);
		} catch( err ) {
			haxe_CallStack.lastException = err;
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace(err,{ fileName : "Main.hx", lineNumber : 1017, className : "com.redpeakgames.cloud9.Main", methodName : "onAddDia"});
		}
		if(addedDia != 0) {
			this.topMenu.addDia(addedDia);
		}
	}
	,onDiaDelayedRefresh: function(e) {
		var json = null;
		try {
			json = JSON.parse(e.data);
		} catch( err ) {
			haxe_CallStack.lastException = err;
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace(err,{ fileName : "Main.hx", lineNumber : 1034, className : "com.redpeakgames.cloud9.Main", methodName : "onDiaDelayedRefresh"});
		}
		if(json == null) {
			return;
		}
		if(json.delay != null) {
			this.topMenu.refreshDiaDelayed(Std.parseInt(json.delay));
		}
	}
	,onSlotCoinChanged: function(e) {
		var json = JSON.parse(e.data);
		var bcoin = new haxe__$Int64__$_$_$Int64(0,0);
		var tmp;
		var tmp1;
		if(json == null) {
			tmp1 = null;
		} else {
			var tmp2;
			if(json.__properties__) {
				tmp = json.__properties__["get_" + "coin"];
				tmp2 = tmp;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = json[tmp]();
			} else {
				tmp1 = json.coin;
			}
		}
		if(tmp1 != null) {
			var o = json.coin;
			var tmp3;
			var tmp4;
			if(o == null) {
				tmp4 = null;
			} else {
				var tmp5;
				if(o.__properties__) {
					tmp3 = o.__properties__["get_" + "high"];
					tmp5 = tmp3;
				} else {
					tmp5 = false;
				}
				if(tmp5) {
					tmp4 = o[tmp3]();
				} else {
					tmp4 = o.high;
				}
			}
			if(tmp4 != null) {
				bcoin = new haxe__$Int64__$_$_$Int64(json.coin.high,json.coin.low);
			} else {
				bcoin = haxe_Int64Helper.parseString(json.coin);
			}
		} else {
			var tmp6;
			var tmp7;
			if(json == null) {
				tmp7 = null;
			} else {
				var tmp8;
				if(json.__properties__) {
					tmp6 = json.__properties__["get_" + "high"];
					tmp8 = tmp6;
				} else {
					tmp8 = false;
				}
				if(tmp8) {
					tmp7 = json[tmp6]();
				} else {
					tmp7 = json.high;
				}
			}
			if(tmp7 != null) {
				bcoin = new haxe__$Int64__$_$_$Int64(json.high,json.low);
			} else {
				bcoin = haxe_Int64Helper.parseString(json);
			}
		}
		var tmp9;
		var tmp10;
		if(json == null) {
			tmp10 = null;
		} else {
			var tmp11;
			if(json.__properties__) {
				tmp9 = json.__properties__["get_" + "time"];
				tmp11 = tmp9;
			} else {
				tmp11 = false;
			}
			if(tmp11) {
				tmp10 = json[tmp9]();
			} else {
				tmp10 = json.time;
			}
		}
		if(tmp10 != null) {
			this.topMenu.slotCoinChanged(bcoin,Std.parseInt(json.time));
		} else {
			this.topMenu.slotCoinChanged(bcoin);
		}
	}
	,onSlotDiaChanged: function(e) {
		this.topMenu.slotDiaChanged(Std.parseInt(JSON.parse(e.data)));
	}
	,onDailyWheelClosed: function(e) {
		this.topMenu.removeScreen();
		this.openRemainingPopup();
	}
	,onDailyWheelTimeChanged: function(e) {
		this.udt.wheel = Std.parseInt(e.data);
	}
	,onLuckySpinClosed: function(e) {
		this.topMenu.removeScreen();
	}
	,onMute: function(e) {
		com_redpeakgames_cloud9_Global.mute = e.data == "true";
		if(this.loader != null && !this.topMenu.isDoubleUp) {
			this.callLoaderMethod("onMute",[com_redpeakgames_cloud9_Global.mute]);
		}
		if(this.isLobby) {
			this.lobby.sound(com_redpeakgames_cloud9_Global.mute);
		}
		this.topMenu.mute(com_redpeakgames_cloud9_Global.mute);
	}
	,onMuteBgm: function(e) {
		com_redpeakgames_cloud9_Global.muteBgm = e.data == "true";
		if(this.loader != null && !this.topMenu.isDoubleUp) {
			this.callLoaderMethod("onMuteBgm",[com_redpeakgames_cloud9_Global.muteBgm]);
		}
		if(this.isLobby) {
			this.lobby.onMuteBgm(com_redpeakgames_cloud9_Global.muteBgm);
		}
	}
	,onFullscreen: function(e) {
		if(openfl_Lib.current.stage.stageHeight > 1080) {
			this.set_y((openfl_Lib.current.stage.stageHeight - 1080) / 2 | 0);
			this.topMenu.ext(openfl_Lib.current.stage.stageWidth);
		} else {
			this.set_y(0);
		}
		if(e.fullScreen) {
			this.topMenu.set_y(-this.get_y() - 69);
			haxe_Log.trace(this.topMenu.get_y(),{ fileName : "Main.hx", lineNumber : 1142, className : "com.redpeakgames.cloud9.Main", methodName : "onFullscreen"});
		} else {
			this.topMenu.set_y(0);
		}
		this.topMenu.onFullScreen(e);
		this.lobby.onFullScreen(e);
	}
	,balanceUpdated: function(value) {
		var _gthis = this;
		var json = JSON.parse(value);
		com_redpeakgames_cloud9_utils_Console.log(json);
		if(json.get.type == "ctree") {
			this.topMenu.resetCoinTree();
		} else if(json.get.type == "deal") {
			this.topMenu.superBoostBuyComplete();
			this.onGameResume(null);
		} else if(json.get.type == "rbox") {
			com_redpeakgames_cloud9_TopMenu.coinAdjust.add(Std.parseInt(json.get.coin));
			this.topMenu.randomBoxBuyComplete(Std.string(json.get.coin));
		} else if(json.get.type == "trnmt") {
			this.topMenu.tournamentPackageBuyComplete();
			this.topMenu.openBillingStatus(true,json,null,null);
		} else if(!this.isSkipPurchaseResult) {
			this.topMenu.openBillingStatus(true,json,null,null);
		}
		var a = this.topMenu.get_coin();
		var b = haxe_Int64Helper.parseString(json.get.coin);
		var high = a.high + b.high | 0;
		var low = a.low + b.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,a.low) < 0) {
			++high;
			high = high | 0;
		}
		this.topMenu.balanceChanged(new haxe__$Int64__$_$_$Int64(high,low),this.topMenu.get_dia() + Std.parseInt(json.get.dia),true);
		if(this.loader != null) {
			this.callLoaderMethod("updateBalance",[this.topMenu.get_coin()]);
			this.callLoaderMethod("updateDia",[this.topMenu.get_dia()]);
		}
		this.isSkipPurchaseResult = false;
		this.topMenu.changeStatus(null,null,null,null,null,null,Std.parseInt(json.rpoint.vlev),null,null);
		this.topMenu.hideFirstPurchase();
		this.udt.buyCount = this.udt.buyCount + 1;
		if(this.udt.buyCount == 3) {
			this.topMenu.requestConditionalData();
		}
		if(this.topMenu.myClassUp) {
			this.popups.push(function() {
				_gthis.dispatchEvent(new openfl_events_DataEvent("ge.open.rcongrats",true,false,JSON.stringify(json.rpoint.vlev)));
			});
		}
	}
	,buyFailed: function(usd,type) {
		if(!this.isSkipPurchaseResult) {
			this.topMenu.openBillingStatus(false,null,usd,type);
		}
		this.isSkipPurchaseResult = false;
	}
	,sentGift: function(to) {
		this.lobby.sentGift(to);
	}
	,sentInvite: function() {
		this.topMenu.sentInvite();
	}
	,coinBought: function() {
		this.topMenu.coinBought();
	}
	,cashSpin: function(usd) {
		this.topMenu.cashSpin(usd);
	}
	,eventBuy: function(value) {
		this.balanceUpdated(value);
	}
	,onOpenCollect: function(e) {
		this.topMenu.openCollect();
	}
	,onCloseGift: function(e) {
		haxe_Log.trace("Main.onCloseGift",{ fileName : "Main.hx", lineNumber : 1255, className : "com.redpeakgames.cloud9.Main", methodName : "onCloseGift"});
		this.topMenu.removeScreen();
		if(e.data == "banner.normal") {
			this.topMenu.onClickBuyCoins(null);
		} else if(e.data == "banner.special") {
			this.topMenu.onClickFirstPurchase(null);
		} else {
			this.openRemainingPopup();
		}
	}
	,onReload: function(e) {
		try {
			openfl_external_ExternalInterface.call("reload");
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,openfl_errors_Error) ) {
				haxe_Log.trace(e1.toString(),{ fileName : "Main.hx", lineNumber : 1280, className : "com.redpeakgames.cloud9.Main", methodName : "onReload"});
			} else throw(e1);
		}
	}
	,onNetError: function(e) {
		var data = JSON.parse(e.data);
		var type = data.type != null && data.type == "multiple"?"multiple":"reconnect";
		this.topMenu.addScreen();
		var reconn = new com_redpeakgames_cloud9_dialog_Reconnect(type);
		reconn.set_x(508);
		reconn.set_y(147);
		this.topMenu.addChild(reconn);
	}
	,onToLobby: function(e) {
		this.loadLobby();
		if(e.data == "popup") {
			this.setPopup();
			this.openRemainingPopup();
		}
	}
	,onGeneralClose: function(e) {
		haxe_Log.trace("Main.onGeneralClose",{ fileName : "Main.hx", lineNumber : 1308, className : "com.redpeakgames.cloud9.Main", methodName : "onGeneralClose"});
		this.topMenu.removeScreen();
		this.openRemainingPopup();
		if(e.data == "tournament.list") {
			this.topMenu.tournamentCanvasRealign();
		}
	}
	,onNewSlot: function(e) {
		this.topMenu.openSlotSearch();
	}
	,onLevelupClosed: function(e) {
		this.callLoaderMethod("onCloseLevelup",[]);
		this.topMenu.contentIntroduceSetLevel();
	}
	,onCloseVoucher: function(e) {
		var _gthis = this;
		var delay = Std.parseInt(e.data);
		this.topMenu.removeScreen();
		haxe_Timer.delay(function() {
			_gthis.callLoaderMethod("onCloseVoucher",[]);
			_gthis.topMenu.contentIntroduceSetLevel();
		},delay);
	}
	,onAdjustBet: function(e) {
		this.topMenu.openAdjustBet();
	}
	,onBetChanged: function(e) {
		var bet = Std.parseInt(e.data);
		var slotIcon = this.getSlotIconCurrentPlaying();
		if(slotIcon != null) {
			if(slotIcon.get_mbox() != 0) {
				this.topMenu.mysteryBoxBetChange(bet);
			}
		}
	}
	,onOpenShop: function(e) {
		this.topMenu.openBuyCoins(e.data);
	}
	,onOpenBankrupt: function(e) {
		this.topMenu.openBankrupt(e.data);
	}
	,onCloseConditionalDeal: function(e) {
		this.topMenu.closeConditionalDeal(e.data);
		this.openRemainingPopup();
	}
	,onUpdateConditionalData: function(e) {
		this.topMenu.set_dataConditionalDeal(JSON.stringify(JSON.parse(e.data).deal));
		this.topMenu.refreshConditionalDealBtns();
	}
	,onRequestConditionalData: function(e) {
		this.topMenu.requestConditionalData();
	}
	,onOpenRewardPopup: function(e) {
		this.topMenu.openRewardPopup();
	}
	,onRewardCountChange: function(e) {
		this.lobby.rewardCountChange(Std.parseInt(e.data));
	}
	,onOpenLuckySpin: function(e) {
		this.lobby.openLuckySpin();
	}
	,onOpenDiaWheel: function(e) {
		this.topMenu.openDiaWheel(0);
	}
	,refreshPlayers: function(e) {
		var data = JSON.parse(e.data);
		this.topMenu.openTournament(null,"time",data);
		haxe_Log.trace(data,{ fileName : "Main.hx", lineNumber : 1412, className : "com.redpeakgames.cloud9.Main", methodName : "refreshPlayers"});
	}
	,onParticipation: function(e) {
		if(e.data == null || e.data.length == 0) {
			return;
		}
		this.topMenu.openTournament(null,"time",JSON.parse(e.data));
	}
	,onOpenEmptyTournament: function(e) {
		this.topMenu.openTournament(null,"empty",null);
	}
	,onTournamentResult: function(e) {
		this.topMenu.openTournamentResult();
	}
	,onOpenTournamentList: function(e) {
		this.topMenu.openTournamentList(this.lobby.lobbyJson);
	}
	,onChangeGiftNumber: function(e) {
		this.lobby.changeGiftNumber(Std.parseInt(e.data));
	}
	,openLike: function() {
		try {
			openfl_external_ExternalInterface.call("openLike");
		} catch( err ) {
			haxe_CallStack.lastException = err;
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			if( js_Boot.__instanceof(err,openfl_errors_Error) ) {
			} else throw(err);
		}
	}
	,makeExternalSwf: function(name,preload,attachTo,x,y,url) {
		try {
			if(name.indexOf("contentintroduce") != -1) {
				if(this.udt.lev >= 31) {
					return;
				}
			}
			var loader = new openfl_display_Loader();
			loader.set_name(name);
			loader.set_x(x);
			loader.set_y(y);
			var attachObj = null;
			switch(attachTo) {
			case "lobby":
				attachObj = this.lobby;
				break;
			case "topmenu":
				attachObj = this.topMenu;
				break;
			default:
				attachObj = null;
			}
			if(attachObj != null) {
				attachObj.addChild(loader);
			}
			com_redpeakgames_cloud9_ExternalLoaderManager.addLoader(name,loader,url,preload);
			if(preload) {
				com_redpeakgames_cloud9_ExternalLoaderManager.load(name);
				loader.set_visible(false);
			}
		} catch( err ) {
			haxe_CallStack.lastException = err;
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace("main.makeExternalSwf() : " + Std.string(err),{ fileName : "Main.hx", lineNumber : 1492, className : "com.redpeakgames.cloud9.Main", methodName : "makeExternalSwf"});
		}
	}
	,onOpenRmembers: function(e) {
		this.topMenu.openRMembers(e.data);
	}
	,onCloseRmembers: function(e) {
		this.topMenu.closeRMembers(Std.parseInt(e.data));
	}
	,onOpenProfile: function(e) {
		if(e.data == "") {
			e.data = JSON.stringify({ id : this.udt.uid, screen : true});
		}
		var who = JSON.parse(e.data);
		var screen = true;
		if(who.screen != null) {
			screen = who.screen;
		}
		this.topMenu.openProfile(who.id,screen);
	}
	,onCloseProfile: function(e) {
		this.topMenu.closeProfile();
	}
	,onRCongrats: function(e) {
		var data = JSON.parse(e.data);
		this.topMenu.rCongrats(Std.parseInt(data));
	}
	,onToNormalScreen: function(e) {
		this.topMenu.toNormalScreen();
	}
	,onSharePost: function(e) {
		if(this.isSharePosting) {
			return;
		}
		this.isSharePosting = true;
		var json = JSON.parse(e.data);
		this.sharePost = { type : "", p1 : "", p2 : ""};
		if(Object.prototype.hasOwnProperty.call(json,"type")) {
			this.sharePost.type = json.type;
		}
		if(this.sharePost.type == "") {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Missing share post type"));
		}
		if(Object.prototype.hasOwnProperty.call(json,"p1")) {
			this.sharePost.p1 = json.p1;
		}
		if(this.sharePost.p1 == "udt.name") {
			this.sharePost.p1 = this.udt.name;
		}
		if(Object.prototype.hasOwnProperty.call(json,"p2")) {
			this.sharePost.p2 = json.p2;
		}
		var http = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "feed.php",$bind(this,this.onIoCompleteSharePost),$bind(this,this.onIoErrorSharePost));
		var data = new openfl_net_URLVariables();
		data.uid = this.udt.uid;
		data.sig = this.udt.sig;
		data.p1 = this.sharePost.p1;
		data.p2 = this.sharePost.p2;
		data.type = this.sharePost.type;
		http.request(data);
	}
	,onIoCompleteSharePost: function(e) {
		var loader = e.target;
		if(loader.data == "false") {
			try {
				this.topMenu.toNormalScreen();
				openfl_external_ExternalInterface.call("requestPermission",this.sharePost.type,this.sharePost.p1,this.sharePost.p2);
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				if( js_Boot.__instanceof(err,openfl_errors_Error) ) {
				} else throw(err);
			}
		} else if(loader.data == "true") {
			this.topMenu.appearShareSuccess();
		}
		this.isSharePosting = false;
	}
	,onChangeSlot: function(e) {
		this.topMenu.onChangeSlot(e.data);
	}
	,onPurchase: function(e) {
		var _gthis = this;
		var data = JSON.parse(e.data);
		if(data.state != 0) {
			this.popups.push(function() {
				_gthis.topMenu.openBankrupt(data.state);
			});
		} else if(this.udt.buyCount == 0) {
			if(data.type == 1) {
				var tmp;
				var tmp1;
				if(this.udt.lev <= 20) {
					var a = this.topMenu.firstCoin;
					var b = new haxe__$Int64__$_$_$Int64(0,100000);
					var v = a.high - b.high | 0;
					if(v != 0) {
						v = v;
					} else {
						v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
					}
					tmp1 = (a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) < 0;
				} else {
					tmp1 = false;
				}
				if(!tmp1) {
					if(this.udt.lev > 20 && this.udt.lev <= 50) {
						var a1 = this.topMenu.firstCoin;
						var b1 = new haxe__$Int64__$_$_$Int64(0,200000);
						var v1 = a1.high - b1.high | 0;
						if(v1 != 0) {
							v1 = v1;
						} else {
							v1 = haxe__$Int32_Int32_$Impl_$.ucompare(a1.low,b1.low);
						}
						tmp = (a1.high < 0?b1.high < 0?v1:-1:b1.high >= 0?v1:1) < 0;
					} else {
						tmp = false;
					}
				} else {
					tmp = true;
				}
				if(tmp) {
					if(this.like != 1) {
						this.popups.push(function() {
							_gthis.topMenu.openLikeUs(_gthis.udt);
						});
					}
				} else {
					this.popups.push(function() {
						_gthis.topMenu.onClickFirstPurchase(null);
					});
				}
			} else {
				this.popups.push(function() {
					_gthis.topMenu.onClickFirstPurchase(null);
				});
			}
		} else {
			var deal = JSON.parse(this.topMenu.dataConditionalDeal);
			if(this.udt.lev <= 20) {
				if(deal.day.status != "offer") {
					this.popups.push(function() {
						_gthis.topMenu.openBuyCoins();
					});
				}
			} else if(this.udt.vlev > 1) {
				this.popups.push(function() {
					_gthis.topMenu.openRMembers("rshop");
				});
			} else {
				this.popups.push(function() {
					_gthis.topMenu.openBuyCoins();
				});
			}
		}
		this.openRemainingPopup();
	}
	,onSkipPurchaseResult: function(e) {
		this.isSkipPurchaseResult = true;
	}
	,onGetReward: function(e) {
		var slotIcon = this.getSlotIconCurrentPlaying();
		if(slotIcon != null) {
			if(slotIcon.get_mbox() == 0) {
				this.topMenu.mysteryBoxVisible(true);
			}
		}
		var json = JSON.parse(e.data);
		this.topMenu.isGameReward = true;
		this.topMenu.mysteryReward = { type : json.type, grade : json.grade, prize : Std.parseInt(json.prize), which : json.which};
	}
	,onCloseMysteryBox: function(e) {
		var _gthis = this;
		this.topMenu.mysteryBoxClosed();
		haxe_Timer.delay(function() {
			if(!_gthis.topMenu.openRemainGamePopups()) {
				_gthis.callLoaderMethod("onCloseVoucher",[]);
			}
		},1500);
	}
	,onOpenLeaderBoard: function(e) {
		this.topMenu.openLeaderb();
	}
	,onIoErrorSharePost: function(err) {
		this.isSharePosting = false;
		haxe_Log.trace(err.toString(),{ fileName : "Main.hx", lineNumber : 1671, className : "com.redpeakgames.cloud9.Main", methodName : "onIoErrorSharePost"});
	}
	,__class__: com_redpeakgames_cloud9_Main
});
var DocumentClass = function() {
	openfl_Lib.current.addChild(this);
	com_redpeakgames_cloud9_Main.call(this);
	this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = com_redpeakgames_cloud9_Main;
DocumentClass.prototype = $extend(com_redpeakgames_cloud9_Main.prototype,{
	__class__: DocumentClass
});
var lime_utils_AssetLibrary = function() {
	this.types = new haxe_ds_StringMap();
	this.preload = new haxe_ds_StringMap();
	this.paths = new haxe_ds_StringMap();
	this.classTypes = new haxe_ds_StringMap();
	this.cachedText = new haxe_ds_StringMap();
	this.cachedImages = new haxe_ds_StringMap();
	this.cachedFonts = new haxe_ds_StringMap();
	this.cachedBytes = new haxe_ds_StringMap();
	this.cachedAudioBuffers = new haxe_ds_StringMap();
	this.onChange = new lime_app__$Event_$Void_$Void();
};
$hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
lime_utils_AssetLibrary.__name__ = ["lime","utils","AssetLibrary"];
lime_utils_AssetLibrary.fromManifest = function(manifest) {
	var library = null;
	if(manifest.version == 1) {
		if(manifest.libraryType == null) {
			library = new lime_utils_AssetLibrary();
		} else {
			library = Type.createInstance(Type.resolveClass(manifest.libraryType),manifest.libraryArgs);
		}
		library.__fromManifest(manifest);
	}
	return library;
};
lime_utils_AssetLibrary.prototype = {
	onChange: null
	,cachedAudioBuffers: null
	,cachedBytes: null
	,cachedFonts: null
	,cachedImages: null
	,cachedText: null
	,classTypes: null
	,paths: null
	,preload: null
	,progressBytesLoadedCache: null
	,progressBytesLoaded: null
	,progressBytesTotal: null
	,progressLoaded: null
	,progressTotal: null
	,promise: null
	,types: null
	,exists: function(id,type) {
		var requestedType = type != null?js_Boot.__cast(type , String):null;
		var _this = this.types;
		var assetType = __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.getBytes(id);
		case "FONT":
			return this.getFont(id);
		case "IMAGE":
			return this.getImage(id);
		case "MUSIC":case "SOUND":
			return this.getAudioBuffer(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		case "TEXT":
			return this.getText(id);
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,getAudioBuffer: function(id) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedAudioBuffers;
			return __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_audio_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(__map_reserved[id] != null?_this3.getReserved(id):_this3.h[id],[]) , haxe_io_Bytes));
			} else {
				var _this4 = this.paths;
				return lime_audio_AudioBuffer.fromFile(__map_reserved[id] != null?_this4.getReserved(id):_this4.h[id]);
			}
		}
	}
	,getBytes: function(id) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedBytes;
			return __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null?_this3.getReserved(id):_this3.h[id],[]) , haxe_io_Bytes);
			} else {
				var _this4 = this.paths;
				return lime_utils__$Bytes_Bytes_$Impl_$.fromFile(__map_reserved[id] != null?_this4.getReserved(id):_this4.h[id]);
			}
		}
	}
	,getFont: function(id) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedFonts;
			return __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null?_this3.getReserved(id):_this3.h[id],[]) , lime_text_Font);
			} else {
				var _this4 = this.paths;
				return lime_text_Font.fromFile(__map_reserved[id] != null?_this4.getReserved(id):_this4.h[id]);
			}
		}
	}
	,getImage: function(id) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedImages;
			return __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null?_this3.getReserved(id):_this3.h[id],[]) , lime_graphics_Image);
			} else {
				var _this4 = this.paths;
				return lime_graphics_Image.fromFile(__map_reserved[id] != null?_this4.getReserved(id):_this4.h[id]);
			}
		}
	}
	,getPath: function(id) {
		var _this = this.paths;
		return __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
	}
	,getText: function(id) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedText;
			return __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
		} else {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return null;
			} else {
				return bytes.getString(0,bytes.length);
			}
		}
	}
	,isLocal: function(id,type) {
		var _this = this.classTypes;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			return true;
		}
		switch(type != null?js_Boot.__cast(type , String):null) {
		case "IMAGE":
			var _this1 = this.cachedImages;
			if(__map_reserved[id] != null) {
				return _this1.existsReserved(id);
			} else {
				return _this1.h.hasOwnProperty(id);
			}
			break;
		case "MUSIC":case "SOUND":
			var _this2 = this.cachedAudioBuffers;
			if(__map_reserved[id] != null) {
				return _this2.existsReserved(id);
			} else {
				return _this2.h.hasOwnProperty(id);
			}
			break;
		default:
			var _this3 = this.cachedBytes;
			if(!(__map_reserved[id] != null?_this3.existsReserved(id):_this3.h.hasOwnProperty(id))) {
				var _this4 = this.cachedText;
				if(__map_reserved[id] != null) {
					return _this4.existsReserved(id);
				} else {
					return _this4.h.hasOwnProperty(id);
				}
			} else {
				return true;
			}
		}
	}
	,list: function(type) {
		var requestedType = type != null?js_Boot.__cast(type , String):null;
		var items = [];
		var tmp = this.types.keys();
		while(tmp.hasNext()) {
			var id = tmp.next();
			if(requestedType == null || this.exists(id,type)) {
				items.push(id);
			}
		}
		return items;
	}
	,loadAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.loadBytes(id);
		case "FONT":
			return this.loadFont(id);
		case "IMAGE":
			return this.loadImage(id);
		case "MUSIC":case "SOUND":
			return this.loadAudioBuffer(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to load template: " + id);
			break;
		case "TEXT":
			return this.loadText(id);
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,load: function() {
		if(this.promise == null) {
			this.promise = new lime_app_Promise();
			this.progressBytesLoadedCache = new haxe_ds_StringMap();
			this.progressLoaded = 0;
			this.progressTotal = 1;
			var tmp = this.preload.keys();
			while(tmp.hasNext()) {
				var id = tmp.next();
				var _this = this.types;
				var _g = __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
				if(_g != null) {
					switch(_g) {
					case "BINARY":
						this.progressTotal++;
						var future = this.loadBytes(id);
						future.onProgress((function(id1,f) {
							return function(a1,a2) {
								f[0](id1[0],a1,a2);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future.onError((function(id2,f1) {
							return function(a11) {
								f1[0](id2[0],a11);
							};
						})([id],[$bind(this,this.load_onError)]));
						future.onComplete((function(id3,f2) {
							return function(a12) {
								f2[0](id3[0],a12);
							};
						})([id],[$bind(this,this.loadBytes_onComplete)]));
						break;
					case "FONT":
						this.progressTotal++;
						var future1 = this.loadFont(id);
						future1.onProgress((function(id4,f3) {
							return function(a13,a21) {
								f3[0](id4[0],a13,a21);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future1.onError((function(id5,f4) {
							return function(a14) {
								f4[0](id5[0],a14);
							};
						})([id],[$bind(this,this.load_onError)]));
						future1.onComplete((function(id6,f5) {
							return function(a15) {
								f5[0](id6[0],a15);
							};
						})([id],[$bind(this,this.loadFont_onComplete)]));
						break;
					case "IMAGE":
						this.progressTotal++;
						var future2 = this.loadImage(id);
						future2.onProgress((function(id7,f6) {
							return function(a16,a22) {
								f6[0](id7[0],a16,a22);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future2.onError((function(id8,f7) {
							return function(a17) {
								f7[0](id8[0],a17);
							};
						})([id],[$bind(this,this.load_onError)]));
						future2.onComplete((function(id9,f8) {
							return function(a18) {
								f8[0](id9[0],a18);
							};
						})([id],[$bind(this,this.loadImage_onComplete)]));
						break;
					case "MUSIC":case "SOUND":
						this.progressTotal++;
						var future3 = this.loadAudioBuffer(id);
						future3.onProgress((function(id10,f9) {
							return function(a19,a23) {
								f9[0](id10[0],a19,a23);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future3.onError((function(id11,f10) {
							return function(a110) {
								f10[0](id11[0],a110);
							};
						})([id],[$bind(this,this.load_onError)]));
						future3.onComplete((function(id12,f11) {
							return function(a111) {
								f11[0](id12[0],a111);
							};
						})([id],[$bind(this,this.loadAudioBuffer_onComplete)]));
						break;
					case "TEXT":
						this.progressTotal++;
						var future4 = this.loadText(id);
						future4.onProgress((function(id13,f12) {
							return function(a112,a24) {
								f12[0](id13[0],a112,a24);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future4.onError((function(id14,f13) {
							return function(a113) {
								f13[0](id14[0],a113);
							};
						})([id],[$bind(this,this.load_onError)]));
						future4.onComplete((function(id15,f14) {
							return function(a114) {
								f14[0](id15[0],a114);
							};
						})([id],[$bind(this,this.loadText_onComplete)]));
						break;
					default:
					}
				}
			}
			this.updateProgressLoaded();
		}
		return this.promise.future;
	}
	,loadAudioBuffer: function(id) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedAudioBuffers;
			return lime_app_Future.withValue(__map_reserved[id] != null?_this1.getReserved(id):_this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null?_this3.getReserved(id):_this3.h[id],[]));
			} else {
				var _this4 = this.paths;
				return lime_audio_AudioBuffer.loadFromFile(__map_reserved[id] != null?_this4.getReserved(id):_this4.h[id]);
			}
		}
	}
	,loadBytes: function(id) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedBytes;
			return lime_app_Future.withValue(__map_reserved[id] != null?_this1.getReserved(id):_this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null?_this3.getReserved(id):_this3.h[id],[]));
			} else {
				var _this4 = this.paths;
				return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(__map_reserved[id] != null?_this4.getReserved(id):_this4.h[id]);
			}
		}
	}
	,loadFont: function(id) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedFonts;
			return lime_app_Future.withValue(__map_reserved[id] != null?_this1.getReserved(id):_this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_text_Font.loadFromName(Type.createInstance(__map_reserved[id] != null?_this3.getReserved(id):_this3.h[id],[]).name);
			} else {
				var _this4 = this.paths;
				return lime_text_Font.loadFromName(__map_reserved[id] != null?_this4.getReserved(id):_this4.h[id]);
			}
		}
	}
	,loadImage: function(id) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedImages;
			return lime_app_Future.withValue(__map_reserved[id] != null?_this1.getReserved(id):_this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null?_this3.getReserved(id):_this3.h[id],[]));
			} else {
				var _this4 = this.paths;
				return lime_graphics_Image.loadFromFile(__map_reserved[id] != null?_this4.getReserved(id):_this4.h[id]);
			}
		}
	}
	,loadText: function(id) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedText;
			return lime_app_Future.withValue(__map_reserved[id] != null?_this1.getReserved(id):_this1.h[id]);
		} else {
			return this.loadBytes(id).then(function(bytes) {
				return new lime_app_Future(function() {
					if(bytes == null) {
						return null;
					} else {
						return bytes.getString(0,bytes.length);
					}
				},true);
			});
		}
	}
	,unload: function() {
	}
	,updateProgressLoaded: function() {
		this.progressLoaded++;
		if(this.progressLoaded == this.progressTotal) {
			this.promise.complete(this);
		}
	}
	,__fromManifest: function(manifest) {
		if(manifest.version == 1) {
			var _g = 0;
			var _g1 = manifest.assets;
			while(_g < _g1.length) {
				var asset = _g1[_g];
				++_g;
				var key = asset.id;
				var value = asset.path;
				var _this = this.paths;
				if(__map_reserved[key] != null) {
					_this.setReserved(key,value);
				} else {
					_this.h[key] = value;
				}
				var key1 = asset.id;
				var value1 = asset.type;
				var _this1 = this.types;
				if(__map_reserved[key1] != null) {
					_this1.setReserved(key1,value1);
				} else {
					_this1.h[key1] = value1;
				}
			}
		}
	}
	,loadAudioBuffer_onComplete: function(id,audioBuffer) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,audioBuffer);
		} else {
			_this.h[id] = audioBuffer;
		}
		this.updateProgressLoaded();
	}
	,loadBytes_onComplete: function(id,bytes) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,bytes);
		} else {
			_this.h[id] = bytes;
		}
		this.updateProgressLoaded();
	}
	,loadFont_onComplete: function(id,font) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,font);
		} else {
			_this.h[id] = font;
		}
		this.updateProgressLoaded();
	}
	,loadImage_onComplete: function(id,image) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,image);
		} else {
			_this.h[id] = image;
		}
		this.updateProgressLoaded();
	}
	,loadText_onComplete: function(id,text) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,text);
		} else {
			_this.h[id] = text;
		}
		this.updateProgressLoaded();
	}
	,load_onError: function(id,message) {
		this.promise.error("Error loading asset \"" + id + "\"");
	}
	,load_onProgress: function(id,bytesLoaded,bytesTotal) {
		var _this = this.progressBytesLoadedCache;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.progressBytesLoadedCache;
			this.progressBytesLoaded += bytesLoaded - (__map_reserved[id] != null?_this1.getReserved(id):_this1.h[id]);
			var _this2 = this.progressBytesLoadedCache;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,bytesLoaded);
			} else {
				_this2.h[id] = bytesLoaded;
			}
			this.promise.progress(this.progressBytesLoaded,this.progressBytesTotal);
		} else if(bytesTotal > 0) {
			var _this3 = this.progressBytesLoadedCache;
			if(__map_reserved[id] != null) {
				_this3.setReserved(id,bytesLoaded);
			} else {
				_this3.h[id] = bytesLoaded;
			}
			this.progressBytesLoaded += bytesLoaded;
			this.progressBytesTotal += bytesTotal;
		}
	}
	,__class__: lime_utils_AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.rootPath = "";
	lime_utils_AssetLibrary.call(this);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$font_$bold_$led_$board_$7_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$font_$digital7_$italic_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$font_$opensans_$bold_$ttf);
	var _this = this.paths;
	if(__map_reserved["assets/preloader/bar.png"] != null) {
		_this.setReserved("assets/preloader/bar.png","assets/preloader/bar.png");
	} else {
		_this.h["assets/preloader/bar.png"] = "assets/preloader/bar.png";
	}
	var _this1 = this.types;
	var value = "IMAGE";
	if(__map_reserved["assets/preloader/bar.png"] != null) {
		_this1.setReserved("assets/preloader/bar.png",value);
	} else {
		_this1.h["assets/preloader/bar.png"] = value;
	}
	var _this2 = this.paths;
	if(__map_reserved["data/lobby.json"] != null) {
		_this2.setReserved("data/lobby.json","data/lobby.json");
	} else {
		_this2.h["data/lobby.json"] = "data/lobby.json";
	}
	var _this3 = this.types;
	var value1 = "TEXT";
	if(__map_reserved["data/lobby.json"] != null) {
		_this3.setReserved("data/lobby.json",value1);
	} else {
		_this3.h["data/lobby.json"] = value1;
	}
	var _this4 = this.paths;
	if(__map_reserved["data/sales.json"] != null) {
		_this4.setReserved("data/sales.json","data/sales.json");
	} else {
		_this4.h["data/sales.json"] = "data/sales.json";
	}
	var _this5 = this.types;
	var value2 = "TEXT";
	if(__map_reserved["data/sales.json"] != null) {
		_this5.setReserved("data/sales.json",value2);
	} else {
		_this5.h["data/sales.json"] = value2;
	}
	var _this6 = this.paths;
	if(__map_reserved["data/slot.json"] != null) {
		_this6.setReserved("data/slot.json","data/slot.json");
	} else {
		_this6.h["data/slot.json"] = "data/slot.json";
	}
	var _this7 = this.types;
	var value3 = "TEXT";
	if(__map_reserved["data/slot.json"] != null) {
		_this7.setReserved("data/slot.json",value3);
	} else {
		_this7.h["data/slot.json"] = value3;
	}
	var _this8 = this.paths;
	if(__map_reserved["data/sr14.json"] != null) {
		_this8.setReserved("data/sr14.json","data/sr14.json");
	} else {
		_this8.h["data/sr14.json"] = "data/sr14.json";
	}
	var _this9 = this.types;
	var value4 = "TEXT";
	if(__map_reserved["data/sr14.json"] != null) {
		_this9.setReserved("data/sr14.json",value4);
	} else {
		_this9.h["data/sr14.json"] = value4;
	}
	var _this10 = this.paths;
	if(__map_reserved["data/sr21.json"] != null) {
		_this10.setReserved("data/sr21.json","data/sr21.json");
	} else {
		_this10.h["data/sr21.json"] = "data/sr21.json";
	}
	var _this11 = this.types;
	var value5 = "TEXT";
	if(__map_reserved["data/sr21.json"] != null) {
		_this11.setReserved("data/sr21.json",value5);
	} else {
		_this11.h["data/sr21.json"] = value5;
	}
	var _this12 = this.paths;
	if(__map_reserved["data/sr7.json"] != null) {
		_this12.setReserved("data/sr7.json","data/sr7.json");
	} else {
		_this12.h["data/sr7.json"] = "data/sr7.json";
	}
	var _this13 = this.types;
	var value6 = "TEXT";
	if(__map_reserved["data/sr7.json"] != null) {
		_this13.setReserved("data/sr7.json",value6);
	} else {
		_this13.h["data/sr7.json"] = value6;
	}
	var _this14 = this.classTypes;
	var value7 = _$_$ASSET_$_$font_$bold_$led_$board_$7_$ttf;
	if(__map_reserved["font/bold_led_board-7.ttf"] != null) {
		_this14.setReserved("font/bold_led_board-7.ttf",value7);
	} else {
		_this14.h["font/bold_led_board-7.ttf"] = value7;
	}
	var _this15 = this.preload;
	if(__map_reserved["font/bold_led_board-7.ttf"] != null) {
		_this15.setReserved("font/bold_led_board-7.ttf",true);
	} else {
		_this15.h["font/bold_led_board-7.ttf"] = true;
	}
	var _this16 = this.types;
	var value8 = "FONT";
	if(__map_reserved["font/bold_led_board-7.ttf"] != null) {
		_this16.setReserved("font/bold_led_board-7.ttf",value8);
	} else {
		_this16.h["font/bold_led_board-7.ttf"] = value8;
	}
	var _this17 = this.classTypes;
	var value9 = _$_$ASSET_$_$font_$digital7_$italic_$ttf;
	if(__map_reserved["font/digital7_italic.ttf"] != null) {
		_this17.setReserved("font/digital7_italic.ttf",value9);
	} else {
		_this17.h["font/digital7_italic.ttf"] = value9;
	}
	var _this18 = this.preload;
	if(__map_reserved["font/digital7_italic.ttf"] != null) {
		_this18.setReserved("font/digital7_italic.ttf",true);
	} else {
		_this18.h["font/digital7_italic.ttf"] = true;
	}
	var _this19 = this.types;
	var value10 = "FONT";
	if(__map_reserved["font/digital7_italic.ttf"] != null) {
		_this19.setReserved("font/digital7_italic.ttf",value10);
	} else {
		_this19.h["font/digital7_italic.ttf"] = value10;
	}
	var _this20 = this.paths;
	if(__map_reserved["font/font_common.png"] != null) {
		_this20.setReserved("font/font_common.png","font/font_common.png");
	} else {
		_this20.h["font/font_common.png"] = "font/font_common.png";
	}
	var _this21 = this.types;
	var value11 = "IMAGE";
	if(__map_reserved["font/font_common.png"] != null) {
		_this21.setReserved("font/font_common.png",value11);
	} else {
		_this21.h["font/font_common.png"] = value11;
	}
	var _this22 = this.paths;
	if(__map_reserved["font/font_deal_coin_1.png"] != null) {
		_this22.setReserved("font/font_deal_coin_1.png","font/font_deal_coin_1.png");
	} else {
		_this22.h["font/font_deal_coin_1.png"] = "font/font_deal_coin_1.png";
	}
	var _this23 = this.types;
	var value12 = "IMAGE";
	if(__map_reserved["font/font_deal_coin_1.png"] != null) {
		_this23.setReserved("font/font_deal_coin_1.png",value12);
	} else {
		_this23.h["font/font_deal_coin_1.png"] = value12;
	}
	var _this24 = this.paths;
	if(__map_reserved["font/font_deal_dia_1.png"] != null) {
		_this24.setReserved("font/font_deal_dia_1.png","font/font_deal_dia_1.png");
	} else {
		_this24.h["font/font_deal_dia_1.png"] = "font/font_deal_dia_1.png";
	}
	var _this25 = this.types;
	var value13 = "IMAGE";
	if(__map_reserved["font/font_deal_dia_1.png"] != null) {
		_this25.setReserved("font/font_deal_dia_1.png",value13);
	} else {
		_this25.h["font/font_deal_dia_1.png"] = value13;
	}
	var _this26 = this.paths;
	if(__map_reserved["font/font_herald.png"] != null) {
		_this26.setReserved("font/font_herald.png","font/font_herald.png");
	} else {
		_this26.h["font/font_herald.png"] = "font/font_herald.png";
	}
	var _this27 = this.types;
	var value14 = "IMAGE";
	if(__map_reserved["font/font_herald.png"] != null) {
		_this27.setReserved("font/font_herald.png",value14);
	} else {
		_this27.h["font/font_herald.png"] = value14;
	}
	var _this28 = this.paths;
	if(__map_reserved["font/font_herald_1.png"] != null) {
		_this28.setReserved("font/font_herald_1.png","font/font_herald_1.png");
	} else {
		_this28.h["font/font_herald_1.png"] = "font/font_herald_1.png";
	}
	var _this29 = this.types;
	var value15 = "IMAGE";
	if(__map_reserved["font/font_herald_1.png"] != null) {
		_this29.setReserved("font/font_herald_1.png",value15);
	} else {
		_this29.h["font/font_herald_1.png"] = value15;
	}
	var _this30 = this.paths;
	if(__map_reserved["font/font_herald_2.png"] != null) {
		_this30.setReserved("font/font_herald_2.png","font/font_herald_2.png");
	} else {
		_this30.h["font/font_herald_2.png"] = "font/font_herald_2.png";
	}
	var _this31 = this.types;
	var value16 = "IMAGE";
	if(__map_reserved["font/font_herald_2.png"] != null) {
		_this31.setReserved("font/font_herald_2.png",value16);
	} else {
		_this31.h["font/font_herald_2.png"] = value16;
	}
	var _this32 = this.paths;
	if(__map_reserved["font/font_kto_buy_1.png"] != null) {
		_this32.setReserved("font/font_kto_buy_1.png","font/font_kto_buy_1.png");
	} else {
		_this32.h["font/font_kto_buy_1.png"] = "font/font_kto_buy_1.png";
	}
	var _this33 = this.types;
	var value17 = "IMAGE";
	if(__map_reserved["font/font_kto_buy_1.png"] != null) {
		_this33.setReserved("font/font_kto_buy_1.png",value17);
	} else {
		_this33.h["font/font_kto_buy_1.png"] = value17;
	}
	var _this34 = this.paths;
	if(__map_reserved["font/font_levelup_small.png"] != null) {
		_this34.setReserved("font/font_levelup_small.png","font/font_levelup_small.png");
	} else {
		_this34.h["font/font_levelup_small.png"] = "font/font_levelup_small.png";
	}
	var _this35 = this.types;
	var value18 = "IMAGE";
	if(__map_reserved["font/font_levelup_small.png"] != null) {
		_this35.setReserved("font/font_levelup_small.png",value18);
	} else {
		_this35.h["font/font_levelup_small.png"] = value18;
	}
	var _this36 = this.paths;
	if(__map_reserved["font/font_level_big.png"] != null) {
		_this36.setReserved("font/font_level_big.png","font/font_level_big.png");
	} else {
		_this36.h["font/font_level_big.png"] = "font/font_level_big.png";
	}
	var _this37 = this.types;
	var value19 = "IMAGE";
	if(__map_reserved["font/font_level_big.png"] != null) {
		_this37.setReserved("font/font_level_big.png",value19);
	} else {
		_this37.h["font/font_level_big.png"] = value19;
	}
	var _this38 = this.paths;
	if(__map_reserved["font/font_omg_1.png"] != null) {
		_this38.setReserved("font/font_omg_1.png","font/font_omg_1.png");
	} else {
		_this38.h["font/font_omg_1.png"] = "font/font_omg_1.png";
	}
	var _this39 = this.types;
	var value20 = "IMAGE";
	if(__map_reserved["font/font_omg_1.png"] != null) {
		_this39.setReserved("font/font_omg_1.png",value20);
	} else {
		_this39.h["font/font_omg_1.png"] = value20;
	}
	var _this40 = this.classTypes;
	var value21 = _$_$ASSET_$_$font_$opensans_$bold_$ttf;
	if(__map_reserved["font/OpenSans-Bold.ttf"] != null) {
		_this40.setReserved("font/OpenSans-Bold.ttf",value21);
	} else {
		_this40.h["font/OpenSans-Bold.ttf"] = value21;
	}
	var _this41 = this.preload;
	if(__map_reserved["font/OpenSans-Bold.ttf"] != null) {
		_this41.setReserved("font/OpenSans-Bold.ttf",true);
	} else {
		_this41.h["font/OpenSans-Bold.ttf"] = true;
	}
	var _this42 = this.types;
	var value22 = "FONT";
	if(__map_reserved["font/OpenSans-Bold.ttf"] != null) {
		_this42.setReserved("font/OpenSans-Bold.ttf",value22);
	} else {
		_this42.h["font/OpenSans-Bold.ttf"] = value22;
	}
	var _this43 = this.paths;
	if(__map_reserved["font/shop_font_black_24.png"] != null) {
		_this43.setReserved("font/shop_font_black_24.png","font/shop_font_black_24.png");
	} else {
		_this43.h["font/shop_font_black_24.png"] = "font/shop_font_black_24.png";
	}
	var _this44 = this.types;
	var value23 = "IMAGE";
	if(__map_reserved["font/shop_font_black_24.png"] != null) {
		_this44.setReserved("font/shop_font_black_24.png",value23);
	} else {
		_this44.h["font/shop_font_black_24.png"] = value23;
	}
	var _this45 = this.paths;
	if(__map_reserved["font/shop_font_black_32.png"] != null) {
		_this45.setReserved("font/shop_font_black_32.png","font/shop_font_black_32.png");
	} else {
		_this45.h["font/shop_font_black_32.png"] = "font/shop_font_black_32.png";
	}
	var _this46 = this.types;
	var value24 = "IMAGE";
	if(__map_reserved["font/shop_font_black_32.png"] != null) {
		_this46.setReserved("font/shop_font_black_32.png",value24);
	} else {
		_this46.h["font/shop_font_black_32.png"] = value24;
	}
	var _this47 = this.paths;
	if(__map_reserved["font/shop_font_white_24.png"] != null) {
		_this47.setReserved("font/shop_font_white_24.png","font/shop_font_white_24.png");
	} else {
		_this47.h["font/shop_font_white_24.png"] = "font/shop_font_white_24.png";
	}
	var _this48 = this.types;
	var value25 = "IMAGE";
	if(__map_reserved["font/shop_font_white_24.png"] != null) {
		_this48.setReserved("font/shop_font_white_24.png",value25);
	} else {
		_this48.h["font/shop_font_white_24.png"] = value25;
	}
	var _this49 = this.paths;
	if(__map_reserved["font/shop_font_white_28.png"] != null) {
		_this49.setReserved("font/shop_font_white_28.png","font/shop_font_white_28.png");
	} else {
		_this49.h["font/shop_font_white_28.png"] = "font/shop_font_white_28.png";
	}
	var _this50 = this.types;
	var value26 = "IMAGE";
	if(__map_reserved["font/shop_font_white_28.png"] != null) {
		_this50.setReserved("font/shop_font_white_28.png",value26);
	} else {
		_this50.h["font/shop_font_white_28.png"] = value26;
	}
	var _this51 = this.paths;
	if(__map_reserved["font/welcome_font.png"] != null) {
		_this51.setReserved("font/welcome_font.png","font/welcome_font.png");
	} else {
		_this51.h["font/welcome_font.png"] = "font/welcome_font.png";
	}
	var _this52 = this.types;
	var value27 = "IMAGE";
	if(__map_reserved["font/welcome_font.png"] != null) {
		_this52.setReserved("font/welcome_font.png",value27);
	} else {
		_this52.h["font/welcome_font.png"] = value27;
	}
	var assetsPrefix = null;
	if(ApplicationMain.config != null && Object.prototype.hasOwnProperty.call(ApplicationMain.config,"assetsPrefix")) {
		assetsPrefix = ApplicationMain.config.assetsPrefix;
	}
	if(assetsPrefix != null) {
		var tmp = this.paths.keys();
		while(tmp.hasNext()) {
			var k = tmp.next();
			var _this53 = this.paths;
			var value28 = assetsPrefix + (__map_reserved[k] != null?_this53.getReserved(k):_this53.h[k]);
			var _this54 = this.paths;
			if(__map_reserved[k] != null) {
				_this54.setReserved(k,value28);
			} else {
				_this54.h[k] = value28;
			}
		}
	}
	var tmp1 = this.paths.keys();
	while(tmp1.hasNext()) {
		var id = tmp1.next();
		var _this55 = this.preload;
		if(__map_reserved[id] != null) {
			_this55.setReserved(id,true);
		} else {
			_this55.h[id] = true;
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = lime_utils_AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime_utils_AssetLibrary.prototype,{
	lastModified: null
	,timer: null
	,rootPath: null
	,__class__: DefaultAssetLibrary
});
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(this.__fontPath != null) {
		this.__fromFile(this.__fontPath);
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_text_Font.fromBytes(bytes));
};
lime_text_Font.loadFromFile = function(path) {
	return lime_app_Future.withValue(lime_text_Font.fromFile(path));
};
lime_text_Font.loadFromName = function(path) {
	return new lime_text_Font().__loadFromName(path);
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontPath: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) {
			characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		}
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var font = name;
		if(window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load))) {
			window.document.fonts.load("1em '" + font + "'").then(function(_) {
				promise.complete(_gthis);
			});
		} else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					if(interval != null) {
						window.clearInterval(interval);
					}
					node.parentNode.removeChild(node);
					node = null;
					promise.complete(_gthis);
					return true;
				}
				return false;
			};
			if(!checkFont()) {
				interval = window.setInterval(checkFont,50);
			}
		}
		return promise.future;
	}
	,__setSize: function(size) {
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime_text_Font
	,__properties__: {get_unitsPerEM:"get_unitsPerEM",get_underlineThickness:"get_underlineThickness",get_underlinePosition:"get_underlinePosition",get_numGlyphs:"get_numGlyphs",get_height:"get_height",get_descender:"get_descender",get_ascender:"get_ascender"}
};
var _$_$ASSET_$_$font_$bold_$led_$board_$7_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Bold LED Board-7";
};
$hxClasses["__ASSET__font_bold_led_board_7_ttf"] = _$_$ASSET_$_$font_$bold_$led_$board_$7_$ttf;
_$_$ASSET_$_$font_$bold_$led_$board_$7_$ttf.__name__ = ["__ASSET__font_bold_led_board_7_ttf"];
_$_$ASSET_$_$font_$bold_$led_$board_$7_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$font_$bold_$led_$board_$7_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$font_$bold_$led_$board_$7_$ttf
});
var _$_$ASSET_$_$font_$digital7_$italic_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Digital-7 Italic";
};
$hxClasses["__ASSET__font_digital7_italic_ttf"] = _$_$ASSET_$_$font_$digital7_$italic_$ttf;
_$_$ASSET_$_$font_$digital7_$italic_$ttf.__name__ = ["__ASSET__font_digital7_italic_ttf"];
_$_$ASSET_$_$font_$digital7_$italic_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$font_$digital7_$italic_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$font_$digital7_$italic_$ttf
});
var _$_$ASSET_$_$font_$opensans_$bold_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Open Sans Bold";
};
$hxClasses["__ASSET__font_opensans_bold_ttf"] = _$_$ASSET_$_$font_$opensans_$bold_$ttf;
_$_$ASSET_$_$font_$opensans_$bold_$ttf.__name__ = ["__ASSET__font_opensans_bold_ttf"];
_$_$ASSET_$_$font_$opensans_$bold_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$font_$opensans_$bold_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$font_$opensans_$bold_$ttf
});
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) {
		enumerateDeviceFonts = false;
	}
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.registerFont = function(font) {
	var instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	if(instance != null) {
		openfl_text_Font.__registeredFonts.push(instance);
	}
};
openfl_text_Font.__fromLimeFont = function(value) {
	var font = new openfl_text_Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	fontStyle: null
	,fontType: null
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: $extend(lime_text_Font.prototype.__properties__,{set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
var _$_$ASSET_$_$OPENFL_$_$font_$bold_$led_$board_$7_$ttf = function() {
	var font = new _$_$ASSET_$_$font_$bold_$led_$board_$7_$ttf();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__font_bold_led_board_7_ttf"] = _$_$ASSET_$_$OPENFL_$_$font_$bold_$led_$board_$7_$ttf;
_$_$ASSET_$_$OPENFL_$_$font_$bold_$led_$board_$7_$ttf.__name__ = ["__ASSET__OPENFL__font_bold_led_board_7_ttf"];
_$_$ASSET_$_$OPENFL_$_$font_$bold_$led_$board_$7_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$font_$bold_$led_$board_$7_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$font_$bold_$led_$board_$7_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$font_$digital7_$italic_$ttf = function() {
	var font = new _$_$ASSET_$_$font_$digital7_$italic_$ttf();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__font_digital7_italic_ttf"] = _$_$ASSET_$_$OPENFL_$_$font_$digital7_$italic_$ttf;
_$_$ASSET_$_$OPENFL_$_$font_$digital7_$italic_$ttf.__name__ = ["__ASSET__OPENFL__font_digital7_italic_ttf"];
_$_$ASSET_$_$OPENFL_$_$font_$digital7_$italic_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$font_$digital7_$italic_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$font_$digital7_$italic_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$font_$opensans_$bold_$ttf = function() {
	var font = new _$_$ASSET_$_$font_$opensans_$bold_$ttf();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__font_opensans_bold_ttf"] = _$_$ASSET_$_$OPENFL_$_$font_$opensans_$bold_$ttf;
_$_$ASSET_$_$OPENFL_$_$font_$opensans_$bold_$ttf.__name__ = ["__ASSET__OPENFL__font_opensans_bold_ttf"];
_$_$ASSET_$_$OPENFL_$_$font_$opensans_$bold_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$font_$opensans_$bold_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$font_$opensans_$bold_$ttf
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0?s:HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0?HxOverrides.substr(s,pos,null):HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var tmp = $iterator(it)();
	while(tmp.hasNext()) a.push(tmp.next());
	return a;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	if(aNeg != b < 0) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	if(aNeg != b < 0) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	if(this1 < 0) {
		return 4294967296.0 + this1;
	} else {
		return this1 + 0.0;
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		return __map_reserved[att] != null?_this.getReserved(att):_this.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		return HxOverrides.iter(_g);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var com_redpeakgames_cloud9_Constants = function() { };
$hxClasses["com.redpeakgames.cloud9.Constants"] = com_redpeakgames_cloud9_Constants;
com_redpeakgames_cloud9_Constants.__name__ = ["com","redpeakgames","cloud9","Constants"];
var com_redpeakgames_cloud9_ErrorCode = function() { };
$hxClasses["com.redpeakgames.cloud9.ErrorCode"] = com_redpeakgames_cloud9_ErrorCode;
com_redpeakgames_cloud9_ErrorCode.__name__ = ["com","redpeakgames","cloud9","ErrorCode"];
var com_redpeakgames_cloud9_ExternalLoaderManager = function() { };
$hxClasses["com.redpeakgames.cloud9.ExternalLoaderManager"] = com_redpeakgames_cloud9_ExternalLoaderManager;
com_redpeakgames_cloud9_ExternalLoaderManager.__name__ = ["com","redpeakgames","cloud9","ExternalLoaderManager"];
com_redpeakgames_cloud9_ExternalLoaderManager.init = function(root) {
	com_redpeakgames_cloud9_ExternalLoaderManager.mapLoader = new haxe_ds_StringMap();
	com_redpeakgames_cloud9_ExternalLoaderManager._root = root;
};
com_redpeakgames_cloud9_ExternalLoaderManager.addLoader = function(name,loader,url,preload) {
	if(com_redpeakgames_cloud9_ExternalLoaderManager.mapLoader == null) {
		return;
	}
	var loaderInfo = { loader : loader, url : url, preload : preload};
	var _this = com_redpeakgames_cloud9_ExternalLoaderManager.mapLoader;
	if(__map_reserved[name] != null) {
		_this.setReserved(name,loaderInfo);
	} else {
		_this.h[name] = loaderInfo;
	}
};
com_redpeakgames_cloud9_ExternalLoaderManager.getLoader = function(name) {
	if(com_redpeakgames_cloud9_ExternalLoaderManager.mapLoader == null) {
		return null;
	}
	var _this = com_redpeakgames_cloud9_ExternalLoaderManager.mapLoader;
	if(!(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name))) {
		return null;
	}
	var _this1 = com_redpeakgames_cloud9_ExternalLoaderManager.mapLoader;
	return (__map_reserved[name] != null?_this1.getReserved(name):_this1.h[name]).loader;
};
com_redpeakgames_cloud9_ExternalLoaderManager.getUrl = function(name) {
	if(com_redpeakgames_cloud9_ExternalLoaderManager.mapLoader == null) {
		return null;
	}
	var _this = com_redpeakgames_cloud9_ExternalLoaderManager.mapLoader;
	if(!(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name))) {
		return null;
	}
	var _this1 = com_redpeakgames_cloud9_ExternalLoaderManager.mapLoader;
	return (__map_reserved[name] != null?_this1.getReserved(name):_this1.h[name]).url;
};
com_redpeakgames_cloud9_ExternalLoaderManager.unload = function(name) {
	if(com_redpeakgames_cloud9_ExternalLoaderManager.mapLoader == null) {
		return;
	}
	var _this = com_redpeakgames_cloud9_ExternalLoaderManager.mapLoader;
	if(!(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name))) {
		return;
	}
	var _this1 = com_redpeakgames_cloud9_ExternalLoaderManager.mapLoader;
	(__map_reserved[name] != null?_this1.getReserved(name):_this1.h[name]).loader.unload();
};
com_redpeakgames_cloud9_ExternalLoaderManager.load = function(name,onComplete) {
	if(com_redpeakgames_cloud9_ExternalLoaderManager.mapLoader == null) {
		return;
	}
	var _this = com_redpeakgames_cloud9_ExternalLoaderManager.mapLoader;
	if(!(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name))) {
		return;
	}
	var _this1 = com_redpeakgames_cloud9_ExternalLoaderManager.mapLoader;
	var loaderInfo = __map_reserved[name] != null?_this1.getReserved(name):_this1.h[name];
	if(loaderInfo.loader.contentLoaderInfo.bytesTotal != 0 && loaderInfo.loader.contentLoaderInfo.bytesLoaded == loaderInfo.loader.contentLoaderInfo.bytesTotal) {
		if(onComplete != null) {
			onComplete();
		}
	} else {
		if(onComplete != null) {
			var onLoadComplete = null;
			onLoadComplete = function(e) {
				loaderInfo.loader.contentLoaderInfo.removeEventListener("complete",onLoadComplete);
				onComplete();
			};
			loaderInfo.loader.contentLoaderInfo.addEventListener("complete",onLoadComplete);
		}
		loaderInfo.loader.load(new openfl_net_URLRequest(loaderInfo.url),new openfl_system_LoaderContext(false,new openfl_system_ApplicationDomain()));
	}
};
var com_redpeakgames_cloud9_FireworkTimer = function() {
	this.timing = [3000,3500,3000,3500];
	this.fired = [false,false,false,false];
};
$hxClasses["com.redpeakgames.cloud9.FireworkTimer"] = com_redpeakgames_cloud9_FireworkTimer;
com_redpeakgames_cloud9_FireworkTimer.__name__ = ["com","redpeakgames","cloud9","FireworkTimer"];
com_redpeakgames_cloud9_FireworkTimer.prototype = {
	timing: null
	,fired: null
	,isIdle: function() {
		if(this.fired[0] && this.fired[1] && this.fired[2]) {
			return this.fired[3];
		} else {
			return false;
		}
	}
	,reload: function() {
		var magic = (Std.random(4) + 3) * 1000 + this.timing[0];
		this.timing[0] = magic + Std.random(2000);
		this.timing[1] = magic + Std.random(2000);
		this.timing[2] = magic + Std.random(2000);
		this.timing[3] = magic + Std.random(2000);
		this.fired[0] = false;
		this.fired[1] = false;
		this.fired[2] = false;
		this.fired[3] = false;
	}
	,ready: function(elapsed) {
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			if(this.fired[i] == false && elapsed > this.timing[i]) {
				this.fired[i] = true;
				if(this.isIdle()) {
					this.reload();
				}
				return i;
			}
		}
		return -1;
	}
	,__class__: com_redpeakgames_cloud9_FireworkTimer
};
var com_redpeakgames_cloud9_Global = function() { };
$hxClasses["com.redpeakgames.cloud9.Global"] = com_redpeakgames_cloud9_Global;
com_redpeakgames_cloud9_Global.__name__ = ["com","redpeakgames","cloud9","Global"];
var spritesheet_AnimatedSprite = function(sheet,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	openfl_display_Sprite.call(this);
	this.smoothing = smoothing;
	this.spritesheet = sheet;
	this.behaviorQueue = [];
	this.bitmap = new openfl_display_Bitmap();
	this.addChild(this.bitmap);
};
$hxClasses["spritesheet.AnimatedSprite"] = spritesheet_AnimatedSprite;
spritesheet_AnimatedSprite.__name__ = ["spritesheet","AnimatedSprite"];
spritesheet_AnimatedSprite.__super__ = openfl_display_Sprite;
spritesheet_AnimatedSprite.prototype = $extend(openfl_display_Sprite.prototype,{
	bitmap: null
	,currentBehavior: null
	,currentFrameIndex: null
	,smoothing: null
	,spritesheet: null
	,behaviorComplete: null
	,behaviorQueue: null
	,behavior: null
	,loopTime: null
	,timeElapsed: null
	,getFrameData: function(index) {
		if(this.currentBehavior != null && this.currentBehavior.frameData.length > index) {
			return this.currentBehavior.frameData[index];
		} else {
			return null;
		}
	}
	,queueBehavior: function(behavior) {
		var behaviorData = this.resolveBehavior(behavior);
		if(this.currentBehavior == null) {
			this.updateBehavior(behaviorData);
		} else {
			this.behaviorQueue.push(behaviorData);
		}
	}
	,resolveBehavior: function(behavior) {
		if(js_Boot.__instanceof(behavior,spritesheet_data_BehaviorData)) {
			return behavior;
		} else if(typeof(behavior) == "string") {
			if(this.spritesheet != null) {
				var _this = this.spritesheet.behaviors;
				var key = behavior;
				return __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
			}
		}
		return null;
	}
	,showBehavior: function(behavior,restart) {
		if(restart == null) {
			restart = true;
		}
		this.behaviorQueue = [];
		this.updateBehavior(this.resolveBehavior(behavior),restart);
	}
	,showBehaviors: function(behaviors) {
		this.behaviorQueue = [];
		var _g = 0;
		while(_g < behaviors.length) {
			var behavior = behaviors[_g];
			++_g;
			this.behaviorQueue.push(this.resolveBehavior(behavior));
		}
		if(this.behaviorQueue.length > 0) {
			this.updateBehavior(this.behaviorQueue.shift());
		}
	}
	,update: function(deltaTime) {
		if(!this.behaviorComplete) {
			this.timeElapsed += deltaTime;
			var ratio = this.timeElapsed / this.loopTime;
			if(ratio >= 1) {
				if(this.currentBehavior.loop) {
					ratio -= Math.floor(ratio);
				} else {
					this.behaviorComplete = true;
					ratio = 1;
				}
			}
			this.currentFrameIndex = Math.round(ratio * (this.currentBehavior.frames.length - 1));
			var frame = this.spritesheet.getFrame(this.currentBehavior.frames[this.currentFrameIndex]);
			this.bitmap.set_bitmapData(frame.bitmapData);
			this.bitmap.smoothing = this.smoothing;
			this.bitmap.set_x(frame.offsetX - this.currentBehavior.originX);
			this.bitmap.set_y(frame.offsetY - this.currentBehavior.originY);
			if(this.behaviorComplete) {
				if(this.behaviorQueue.length > 0) {
					this.updateBehavior(this.behaviorQueue.shift());
				} else if(this.hasEventListener("complete")) {
					this.dispatchEvent(new openfl_events_Event("complete"));
				}
			}
		}
	}
	,updateBehavior: function(behavior,restart) {
		if(restart == null) {
			restart = true;
		}
		if(behavior != null) {
			if(restart || behavior != this.currentBehavior) {
				this.currentBehavior = behavior;
				this.timeElapsed = 0;
				this.behaviorComplete = false;
				this.loopTime = behavior.frames.length / behavior.frameRate * 1000 | 0;
				if(this.bitmap.bitmapData == null) {
					this.update(0);
				}
			}
		} else {
			this.bitmap.set_bitmapData(null);
			this.currentBehavior = null;
			this.currentFrameIndex = -1;
			this.behaviorComplete = true;
		}
	}
	,clear: function() {
		this.spritesheet.clear();
		this.removeChild(this.bitmap);
		this.bitmap.set_bitmapData(null);
	}
	,__class__: spritesheet_AnimatedSprite
});
var com_redpeakgames_cloud9_LiveIcon = function(path,info,stop,mover,click) {
	this.buttonMode = true;
	this.active = true;
	if(mover == null) {
		mover = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14];
	}
	if(stop == null) {
		stop = [15];
	}
	if(click == null) {
		click = [15];
	}
	var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData(path,false),info[0],info[1],info[2],info[3]);
	ss.addBehavior(new spritesheet_data_BehaviorData("mover",mover,false,16));
	ss.addBehavior(new spritesheet_data_BehaviorData("stop",stop,false,15));
	ss.addBehavior(new spritesheet_data_BehaviorData("click",click,false,15));
	ss.fillBitmaps();
	this.clickSound = com_redpeakgames_cloud9_utils_CSound.get("mouse_click_c");
	spritesheet_AnimatedSprite.call(this,ss);
	this.showBehavior("stop");
	this.update(0);
	this.addEventListener("mouseOver",$bind(this,this.onMouseOver));
	this.addEventListener("mouseOut",$bind(this,this.onMouseOut));
	this.addEventListener("click",$bind(this,this.onMouseClick));
};
$hxClasses["com.redpeakgames.cloud9.LiveIcon"] = com_redpeakgames_cloud9_LiveIcon;
com_redpeakgames_cloud9_LiveIcon.__name__ = ["com","redpeakgames","cloud9","LiveIcon"];
com_redpeakgames_cloud9_LiveIcon.__super__ = spritesheet_AnimatedSprite;
com_redpeakgames_cloud9_LiveIcon.prototype = $extend(spritesheet_AnimatedSprite.prototype,{
	active: null
	,clickMethod: null
	,overMethod: null
	,ae: null
	,clickSound: null
	,work: null
	,onClick: null
	,onOver: null
	,onMouseClick: function(e) {
		var _gthis = this;
		if(this.active) {
			this.active = false;
			this.showBehavior("click");
			haxe_Timer.delay(function() {
				if(_gthis.clickMethod != null) {
					_gthis.clickMethod(e);
				}
				_gthis.active = true;
			},150);
		}
		if(com_redpeakgames_cloud9_Global.mute == false && this.clickSound != null) {
			this.clickSound.play(0);
		}
	}
	,onMouseOut: function(e) {
		this.showBehavior("stop");
		if(this.ae != null) {
			this.ae.showBehavior("stop");
		}
	}
	,onMouseOver: function(e) {
		this.showBehavior("mover");
		if(this.ae != null) {
			this.ae.showBehavior("_e");
		}
		if(this.active) {
			if(this.overMethod != null) {
				this.overMethod(e);
			}
		}
	}
	,set_work: function(v) {
		this.active = v;
		return this.active;
	}
	,set_onClick: function(method) {
		this.clickMethod = method;
		return this.clickMethod;
	}
	,set_onOver: function(method) {
		this.overMethod = method;
		return this.overMethod;
	}
	,setAdditionalEffect: function(ss,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		this.ae = new spritesheet_AnimatedSprite(ss);
		this.ae.set_x(tx);
		this.ae.set_y(ty);
		this.ae.showBehavior("stop");
		this.addChild(this.ae);
	}
	,update: function(deltaTime) {
		spritesheet_AnimatedSprite.prototype.update.call(this,deltaTime);
		if(this.ae != null) {
			this.ae.update(deltaTime);
		}
	}
	,__class__: com_redpeakgames_cloud9_LiveIcon
	,__properties__: $extend(spritesheet_AnimatedSprite.prototype.__properties__,{set_onOver:"set_onOver",set_onClick:"set_onClick",set_work:"set_work"})
});
var com_redpeakgames_cloud9_Lobby = function(udt) {
	this.ngUrl = "";
	this.ngid = 2010;
	openfl_display_Sprite.call(this);
	this.set_name("cloud9.Lobby");
	this.udt = udt;
	this.wheelIdx = 0;
	this.slotType = "";
	this.category = new haxe_ds_StringMap();
	this.slotPos = [];
	this.seManager = new com_redpeakgames_cloud9_utils_SeManager(com_redpeakgames_cloud9_Global.mute);
	this.buttons = [];
	this.emptyBtns = [];
	this.animations = [];
	this.fireworks = [];
	this.ftimer = new com_redpeakgames_cloud9_FireworkTimer();
	this.banners = [];
	this.rmembersLight = [];
	this.page = 0;
	this.maxPage = 4;
	this.init = { x : 801, y : 217};
	this.offset = { x : 180, y : 162};
	this.lastTick = openfl_Lib.getTimer();
	this.megaSpinCount = udt.scount;
	this.curBanner = 0;
	this.prevBanner = 1;
	this.resetBanner = 0;
	this.bannerxy = [];
	var _g = 0;
	while(_g < 4) this.bannerxy.push({ x : 448 + _g++ * 22, y : 486});
	this.spotxy = [];
	var _g1 = 0;
	var _g2 = this.maxPage + 1;
	while(_g1 < _g2) this.spotxy.push({ x : 889 + _g1++ * 25, y : 497});
	this.slotxy = [{ x : 37, y : 0},{ x : 201, y : 0},{ x : 365, y : 0},{ x : 529, y : 0},{ x : 37, y : 158},{ x : 201, y : 158},{ x : 365, y : 158},{ x : 529, y : 158}];
	this.http = new com_redpeakgames_cloud9_utils_Http(udt.url + "data/lobby.json",$bind(this,this.onLoadData),$bind(this,this.onLoadError));
	this.http.request();
	this.httpJp = new com_redpeakgames_cloud9_utils_Http(udt.url + "get.jps.php",$bind(this,this.onRecvJps),$bind(this,this.onLoadError));
	var httpGift = new com_redpeakgames_cloud9_utils_Http(udt.url + "getgiftlist.php",$bind(this,this.onRecvList),$bind(this,this.onLoadError));
	var data = new openfl_net_URLVariables();
	data.uid = udt.uid;
	data.sig = udt.sig;
	httpGift.request(data);
	this.isTournament = true;
	this.addEventListener("enterFrame",$bind(this,this.onGameloop));
	this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
};
$hxClasses["com.redpeakgames.cloud9.Lobby"] = com_redpeakgames_cloud9_Lobby;
com_redpeakgames_cloud9_Lobby.__name__ = ["com","redpeakgames","cloud9","Lobby"];
com_redpeakgames_cloud9_Lobby.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_Lobby.prototype = $extend(openfl_display_Sprite.prototype,{
	init: null
	,offset: null
	,outer: null
	,inner: null
	,canvas: null
	,empty: null
	,http: null
	,httpJp: null
	,page: null
	,maxPage: null
	,udt: null
	,lastTick: null
	,buttons: null
	,emptyBtns: null
	,animations: null
	,spotxy: null
	,slotxy: null
	,games: null
	,ftimer: null
	,bgmTimer: null
	,lobbyData: null
	,category: null
	,slotPos: null
	,lobbyJson: null
	,seManager: null
	,isTournament: null
	,rewardCount: null
	,spot: null
	,friends: null
	,lArrow: null
	,rArrow: null
	,lastPlayed: null
	,categoryLevel: null
	,categoryPopular: null
	,categoryNewest: null
	,wheelIdx: null
	,megaSpinCount: null
	,blank: null
	,diaWheelSprite: null
	,mrClass: null
	,rmembersLight: null
	,rmembersLightOn: null
	,fireworks: null
	,banners: null
	,bannerxy: null
	,bannerDot: null
	,ngid: null
	,ngUrl: null
	,curBanner: null
	,prevBanner: null
	,resetBanner: null
	,getJpsTimer: null
	,giftNumberList: null
	,slotType: null
	,start: function() {
		var _gthis = this;
		this.placeUI();
		this.bgmTimer = haxe_Timer.delay(function() {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("lobby_bgm_01",99999,0);
			}
		},100);
	}
	,insertBg: function() {
		var bg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/outer.jpg",false));
		bg.set_name("outer.bg");
		this.outer.addChildAt(bg,0);
	}
	,placeUI: function() {
		var _gthis = this;
		this.outer = new openfl_display_Sprite();
		this.addChild(this.outer);
		this.insertBg();
		this.makeStars();
		this.makeSummerSun();
		this.makeSummerCrabs();
		this.inner = new openfl_display_Sprite();
		this.inner.set_x(582);
		this.inner.set_y(166);
		this.inner.set_scrollRect(new openfl_geom_Rectangle(0,0,753,326));
		this.outer.addChild(this.inner);
		this.canvas = new openfl_display_Sprite();
		this.inner.addChild(this.get_canvas());
		this.empty = new openfl_display_Sprite();
		this.inner.addChild(this.empty);
		var innerOverLeft = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/icons/theme_alpha_l.png"));
		innerOverLeft.set_x(582);
		innerOverLeft.set_y(154);
		this.outer.addChild(innerOverLeft);
		var innerOverRight = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/icons/theme_alpha_r.png"));
		innerOverRight.set_x(1277);
		innerOverRight.set_y(154);
		this.outer.addChild(innerOverRight);
		this.lArrow = new com_redpeakgames_cloud9_ui_ImageButton("img/btn_arrow",null,null,"mouse_click");
		this.lArrow.set_name("prev");
		this.lArrow.set_x(584);
		this.lArrow.set_y(303);
		this.lArrow.set_onClick($bind(this,this.onShiftPage));
		this.outer.addChild(this.lArrow);
		motion_Actuate.tween(this.lArrow,0.6,{ x : 591, y : 298, scaleX : 1.2, scaleY : 1.2}).ease(motion_easing_Elastic.get_easeOut()).repeat().delay(2);
		this.rArrow = new com_redpeakgames_cloud9_ui_ImageButton("img/btn_arrow",null,null,"mouse_click");
		this.rArrow.set_name("next");
		this.rArrow.set_x(1331);
		this.rArrow.set_y(303);
		this.rArrow.set_scaleX(-1);
		this.rArrow.set_onClick($bind(this,this.onShiftPage));
		this.outer.addChild(this.rArrow);
		motion_Actuate.tween(this.rArrow,0.6,{ x : 1324, y : 298, scaleX : -1.2, scaleY : 1.2}).ease(motion_easing_Elastic.get_easeOut()).repeat().delay(2);
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/menu/icon_particle_e.png",false),10,1,100,100);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8],true,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[9],true,1));
		ss.fillBitmaps();
		var leader = new com_redpeakgames_cloud9_LiveIcon("img/menu/leaderb_e.png",[16,1,80,80]);
		leader.set_x(1099);
		leader.set_y(538);
		leader.set_onClick($bind(this,this.onLeaderb));
		leader.set_onOver(function(e) {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("mouse_over_5-leaderboard",0,0);
			}
		});
		leader.setAdditionalEffect(ss,-9,-14);
		this.animations.push(leader);
		this.outer.addChild(leader);
		var tournament = new com_redpeakgames_cloud9_LiveIcon("img/menu/tournament_e.png",[16,1,80,80]);
		tournament.set_x(1219);
		tournament.set_y(538);
		tournament.set_onClick($bind(this,this.openTournament));
		tournament.set_onOver(function(e1) {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("mouse_over_4-tournament",0,0);
			}
		});
		tournament.setAdditionalEffect(ss,-9,-14);
		this.animations.push(tournament);
		this.outer.addChild(tournament);
		var shop = new com_redpeakgames_cloud9_LiveIcon("img/menu/shop_e.png",[16,1,80,80]);
		shop.set_x(978);
		shop.set_y(529);
		shop.set_onClick($bind(this,this.openCoinShop));
		shop.set_onOver(function(e2) {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("mouse_over_6-shop",0,0);
			}
		});
		shop.setAdditionalEffect(ss,-9,-8);
		this.animations.push(shop);
		this.outer.addChild(shop);
		var rwrd = new com_redpeakgames_cloud9_LiveIcon("img/menu/achievement_e.png",[16,1,80,80]);
		rwrd.set_x(859);
		rwrd.set_y(538);
		rwrd.set_onOver(function(e3) {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("mouse_over_8-achievement",0,0);
			}
		});
		rwrd.set_onClick($bind(this,this.openRewardPopup));
		rwrd.setAdditionalEffect(ss,-9,-14);
		this.animations.push(rwrd);
		this.outer.addChild(rwrd);
		this.rewardCount = new com_redpeakgames_cloud9_ui_NumberNotification(0,915,538);
		this.outer.addChild(this.rewardCount);
		this.friends = new com_redpeakgames_cloud9_dialog_Friends($bind(this,this.onSendGift),$bind(this,this.onInviteFriend));
		this.friends.set_name("inappfriends");
		this.friends.set_x(578);
		this.friends.set_y(650);
		this.outer.addChild(this.friends);
		try {
			this.friends.set_inAppFriends(openfl_external_ExternalInterface.call("function(){ return friends; }"));
		} catch( e4 ) {
			haxe_CallStack.lastException = e4;
			if (e4 instanceof js__$Boot_HaxeError) e4 = e4.val;
			if( js_Boot.__instanceof(e4,openfl_errors_Error) ) {
				this.friends.set_inAppFriends([]);
			} else throw(e4);
		}
		this.friends.draw();
		this.makeCategories();
		var _g1 = 0;
		var _g = this.maxPage + 1;
		while(_g1 < _g) {
			var i = [_g1++];
			var pageBtn = new com_redpeakgames_cloud9_ui_ImageButton("img/lightball",null,null,"mouse_click");
			pageBtn.set_onClick((function(i1) {
				return function(e5) {
					_gthis.shiftPage(i1[0]);
				};
			})(i));
			pageBtn.set_x(this.spotxy[i[0]].x);
			pageBtn.set_y(this.spotxy[i[0]].y);
			this.outer.addChild(pageBtn);
		}
		this.makeBanners();
		this.drawSpotIndicator();
		var btnStamp = new com_redpeakgames_cloud9_ui_ImageButton("img/btn_stamp",null,null,"mouse_click");
		btnStamp.set_x(1361);
		btnStamp.set_y(154);
		btnStamp.set_onClick($bind(this,this.onClickStamp));
		this.outer.addChild(btnStamp);
		var btnDailyWheel = new com_redpeakgames_cloud9_ui_ImageButton("img/btn_daily.wheel",null,null,"");
		btnDailyWheel.set_name("btn.daily.wheel");
		btnDailyWheel.set_x(1361);
		btnDailyWheel.set_y(256);
		btnDailyWheel.set_onClick($bind(this,this.onClickDailyWheel));
		this.outer.addChild(btnDailyWheel);
		var wheel_e = this.makeWheelE();
		wheel_e.set_name("e.wheel");
		wheel_e.set_x(1);
		wheel_e.set_y(-1);
		wheel_e.showBehavior("_e");
		this.animations.push(wheel_e);
		btnDailyWheel.addChild(wheel_e);
		var timeFormat = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",14,2031360);
		var txWheelRemain = com_redpeakgames_cloud9_ui_TxField.make(1379,btnDailyWheel.get_y() + 82 | 0,64,timeFormat,null,true);
		txWheelRemain.set_name("tx.daily.wheel");
		this.outer.addChild(txWheelRemain);
		var getnowWheel = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/wheel/btn_get_u.png"));
		getnowWheel.set_x(1379);
		getnowWheel.set_y(btnDailyWheel.get_y() + 88);
		getnowWheel.set_name("img.daily.wheel");
		getnowWheel.set_visible(false);
		this.outer.addChild(getnowWheel);
		var btnSpin = new com_redpeakgames_cloud9_ui_ImageButton("img/btn_lucky",null,null,"mouse_click");
		btnSpin.set_name("btn.spin");
		btnSpin.set_x(1361);
		btnSpin.set_y(358);
		btnSpin.set_onClick($bind(this,this.onClickLucky));
		this.outer.addChild(btnSpin);
		var spin_e = this.makeSpinE();
		spin_e.set_name("e.spin");
		spin_e.set_x(1);
		spin_e.set_y(-6);
		spin_e.showBehavior("_e");
		this.animations.push(spin_e);
		btnSpin.addChild(spin_e);
		var txSpinRemain = com_redpeakgames_cloud9_ui_TxField.make(1379,btnSpin.get_y() + 82 | 0,64,timeFormat,null,true);
		txSpinRemain.set_name("tx.spin");
		this.outer.addChild(txSpinRemain);
		var getnowSpin = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/wheel/btn_get_u.png"));
		getnowSpin.set_x(1379);
		getnowSpin.set_y(btnSpin.get_y() + 88);
		getnowSpin.set_name("img.spin");
		getnowSpin.set_visible(false);
		this.outer.addChild(getnowSpin);
		this.diaWheelSprite = this.makeDiaWheel();
		this.outer.addChild(this.diaWheelSprite);
		this.makeBottomBlank();
	}
	,makeCategories: function() {
		this.categoryLevel = new com_redpeakgames_cloud9_ui_ImageCheck("img/category/category_lv");
		this.categoryLevel.set_x(594);
		this.categoryLevel.set_y(129);
		this.categoryLevel.set_onClick($bind(this,this.onClickCategory));
		this.outer.addChild(this.categoryLevel);
		this.categoryPopular = new com_redpeakgames_cloud9_ui_ImageCheck("img/category/category_pop");
		this.categoryPopular.set_x(686);
		this.categoryPopular.set_y(129);
		this.categoryPopular.set_onClick($bind(this,this.onClickCategory));
		this.outer.addChild(this.categoryPopular);
		this.categoryNewest = new com_redpeakgames_cloud9_ui_ImageCheck("img/category/category_new");
		this.categoryNewest.set_x(778);
		this.categoryNewest.set_y(129);
		this.categoryNewest.set_onClick($bind(this,this.onClickCategory));
		this.outer.addChild(this.categoryNewest);
	}
	,onClickCategory: function(e) {
		var btn = e.target;
		if(btn == this.categoryLevel) {
			this.categoryPopular.set_checked(false);
			this.categoryPopular.mouseEnabled = true;
			this.categoryNewest.set_checked(false);
			this.categoryNewest.mouseEnabled = true;
			this.reposSlotIcons("level");
		}
		if(btn == this.categoryPopular) {
			this.categoryLevel.set_checked(false);
			this.categoryLevel.mouseEnabled = true;
			this.categoryNewest.set_checked(false);
			this.categoryNewest.mouseEnabled = true;
			this.reposSlotIcons("popular");
		}
		if(btn == this.categoryNewest) {
			this.categoryLevel.set_checked(false);
			this.categoryLevel.mouseEnabled = true;
			this.categoryPopular.set_checked(false);
			this.categoryPopular.mouseEnabled = true;
			this.reposSlotIcons("newest");
		}
		btn.mouseEnabled = false;
		if(!com_redpeakgames_cloud9_Global.mute) {
			this.seManager.play("mouse_click_c",0,0);
		}
	}
	,makeBanners: function() {
		var _gthis = this;
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var banner = new com_redpeakgames_cloud9_ui_ImageButton("img/Lobby_banners_0" + i,null,null,"mouse_click");
			banner.set_x(413);
			banner.set_y(154);
			banner.set_work(i == 0);
			banner.set_visible(i == 0);
			this.outer.addChild(banner);
			this.banners.push(banner);
			switch(i) {
			case 0:
				banner.set_onClick(null);
				break;
			case 1:
				banner.set_onClick($bind(this,this.onLeaderb));
				break;
			case 2:
				banner.set_onClick($bind(this,this.onClickFanpage));
				break;
			case 3:
				banner.set_onClick($bind(this,this.openTournament));
				break;
			}
		}
		var _g1 = 0;
		while(_g1 < 4) {
			var i1 = [_g1++];
			var btnBnDot = [new com_redpeakgames_cloud9_ui_ImageButton("img/banner_dot",null,null,"mouse_click")];
			btnBnDot[0].set_x(this.bannerxy[i1[0]].x);
			btnBnDot[0].set_y(this.bannerxy[i1[0]].y);
			btnBnDot[0].set_name("" + i1[0]);
			var tmp = (function(btnBnDot1,i2) {
				return function(e) {
					if(Std.parseInt(btnBnDot1[0].get_name()) == _gthis.curBanner) {
						return;
					}
					_gthis.resetBanner = 0;
					_gthis.prevBanner = _gthis.curBanner;
					_gthis.curBanner = i2[0];
					_gthis.drawBannerDotIndicator(i2[0]);
					motion_Actuate.stop(_gthis.banners[_gthis.curBanner]);
					motion_Actuate.stop(_gthis.banners[_gthis.prevBanner]);
					_gthis.banners[_gthis.curBanner].set_work(true);
					_gthis.banners[_gthis.curBanner].set_alpha(0);
					_gthis.banners[_gthis.curBanner].set_visible(true);
					motion_Actuate.tween(_gthis.banners[_gthis.curBanner],0.6,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
					_gthis.banners[_gthis.prevBanner].set_work(false);
					motion_Actuate.tween(_gthis.banners[_gthis.prevBanner],0.6,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete((function() {
						return function() {
							_gthis.banners[_gthis.prevBanner].set_visible(false);
						};
					})());
				};
			})(btnBnDot,i1);
			btnBnDot[0].set_onClick(tmp);
			this.outer.addChild(btnBnDot[0]);
		}
		this.drawBannerDotIndicator(0);
		var rmembers = new com_redpeakgames_cloud9_ui_ImageButton("img/rmembers/banner_rmembers",null,null,"mouse_click");
		rmembers.set_x(585);
		rmembers.set_y(534);
		rmembers.set_onClick(function(e1) {
			_gthis.rmembersLightOn = false;
			var _g2 = 0;
			while(_g2 < 2) _gthis.rmembersLight[_g2++].set_visible(false);
			_gthis.onRMembership();
		});
		this.outer.addChild(rmembers);
		this.makeMyClass(this.udt.vlev);
		this.rmembersLight[0] = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/rmembers_r_light_1.png"));
		this.rmembersLight[0].set_x(700);
		this.rmembersLight[0].set_y(517);
		this.rmembersLight[0].set_alpha(0);
		this.outer.addChild(this.rmembersLight[0]);
		this.rmembersLight[1] = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/rmembers_r_light_2.png"));
		this.rmembersLight[1].set_x(700);
		this.rmembersLight[1].set_y(517);
		this.rmembersLight[1].set_alpha(0);
		this.outer.addChild(this.rmembersLight[1]);
		rmembers.set_onOver(function(e2) {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("mouse_over_9-rmembers",0,0);
			}
			_gthis.rmembersLightOn = true;
		});
		rmembers.set_onOut(function(e3) {
			_gthis.rmembersLightOn = false;
			var _g3 = 0;
			while(_g3 < 2) _gthis.rmembersLight[_g3++].set_visible(false);
		});
	}
	,makeMyClass: function(vlev) {
		var num = 0;
		if(this.mrClass != null) {
			num = this.outer.getChildIndex(this.mrClass);
			this.outer.removeChild(this.mrClass);
		}
		this.mrClass = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/rmembers/benner_icon_" + ["bronze","silver","gold","emerald","sapphire","ruby","diamond"][vlev - 1] + ".png"));
		this.mrClass.set_x(698);
		this.mrClass.set_y(523);
		this.outer.addChild(this.mrClass);
		if(num != 0) {
			this.outer.setChildIndex(this.mrClass,num);
		}
	}
	,makeSpinE: function() {
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/effects/btn_lucky_e.png",false),17,1,100,92);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],true,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[16],false,1));
		return new spritesheet_AnimatedSprite(ss);
	}
	,makeWheelE: function() {
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/effects/btn_daily.wheel_e.png",false),17,1,100,92);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],true,15));
		return new spritesheet_AnimatedSprite(ss);
	}
	,makeDiaWheel: function() {
		var _gthis = this;
		var bg = new openfl_display_Sprite();
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/effects/spin_now_e.png",false),16,1,148,32);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,0],false,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[0],false,1));
		ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/effects/top_wheel_e.png",false),12,1,81,81);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10],false,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[11],false,1));
		var dws = new openfl_display_Sprite();
		dws.set_x(1085.5);
		dws.set_y(109.5);
		bg.addChild(dws);
		var topWheelRota = new com_redpeakgames_cloud9_ui_ImageButton("img/top_wheel2",null,null,"");
		topWheelRota.set_x(-40.5);
		topWheelRota.set_y(-40.5);
		topWheelRota.set_onClick($bind(this,this.onClickDiaWheel));
		dws.addChild(topWheelRota);
		var topWheelBg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/top_wheel1_u.png"));
		topWheelBg.set_x(1045);
		topWheelBg.set_y(69);
		bg.addChild(topWheelBg);
		var topWheel_e = new spritesheet_AnimatedSprite(ss);
		topWheel_e.set_x(1045);
		topWheel_e.set_y(69);
		topWheel_e.mouseEnabled = false;
		topWheel_e.showBehavior("stop");
		this.animations.push(topWheel_e);
		bg.addChild(topWheel_e);
		var tmr = null;
		topWheelRota.set_onOver(function(e) {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("mouse_etcOver_r",0,0);
			}
			topWheel_e.showBehavior("_e");
			tmr = new haxe_Timer(4000);
			tmr.run = function() {
				topWheel_e.showBehavior("_e");
			};
			motion_Actuate.tween(dws,0.2,{ y : 119.5},false).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(topWheel_e,0.2,{ y : 79},false).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(topWheelBg,0.2,{ y : 79},false).ease(motion_easing_Linear.get_easeNone());
		});
		topWheelRota.set_onOut(function(e1) {
			if(tmr != null) {
				tmr.stop();
			}
			topWheel_e.showBehavior("stop");
			motion_Actuate.tween(dws,0.2,{ y : 109.5},false).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(topWheel_e,0.2,{ y : 69},false).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(topWheelBg,0.2,{ y : 69},false).ease(motion_easing_Linear.get_easeNone());
		});
		var shadow = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/top_wheel_shadow.png"));
		shadow.set_x(1045);
		shadow.set_y(69);
		bg.addChild(shadow);
		motion_Actuate.tween(dws,6,{ rotation : 360},false).ease(motion_easing_Linear.get_easeNone()).repeat();
		return bg;
	}
	,makeFireworks: function() {
		var _gthis = this;
		var ss = spritesheet_importers_SparrowImporter.parse(openfl_Assets.getText("img/effects/fireworks_e.xml"),"img/effects");
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,0],false,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[0],false,1));
		var makeFw = function(ss1,x,y,scale) {
			var fw = new spritesheet_AnimatedSprite(ss1,true);
			fw.set_x(x);
			fw.set_y(y);
			fw.set_scaleX(scale);
			fw.set_scaleY(scale);
			fw.showBehavior("stop");
			_gthis.animations.push(fw);
			_gthis.fireworks.push(fw);
			return fw;
		};
		this.outer.addChild(makeFw(ss,208,198,1));
		this.outer.addChild(makeFw(ss,1468,177,1));
		this.outer.addChild(makeFw(ss,295,115,1));
		this.outer.addChild(makeFw(ss,445,115,1));
	}
	,makeSummerSun: function() {
		var sun = new openfl_display_Sprite();
		sun.set_x(1557);
		sun.set_y(182);
		this.outer.addChild(sun);
		var sunLightPivot = new openfl_display_Sprite();
		sun.addChild(sunLightPivot);
		sunLightPivot.addChild(com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/summer/sun_outline.png",false,-100,-100,1,true));
		motion_Actuate.tween(sunLightPivot,30,{ rotation : 360}).ease(motion_easing_Linear.get_easeNone()).repeat();
		sun.addChild(com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/summer/sun_face.png",false,-100,-100));
		var sunGlass = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/summer/sun_glass.png",false,-100,-100);
		sun.addChild(sunGlass);
		sun.addEventListener("mouseOver",function(e) {
			motion_Actuate.tween(sunGlass,1,{ y : -134}).ease(motion_easing_Quad.get_easeOut());
		});
		sun.addEventListener("mouseOut",function(e1) {
			motion_Actuate.tween(sunGlass,1,{ y : -100}).ease(motion_easing_Elastic.get_easeOut()).onComplete(function() {
				motion_Actuate.tween(sun,0.066,{ y : 184.5, scaleY : 0.95}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat(3);
			});
		});
	}
	,makeSummerCrabs: function() {
		var _gthis = this;
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/summer/crab_e.png",false),5,3,200,160);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],true,15));
		var makeCrab = function(ox,oy,tx,scale,runtime,useMask,reverse) {
			if(reverse == null) {
				reverse = false;
			}
			var crab = new spritesheet_AnimatedSprite(ss);
			crab.set_x(ox);
			crab.set_y(oy);
			if(reverse) {
				crab.set_x(tx);
			}
			crab.set_scaleX(scale);
			crab.set_scaleY(scale);
			crab.set_cacheAsBitmap(true);
			crab.showBehavior("_e");
			if(useMask) {
				var crabMask = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/summer/summer_mask.png",true,349,861);
				crabMask.set_cacheAsBitmap(true);
				_gthis.outer.addChild(crabMask);
				crab.set_mask(crabMask);
			}
			var last = openfl_Lib.getTimer();
			_gthis.outer.addChild(crab);
			if(reverse) {
				tx = ox;
			}
			motion_Actuate.tween(crab,runtime,{ x : tx}).ease(motion_easing_Linear.get_easeNone()).repeat().reflect().onUpdate(function() {
				var cur = openfl_Lib.getTimer();
				crab.update(cur - last);
				last = cur;
			});
			var pauseCrab = function() {
				motion_Actuate.pause(crab);
				var tmp = 2000 + Std.random(3000);
				haxe_Timer.delay(function() {
					motion_Actuate.resume(crab);
				},tmp);
				haxe_Timer.delay(pauseCrab,Std.random(1500) + 500);
			};
			haxe_Timer.delay(pauseCrab,Std.random(1500) + 500);
		};
		makeCrab(465,793,1109,0.6,6,false,true);
		makeCrab(349,875,1274,1,8,true);
	}
	,makeStars: function() {
		var canvasStars = new openfl_display_Sprite();
		canvasStars.set_name("canvas.stars");
		canvasStars.mouseEnabled = false;
		canvasStars.mouseChildren = false;
		this.outer.addChild(canvasStars);
		var starxy = [];
		var starRanges = [new openfl_geom_Rectangle(0,575,66,97),new openfl_geom_Rectangle(113,575,84,42),new openfl_geom_Rectangle(113,618,31,68),new openfl_geom_Rectangle(211,642,36,46),new openfl_geom_Rectangle(261,594,58,26),new openfl_geom_Rectangle(249,576,21,18),new openfl_geom_Rectangle(418,644,157,72),new openfl_geom_Rectangle(469,601,107,45),new openfl_geom_Rectangle(489,577,86,25),new openfl_geom_Rectangle(578,638,761,7),new openfl_geom_Rectangle(1341,577,23,70),new openfl_geom_Rectangle(1366,575,270,60),new openfl_geom_Rectangle(1651,593,56,34),new openfl_geom_Rectangle(1722,606,189,53)];
		var _g = 0;
		while(_g < starRanges.length) {
			var rng = starRanges[_g];
			++_g;
			var starNum = rng.width * rng.height / 500 | 0;
			var _g2 = 0;
			while(_g2 < starNum) {
				++_g2;
				var star = { x : rng.x + Math.random() * rng.width, y : rng.y + Math.random() * rng.height, s : Math.random() * 0.3 + 0.01};
				starxy.push(star);
			}
		}
		var _g1 = 0;
		var _g3 = starxy.length;
		while(_g1 < _g3) {
			var i = _g1++;
			Std.random(360);
			canvasStars.addChild(this.makeSingleStar(starxy[i].x,starxy[i].y,starxy[i].s + 0.1,0));
		}
	}
	,makeSingleStar: function(x,y,scale,rotation) {
		var star = new openfl_display_Sprite();
		var starImg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/light_white.png"));
		starImg.set_x(starImg.bitmapData.width / 2 * -1);
		starImg.set_y(starImg.bitmapData.height / 2 * -1);
		starImg.smoothing = true;
		star.addChild(starImg);
		star.mouseEnabled = false;
		star.set_x(x);
		star.set_y(y);
		star.set_scaleX(scale);
		star.set_scaleY(scale);
		star.set_rotation(rotation);
		star.set_alpha(0);
		motion_Actuate.tween(star,0.5 + Math.random(),{ alpha : scale + 0.7},false).ease(motion_easing_Quad.get_easeInOut()).reflect().repeat().delay(Math.random() * 2);
		return star;
	}
	,makeShootingStar: function() {
		var rects = [];
		rects.push(new openfl_geom_Rectangle(0,133,236,313));
		rects.push(new openfl_geom_Rectangle(1480,95,161,248));
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/effects/shootingstar_e.png",false),3,6,300,50);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],false,15));
		var ani = new spritesheet_AnimatedSprite(ss,true);
		ani.addEventListener("complete",function(e) {
			ani.set_visible(false);
		});
		ani.set_visible(false);
		ani.set_rotation(-30);
		ani.showBehavior("_e");
		this.animations.push(ani);
		this.outer.addChild(ani);
		var tmr = new haxe_Timer(6000);
		tmr.run = function() {
			var rndIdx = Std.random(rects.length);
			var rndPosX = rects[rndIdx].x + Math.random() * rects[rndIdx].width;
			var rndPosY = rects[rndIdx].y + Math.random() * rects[rndIdx].height;
			ani.set_visible(true);
			ani.set_x(rndPosX);
			ani.set_y(rndPosY);
			ani.showBehavior("_e");
		};
	}
	,onShiftPage: function(e) {
		var cur = this.page;
		if(js_Boot.__cast(Reflect.field(e.target,"name") , String) == "prev") {
			if(cur == 0) {
				this.page = this.maxPage;
				var tmp = -656 * (this.maxPage + 1);
				this.get_canvas().set_x(tmp);
				this.empty.set_x(-656 * (this.maxPage + 1));
			} else {
				this.page -= 1;
			}
			this.shiftPage(this.page);
		} else {
			if(cur == this.maxPage) {
				this.page = 0;
				this.get_canvas().set_x(656);
				this.empty.set_x(656);
			} else {
				this.page += 1;
			}
			this.shiftPage(this.page);
		}
	}
	,shiftPage: function(targetPage,direct) {
		if(direct == null) {
			direct = false;
		}
		if(targetPage > this.maxPage) {
			targetPage = this.maxPage;
		}
		if(targetPage < 0) {
			targetPage = 0;
		}
		var tx = targetPage * -656;
		this.page = targetPage;
		if(direct) {
			this.get_canvas().set_x(tx);
			this.empty.set_x(tx);
		} else {
			motion_Actuate.tween(this.get_canvas(),0.6,{ x : tx}).ease(motion_easing_Back.get_easeOut());
			motion_Actuate.tween(this.empty,0.6,{ x : tx}).ease(motion_easing_Back.get_easeOut());
		}
		this.drawSpotIndicator();
	}
	,pageLevelMatching: function() {
		var targetPage = 0;
		var levCheckTable = [5,10,40];
		while(targetPage < levCheckTable.length) {
			if(this.udt.lev < levCheckTable[targetPage]) {
				break;
			}
			++targetPage;
		}
		if(targetPage >= levCheckTable.length) {
			targetPage = levCheckTable.length - 1;
		}
		this.shiftPage(targetPage,true);
	}
	,placeSlots: function(data) {
		this.lobbyJson = JSON.parse(data);
		this.games = this.lobbyJson.slots;
		var v = this.lobbyJson.category.level;
		var _this = this.category;
		if(__map_reserved.level != null) {
			_this.setReserved("level",v);
		} else {
			_this.h["level"] = v;
		}
		var v1 = this.lobbyJson.category.popular;
		var _this1 = this.category;
		if(__map_reserved.popular != null) {
			_this1.setReserved("popular",v1);
		} else {
			_this1.h["popular"] = v1;
		}
		var v2 = this.lobbyJson.category.newest;
		var _this2 = this.category;
		if(__map_reserved.newest != null) {
			_this2.setReserved("newest",v2);
		} else {
			_this2.h["newest"] = v2;
		}
		this.drawSlotIcons(this.games);
		this.makeMouseUnableArea();
		this.getJps();
		this.reposSlotIcons("level");
		this.categoryLevel.set_checked(true);
		this.categoryLevel.mouseEnabled = false;
	}
	,makeMouseUnableArea: function() {
		var sprite = new openfl_display_Sprite();
		var shape = new openfl_display_Shape();
		shape.get_graphics().beginFill(0,1);
		shape.get_graphics().drawRect(0,0,59,326);
		shape.get_graphics().drawRect(693,0,60,326);
		shape.get_graphics().endFill();
		sprite.addChild(shape);
		sprite.set_x(this.inner.get_x());
		sprite.set_y(this.inner.get_y());
		sprite.set_alpha(0);
		this.outer.addChildAt(sprite,this.outer.getChildIndex(this.inner) + 1);
	}
	,getUrl: function(sid) {
		var _g = 0;
		var _g1 = this.games;
		while(_g < _g1.length) {
			var slot = _g1[_g];
			++_g;
			if(slot.sid == sid) {
				return slot.url;
			}
		}
		return null;
	}
	,drawSlotIcons: function(slots) {
		var _gthis = this;
		var csi = 0;
		var count = (this.maxPage + 1) * 8;
		var particle = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/icons/particle.png",false),12,2,167,152);
		particle.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13],true,15));
		particle.addBehavior(new spritesheet_data_BehaviorData("stop",[14],false,1));
		particle.fillBitmaps();
		var mboxE = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/icons/mysterybox_1_e.png",false),10,1,59,59);
		mboxE.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,0],false,15));
		mboxE.addBehavior(new spritesheet_data_BehaviorData("stop",[0],false,1));
		mboxE.fillBitmaps();
		var _g1 = 0;
		while(_g1 < count) {
			var i = _g1++;
			var xy = { x : this.slotxy[i % 8].x + (i / 8 | 0) * 656, y : this.slotxy[i % 8].y};
			this.slotPos.push(xy);
			if(i < slots.length) {
				var sid = slots[i].sid;
				var levcompare = slots[i].lev > this.udt.lev;
				var levcap = Std.parseInt(slots[i].lev);
				var lock = Std.parseInt(slots[i].lock);
				var mbox = 0;
				if(slots[i].mbox != null) {
					mbox = Std.parseInt(slots[i].mbox);
				}
				var type = slots[i].type;
				var slot = [new com_redpeakgames_cloud9_SlotButton(sid,"mouse_click",particle,mboxE,slots[i].jp,levcompare,levcap,lock,mbox,type)];
				slot[0].set_name(slots[i].url);
				slot[0].set_x(xy.x);
				slot[0].set_y(xy.y);
				var tmp = (function(slot1) {
					return function(e) {
						_gthis.slotType = slot1[0].type;
						_gthis.onSlotSelected(slot1[0]);
					};
				})(slot);
				slot[0].set_onClick(tmp);
				var tmp1 = (function() {
					return function(e1) {
						if(!com_redpeakgames_cloud9_Global.mute) {
							_gthis.seManager.play("mouse_over",0,0);
						}
					};
				})();
				slot[0].set_onOver(tmp1);
				var tmp2 = slot[0];
				this.get_canvas().addChild(tmp2);
				this.buttons.push(slot[0]);
				var emptySlot = new com_redpeakgames_cloud9_SlotButton(sid,"mouse_click",null,null,slots[i].jp,levcompare,levcap,lock,mbox,type);
				emptySlot.set_x(xy.x);
				emptySlot.set_y(xy.y);
				emptySlot.buttonMode = false;
				this.empty.addChild(emptySlot);
				this.emptyBtns.push(emptySlot);
				if(sid == this.ngid) {
					this.ngUrl = slots[i].url;
				}
			} else {
				var notyet = new openfl_display_Sprite();
				var emNotyet = new openfl_display_Sprite();
				switch(csi) {
				case 0:
					this.makeCommingsoonImg(notyet,emNotyet,"img/icons/tikis_00099.png");
					this.makeCommingsoonImg(notyet,emNotyet,"img/icons/comming_soon.png");
					++csi;
					break;
				case 1:
					this.makeCommingsoonImg(notyet,emNotyet,"img/icons/stampede_00099.png");
					this.makeCommingsoonImg(notyet,emNotyet,"img/icons/comming_soon.png");
					++csi;
					break;
				case 2:
					this.makeCommingsoonImg(notyet,emNotyet,"img/icons/Egypt_00099.png");
					this.makeCommingsoonImg(notyet,emNotyet,"img/icons/comming_soon.png");
					++csi;
					break;
				case 3:
					this.makeCommingsoonImg(notyet,emNotyet,"img/icons/Mask_00099.png");
					this.makeCommingsoonImg(notyet,emNotyet,"img/icons/comming_soon.png");
					++csi;
					break;
				default:
					this.makeCommingsoonImg(notyet,emNotyet,"img/icons/notyet.png");
				}
				notyet.set_x(xy.x);
				notyet.set_y(xy.y);
				notyet.set_name("notyet");
				emNotyet.set_name("notyet");
				this.get_canvas().addChild(notyet);
				this.empty.addChild(emNotyet);
			}
		}
		var _g11 = 0;
		var _g = this.empty.get_numChildren();
		while(_g11 < _g) this.empty.getChildAt(_g11++).set_visible(false);
	}
	,makeCommingsoonImg: function(spriteA,spriteB,path) {
		spriteA.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData(path)));
		spriteB.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData(path)));
	}
	,setSlotType: function(type) {
		this.slotType = type;
	}
	,reposSlotIcons: function(type) {
		var _this = this.category;
		var curCategory = __map_reserved[type] != null?_this.getReserved(type):_this.h[type];
		var count = (this.maxPage + 1) * 8;
		var startIdx = count - 8;
		var _g1 = 0;
		var _g = curCategory.length;
		while(_g1 < _g) {
			var i = _g1++;
			var icon = this.getSlotIcon(curCategory[i].sid + curCategory[i].type);
			if(icon != null) {
				icon.set_x(this.slotPos[i].x);
				icon.set_y(this.slotPos[i].y);
				icon.replaceFlag(curCategory[i].flag == "new",curCategory[i].flag == "hot",curCategory[i].flag == "up",curCategory[i].flag == "mega");
			}
		}
		var _g11 = 0;
		while(_g11 < count) {
			var i1 = _g11++;
			if(i1 < 8) {
				var icon1 = this.getEmptySlotIcon(curCategory[i1].sid + curCategory[i1].type);
				if(icon1 != null) {
					icon1.set_x(this.slotPos[i1].x + 656 * (this.maxPage + 1));
					icon1.set_y(this.slotPos[i1].y);
					icon1.replaceFlag(curCategory[i1].flag == "new",curCategory[i1].flag == "hot",curCategory[i1].flag == "up",curCategory[i1].flag == "mega");
				}
			} else if(startIdx - 1 <= i1) {
				if(i1 < curCategory.length) {
					var icon2 = this.getEmptySlotIcon(curCategory[i1].sid + curCategory[i1].type);
					if(icon2 != null) {
						icon2.set_x(this.slotPos[i1].x - 656 * (this.maxPage + 1));
						icon2.set_y(this.slotPos[i1].y);
						icon2.replaceFlag(curCategory[i1].flag == "new",curCategory[i1].flag == "hot",curCategory[i1].flag == "up",curCategory[i1].flag == "mega");
					}
				} else {
					try {
						if(this.empty.getChildAt(i1).get_name() == "notyet") {
							var notyet = this.empty.getChildAt(i1);
							notyet.set_visible(true);
							notyet.set_x(this.slotxy[i1 % 8].x + (i1 / 8 | 0) * 656 - 656 * (this.maxPage + 1));
							notyet.set_y(this.slotxy[i1 % 8].y - 9);
						}
					} catch( err ) {
						haxe_CallStack.lastException = err;
						if (err instanceof js__$Boot_HaxeError) err = err.val;
						haxe_Log.trace(err,{ fileName : "Lobby.hx", lineNumber : 1251, className : "com.redpeakgames.cloud9.Lobby", methodName : "reposSlotIcons"});
					}
				}
			} else {
				var icon3 = this.getEmptySlotIcon(curCategory[i1].sid + curCategory[i1].type);
				if(icon3 != null) {
					icon3.set_x(9999);
					icon3.set_y(9999);
				}
			}
		}
	}
	,getEmptySlotIcon: function(name) {
		var _g1 = 0;
		var _g = this.empty.get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			if(this.empty.getChildAt(i).get_name() != "notyet") {
				var icon = this.empty.getChildAt(i);
				if((icon.sid == null?"null":"" + icon.sid) + icon.type == name) {
					icon.set_visible(true);
					return icon;
				}
			}
		}
		return null;
	}
	,getSlotIcon: function(name) {
		var _g1 = 0;
		var _g = this.get_canvas().get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			if(this.get_canvas().getChildAt(i).get_name() != "notyet") {
				var icon = this.get_canvas().getChildAt(i);
				if((icon.sid == null?"null":"" + icon.sid) + icon.type == name) {
					return icon;
				}
			}
		}
		return null;
	}
	,getSlotIconByName: function(name) {
		var _g1 = 0;
		var _g = this.get_canvas().get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			if(this.get_canvas().getChildAt(i).get_name() != "notyet") {
				var icon = this.get_canvas().getChildAt(i);
				if(icon.get_name() == name) {
					return icon;
				}
			}
		}
		return null;
	}
	,drawSpotIndicator: function() {
		if(this.spot != null) {
			this.outer.removeChild(this.spot);
			this.spot = null;
		}
		this.spot = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lightball_d.png"));
		this.spot.set_x(this.spotxy[this.page].x);
		this.spot.set_y(this.spotxy[this.page].y);
		this.outer.addChild(this.spot);
	}
	,drawBannerDotIndicator: function(index) {
		if(index == null) {
			index = 0;
		}
		if(this.bannerDot != null) {
			this.outer.removeChild(this.bannerDot);
			this.bannerDot = null;
		}
		this.bannerDot = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/banner_dot_d.png"));
		this.bannerDot.set_x(this.bannerxy[index].x);
		this.bannerDot.set_y(this.bannerxy[index].y);
		this.outer.addChild(this.bannerDot);
	}
	,resize: function(width_a) {
		if(width_a > 760) {
			this.outer.set_x(-((1920 - width_a) / 2));
		} else {
			this.outer.set_x(-580.);
		}
	}
	,setTimeFormat: function(start,now) {
		var ret = "";
		var value = start - (now / 1000 | 0);
		if(value < 0) {
			return "00:00:00";
		}
		var hours = value / 3600 | 0;
		ret = "" + (hours < 10?"0" + hours:"" + hours);
		var mins = value % 3600 / 60 | 0;
		ret += mins < 10?":0" + mins:":" + mins;
		var secs = value % 60;
		ret += secs < 10?":0" + secs:":" + secs;
		return ret;
	}
	,playBgm: function() {
		this.seManager.play("lobby_bgm_01",99999,0);
	}
	,stopBgm: function() {
		this.seManager.stop("lobby_bgm_01");
	}
	,sound: function(value) {
		this.seManager.set_off(value);
		if(value) {
			this.stopBgm();
		} else if(com_redpeakgames_cloud9_Global.muteBgm == false) {
			this.playBgm();
		}
	}
	,onMuteBgm: function(mute) {
		if(mute) {
			this.stopBgm();
		} else if(com_redpeakgames_cloud9_Global.mute == false && com_redpeakgames_cloud9_Global.muteBgm == false) {
			this.playBgm();
		}
	}
	,onLoadData: function(e) {
		var loader = e.target;
		this.placeSlots(loader.data);
		this.callTopMenuMethod("gotoSlotList",[loader.data]);
	}
	,onLoadError: function(e) {
		haxe_Log.trace("Lobby.onLoadError: " + Std.string(e),{ fileName : "Lobby.hx", lineNumber : 1420, className : "com.redpeakgames.cloud9.Lobby", methodName : "onLoadError"});
	}
	,onRecvJps: function(e) {
		var tmp;
		if(this.parent != null) {
			var o = this.parent;
			var tmp1;
			var tmp2;
			if(o == null) {
				tmp2 = null;
			} else {
				var tmp3;
				if(o.__properties__) {
					tmp1 = o.__properties__["get_" + "isLobby"];
					tmp3 = tmp1;
				} else {
					tmp3 = false;
				}
				if(tmp3) {
					tmp2 = o[tmp1]();
				} else {
					tmp2 = o.isLobby;
				}
			}
			tmp = tmp2 == false;
		} else {
			tmp = true;
		}
		if(tmp) {
			if(this.getJpsTimer != null) {
				this.getJpsTimer.stop();
			}
			return;
		}
		var loader = e.target;
		var res = JSON.parse(loader.data).res;
		if(res != null && res == 10001) {
			this.dispatchEvent(new openfl_events_DataEvent("ge.net.error",true,false,JSON.stringify({ x : 560, y : 235, type : "multiple"})));
			if(this.getJpsTimer != null) {
				this.getJpsTimer.stop();
			}
			return;
		}
		this.updateJpCounter(loader.data);
		this.startJpsTimer();
	}
	,onRecvList: function(e) {
		this.giftNumberList = [];
		var loader = e.target;
		haxe_Log.trace(loader.data,{ fileName : "Lobby.hx", lineNumber : 1449, className : "com.redpeakgames.cloud9.Lobby", methodName : "onRecvList"});
		var data = JSON.parse(loader.data);
		this.giftNumberList = data.data;
		if(this.udt.gift != 0) {
			this.makeGiftAlarm(1305,737);
		}
	}
	,startJpsTimer: function() {
		var _gthis = this;
		if(this.getJpsTimer != null) {
			this.getJpsTimer.stop();
		}
		this.getJpsTimer = haxe_Timer.delay(function() {
			_gthis.getJps();
		},3000);
	}
	,updateJpCounter: function(data) {
		if(JSON.parse(data).jackpot == null) {
			haxe_Log.trace("get.jps.php(jp) : null received",{ fileName : "Lobby.hx", lineNumber : 1468, className : "com.redpeakgames.cloud9.Lobby", methodName : "updateJpCounter"});
			return;
		}
		var json = JSON.parse(data).jackpot;
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.hasJpCounter()) {
				var _g2 = 0;
				while(_g2 < json.length) {
					var jp = json[_g2];
					++_g2;
					if(jp.sid == b.sid) {
						b.jpCounter(haxe_Int64Helper.parseString(jp.prize),this.getJpsTimer == null?2990:92990);
					}
				}
			}
		}
		var _g3 = 0;
		var _g11 = this.emptyBtns;
		while(_g3 < _g11.length) {
			var e = _g11[_g3];
			++_g3;
			if(e.hasJpCounter()) {
				var _g21 = 0;
				while(_g21 < json.length) {
					var jp1 = json[_g21];
					++_g21;
					if(jp1.sid == e.sid) {
						e.jpCounter(haxe_Int64Helper.parseString(jp1.prize),this.getJpsTimer == null?2990:92990);
					}
				}
			}
		}
	}
	,onSlotSelected: function(target) {
		this.isTournament = false;
		if(!com_redpeakgames_cloud9_Global.mute) {
			this.seManager.stop("lobby_bgm_01");
		}
		this.udt.played = target.sid;
		this.dispatchEvent(new openfl_events_DataEvent("ge.selected.slot",true,false));
		com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"loadSlot",[target.get_name()]);
		this.clearLastPlayed();
	}
	,clearLastPlayed: function() {
		if(this.lastPlayed != null) {
			this.outer.removeChild(this.lastPlayed);
			this.lastPlayed = null;
		}
	}
	,onGameloop: function(e) {
		var _gthis = this;
		var cur = openfl_Lib.getTimer();
		if(this.buttons != null) {
			var _g = 0;
			var _g1 = this.buttons;
			while(_g < _g1.length) {
				var btn = _g1[_g];
				++_g;
				btn.update(cur - this.lastTick);
			}
		}
		if(this.emptyBtns != null) {
			var _g2 = 0;
			var _g11 = this.emptyBtns;
			while(_g2 < _g11.length) {
				var ebtn = _g11[_g2];
				++_g2;
				ebtn.update(cur - this.lastTick);
			}
		}
		this.onGameLoop_wheel(cur);
		this.onGameLoop_miniSlot(cur);
		var rbi = (cur / 600 | 0) % 2;
		if(rbi != (this.lastTick / 600 | 0) % 2) {
			var cur1 = 0;
			var prev = 1;
			if(rbi == 1) {
				cur1 = 1;
				prev = 0;
			}
			if(this.rmembersLightOn) {
				this.rmembersLight[cur1].set_alpha(0);
				this.rmembersLight[cur1].set_visible(true);
				motion_Actuate.tween(this.rmembersLight[cur1],0.2,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
				motion_Actuate.tween(this.rmembersLight[prev],0.2,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
					_gthis.rmembersLight[prev].set_visible(false);
				});
			}
		}
		var bi = (cur / 1500 | 0) % 2;
		var prevBi = (this.lastTick / 1500 | 0) % 2;
		this.resetBanner += cur - this.lastTick;
		if(bi != prevBi) {
			if(bi == 1 && this.resetBanner >= 1500) {
				this.prevBanner = this.curBanner;
				if(this.curBanner < 3) {
					this.curBanner += 1;
				} else {
					this.curBanner = 0;
				}
				this.drawBannerDotIndicator(this.curBanner);
				this.banners[this.curBanner].set_work(true);
				this.banners[this.curBanner].set_alpha(0);
				this.banners[this.curBanner].set_visible(true);
				motion_Actuate.tween(this.banners[this.curBanner],0.6,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
				this.banners[this.prevBanner].set_work(false);
				motion_Actuate.tween(this.banners[this.prevBanner],0.6,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
					_gthis.banners[_gthis.prevBanner].set_visible(false);
				});
			}
		}
		var _g3 = 0;
		var _g12 = this.animations;
		while(_g3 < _g12.length) {
			var ani = _g12[_g3];
			++_g3;
			ani.update(cur - this.lastTick);
		}
		this.lastTick = cur;
	}
	,onGameLoop_wheel: function(cur) {
		var txWheel = this.outer.getChildByName("tx.daily.wheel");
		txWheel.set_text(this.setTimeFormat(this.udt.wheel,cur));
		var btn = this.outer.getChildByName("btn.daily.wheel");
		var img = this.outer.getChildByName("img.daily.wheel");
		if(txWheel.get_text() == "00:00:00") {
			img.set_visible(true);
			this.wheelIdx = 0;
			btn.set_onClick($bind(this,this.onClickDailyWheel));
		} else {
			img.set_visible(false);
			this.wheelIdx = 2;
			btn.set_onClick($bind(this,this.onClickDiaWheel));
		}
	}
	,onGameLoop_miniSlot: function(cur) {
		var txSpin = this.outer.getChildByName("tx.spin");
		txSpin.set_text(this.setTimeFormat(this.udt.spin,cur));
		this.outer.getChildByName("btn.spin");
		var img = this.outer.getChildByName("img.spin");
		if(txSpin.get_text() == "00:00:00") {
			img.set_visible(true);
		} else {
			img.set_visible(false);
		}
	}
	,callTopMenuMethod: function(methodName,args) {
		return com_redpeakgames_cloud9_utils_DynamicCall.method(Reflect.field(this.parent,"topMenu"),methodName,args);
	}
	,onSendGift: function(event) {
		this.callTopMenuMethod("addScreen",[]);
		this.callTopMenuMethod("addChild",[new com_redpeakgames_cloud9_dialog_Gift(js_Boot.__cast(Reflect.field(event.target,"name") , String) == "btn.collect"?"collect":"send",this.friends.get_inAppFriends(),this.udt)]);
		this.friends.refreshProfile();
	}
	,onInviteFriend: function(event) {
		try {
			openfl_external_ExternalInterface.call("sendInvites",null,null);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
				haxe_Log.trace(e.toString(),{ fileName : "Lobby.hx", lineNumber : 1704, className : "com.redpeakgames.cloud9.Lobby", methodName : "onInviteFriend"});
			} else throw(e);
		}
	}
	,onLeaderb: function(me) {
		if(this.parent != null) {
			this.callTopMenuMethod("openLeaderb",[]);
		}
	}
	,openCoinShop: function(e) {
		if(this.parent != null) {
			this.callTopMenuMethod("openBuyCoins",[""]);
		}
	}
	,openRewardPopup: function(e) {
		this.dispatchEvent(new openfl_events_DataEvent("ge.open.reward.popup",true,false));
	}
	,openTournament: function(e) {
		if(this.parent != null) {
			this.callTopMenuMethod("openTournament",[this.lobbyJson]);
		}
	}
	,onClickStamp: function(e) {
		new haxe__$Int64__$_$_$Int64(0,0);
		if(this.parent != null) {
			this.callTopMenuMethod("openBonusStreak",[this.udt.serial,false]);
		}
	}
	,onClickDailyWheel: function(e) {
		this.callTopMenuMethod("openDailyWheel",[this.friends.get_inAppFriends().length]);
	}
	,onClickDiaWheel: function(e) {
		this.callTopMenuMethod("openDiaWheel",[this.friends.get_inAppFriends().length]);
	}
	,onClickLucky: function(e) {
		this.callTopMenuMethod("addScreen",[]);
		var lucky = new com_redpeakgames_cloud9_dialog_Minislot(this.udt,this.megaSpinCount);
		lucky.set_x(684);
		lucky.set_y(177);
		lucky.start($bind(lucky,lucky.onIoComplete),$bind(lucky,lucky.onIoError));
		if(!com_redpeakgames_cloud9_Global.mute) {
			this.seManager.play("luckybonus_popup",0,0);
		}
		this.callTopMenuMethod("addChild",[lucky]);
	}
	,onAddedToStage: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.onAddedToStage));
	}
	,onClickFanpage: function(e) {
		openfl_Lib.getURL(new openfl_net_URLRequest("https://www.facebook.com/hitthefive/"),"_blank");
	}
	,onClickNGB: function(e) {
		if(!com_redpeakgames_cloud9_Global.mute) {
			this.seManager.stop("lobby_bgm_01");
		}
		this.udt.played = this.ngid;
		this.dispatchEvent(new openfl_events_DataEvent("ge.selected.slot",true,false));
		if(this.ngUrl != "") {
			com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"loadSlot",[this.ngUrl]);
		}
		this.clearLastPlayed();
	}
	,get_canvas: function() {
		return this.canvas;
	}
	,setStatus: function(lev,exp) {
		this.udt.lev = lev;
		this.udt.exp = new haxe__$Int64__$_$_$Int64(exp >> 31,exp);
	}
	,sentGift: function(to) {
		var toList = new EReg("[,]+","g").split(to);
		var _g = 0;
		while(_g < toList.length) {
			var id = toList[_g];
			++_g;
			var _g1 = 0;
			var _g2 = this.friends.get_inAppFriends();
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				if(id == f.id) {
					f.enable = 0;
				}
			}
		}
		this.friends.refreshProfile();
		try {
			this.callTopMenuMethod("giftPlaceProfile",[this.friends.get_inAppFriends()]);
		} catch( err ) {
			haxe_CallStack.lastException = err;
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace("sentGift : " + Std.string(err),{ fileName : "Lobby.hx", lineNumber : 1819, className : "com.redpeakgames.cloud9.Lobby", methodName : "sentGift"});
		}
	}
	,getJps: function() {
		var data = new openfl_net_URLVariables();
		data.uid = this.udt.uid;
		data.sig = this.udt.sig;
		data.p = "jp";
		this.httpJp.request(data);
	}
	,addMegaSpinCount: function() {
		this.megaSpinCount += 1;
		if(this.megaSpinCount > 6) {
			this.megaSpinCount = 1;
		}
	}
	,makeBottomBlank: function() {
		var _gthis = this;
		this.blank = new openfl_display_Sprite();
		this.outer.addChild(this.blank);
		this.blank.addChild(this.makeInvisibleShape(0,862,1920,220,0,1));
		var formats = [];
		var stepTexts = [];
		var textTable = ["Fan Page","Terms of Service","Privacy Policy","Help Center"];
		var oxTable = [0,90,232,355];
		var sxTable = [0,144,266];
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var format = new openfl_text_TextFormat("verdana",13,10461087);
			format.bold = true;
			formats.push(format);
			var stepText = com_redpeakgames_cloud9_ui_TxField.make(740 + oxTable[i],880,200,format,null,false);
			stepText.set_text(textTable[i]);
			this.blank.addChild(stepText);
			stepTexts.push(stepText);
			var slash = com_redpeakgames_cloud9_ui_TxField.make(815 + sxTable[i],880,200,format,null,false);
			slash.set_text("|");
			this.blank.addChild(slash);
		}
		var replaceTextData = function(sprite,index) {
			sprite.addEventListener("mouseOver",function(e) {
				formats[index].underline = true;
				if(stepTexts[index] != null) {
					_gthis.blank.removeChild(stepTexts[index]);
					stepTexts[index] = com_redpeakgames_cloud9_ui_TxField.make(740 + oxTable[index],880,200,formats[index],null,false);
					stepTexts[index].set_text(textTable[index]);
					_gthis.blank.addChild(stepTexts[index]);
				}
			});
			sprite.addEventListener("mouseOut",function(e1) {
				formats[index].underline = false;
				if(stepTexts[index] != null) {
					_gthis.blank.removeChild(stepTexts[index]);
					stepTexts[index] = com_redpeakgames_cloud9_ui_TxField.make(740 + oxTable[index],880,200,formats[index],null,false);
					stepTexts[index].set_text(textTable[index]);
					_gthis.blank.addChild(stepTexts[index]);
				}
			});
		};
		var fp = new openfl_display_Sprite();
		fp.buttonMode = true;
		fp.addChild(this.makeInvisibleShape(741,878,70,20));
		fp.addEventListener("mouseDown",function(e2) {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("mouse_click_c",0,0);
			}
			openfl_Lib.getURL(new openfl_net_URLRequest("https://www.facebook.com/hitthefive/"),"_blank");
		});
		replaceTextData(fp,0);
		this.blank.addChild(fp);
		var tos = new openfl_display_Sprite();
		tos.buttonMode = true;
		tos.addChild(this.makeInvisibleShape(832,878,122,20));
		tos.addEventListener("mouseDown",function(e3) {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("mouse_click_c",0,0);
			}
			openfl_Lib.getURL(new openfl_net_URLRequest("http://www.redpeakgames.com/terms-of-service/"),"_blank");
		});
		replaceTextData(tos,1);
		this.blank.addChild(tos);
		var pp = new openfl_display_Sprite();
		pp.buttonMode = true;
		pp.addChild(this.makeInvisibleShape(977,878,103,20));
		pp.addEventListener("mouseDown",function(e4) {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("mouse_click_c",0,0);
			}
			openfl_Lib.getURL(new openfl_net_URLRequest("http://www.redpeakgames.com/privacy-policy/"),"_blank");
		});
		replaceTextData(pp,2);
		this.blank.addChild(pp);
		var hc = new openfl_display_Sprite();
		hc.buttonMode = true;
		hc.addChild(this.makeInvisibleShape(1102,878,89,20));
		hc.addEventListener("mouseDown",function(e5) {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("mouse_click_c",0,0);
			}
			openfl_Lib.getURL(new openfl_net_URLRequest("https://www.redpeakgames.com/faq"),"_blank");
		});
		replaceTextData(hc,3);
		this.blank.addChild(hc);
	}
	,onFullScreen: function(e) {
		if(e.fullScreen) {
			this.diaWheelSprite.set_y(-70);
			this.blank.set_visible(false);
		} else {
			this.diaWheelSprite.set_y(0);
			this.blank.set_visible(true);
		}
	}
	,makeInvisibleShape: function(x,y,width,height,color,alpha) {
		if(alpha == null) {
			alpha = 0;
		}
		if(color == null) {
			color = 0;
		}
		var shape = new openfl_display_Shape();
		shape.get_graphics().beginFill(color,alpha);
		shape.get_graphics().drawRect(x,y,width,height);
		shape.get_graphics().endFill();
		return shape;
	}
	,onRMembership: function() {
		this.callTopMenuMethod("openRMembers",[]);
	}
	,rewardCountChange: function(num) {
		this.rewardCount.set_num(num);
	}
	,openLuckySpin: function() {
		this.onClickLucky(null);
	}
	,makeGiftAlarm: function(ox,oy) {
		var giftNumber = new com_redpeakgames_cloud9_ui_NumberNotification(this.giftNumberList != null?this.giftNumberList.length:0,ox,oy);
		giftNumber.set_name("giftNumber");
		this.outer.addChild(giftNumber);
	}
	,changeGiftNumber: function(num) {
		var giftNumber = this.outer.getChildByName("giftNumber");
		if(giftNumber != null) {
			giftNumber.set_num(num);
			this.udt.gift = num;
		}
	}
	,removeBg: function() {
		this.outer.removeChild(this.outer.getChildByName("outer.bg"));
	}
	,makeHalloweenBackground: function() {
		var witch = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/halloween/halloween_witch.png",true,1478,161);
		this.outer.addChild(witch);
		motion_Actuate.tween(witch,1.333,{ y : witch.get_y() - 20}).ease(motion_easing_Quad.get_easeInOut()).reflect().repeat();
		var makeSkull = function(x,y,isSmall) {
			var ret = new openfl_display_Sprite();
			var skull = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/halloween/halloween_skull_" + (isSmall?2:1) + ".png",true,0,0,1,true);
			var ox = skull.bitmapData.width / 2;
			var oy = skull.bitmapData.height / 2;
			skull.set_x(ox * -1);
			skull.set_y(oy * -1);
			ret.set_x(x + ox);
			ret.set_y(y + oy);
			ret.addChild(skull);
			return ret;
		};
		var skull1 = makeSkull(33,116,true);
		var skull2 = makeSkull(282,91,true);
		var skull3 = makeSkull(334,41,false);
		this.outer.addChild(skull1);
		this.outer.addChild(skull2);
		this.outer.addChild(skull3);
		skull1.set_rotation(-3);
		motion_Actuate.tween(skull1,0.5,{ rotation : 13}).ease(motion_easing_Quad.get_easeInOut()).onComplete(function() {
			motion_Actuate.tween(skull1,0.85,{ rotation : -13}).reflect().repeat().ease(motion_easing_Quad.get_easeInOut());
		});
		motion_Actuate.tween(skull2,0.4,{ rotation : 15}).ease(motion_easing_Quad.get_easeInOut()).onComplete(function() {
			motion_Actuate.tween(skull2,0.8,{ rotation : -15}).reflect().repeat().ease(motion_easing_Quad.get_easeInOut());
		});
		motion_Actuate.tween(skull3,0.666,{ rotation : 20}).ease(motion_easing_Quad.get_easeInOut()).onComplete(function() {
			motion_Actuate.tween(skull3,1.333,{ rotation : -20}).reflect().repeat().ease(motion_easing_Quad.get_easeInOut());
		});
		var oyBelowLayer = 218;
		var belowLayer = new openfl_display_Sprite();
		this.outer.addChild(belowLayer);
		var pumpkinLeft = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/halloween/halloween_pumpkin_b_2.png",true,327,697);
		var pumpkinRight = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/halloween/halloween_pumpkin_a_2.png",true,1345,668);
		belowLayer.addChild(pumpkinLeft);
		belowLayer.addChild(pumpkinRight);
		var lightPumpkinLeft = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/halloween/halloween_pumpkin_b_1.png",true,pumpkinLeft.get_x(),pumpkinLeft.get_y(),0);
		var lightPumpkinRight = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/halloween/halloween_pumpkin_a_1.png",true,pumpkinRight.get_x(),pumpkinRight.get_y(),0);
		belowLayer.addChild(lightPumpkinLeft);
		belowLayer.addChild(lightPumpkinRight);
		var lightSync = function() {
			lightPumpkinRight.set_alpha(lightPumpkinLeft.get_alpha());
		};
		var lightTimer = new haxe_Timer(5000);
		lightTimer.run = function() {
			motion_Actuate.tween(lightPumpkinLeft,0.066,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat(5).onComplete(function() {
				motion_Actuate.tween(lightPumpkinLeft,0.533,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
					motion_Actuate.tween(lightPumpkinLeft,0.533,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).delay(1).onUpdate(lightSync);
				}).onUpdate(lightSync);
			}).onUpdate(lightSync);
		};
		lightTimer.run();
		var bmdCemetery = openfl_Assets.getBitmapData("img/halloween/lobby_cemetry.png");
		var cemetery1 = com_redpeakgames_cloud9_utils_BitmapMaker.byData(bmdCemetery,826,780);
		cemetery1.set_scaleX(-1);
		var cemetery2 = com_redpeakgames_cloud9_utils_BitmapMaker.byData(bmdCemetery,1094,780);
		belowLayer.addChild(cemetery1);
		belowLayer.addChild(cemetery2);
		openfl_Lib.current.stage.addEventListener("fullScreen",function(e) {
			if(e.fullScreen) {
				belowLayer.set_y(oyBelowLayer);
			} else {
				belowLayer.set_y(0);
			}
		});
	}
	,__class__: com_redpeakgames_cloud9_Lobby
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_canvas:"get_canvas"})
});
var com_redpeakgames_cloud9_SlotButton = function(sid,spath,particle,mboxE,jp,compare,cap,lock,mbox,type) {
	if(mbox == null) {
		mbox = 0;
	}
	if(lock == null) {
		lock = 0;
	}
	if(cap == null) {
		cap = 0;
	}
	if(compare == null) {
		compare = false;
	}
	if(jp == null) {
		jp = false;
	}
	openfl_display_Sprite.call(this);
	this.buttonMode = true;
	this.jp = jp;
	this.active = true;
	this.sid = sid;
	this.lock = lock;
	this.slev = cap;
	this.mbox = mbox;
	this.type = type;
	this.icon = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/icons/" + sid + type + ".png");
	if(this.icon != null) {
		this.addChild(this.icon);
	}
	if(particle != null) {
		this.part = new spritesheet_AnimatedSprite(particle);
		this.addChild(this.part);
	}
	if(mbox != 0) {
		this.makeMysteryBox(mbox,mboxE);
	}
	this.canvas = new openfl_display_Sprite();
	this.canvas.set_scrollRect(new openfl_geom_Rectangle(0,0,135,161));
	this.canvas.set_x(34);
	this.canvas.set_y(119 + this.offsetBigY);
	this.addChild(this.canvas);
	this.flagLayer = new openfl_display_Sprite();
	this.addChild(this.flagLayer);
	this.reset();
	if(spath != null && spath.length != 0) {
		this.clickSound = com_redpeakgames_cloud9_utils_CSound.get(spath + "_c");
		this.overSound = com_redpeakgames_cloud9_utils_CSound.get(spath + "_r");
	}
	if(jp) {
		this.addImage("img/icons/jackpot.png",32,5);
		this.counter = new com_redpeakgames_cloud9_ui_NumberText(com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",11,16777215,0.5),null,97,0,0,null);
		this.counter.set_x(48);
		this.counter.set_y(20);
		this.counter.minStep = 0.01;
		this.addChild(this.counter);
		this.counter.draw(new haxe__$Int64__$_$_$Int64(0,0));
	}
	this.set_work(compare?false:true);
	this.spop = compare;
	if(this.slev != 0) {
		var format = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",14,16777215);
		format.align = 0;
		if(lock == 4) {
			this.lockTagBack = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lock/lock_open_to_all.png"));
			this.lockTagBack.set_x(-121);
			this.lockTagBack.set_y(0);
			this.set_work(true);
			this.canvas.addChild(this.lockTagBack);
		} else if(!(lock == 2 || lock == 3 || !compare)) {
			this.lockTagBack = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lock/lock_from_level.png"));
			this.lockTagBack.set_x(-121);
			this.lockTagBack.set_y(0);
			this.canvas.addChild(this.lockTagBack);
			this.slevText = com_redpeakgames_cloud9_ui_TxField.make(-121,4,100,format,null,true);
			this.slevText.set_text("Level " + this.slev);
			this.canvas.addChild(this.slevText);
		}
		if(lock == 4) {
			this.lockImg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lock/lock_2.png"));
		} else if(!compare) {
			this.lockImg = null;
		} else {
			this.lockImg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lock/lock_" + lock + ".png"));
		}
		if(this.lockImg != null) {
			this.lockImg.set_x(13);
			this.lockImg.set_y(99 + this.offsetBigY);
			this.lockImg.set_name("lock_" + lock);
			this.addChild(this.lockImg);
		}
	}
	this.addEventListener("mouseOver",$bind(this,this.onMouseOver));
	this.addEventListener("mouseOut",$bind(this,this.onMouseOut));
	this.addEventListener("click",$bind(this,this.onMouseClick));
};
$hxClasses["com.redpeakgames.cloud9.SlotButton"] = com_redpeakgames_cloud9_SlotButton;
com_redpeakgames_cloud9_SlotButton.__name__ = ["com","redpeakgames","cloud9","SlotButton"];
com_redpeakgames_cloud9_SlotButton.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_SlotButton.prototype = $extend(openfl_display_Sprite.prototype,{
	sid: null
	,slev: null
	,spop: null
	,type: null
	,jp: null
	,active: null
	,canvas: null
	,flagLayer: null
	,slevText: null
	,clickMethod: null
	,overMethod: null
	,clickSound: null
	,overSound: null
	,counter: null
	,offsetBigY: null
	,icon: null
	,part: null
	,mysteryBoxAni: null
	,lockTagBack: null
	,lockImg: null
	,lock: null
	,lastTick: null
	,animations: null
	,mbox: null
	,work: null
	,onClick: null
	,onOver: null
	,makeMysteryBox: function(value,mboxE) {
		var _gthis = this;
		this.mysteryBoxAni = new spritesheet_AnimatedSprite(mboxE);
		this.mysteryBoxAni.showBehaviors(["_e","stop","stop","stop","stop","stop"]);
		this.addChild(this.mysteryBoxAni);
		this.mysteryBoxAni.set_x(114);
		this.mysteryBoxAni.set_y(96);
		this.mysteryBoxAni.addEventListener("complete",function(e) {
			_gthis.mysteryBoxAni.showBehaviors(["_e","stop","stop","stop","stop","stop"]);
		});
	}
	,addImage: function(path,x,y,layer) {
		var icon = new openfl_display_Bitmap(openfl_Assets.getBitmapData(path));
		icon.set_name(path);
		icon.set_x(x);
		icon.set_y(y);
		if(layer != null) {
			layer.addChild(icon);
		} else {
			this.addChild(icon);
		}
	}
	,onMouseClick: function(e) {
		var _gthis = this;
		if(this.active) {
			this.active = false;
			this.reset();
			haxe_Timer.delay(function() {
				if(_gthis.clickMethod != null) {
					_gthis.clickMethod(e);
				}
				_gthis.active = true;
			},150);
		}
		if(this.clickSound != null && com_redpeakgames_cloud9_Global.mute == false) {
			this.clickSound.play(0);
		}
	}
	,reset: function() {
		if(this.icon != null) {
			this.icon.set_x(0);
			this.icon.set_y(0);
			this.icon.set_scaleX(1.0);
			this.icon.set_scaleY(1.0);
		}
		if(this.part != null) {
			this.part.set_scaleX(1.0);
			this.part.set_scaleY(1.0);
			this.part.showBehavior("stop");
			this.part.update(0);
		}
	}
	,scaleUp: function() {
		if(this.icon != null) {
			this.icon.set_x(-8);
			this.icon.set_y(-9);
			this.icon.set_scaleX(1.1);
			this.icon.set_scaleY(1.1);
		}
		if(this.part != null) {
			this.part.set_scaleX(1.12);
			this.part.set_scaleY(1.12);
		}
	}
	,onMouseOut: function(e) {
		this.reset();
		if(this.slev != 0) {
			if(this.slevText != null) {
				motion_Actuate.tween(this.slevText,0.5,{ x : -121}).ease(motion_easing_Quad.get_easeOut());
			}
			if(this.lockTagBack != null) {
				motion_Actuate.tween(this.lockTagBack,0.5,{ x : -121}).ease(motion_easing_Quad.get_easeOut());
			}
		}
	}
	,onMouseOver: function(e) {
		if(this.part != null) {
			this.part.showBehavior("_e");
		}
		this.scaleUp();
		if(this.slev != 0) {
			if(this.slevText != null) {
				motion_Actuate.tween(this.slevText,0.5,{ x : 18}).ease(motion_easing_Quad.get_easeOut());
			}
			if(this.lockTagBack != null) {
				motion_Actuate.tween(this.lockTagBack,0.5,{ x : 0}).ease(motion_easing_Quad.get_easeOut());
			}
		}
		if(this.overMethod != null) {
			this.overMethod(e);
		}
		if(this.overSound != null && com_redpeakgames_cloud9_Global.mute == false) {
			this.overSound.play(0);
		}
	}
	,set_work: function(v) {
		this.active = v;
		return this.active;
	}
	,set_onClick: function(method) {
		this.clickMethod = method;
		return this.clickMethod;
	}
	,set_onOver: function(method) {
		this.overMethod = method;
		return this.overMethod;
	}
	,update: function(delta) {
		if(this.part != null) {
			this.part.update(delta);
		}
		if(this.mysteryBoxAni != null) {
			this.mysteryBoxAni.update(delta);
		}
	}
	,jpCounter: function(value,time) {
		if(time == null) {
			time = 2990;
		}
		if(this.counter != null) {
			var a = this.counter.get_value();
			if(a.high != value.high || a.low != value.low) {
				this.counter.draw(value,true,time);
			}
		}
	}
	,hasJpCounter: function() {
		return this.jp;
	}
	,remove: function() {
		if(this.lock != 4) {
			this.canvas.removeChildren();
			if(this.lockImg != null) {
				this.removeChild(this.lockImg);
			}
			if(this.canvas != null) {
				this.removeChild(this.canvas);
			}
		}
	}
	,openKey: function() {
		if(this.lockImg != null) {
			this.removeChild(this.lockImg);
		}
		if(this.lockTagBack != null) {
			this.canvas.removeChild(this.lockTagBack);
		}
		this.lockImg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lock/lock_2.png"));
		this.lockImg.set_x(13);
		this.lockImg.set_y(99);
		this.addChild(this.lockImg);
		this.lockTagBack = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lock/lock_open_to_all.png"));
		this.lockTagBack.set_x(-121);
		this.lockTagBack.set_y(0);
		this.canvas.addChild(this.lockTagBack);
	}
	,replaceFlag: function(ns,hs,us,mg) {
		if(mg == null) {
			mg = false;
		}
		if(us == null) {
			us = false;
		}
		if(hs == null) {
			hs = false;
		}
		if(ns == null) {
			ns = false;
		}
		this.flagLayer.removeChildren();
		if(ns) {
			this.addImage("img/icons/btn_new.png",12,43,this.flagLayer);
		}
		if(hs) {
			this.addImage("img/icons/btn_hot.png",12,43,this.flagLayer);
		}
		if(us) {
			this.addImage("img/icons/btn_update.png",12,43,this.flagLayer);
		}
		if(mg) {
			this.addImage("img/icons/icon_mega_l_1.png",13,40,this.flagLayer);
		}
	}
	,get_mbox: function() {
		return this.mbox;
	}
	,make3HitsIcon: function() {
		this.animations = [];
		var sprite = new openfl_display_Sprite();
		var canvas = new openfl_display_Sprite();
		canvas.set_x(18);
		canvas.set_y(15);
		canvas.mouseChildren = false;
		canvas.mouseEnabled = false;
		canvas.set_cacheAsBitmap(true);
		sprite.addChild(canvas);
		var slotImgs = [];
		slotImgs.push(com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/icons/2010/3hits_machine_a.png"));
		slotImgs.push(com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/icons/2010/3hits_machine_b.png"));
		slotImgs.push(com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/icons/2010/3hits_machine_c.png"));
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/icons/2010/3hit_symbol_spin_e.png",false),11,1,94,44);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10],false,15));
		var symbolAni = new spritesheet_AnimatedSprite(ss,true);
		symbolAni.set_x(27);
		symbolAni.set_y(101);
		symbolAni.showBehavior("_e");
		canvas.addChild(symbolAni);
		this.animations.push(symbolAni);
		ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/icons/2010/theme_machine_neon_e.png",false),3,1,148,300);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1],true,15));
		var neonAni = new spritesheet_AnimatedSprite(ss,true);
		neonAni.set_alpha(0);
		neonAni.showBehavior("_e");
		canvas.addChild(neonAni);
		this.animations.push(neonAni);
		ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/icons/2010/lamp_light_e.png",false),2,1,134,82);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1],true,15));
		var lightAni = new spritesheet_AnimatedSprite(ss,true);
		lightAni.set_x(7);
		lightAni.set_y(-1);
		lightAni.set_alpha(0);
		lightAni.showBehavior("_e");
		canvas.addChild(lightAni);
		this.animations.push(lightAni);
		var nameTable = ["a","b","c"];
		var symbolImg = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/icons/2010/symbol_" + nameTable[0] + ".png",false,27,101);
		symbolImg.set_alpha(0);
		canvas.addChild(symbolImg);
		var btnTable = ["cashout","paytable","minus","maxbet","plus","spin","moreslot"];
		var ox = [17,31,46,59,71,87,105];
		var btnImgs = [];
		var _g1 = 0;
		var _g = btnTable.length;
		while(_g1 < _g) {
			var i = _g1++;
			var btn = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/icons/2010/btn_light_" + btnTable[i] + ".png",false,ox[i],160,0);
			canvas.addChild(btn);
			btnImgs.push(btn);
		}
		var curIdx = 0;
		var tmrSlotChange = new haxe_Timer(5000);
		var prevImg = slotImgs[curIdx];
		canvas.addChildAt(prevImg,0);
		ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/icons/2010/theme_wheel_e.png",false),9,1,40,104);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8],false,15));
		var wheelAni = new spritesheet_AnimatedSprite(ss,true);
		wheelAni.set_x(134);
		wheelAni.set_y(116);
		wheelAni.showBehavior("_e");
		canvas.addChildAt(wheelAni,0);
		this.animations.push(wheelAni);
		symbolAni.addEventListener("complete",function(e) {
			if(symbolImg != null) {
				symbolImg.set_alpha(1);
				symbolImg.set_bitmapData(openfl_Assets.getBitmapData("img/icons/2010/symbol_" + nameTable[curIdx] + ".png"));
			}
			if(symbolAni != null) {
				symbolAni.set_visible(false);
			}
			if(neonAni != null) {
				motion_Actuate.tween(neonAni,1,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone());
			}
			if(lightAni != null) {
				motion_Actuate.tween(lightAni,1,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone());
			}
		});
		tmrSlotChange.run = function() {
			curIdx = (curIdx + 1) % 3;
			if(symbolAni != null) {
				symbolAni.set_visible(true);
				symbolAni.showBehavior("_e");
			}
			if(symbolImg != null) {
				symbolImg.set_alpha(0);
			}
			if(wheelAni != null) {
				wheelAni.showBehavior("_e");
			}
			if(neonAni != null) {
				motion_Actuate.tween(neonAni,0.1,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone());
			}
			if(lightAni != null) {
				motion_Actuate.tween(lightAni,0.1,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone());
			}
			if(btnImgs != null && btnImgs.length > 0) {
				var _g11 = 0;
				var _g2 = btnImgs.length;
				while(_g11 < _g2) {
					var i1 = [_g11++];
					haxe_Timer.delay((function(i2) {
						return function() {
							motion_Actuate.tween(btnImgs[i2[0]],0.2,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone()).reflect().repeat(1);
						};
					})(i1),50 * i1[0]);
					haxe_Timer.delay((function(i3) {
						return function() {
							motion_Actuate.tween(btnImgs[i3[0]],0.1,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone()).reflect().repeat(2).onComplete((function(i4) {
								return function() {
									motion_Actuate.tween(btnImgs[i4[0]],0.3,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone());
								};
							})(i3));
						};
					})(i1),800);
				}
			}
			motion_Actuate.tween(prevImg,0.666,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone());
			var newImg = slotImgs[curIdx];
			newImg.set_alpha(0);
			canvas.addChildAt(newImg,1);
			motion_Actuate.tween(newImg,0.666,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				try {
					canvas.removeChild(prevImg);
					prevImg = newImg;
				} catch( err ) {
					haxe_CallStack.lastException = err;
					if (err instanceof js__$Boot_HaxeError) err = err.val;
					haxe_Log.trace(err,{ fileName : "SlotButton.hx", lineNumber : 495, className : "com.redpeakgames.cloud9.SlotButton", methodName : "make3HitsIcon"});
				}
			});
		};
		var format = com_redpeakgames_cloud9_ui_TxField.format("font/bold_led_board-7.ttf",5,16711935);
		format.align = 4;
		var txtJp = com_redpeakgames_cloud9_ui_TxField.make(56,88,65,format,null,true);
		txtJp.set_text("13,213,851,800");
		canvas.addChild(txtJp);
		return sprite;
	}
	,__class__: com_redpeakgames_cloud9_SlotButton
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_onOver:"set_onOver",set_onClick:"set_onClick",set_work:"set_work",get_mbox:"get_mbox"})
});
var com_redpeakgames_cloud9_TopMenu = function(udt) {
	openfl_display_Sprite.call(this);
	this.inited = false;
	this.getCoinBool = false;
	this.myClassUp = false;
	this.extened = false;
	this.udt = udt;
	this.refreshCount = 0;
	this.lev = udt.lev;
	this.vlev = udt.vlev;
	this.tutorialTrace = new com_redpeakgames_cloud9_utils_Trace();
	this.animations = [];
	this.layerStr = [];
	this.layerStr = ["bronze","silver","gold","emerald","sapphire","ruby","diamond"];
	this.isDoubleUp = false;
	com_redpeakgames_cloud9_TopMenu.coinAdjust = new List();
	com_redpeakgames_cloud9_TopMenu.diaAdjust = new List();
	this.overlappedPopupCounter = 0;
	this.voucherSlotList = [1001,2002,1030,1012,2001,1010];
	this.set_dataConditionalDeal(JSON.stringify({ day : { id : 1, status : "offer", collect : []}, lev : { id : 1, status : "offer", collect : []}}));
	this.dataConditionalRefreshed = false;
	this.forceCondiDataReq = false;
	this.seManager = new com_redpeakgames_cloud9_utils_SeManager(com_redpeakgames_cloud9_Global.mute);
	this.sales = new com_redpeakgames_cloud9_dialog_SalesAsset();
	this.load(openfl_Assets.getText("data/sales.json"));
	this.isHitTheFive = false;
	this.backToFirstLobby = false;
	this.addEventListener("addedToStage",$bind(this,this.onAddedStage));
};
$hxClasses["com.redpeakgames.cloud9.TopMenu"] = com_redpeakgames_cloud9_TopMenu;
com_redpeakgames_cloud9_TopMenu.__name__ = ["com","redpeakgames","cloud9","TopMenu"];
com_redpeakgames_cloud9_TopMenu.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_TopMenu.prototype = $extend(openfl_display_Sprite.prototype,{
	txCoin: null
	,txDia: null
	,plusCoin: null
	,buyDia: null
	,buyCoin: null
	,gift: null
	,crown: null
	,fullscreen: null
	,sound: null
	,cashout: null
	,btnShake: null
	,like: null
	,luckyBonusIndicator: null
	,extened: null
	,lev: null
	,levText: null
	,isLevup: null
	,exp: null
	,mexp: null
	,vlev: null
	,expbar: null
	,expbarMask: null
	,expbarEffectMask: null
	,layerExpBoost: null
	,expbar_e: null
	,coin_e: null
	,dia_e: null
	,udt: null
	,voucherOrder: null
	,voucherPrize: null
	,isDiaDrawSuspended: null
	,overlappedPopupCounter: null
	,levupData: null
	,lobby: null
	,isTutorial: null
	,tutorialTrace: null
	,animations: null
	,btnFirst: null
	,sales: null
	,tourGames: null
	,seManager: null
	,isHitTheFive: null
	,levCapPop: null
	,levNumber: null
	,heraldTimer: null
	,herald: null
	,httpHerald: null
	,heraldRewards: null
	,canvasReward: null
	,rewardNoticeVisible: null
	,httpConditionalDeal: null
	,tmrHttpConditional: null
	,dataConditionalDeal: null
	,dataConditionalRefreshed: null
	,forceCondiDataReq: null
	,conditionalBtnCanvas: null
	,conditionalBtnCanvasPos: null
	,btnDealSeven: null
	,btnDealLevel: null
	,conditionalBtnVisible: null
	,lvupReward: null
	,lvInfo: null
	,firstCoin: null
	,myClassUp: null
	,layerStr: null
	,targetSlot: null
	,lastTick: null
	,refreshCount: null
	,backToFirstLobby: null
	,isGameReward: null
	,mysteryReward: null
	,canvasMysteryBox: null
	,canvasMysteryBoxIndex: null
	,canvasContentIntroduce: null
	,games: null
	,canvasGoto: null
	,btnGotoDown: null
	,btnGotoUp: null
	,buttons: null
	,voucherSlotList: null
	,isDoubleUp: null
	,doubleUpBtnCanvasPos: null
	,inited: null
	,httpTournament: null
	,canvasTournament: null
	,canvasTournamentIndex: null
	,tournamentData: null
	,canvasSalesTimeLimitTag: null
	,salesTimeLimitSpinCount: null
	,txDaySalesTimeLimit: null
	,txTimeSalesTimeLimit: null
	,canvasGetCoin: null
	,getCoinBool: null
	,canvasCoinTree: null
	,treeMeta: null
	,treeData: null
	,treeGrade: null
	,isCoinTree: null
	,treeTop: null
	,applePos: null
	,appleIcon: null
	,appleCount: null
	,shakeCounter: null
	,fundCounter: null
	,stepTextB: null
	,isExpBoost: null
	,isSuperBoost: null
	,isRandomBox: null
	,isTournamentPackage: null
	,shopRemainTime: null
	,bgTxTimeSales: null
	,btnTimeSalesTag: null
	,addMoreToBuycoins: function() {
		var _gthis = this;
		var currentAni = null;
		var aniLayer = new openfl_display_Sprite();
		var sequence = 0;
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/topmenu/buycoins_e.png",false),15,1,82,41);
		if(this.shopRemainTime <= 0) {
			ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/topmenu/bonus_e.png",false),15,1,90,49);
		}
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,0],false,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[0],false,1));
		var aniNormal = new spritesheet_AnimatedSprite(ss);
		aniNormal.showBehavior("stop");
		this.animations.push(aniNormal);
		ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/topmenu/buycoins_more_e.png",false),15,1,82,41);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,0],false,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[0],false,1));
		var aniMore = new spritesheet_AnimatedSprite(ss);
		aniMore.showBehavior("stop");
		this.animations.push(aniMore);
		aniMore.set_visible(false);
		ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/topmenu/buycoins_rolling_e.png",false),7,1,82,41);
		if(this.shopRemainTime <= 0) {
			ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/topmenu/bonus_rolling_e.png",false),13,1,90,49);
		}
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6],false,15));
		var aniRollingNormal = new spritesheet_AnimatedSprite(ss);
		aniRollingNormal.showBehavior("_e");
		this.animations.push(aniRollingNormal);
		aniRollingNormal.set_visible(false);
		ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/topmenu/buycoins_rolling_more_e.png",false),7,1,82,41);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6],false,15));
		var aniRollingMore = new spritesheet_AnimatedSprite(ss);
		aniRollingMore.showBehavior("_e");
		this.animations.push(aniRollingMore);
		aniRollingMore.set_visible(false);
		if(this.shopRemainTime <= 0) {
			aniLayer.set_x(4);
			aniLayer.set_y(4);
			aniNormal.set_x(-4);
			aniNormal.set_y(-4);
			aniRollingNormal.set_x(-4);
			aniRollingNormal.set_y(-4);
		}
		aniLayer.addChild(aniNormal);
		aniLayer.addChild(aniMore);
		aniLayer.addChild(aniRollingNormal);
		aniLayer.addChild(aniRollingMore);
		this.buyCoin.addChild(aniLayer);
		if(this.btnFirst != null) {
			this.btnFirst.getChildByName("ani.txt").showBehaviors(["_e","stop","stop","_e","stop","stop","_e","stop"]);
		}
		aniNormal.showBehaviors(["_e","stop","stop","_e","stop","stop","_e","stop"]);
		currentAni = aniNormal;
		aniNormal.addEventListener("complete",function(e) {
			if(sequence != 0) {
				return;
			}
			sequence = 1;
			aniLayer.setChildIndex(aniRollingMore,aniLayer.get_numChildren() - 1);
			aniRollingMore.set_visible(true);
			aniRollingMore.showBehavior("_e");
		});
		aniRollingMore.addEventListener("complete",function(e1) {
			if(sequence != 1) {
				return;
			}
			sequence = 2;
			aniLayer.setChildIndex(aniMore,aniLayer.get_numChildren() - 1);
			aniNormal.set_visible(false);
			aniRollingMore.set_visible(false);
			aniMore.set_visible(true);
			aniMore.showBehaviors(["_e","stop","stop","_e","stop","stop","_e","stop","stop","_e","stop"]);
			if(_gthis.btnFirst != null) {
				_gthis.btnFirst.getChildByName("ani.txt").showBehaviors(["_e","stop","stop","_e","stop","stop","_e","stop"]);
			}
			currentAni = aniMore;
		});
		aniMore.addEventListener("complete",function(e2) {
			if(sequence != 2) {
				return;
			}
			sequence = 3;
			aniLayer.setChildIndex(aniRollingNormal,aniLayer.get_numChildren() - 1);
			aniRollingNormal.set_visible(true);
			aniRollingNormal.showBehavior("_e");
			currentAni = aniRollingNormal;
		});
		aniRollingNormal.addEventListener("complete",function(e3) {
			if(sequence != 3) {
				return;
			}
			sequence = 0;
			aniLayer.setChildIndex(aniNormal,aniLayer.get_numChildren() - 1);
			aniMore.set_visible(false);
			aniRollingNormal.set_visible(false);
			aniNormal.set_visible(true);
			aniNormal.showBehaviors(["_e","stop","stop","_e","stop","stop","_e","stop"]);
			if(_gthis.btnFirst != null) {
				_gthis.btnFirst.getChildByName("ani.txt").showBehaviors(["_e","stop","stop","_e","stop","stop","_e","stop"]);
			}
			currentAni = aniNormal;
		});
		var btnMore = new com_redpeakgames_cloud9_ui_ImageButton("img/topmenu/btn_buycoins_more",null,null,"");
		if(this.shopRemainTime <= 0) {
			btnMore.set_x(4);
			btnMore.set_y(4);
		}
		this.buyCoin.addChild(btnMore);
		btnMore.set_visible(false);
		var onOver = function(e4) {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("mouse_over_6-shop",0,0);
			}
			aniLayer.set_visible(false);
			if(sequence == 1 || sequence == 2) {
				btnMore.set_visible(true);
			}
		};
		var onOut = function(e5) {
			aniLayer.set_visible(true);
			btnMore.set_visible(false);
		};
		var onClick = function(e6) {
			aniLayer.set_visible(true);
			btnMore.set_visible(false);
			_gthis.onClickBuyCoins(e6);
		};
		this.buyCoin.set_onOver(onOver);
		this.buyCoin.set_onOut(onOut);
		this.buyCoin.set_onClick(onClick);
	}
	,makeShareSuccess: function() {
		var share = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/share_successfully.png"));
		share.set_x(openfl_Lib.current.stage.get_displayState() == 2?1452:1600);
		share.set_y(28);
		share.set_name("shareSuccess");
		this.addChildAt(share,0);
	}
	,appearShareSuccess: function() {
		var share = this.getChildByName("shareSuccess");
		share.set_x(openfl_Lib.current.stage.get_displayState() == 2?1452:1600);
		motion_Actuate.tween(share,0.333,{ y : 114}).ease(motion_easing_Quad.get_easeOut()).onComplete(function() {
			motion_Actuate.tween(share,0.333,{ y : 28}).ease(motion_easing_Quad.get_easeOut()).delay(2);
		});
	}
	,makeGiftAlarm: function(ox,oy) {
		var redDot = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/reddot/red_dot_small_1.png"));
		redDot.set_x(ox);
		redDot.set_y(oy);
		redDot.set_name("redDot");
		this.addChild(redDot);
		if(this.gift != null) {
			this.setChildIndex(redDot,this.getChildIndex(this.gift) + 1);
		}
	}
	,hideGiftNumber: function(number) {
		try {
			var redDot = this.getChildByName("redDot");
			if(redDot != null) {
				if(number == 0) {
					redDot.visible = false;
				} else {
					redDot.visible = true;
				}
			}
		} catch( err ) {
			haxe_CallStack.lastException = err;
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace("topMenu.makeGiftAlarm() : " + Std.string(err),{ fileName : "TopMenu.hx", lineNumber : 502, className : "com.redpeakgames.cloud9.TopMenu", methodName : "hideGiftNumber"});
		}
	}
	,makeBtnShake: function() {
		var _gthis = this;
		var clip = new openfl_display_Shape();
		clip.get_graphics().beginFill(0,1);
		clip.get_graphics().drawRect(0,0,140,26);
		clip.get_graphics().endFill();
		clip.set_x(1146);
		clip.set_y(79);
		this.addChild(clip);
		var sprite = new openfl_display_Sprite();
		sprite.set_x(1139);
		sprite.set_y(73);
		sprite.set_name("sprite.shake");
		sprite.set_mask(clip);
		this.addChild(sprite);
		var format = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",13,16777215);
		format.align = 0;
		this.shakeCounter = new com_redpeakgames_cloud9_ui_NumberText(format,null,130,-5,7);
		this.shakeCounter.mouseEnabled = false;
		sprite.addChild(this.shakeCounter);
		haxe_Timer.delay(function() {
			var tmp;
			if(_gthis.treeData != null) {
				var x = Std.parseInt(_gthis.treeData.prize.cur);
				tmp = new haxe__$Int64__$_$_$Int64(x >> 31,x);
			} else {
				tmp = new haxe__$Int64__$_$_$Int64(0,0);
			}
			_gthis.shakeCounter.set_value(tmp);
		},100);
		this.btnShake = new com_redpeakgames_cloud9_ui_ImageButton("img/topmenu/btn_shake",null,null,"mouse_click");
		this.btnShake.set_alpha(0);
		sprite.addChild(this.btnShake);
		var appleIcon = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/topmenu/icon_shake_apple.png"));
		appleIcon.set_x(96);
		this.btnShake.addChild(appleIcon);
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/topmenu/btn_shake_e.png",false),15,3,136,38);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],false,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("over",[39],false,1));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[44],false,1));
		var shake = new spritesheet_AnimatedSprite(ss);
		shake.mouseEnabled = false;
		shake.showBehavior("stop");
		shake.set_name("ani.shake");
		shake.addEventListener("complete",$bind(this,this.onBtnShakeAniComplete));
		this.animations.push(shake);
		sprite.addChild(shake);
		ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/topmenu/apple_e.png",false),13,1,40,36);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12],false,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[0],false,1));
		var apple = new spritesheet_AnimatedSprite(ss);
		apple.set_x(96);
		apple.mouseEnabled = false;
		apple.showBehavior("stop");
		this.animations.push(apple);
		sprite.addChild(apple);
		var tmr = new haxe_Timer(5000);
		tmr.run = function() {
			apple.showBehavior("_e");
		};
		tmr.run();
		this.btnShake.set_onOver(function(e) {
			shake.removeEventListener("complete",$bind(_gthis,_gthis.onBtnShakeAniComplete));
			shake.set_visible(false);
			shake.showBehavior("over");
			_gthis.btnShake.set_alpha(1);
		});
		this.btnShake.set_onOut(function(e1) {
			shake.set_visible(true);
			shake.showBehavior("_e");
			_gthis.btnShake.set_alpha(0);
			shake.addEventListener("complete",$bind(_gthis,_gthis.onBtnShakeAniComplete));
		});
		this.btnShake.set_onClick(function(e2) {
			shake.set_visible(true);
			shake.showBehavior("_e");
			_gthis.btnShake.set_alpha(0);
			shake.addEventListener("complete",$bind(_gthis,_gthis.onBtnShakeAniComplete));
			_gthis.openCoinTree();
		});
	}
	,onBtnShakeAniComplete: function(o) {
		(js_Boot.__cast((js_Boot.__cast(this.getChildByName("sprite.shake") , openfl_display_Sprite)).getChildByName("ani.shake") , spritesheet_AnimatedSprite)).showBehaviors(["stop","stop","stop","stop","stop","_e"]);
	}
	,makeBtnFirst: function(type) {
		if(type == null) {
			type = "lifetime";
		}
		var _gthis = this;
		var btn = new com_redpeakgames_cloud9_ui_ImageButton("img/topmenu/top_" + type,null,null,"");
		btn.set_name("btn." + type);
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/topmenu/top_" + type + "_txt_e.png",false),15,1,82,41);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,0],false,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[0],false,1));
		var txt = new spritesheet_AnimatedSprite(ss);
		txt.set_name("ani.txt");
		txt.mouseEnabled = false;
		txt.showBehaviors(["_e","stop","stop","_e","stop","stop","_e","stop"]);
		this.animations.push(txt);
		btn.addChild(txt);
		btn.set_onOver(function(e) {
			txt.set_visible(false);
		});
		btn.set_onOut(function(e1) {
			txt.set_visible(true);
		});
		btn.set_onClick(function(e2) {
			txt.set_visible(true);
			_gthis.setBtnFirstClickCondition(e2,type);
		});
		btn.set_x(960);
		btn.set_y(71);
		return btn;
	}
	,setBtnFirstClickCondition: function(e,type) {
		if(type == "lifetime") {
			this.onClickFirstPurchase(e);
		} else {
			JSON.parse(this.dataConditionalDeal);
			if(this.vlev == 1) {
				this.openBuyCoins();
			} else {
				this.openRMembers("rshop");
			}
		}
	}
	,onBtnFirstTxtAniComplete: function(o) {
		(js_Boot.__cast(this.btnFirst.getChildByName("ani.txt") , spritesheet_AnimatedSprite)).showBehaviors(["stop","stop","stop","stop","stop","_e"]);
	}
	,removeBtnFirst: function() {
		HxOverrides.remove(this.animations,js_Boot.__cast(this.btnFirst.getChildByName("ani.over") , spritesheet_AnimatedSprite));
		var txt = js_Boot.__cast(this.btnFirst.getChildByName("ani.txt") , spritesheet_AnimatedSprite);
		txt.removeEventListener("complete",$bind(this,this.onBtnFirstTxtAniComplete));
		HxOverrides.remove(this.animations,txt);
	}
	,onLoop: function(e) {
		var cur = openfl_Lib.getTimer();
		var delta = cur - this.lastTick;
		this.refreshCount += delta;
		var _g = 0;
		var _g1 = this.animations;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a.update(delta);
		}
		this.expbar_e.update(delta);
		this.herald.update(delta);
		if(this.canvasSalesTimeLimitTag != null && this.canvasSalesTimeLimitTag.get_visible()) {
			var date = new Date();
			var remain = com_redpeakgames_cloud9_TopMenu.remainOpenToAll - openfl_Lib.getTimer() / 1000 | 0;
			var h = (remain | 0) % 86400 / 3600 | 0;
			var m = (remain | 0) % 86400 % 3600 / 60 | 0;
			var s = (remain | 0) % 86400 % 3600 % 60 | 0;
			if(h < 0) {
				h = 0;
			}
			if(m < 0) {
				m = 0;
			}
			if(s < 0) {
				s = 0;
			}
			if(this.txTimeSalesTimeLimit != null) {
				this.txTimeSalesTimeLimit.set_text((h < 10?"0" + h:"" + h) + ":" + (m < 10?"0" + m:"" + m) + ":" + (s < 10?"0" + s:"" + s));
			}
			if(remain <= 0) {
				this.canvasSalesTimeLimitTag.buttonMode = false;
				this.bgTxTimeSales.set_visible(false);
				this.txTimeSalesTimeLimit.set_visible(false);
				this.btnTimeSalesTag.set_visible(true);
			} else {
				this.canvasSalesTimeLimitTag.buttonMode = true;
				this.bgTxTimeSales.set_visible(true);
				this.txTimeSalesTimeLimit.set_visible(true);
				this.btnTimeSalesTag.set_visible(false);
			}
			if(com_redpeakgames_cloud9_TopMenu.salesExpiredTime - (new Date().getTime() + com_redpeakgames_cloud9_TopMenu.timezoneOffset * 60000) < 0) {
				this.canvasSalesTimeLimitTag.set_visible(false);
			}
		}
		this.lastTick = cur;
	}
	,makeLevelTooltip: function() {
		var _gthis = this;
		this.lvupReward = 0;
		new com_redpeakgames_cloud9_utils_Http(this.udt.url + "data/levels.json",$bind(this,this.onGetLevelInfo),function(e) {
			haxe_Log.trace("topMenu.makeLevelTooltip : " + Std.string(e),{ fileName : "TopMenu.hx", lineNumber : 749, className : "com.redpeakgames.cloud9.TopMenu", methodName : "makeLevelTooltip"});
		}).request();
		var sprite = new openfl_display_Sprite();
		sprite.addChild(this.makeInvisibleShape(623,70,72,44));
		sprite.addEventListener("mouseOver",function(e1) {
			var tt = new com_redpeakgames_cloud9_dialog_ToolTip(563,119,190 + haxe__$Int64_Int64_$Impl_$.toString(_gthis.mexp).length * 2,88,3);
			tt.set_name("tooltip.level");
			if(_gthis.lvInfo != null) {
				_gthis.lvupReward = _gthis.lvInfo.levels[_gthis.lev].reward[0].count;
			}
			var tmp = "NEXT LEVEL: " + (_gthis.lev + 1) + "<br>XP TO NEXT LEVEL: ";
			var a = _gthis.mexp;
			var b = _gthis.exp;
			var high = a.high - b.high | 0;
			var low = a.low - b.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low) < 0) {
				--high;
				high = high | 0;
			}
			tt.set_text(tmp + haxe__$Int64_Int64_$Impl_$.toString(new haxe__$Int64__$_$_$Int64(high,low)) + "<br>LEVEL-UP BONUS: " + _gthis.lvupReward);
			_gthis.addChild(tt);
		});
		sprite.addEventListener("mouseOut",function(e2) {
			try {
				_gthis.removeChild(_gthis.getChildByName("tooltip.level"));
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				haxe_Log.trace("topMenu.makeLevelTooltip MOUSE_OUT : " + Std.string(err),{ fileName : "TopMenu.hx", lineNumber : 770, className : "com.redpeakgames.cloud9.TopMenu", methodName : "makeLevelTooltip"});
			}
		});
		this.addChild(sprite);
	}
	,onGetLevelInfo: function(e) {
		this.lvInfo = JSON.parse(e.target.data);
		if(this.lev <= 0) {
			this.lev = 1;
		}
		if(this.lev > 2000) {
			this.lev = 2000;
		}
		this.lvupReward = this.lvInfo.levels[this.lev].reward[0].count;
	}
	,loadTournament: function(e) {
		var _gthis = this;
		this.tourGames = JSON.parse(e.target.data);
		if(this.inited == false) {
			this.inited = true;
			return;
		}
		var loader = this.getLoaderSafe("TopMenu.tournament",this.canvasTournament);
		if(loader == null) {
			haxe_Timer.delay(function() {
				_gthis.openTournament(_gthis.tournamentData.lobbyJson,_gthis.tournamentData.type,_gthis.tournamentData.data,_gthis.tournamentData.result);
			},100);
		} else {
			this.addChild(new com_redpeakgames_cloud9_dialog_CircleLoading(loader,0,0,function() {
				loader.set_visible(true);
				if(_gthis.tournamentData.type == "lobby") {
					_gthis.getContentFromLoader(loader).startLobby(com_redpeakgames_cloud9_Global.mute,_gthis.tournamentData.lobbyJson);
					_gthis.canvasTournamentIndex = _gthis.getChildIndex(_gthis.canvasTournament);
					_gthis.setChildIndex(_gthis.canvasTournament,_gthis.get_numChildren() - 1);
				} else if(_gthis.tournamentData.type == "empty") {
					var _g1 = 0;
					var _g = _gthis.tourGames.length;
					while(_g1 < _g) {
						var i = _g1++;
						var _g3 = 0;
						var _g2 = _gthis.tourGames[i].slots.length;
						while(_g3 < _g2) if(_gthis.udt.played == _gthis.tourGames[i].slots[_g3++] && !_gthis.isTutorial) {
							_gthis.getContentFromLoader(loader).startEmpty(com_redpeakgames_cloud9_Global.mute);
						}
					}
				} else if(_gthis.tournamentData.type.indexOf("time") != -1) {
					var salesType = "";
					if(_gthis.tournamentData.type.indexOf(".") != -1) {
						try {
							salesType = _gthis.tournamentData.type.split(".")[1];
						} catch( err ) {
							haxe_CallStack.lastException = err;
							if (err instanceof js__$Boot_HaxeError) err = err.val;
							haxe_Log.trace(err,{ fileName : "TopMenu.hx", lineNumber : 837, className : "com.redpeakgames.cloud9.TopMenu", methodName : "loadTournament"});
						}
					}
					if(_gthis.getContentFromLoader(loader).get_tournamentTime() == false) {
						var _g11 = 0;
						var _g4 = _gthis.tourGames.length;
						while(_g11 < _g4) {
							var i1 = _g11++;
							var _g31 = 0;
							var _g21 = _gthis.tourGames[i1].slots.length;
							while(_g31 < _g21) if(_gthis.udt.played == _gthis.tourGames[i1].slots[_g31++] && !_gthis.isTutorial) {
								_gthis.getContentFromLoader(loader).startTournament(com_redpeakgames_cloud9_Global.mute,true,_gthis.tournamentData.data,i1);
							}
						}
					} else if(_gthis.getContentFromLoader(loader).isTournament() && (_gthis.refreshCount > 2500 || salesType != "")) {
						_gthis.refreshCount = 0;
						_gthis.getContentFromLoader(loader).refreshTournament(_gthis.tournamentData.data,salesType);
					}
				} else if(_gthis.tournamentData.type == "result") {
					var o = _gthis.parent;
					var tmp;
					var tmp1;
					if(o == null) {
						tmp1 = null;
					} else {
						var tmp2;
						if(o.__properties__) {
							tmp = o.__properties__["get_" + "isLobby"];
							tmp2 = tmp;
						} else {
							tmp2 = false;
						}
						if(tmp2) {
							tmp1 = o[tmp]();
						} else {
							tmp1 = o.isLobby;
						}
					}
					if(tmp1 == true) {
						_gthis.getContentFromLoader(loader).onlyResult(com_redpeakgames_cloud9_Global.mute,_gthis.tournamentData.result);
					} else {
						_gthis.getContentFromLoader(loader).startResult(com_redpeakgames_cloud9_Global.mute,_gthis.tournamentData.result);
					}
				}
			}));
		}
	}
	,makeCoinTooltip: function() {
		var _gthis = this;
		var sprite = new openfl_display_Sprite();
		sprite.addChild(this.makeInvisibleShape(730,78,147,28));
		sprite.addEventListener("mouseOver",function(e) {
			var tt = new com_redpeakgames_cloud9_dialog_ToolTip(683,119,249,117,0,false);
			tt.set_name("tooltip.coin");
			tt.set_text("Roll the slot machines with these coins!");
			_gthis.addChild(tt);
		});
		sprite.addEventListener("mouseOut",function(e1) {
			try {
				_gthis.removeChild(_gthis.getChildByName("tooltip.coin"));
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				haxe_Log.trace("topMenu.makeCoinTooltip MOUSE_OUT : " + Std.string(err),{ fileName : "TopMenu.hx", lineNumber : 892, className : "com.redpeakgames.cloud9.TopMenu", methodName : "makeCoinTooltip"});
			}
		});
		this.addChild(sprite);
		sprite = new openfl_display_Sprite();
		sprite.addChild(this.makeInvisibleShape(1045,78,90,28));
		sprite.addEventListener("mouseOver",function(e2) {
			var tt1 = new com_redpeakgames_cloud9_dialog_ToolTip(979,119,209,97,0,false);
			tt1.set_name("tooltip.dia");
			tt1.set_text("Play mini games with diamonds.");
			_gthis.addChild(tt1);
		});
		sprite.addEventListener("mouseOut",function(e3) {
			try {
				_gthis.removeChild(_gthis.getChildByName("tooltip.dia"));
			} catch( err1 ) {
				haxe_CallStack.lastException = err1;
				if (err1 instanceof js__$Boot_HaxeError) err1 = err1.val;
				haxe_Log.trace("topMenu.makeCoinTooltip MOUSE_OUT : " + Std.string(err1),{ fileName : "TopMenu.hx", lineNumber : 913, className : "com.redpeakgames.cloud9.TopMenu", methodName : "makeCoinTooltip"});
			}
		});
		this.addChild(sprite);
	}
	,makeInvisibleShape: function(x,y,width,height) {
		var shape = new openfl_display_Shape();
		shape.get_graphics().beginFill(0,0);
		shape.get_graphics().drawRect(x,y,width,height);
		shape.get_graphics().endFill();
		return shape;
	}
	,loadImageButton: function(ib) {
		return { path : ib.path, x : ib.x, y : ib.y, sound : ib.sound, remove : ib.remove};
	}
	,load: function(data) {
		var job = JSON.parse(data);
		this.loadSales(job.sales);
	}
	,loadSales: function(sa) {
		this.sales.bg = { path : sa.bg.path, x : sa.bg.x, y : sa.bg.y};
		this.sales.value = { value : sa.value.value};
		this.sales.exit = { path : sa.exit.path, x : sa.exit.x, y : sa.exit.y};
		this.sales.buybtn = { path : sa.buybtn.path, x : sa.buybtn.x, y : sa.buybtn.y};
		var saInfo = sa.buybtnAni.info;
		var saAni = sa.buybtnAni.ani;
		var saStop = sa.buybtnAni.stop;
		this.sales.buybtnAni = { info : saInfo, ani : saAni, stop : saStop};
	}
	,toggleFullscreen: function(e) {
		if(e.target.buttonMode == true) {
			if(openfl_Lib.current.stage.get_displayState() == 2) {
				openfl_Lib.current.stage.set_displayState(0);
			} else {
				openfl_Lib.current.stage.set_displayState(2);
			}
		}
		if(this.canvasGetCoin != null && this.getCoinBool) {
			this.getCoinBool = false;
			var httpGc = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "event_fse.php",$bind(this,this.loadGetCoin),function(e1) {
				haxe_Log.trace("topMenu.getCoin : " + Std.string(e1),{ fileName : "TopMenu.hx", lineNumber : 975, className : "com.redpeakgames.cloud9.TopMenu", methodName : "toggleFullscreen"});
			});
			var data = new openfl_net_URLVariables();
			data.uid = this.udt.uid;
			data.sig = this.udt.sig;
			data.sid = this.udt.played;
			httpGc.request(data);
		}
	}
	,loadGetCoin: function(e) {
		var _gthis = this;
		var json = JSON.parse(e.target.data);
		if(this.canvasGetCoin.get_visible() == true) {
			var drawCoin = new com_redpeakgames_cloud9_ui_DrawCoins(1306,75,714,76,1000,1,null,null,true);
			drawCoin.set_onCoinArrive(function() {
				_gthis.dispatchEvent(new openfl_events_DataEvent("ge.balance.changed",true,false,JSON.stringify({ coin : json.coin, dia : _gthis.udt.dia, showAddedCoin : true})));
			});
			this.addChild(drawCoin);
		} else {
			this.dispatchEvent(new openfl_events_DataEvent("ge.balance.changed",true,false,JSON.stringify({ coin : json.coin, dia : this.udt.dia, showAddedCoin : true})));
		}
		var idx = this.canvasGetCoin.get_numChildren() - 1;
		while(idx >= 0) {
			var obj = this.canvasGetCoin.getChildAt(idx);
			if(obj.get_name().indexOf("getCoin") != -1) {
				var ani = obj;
				HxOverrides.remove(this.animations,ani);
				this.canvasGetCoin.removeChild(ani);
				ani.clear();
			}
			--idx;
		}
		this.canvasGetCoin.removeChildren();
		this.removeChild(this.canvasGetCoin);
		this.canvasGetCoin = null;
	}
	,changeStatus: function(lev,exp,mexp,rcoin,rdia,rrp,vlev,vcorder,vcprize) {
		var _gthis = this;
		this.isLevup = false;
		this.voucherOrder = vcorder != null?vcorder:0;
		this.voucherPrize = vcprize != null?vcprize:0;
		if(vlev != null) {
			if(this.vlev != vlev) {
				this.vlev = vlev;
				this.myClassUp = true;
			}
		}
		if(lev != null) {
			var ratio = haxe_Int64Helper.toFloat(exp) / haxe_Int64Helper.toFloat(mexp);
			this.exp = exp;
			this.mexp = mexp;
			this.expbar_e.set_visible(true);
			this.expbar_e.set_alpha(1);
			motion_Actuate.stop(this.expbar_e);
			if(this.lev == lev) {
				this.levText.set_text("Lv. " + lev);
				motion_Actuate.tween(this.expbarMask,0.5,{ x : 72 * ratio + 551},false).ease(motion_easing_Linear.get_easeNone());
				motion_Actuate.tween(this.expbar_e,0.5,{ x : -21 + 72 * ratio},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
					motion_Actuate.tween(_gthis.expbar_e,0.2,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone());
				});
				if(this.isExpBoost) {
					this.showExpBoostEffect(596 + 72 * ratio,75);
				}
			} else {
				motion_Actuate.tween(this.expbarMask,0.5,{ x : 623}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
					motion_Actuate.tween(_gthis.expbarMask,1,{ x : 551}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
						_gthis.levText.set_text("Lv. " + lev);
						motion_Actuate.tween(_gthis.expbarMask,0.5,{ x : 72 * ratio + 551}).ease(motion_easing_Linear.get_easeNone());
					});
				});
				motion_Actuate.tween(this.expbar_e,0.5,{ x : 51},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
					motion_Actuate.tween(_gthis.expbar_e,1,{ x : -21},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
						motion_Actuate.tween(_gthis.expbar_e,0.5,{ x : -21 + 72 * ratio},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
							motion_Actuate.tween(_gthis.expbar_e,0.2,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone());
						});
					});
				});
				if(this.isExpBoost) {
					this.showExpBoostEffect(668,75);
				}
				if(rrp != 0) {
					this.isLevup = true;
					this.levupData = { lev : lev, rcoin : rcoin, rrp : rrp};
				}
				if(JSON.parse(this.dataConditionalDeal).lev.status == "buying") {
					if(lev == 1 || lev <= 100 && (lev / 10 | 0) - (this.lev / 10 | 0) > 0) {
						this.requestConditionalData();
					}
				}
				this.lev = lev;
			}
			if(lev >= 31) {
				if(this.canvasContentIntroduce != null) {
					this.getLoaderSafe("TopMenu.introduce",this.canvasContentIntroduce).unload();
					this.canvasContentIntroduce.parent.removeChild(this.canvasContentIntroduce);
					this.canvasContentIntroduce = null;
				}
			}
			if(!this.isLevup) {
				this.contentIntroduceSetLevel();
			}
		}
		if(this.isGameReward) {
			this.mysteryBoxOpen(this.mysteryReward);
		} else if(this.isLevup) {
			this.onLevelUp(lev,rcoin,rrp);
		} else if(this.voucherOrder != 0) {
			this.openVoucherBonus(vcprize);
		}
	}
	,showExpBoostEffect: function(x,y) {
		var _gthis = this;
		var ss = spritesheet_importers_SparrowImporter.parse(openfl_Assets.getText("img/topmenu/run_particle_e.xml"),"img/topmenu");
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7],true,15));
		var aniParticle = new spritesheet_AnimatedSprite(ss);
		aniParticle.set_x(x - 33);
		aniParticle.set_y(y + 20);
		aniParticle.showBehavior("_e");
		this.animations.push(aniParticle);
		var _onComplete = null;
		_onComplete = function(e) {
			aniParticle.removeEventListener("complete",_onComplete);
			try {
				HxOverrides.remove(_gthis.animations,aniParticle);
				aniParticle.spritesheet.clear();
				_gthis.layerExpBoost.removeChild(aniParticle);
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				haxe_Log.trace(err,{ fileName : "TopMenu.hx", lineNumber : 1144, className : "com.redpeakgames.cloud9.TopMenu", methodName : "showExpBoostEffect"});
			}
		};
		aniParticle.addEventListener("complete",_onComplete);
		this.layerExpBoost.addChild(aniParticle);
		motion_Actuate.tween(aniParticle,0.2,{ alpha : 0}).delay(0.466).ease(motion_easing_Linear.get_easeNone());
		ss = spritesheet_importers_SparrowImporter.parse(openfl_Assets.getText("img/topmenu/explo_particle_e.xml"),"img/topmenu");
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],false,15));
		var aniExplosion = new spritesheet_AnimatedSprite(ss);
		aniExplosion.set_x(x);
		aniExplosion.set_y(y);
		aniExplosion.showBehavior("_e");
		this.animations.push(aniExplosion);
		var _onComplete1 = null;
		_onComplete1 = function(e1) {
			aniExplosion.removeEventListener("complete",_onComplete1);
			try {
				HxOverrides.remove(_gthis.animations,aniExplosion);
				aniExplosion.spritesheet.clear();
				_gthis.layerExpBoost.removeChild(aniExplosion);
			} catch( err1 ) {
				haxe_CallStack.lastException = err1;
				if (err1 instanceof js__$Boot_HaxeError) err1 = err1.val;
				haxe_Log.trace(err1,{ fileName : "TopMenu.hx", lineNumber : 1165, className : "com.redpeakgames.cloud9.TopMenu", methodName : "showExpBoostEffect"});
			}
		};
		aniExplosion.addEventListener("complete",_onComplete1);
		this.layerExpBoost.addChild(aniExplosion);
	}
	,openRemainGamePopups: function() {
		if(this.isLevup) {
			this.onLevelUp(this.levupData.lev,this.levupData.rcoin,this.levupData.rrp);
			return true;
		} else if(this.voucherOrder != 0) {
			this.openVoucherBonus(this.voucherPrize);
			return true;
		}
		return false;
	}
	,openVoucherBonus: function(prize) {
		if(this.voucherOrder <= 6) {
			this.addScreen();
			this.addChild(new com_redpeakgames_cloud9_dialog_Voucher(596,240,prize,this.udt,this.voucherSlotList,this.seManager));
		} else if(this.udt.buyCount == 0) {
			this.onClickFirstPurchase(null);
		} else {
			this.dispatchEvent(new openfl_events_DataEvent("ge.close.voucher",true,false,"10"));
		}
	}
	,voucherRecommendListUpdate: function() {
		if(this.voucherSlotList.length > 0 && this.voucherSlotList.indexOf(this.udt.played) != -1) {
			HxOverrides.remove(this.voucherSlotList,this.udt.played);
		}
	}
	,balanceChanged: function(coin,dia,showAddedCoin) {
		var _gthis = this;
		if(dia > this.txDia.get_valueInt()) {
			this.txDia.onEnd = function() {
				_gthis.dia_e.showBehavior("_e");
			};
		} else {
			this.txDia.onEnd = null;
		}
		this.drawTxDia(dia,true);
		this.udt.dia = dia;
		this.dispatchEvent(new openfl_events_DataEvent("ge.topmenu.dia.changed",true,false,JSON.stringify(dia)));
		if(showAddedCoin != null && showAddedCoin == true) {
			this.drawTxCoin(coin,true,2000,true);
		} else {
			this.drawTxCoin(coin,true);
		}
	}
	,slotCoinChanged: function(coin,time) {
		if(time == null) {
			time = 2000;
		}
		this.drawTxCoin(coin,true,time);
	}
	,resizeTxCoin: function(coin) {
		var fontSize = 18;
		var fCoin = haxe_Int64Helper.toFloat(coin);
		if(fCoin <= 99999) {
			this.txCoin.set_y(78);
			fontSize = 17;
		} else if(fCoin <= 999999) {
			this.txCoin.set_y(78);
			fontSize = 17;
		} else if(fCoin <= 999999999) {
			this.txCoin.set_y(78);
			fontSize = 17;
		} else if(fCoin <= 9999999999) {
			this.txCoin.set_y(79);
			fontSize = 15;
		} else if(fCoin <= 99999999999) {
			this.txCoin.set_y(80);
			fontSize = 14;
		} else {
			this.txCoin.set_y(80);
			fontSize = 13;
		}
		var format = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",fontSize,16777215,0.5);
		format.align = 0;
		this.txCoin.tf.set_defaultTextFormat(format);
	}
	,slotDiaChanged: function(dia) {
		var _gthis = this;
		if(dia > this.txDia.get_valueInt()) {
			this.txDia.onEnd = function() {
				_gthis.dia_e.showBehavior("_e");
			};
		} else {
			this.txDia.onEnd = null;
		}
		this.drawTxDia(dia,true);
		this.udt.dia = dia;
		this.dispatchEvent(new openfl_events_DataEvent("ge.topmenu.dia.changed",true,false,JSON.stringify(dia)));
	}
	,addCoin: function(inCoin) {
		var a = this.udt.coin;
		var high = a.high + inCoin.high | 0;
		var low = a.low + inCoin.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,a.low) < 0) {
			++high;
			high = high | 0;
		}
		this.udt.coin = new haxe__$Int64__$_$_$Int64(high,low);
		var a1 = this.get_coin();
		var high1 = a1.high + inCoin.high | 0;
		var low1 = a1.low + inCoin.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,a1.low) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		this.drawTxCoin(new haxe__$Int64__$_$_$Int64(high1,low1),true,2000,true,false);
	}
	,addDia: function(inDia) {
		this.udt.dia = this.udt.dia + inDia;
		this.drawTxDia(this.get_dia() + inDia,true,2000,true);
	}
	,refreshDiaDelayed: function(delay) {
		var _gthis = this;
		this.isDiaDrawSuspended = true;
		haxe_Timer.delay(function() {
			_gthis.isDiaDrawSuspended = false;
			_gthis.drawTxDia(_gthis.udt.dia,true,2000,true);
		},delay);
	}
	,setStatus: function(lev,exp,mexp,vlev) {
		this.lev = lev;
		this.levText.set_text("Lv. " + lev);
		var ratio = haxe_Int64Helper.toFloat(exp) / haxe_Int64Helper.toFloat(mexp);
		this.expbarMask.set_x(72 * ratio + 551);
		this.expbar_e.set_x(-21 + 72 * ratio);
		this.exp = exp;
		this.mexp = mexp;
		this.vlev = vlev;
	}
	,drawTxCoin: function(coin,count,time,showAddedCoin,adjustCoin) {
		if(adjustCoin == null) {
			adjustCoin = true;
		}
		if(showAddedCoin == null) {
			showAddedCoin = false;
		}
		if(time == null) {
			time = 2000;
		}
		if(count == null) {
			count = false;
		}
		var _gthis = this;
		if(adjustCoin) {
			var _g_head = com_redpeakgames_cloud9_TopMenu.coinAdjust.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var b = new haxe__$Int64__$_$_$Int64(val >> 31,val);
				var high = coin.high - b.high | 0;
				var low = coin.low - b.low | 0;
				if(haxe__$Int32_Int32_$Impl_$.ucompare(coin.low,b.low) < 0) {
					--high;
					high = high | 0;
				}
				coin = new haxe__$Int64__$_$_$Int64(high,low);
			}
		}
		var b1 = this.txCoin.get_value();
		var v = coin.high - b1.high | 0;
		if(v != 0) {
			v = v;
		} else {
			v = haxe__$Int32_Int32_$Impl_$.ucompare(coin.low,b1.low);
		}
		if((coin.high < 0?b1.high < 0?v:-1:b1.high >= 0?v:1) > 0) {
			this.coin_e.showBehavior("_e");
		}
		if(showAddedCoin) {
			this.dispatchEvent(new openfl_events_DataEvent("ge.topmenu.coin.changed",true,false,haxe__$Int64_Int64_$Impl_$.toString(coin)));
		}
		var tmp;
		if(showAddedCoin) {
			var b2 = this.txCoin.get_value();
			if(!(coin.high != b2.high)) {
				tmp = coin.low != b2.low;
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var txFormat = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",13,16777215);
			txFormat.align = 4;
			var addCoinText = com_redpeakgames_cloud9_ui_TxField.make(686,114,184,txFormat,new openfl_filters_GlowFilter(6160475,1.0,1.5,1.5,10,2));
			var b3 = this.txCoin.get_value();
			var v1 = coin.high - b3.high | 0;
			if(v1 != 0) {
				v1 = v1;
			} else {
				v1 = haxe__$Int32_Int32_$Impl_$.ucompare(coin.low,b3.low);
			}
			if((coin.high < 0?b3.high < 0?v1:-1:b3.high >= 0?v1:1) > 0) {
				var b4 = this.txCoin.get_value();
				var high1 = coin.high - b4.high | 0;
				var low1 = coin.low - b4.low | 0;
				if(haxe__$Int32_Int32_$Impl_$.ucompare(coin.low,b4.low) < 0) {
					--high1;
					high1 = high1 | 0;
				}
				addCoinText.set_text("+" + com_redpeakgames_cloud9_utils_Number.addCommaInt(new haxe__$Int64__$_$_$Int64(high1,low1)));
			} else {
				var b5 = this.txCoin.get_value();
				var v2 = coin.high - b5.high | 0;
				if(v2 != 0) {
					v2 = v2;
				} else {
					v2 = haxe__$Int32_Int32_$Impl_$.ucompare(coin.low,b5.low);
				}
				if((coin.high < 0?b5.high < 0?v2:-1:b5.high >= 0?v2:1) < 0) {
					var a = this.txCoin.get_value();
					var high2 = a.high - coin.high | 0;
					var low2 = a.low - coin.low | 0;
					if(haxe__$Int32_Int32_$Impl_$.ucompare(a.low,coin.low) < 0) {
						--high2;
						high2 = high2 | 0;
					}
					addCoinText.set_text("-" + com_redpeakgames_cloud9_utils_Number.addCommaInt(new haxe__$Int64__$_$_$Int64(high2,low2)));
				}
			}
			this.addChild(addCoinText);
			addCoinText.set_alpha(0);
			motion_Actuate.tween(addCoinText,0.1,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
			haxe_Timer.delay(function() {
				motion_Actuate.tween(addCoinText,0.4,{ alpha : 0, y : 100}).ease(motion_easing_Back.get_easeIn()).onComplete(function() {
					try {
						_gthis.removeChild(addCoinText);
					} catch( err ) {
						haxe_CallStack.lastException = err;
						if (err instanceof js__$Boot_HaxeError) err = err.val;
						haxe_Log.trace(err,{ fileName : "TopMenu.hx", lineNumber : 1340, className : "com.redpeakgames.cloud9.TopMenu", methodName : "drawTxCoin"});
					}
				});
			},800);
		}
		this.resizeTxCoin(coin);
		this.txCoin.draw(coin,count,time);
	}
	,drawTxDia: function(dia,count,time,adjustDia) {
		if(adjustDia == null) {
			adjustDia = true;
		}
		if(time == null) {
			time = 2000;
		}
		if(count == null) {
			count = false;
		}
		var _gthis = this;
		if(adjustDia) {
			var _g_head = com_redpeakgames_cloud9_TopMenu.diaAdjust.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				dia -= val;
			}
		}
		if(this.isDiaDrawSuspended) {
			return;
		}
		if(dia > this.txDia.get_valueInt()) {
			var txFormat = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",13,16777215);
			txFormat.align = 3;
			var addDiaText = com_redpeakgames_cloud9_ui_TxField.make(1051,114,84,txFormat,new openfl_filters_GlowFilter(6160475,1.0,1.5,1.5,10,2));
			var x = dia - this.txDia.get_valueInt();
			addDiaText.set_text("+" + com_redpeakgames_cloud9_utils_Number.addCommaInt(new haxe__$Int64__$_$_$Int64(x >> 31,x)));
			this.addChild(addDiaText);
			addDiaText.set_alpha(0);
			motion_Actuate.tween(addDiaText,0.1,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
			haxe_Timer.delay(function() {
				motion_Actuate.tween(addDiaText,0.4,{ alpha : 0, y : 100}).ease(motion_easing_Back.get_easeIn()).onComplete(function() {
					try {
						_gthis.removeChild(addDiaText);
					} catch( err ) {
						haxe_CallStack.lastException = err;
						if (err instanceof js__$Boot_HaxeError) err = err.val;
						haxe_Log.trace(err,{ fileName : "TopMenu.hx", lineNumber : 1374, className : "com.redpeakgames.cloud9.TopMenu", methodName : "drawTxDia"});
					}
				});
			},800);
		}
		this.txDia.draw(new haxe__$Int64__$_$_$Int64(dia >> 31,dia),count,time);
	}
	,resize: function(width_a) {
		if(width_a > 760) {
			this.set_x(-((1920 - width_a) / 2));
		} else {
			this.set_x(-580.);
		}
		if(this.like != null) {
			this.like.set_x(-this.get_x());
		}
	}
	,get_coin: function() {
		return this.txCoin.get_value();
	}
	,set_coin: function(value) {
		this.resizeTxCoin(value);
		this.txCoin.set_value(value);
		return value;
	}
	,getCoinText: function() {
		return haxe__$Int64_Int64_$Impl_$.toString(this.txCoin.get_value());
	}
	,get_dia: function() {
		var x = this.txDia.get_value();
		if(x.high != x.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		return x.low;
	}
	,set_dia: function(value) {
		this.txDia.set_value(new haxe__$Int64__$_$_$Int64(value >> 31,value));
		return value;
	}
	,set_lobby: function(value) {
		var _gthis = this;
		this.lobby = value;
		this.cashout.set_work(value);
		motion_Actuate.tween(this.cashout,0.5,{ alpha : value?1:0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_gthis.cashout.set_visible(value);
		});
		if(this.isTutorial == true) {
			this.cashout.set_work(false);
		}
		if(value == false) {
			var lobbyToolTip = null;
			try {
				lobbyToolTip = this.getChildByName("tooltip.cashout");
			} catch( err ) {
				haxe_CallStack.lastException = err;
				haxe_Log.trace("lobbyToolTip not exist",{ fileName : "TopMenu.hx", lineNumber : 1464, className : "com.redpeakgames.cloud9.TopMenu", methodName : "set_lobby"});
			}
			if(lobbyToolTip != null) {
				this.removeChild(lobbyToolTip);
			}
			this.removeAdditionalWindows(true);
			if(this.heraldTimer != null) {
				this.heraldTimer.stop();
			}
		} else {
			this.getHerald();
		}
		this.adjustPosSalesTimeLimitTag(value,true);
		if(this.canvasGetCoin != null && this.udt.played == 1020) {
			if(value == true) {
				this.setChildIndex(this.canvasGetCoin,this.getChildIndex(this.canvasTournament));
			} else {
				this.setChildIndex(this.canvasGetCoin,this.getChildIndex(this.canvasTournament) - 1);
			}
		}
		return value;
	}
	,ext: function(width) {
		if(this.extened) {
			return;
		}
		var count = Math.ceil((width - 1920) / 2 / 100);
		var bmp = openfl_Assets.getBitmapData("img/topmenu/ext.png");
		var _g1 = 0;
		while(_g1 < count) {
			var i = _g1++;
			var right = new openfl_display_Bitmap(bmp);
			right.set_x(1920 + i * 100);
			right.set_y(69);
			this.addChild(right);
			var left = new openfl_display_Bitmap(bmp);
			left.set_x((i + 1) * -100);
			left.set_y(69);
			this.addChild(left);
		}
		this.extened = true;
	}
	,onClickBuyCoins: function(e) {
		this.openBuyCoins();
	}
	,openBuyCoins: function(from) {
		if(from == null) {
			from = "";
		}
		if(from == "") {
			this.addScreen();
		} else {
			this.overlappedPopupCounter += 1;
		}
		var shp = new com_redpeakgames_cloud9_dialog_Shop(this.udt.buyCount,this.udt,from);
		if(openfl_Lib.current.stage.get_displayState() == 2) {
			shp.set_y(140);
		} else {
			shp.set_y(210);
		}
		this.addChild(shp);
	}
	,onClickBuyDias: function(e) {
		this.addScreen();
		var shp = new com_redpeakgames_cloud9_dialog_Shop(this.udt.buyCount,this.udt,null,true);
		if(openfl_Lib.current.stage.get_displayState() == 2) {
			shp.set_y(140);
		} else {
			shp.set_y(210);
		}
		this.addChild(shp);
	}
	,onLevelUp: function(lev,coin,rp) {
		if(this.games != null) {
			this.replaceGotoSlotList(this.games);
		}
		this.addChild(new com_redpeakgames_cloud9_dialog_Levelup(lev,coin,rp,this.udt));
	}
	,openSlotSearch: function() {
		var canvas = Reflect.field(this.parent,"lobby").canvas;
		this.levCapPop = [];
		this.levNumber = 0;
		var idx = canvas.get_numChildren() - 1;
		while(idx >= 0) {
			var obj = canvas.getChildAt(idx);
			if(obj.get_name() != "notyet") {
				var targetSlot = obj;
				if(this.udt.lev >= targetSlot.slev && targetSlot.spop) {
					this.levNumber++;
					targetSlot.set_work(true);
					targetSlot.spop = false;
					targetSlot.remove();
					this.levCapPop.push(targetSlot);
					if(this.levCapPop.length == 1) {
						this.showOpenSlot(this.levCapPop);
					}
				}
			}
			--idx;
		}
		if(this.levNumber == 0) {
			this.classUp(false);
		}
	}
	,showOpenSlot: function(targetSlot) {
		var _gthis = this;
		if(!com_redpeakgames_cloud9_Global.mute) {
			this.seManager.play("etc01",0,0);
		}
		this.addScreen();
		var slotPack = new openfl_display_Sprite();
		slotPack.set_x(0);
		slotPack.set_y(openfl_Lib.current.stage.get_displayState() == 2?0:69);
		slotPack.set_name("slotPack");
		this.addChild(slotPack);
		var background = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lock/unlock_pop_back.png"));
		background.set_x(745);
		background.set_y(209);
		slotPack.addChild(background);
		var slot = new com_redpeakgames_cloud9_SlotButton(targetSlot[this.levCapPop.length - this.levNumber].sid,"",null,null,false,false,0,0,0,targetSlot[this.levCapPop.length - this.levNumber].sid == 2010?"a":"");
		slot.set_x(870);
		slot.set_y(310);
		slot.set_name("sidName");
		slotPack.addChild(slot);
		var lock_c = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lock/lock_open_key.png"));
		lock_c.set_x(877);
		lock_c.set_y(391);
		slotPack.addChild(lock_c);
		var timer = haxe_Timer.delay(function() {
			_gthis.closeNextSlot(null);
			if(_gthis.levNumber > 1) {
				_gthis.levNumber--;
				HxOverrides.remove(_gthis.levCapPop,_gthis.levCapPop.slice(0,1));
				_gthis.showOpenSlot(_gthis.levCapPop);
			}
		},5000);
		var btnPlay = new com_redpeakgames_cloud9_ui_ImageButton("img/lock/btn_play",null,null,"mouse_click");
		btnPlay.set_x(882);
		btnPlay.set_y(501);
		btnPlay.set_name(targetSlot[this.levCapPop.length - this.levNumber].name);
		btnPlay.set_onClick(function(e) {
			timer.stop();
			_gthis.onSlotSelected(e);
		});
		slotPack.addChild(btnPlay);
		var btnClose = new com_redpeakgames_cloud9_ui_ImageButton("img/lock/btn_sales_x",null,null,"mouse_click");
		btnClose.set_x(1142);
		btnClose.set_y(205);
		btnClose.set_onClick(function(e1) {
			_gthis.closeNextSlot(e1);
			timer.stop();
			if(_gthis.levNumber > 1) {
				_gthis.levNumber--;
				HxOverrides.remove(_gthis.levCapPop,_gthis.levCapPop.slice(0,1));
				_gthis.showOpenSlot(_gthis.levCapPop);
			}
		});
		slotPack.addChild(btnClose);
		motion_Actuate.tween(slotPack,0.3,{ alpha : 1},false).ease(motion_easing_Quad.get_easeInOut());
		motion_Actuate.tween(slotPack,0.3,{ x : slotPack.get_x() - 100, y : slotPack.get_y() - 15, scaleX : 1.1, scaleY : 1.1},false).ease(motion_easing_Quad.get_easeInOut()).onComplete(function() {
			motion_Actuate.tween(slotPack,0.1,{ x : slotPack.get_x() + 100, y : slotPack.get_y() + 15, scaleX : 1, scaleY : 1},false).ease(motion_easing_Quad.get_easeInOut());
		});
	}
	,onSlotSelected: function(e) {
		try {
			var pack = this.getChildByName("slotPack");
			var slotSid = pack.getChildByName("sidName");
			var target = e.target;
			this.udt.played = slotSid.sid;
			this.dispatchEvent(new openfl_events_DataEvent("ge.selected.slot",true,false));
			com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"loadNextSlot",[target.get_name()]);
			this.removeScreen();
			if(pack == null) {
				return;
			}
			this.removeChild(pack);
			com_redpeakgames_cloud9_utils_DynamicCall.method(Reflect.field(this.parent,"lobby"),"clearLastPlayed",[]);
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,openfl_errors_Error) ) {
				haxe_Log.trace(e1.toString(),{ fileName : "TopMenu.hx", lineNumber : 1681, className : "com.redpeakgames.cloud9.TopMenu", methodName : "onSlotSelected"});
			} else throw(e1);
		}
	}
	,closeNextSlot: function(e) {
		try {
			this.removeScreen();
			if(this.levNumber == 1) {
				this.classUp(false);
			}
			if(this.getChildByName("slotPack") == null) {
				return;
			}
			this.removeChild(this.getChildByName("slotPack"));
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,openfl_errors_Error) ) {
				haxe_Log.trace(e1.toString(),{ fileName : "TopMenu.hx", lineNumber : 1697, className : "com.redpeakgames.cloud9.TopMenu", methodName : "closeNextSlot"});
			} else throw(e1);
		}
	}
	,addScreen: function() {
		var width = openfl_Lib.current.stage.stageWidth > 1920?openfl_Lib.current.stage.stageWidth:1920;
		var height = openfl_Lib.current.stage.stageHeight > 1080?openfl_Lib.current.stage.stageHeight:1080;
		var x = width > 1920?(width - 1920) / 2:0;
		haxe_Log.trace("TopMenu: add screen",{ fileName : "TopMenu.hx", lineNumber : 1707, className : "com.redpeakgames.cloud9.TopMenu", methodName : "addScreen"});
		var screen = new openfl_display_Sprite();
		screen.set_name("shp.screen");
		screen.set_alpha(0);
		screen.mouseEnabled = true;
		var shape = new openfl_display_Shape();
		shape.get_graphics().beginFill(0);
		shape.get_graphics().drawRect(x,-this.get_y(),width,height);
		shape.get_graphics().endFill();
		this.setButtons(false);
		this.enableToKeyboardSpin(false);
		screen.addChild(shape);
		this.addChild(screen);
		motion_Actuate.tween(screen,0.2,{ alpha : 0.85}).ease(motion_easing_Linear.get_easeNone());
	}
	,setButtons: function(work) {
		this.btnGotoDown.set_work(work);
		this.btnGotoUp.set_work(work);
		this.buyCoin.set_work(work);
		this.gift.set_work(work);
		this.crown.set_work(work);
		this.fullscreen.set_interactive(work);
		this.sound.set_interactive(work);
		this.cashout.set_work(work);
		this.btnShake.set_work(work);
		if(this.btnFirst != null) {
			this.btnFirst.set_work(work);
		}
		if(this.btnDealLevel != null) {
			this.btnDealLevel.set_work(work);
		}
		if(this.btnDealSeven != null) {
			this.btnDealSeven.set_work(work);
		}
	}
	,removeScreen: function() {
		var _gthis = this;
		if(!this.isTutorial) {
			this.setButtons(true);
		}
		this.enableToKeyboardSpin(true);
		if(this.overlappedPopupCounter > 0) {
			this.overlappedPopupCounter -= 1;
		} else {
			var idx = this.get_numChildren() - 1;
			while(idx >= 0) {
				var obj = [this.getChildAt(idx)];
				if(obj[0].get_name() == "shp.screen") {
					motion_Actuate.tween(obj[0],0.2,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete((function(obj1) {
						return function() {
							_gthis.removeChild(obj1[0]);
						};
					})(obj));
					break;
				}
				--idx;
			}
		}
	}
	,toNormalScreen: function() {
		this.fullscreen.set_checked(false);
		openfl_Lib.current.stage.set_displayState(2);
		var _g1 = 0;
		var _g = this.get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			if(this.getChildAt(i).get_name() == "shp.screen") {
				var tmp = -this.get_y() - 69;
				this.getChildAt(i).set_y(tmp);
			}
		}
	}
	,mute: function(value) {
		this.tournamentMute(value);
		this.mysteryBoxMute(value);
		this.contentIntroduceMute(value);
		if(this.isDoubleUp) {
			this.doubleUpMute(value);
		}
		this.superBoostMute(value);
		this.randomBoxMute(value);
		this.tournamentPackageMute(value);
	}
	,backToLobby: function(e) {
		com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"loadLobby",[]);
		if(!this.backToFirstLobby && this.udt.newday == 1) {
			this.backToFirstLobby = true;
			com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"backtoLobbyPopup",[]);
			com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"openRemainingPopup",[]);
		}
		this.closeDoubleUpTag();
	}
	,onFullScreen: function(e) {
		if(e.fullScreen) {
			this.fullscreen.set_checked(true);
			this.conditionalBtnCanvas.set_y(this.conditionalBtnCanvasPos.y + 69);
			var loader = this.getLoaderSafe("TopMenu.doubleup");
			if(loader != null) {
				loader.set_y(69);
			}
			var doubleup = this.getChildByName("doubleup");
			if(doubleup != null) {
				doubleup.set_y(this.doubleUpBtnCanvasPos.fy);
			}
			try {
				this.stepTextB.set_y(1110);
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				haxe_Log.trace(err,{ fileName : "TopMenu.hx", lineNumber : 1832, className : "com.redpeakgames.cloud9.TopMenu", methodName : "onFullScreen"});
			}
		} else {
			this.fullscreen.set_checked(false);
			this.conditionalBtnCanvas.set_y(this.conditionalBtnCanvasPos.y);
			var loader1 = this.getLoaderSafe("TopMenu.doubleup");
			if(loader1 != null) {
				loader1.set_y(0);
			}
			var doubleup1 = this.getChildByName("doubleup");
			if(doubleup1 != null) {
				doubleup1.set_y(this.doubleUpBtnCanvasPos.y);
			}
			try {
				this.stepTextB.set_y(910);
			} catch( err1 ) {
				haxe_CallStack.lastException = err1;
				if (err1 instanceof js__$Boot_HaxeError) err1 = err1.val;
				haxe_Log.trace(err1,{ fileName : "TopMenu.hx", lineNumber : 1846, className : "com.redpeakgames.cloud9.TopMenu", methodName : "onFullScreen"});
			}
		}
		this.setFullscreenRandomBox(e.fullScreen);
		var o = this.parent;
		var tmp;
		var tmp1;
		if(o == null) {
			tmp1 = null;
		} else {
			var tmp2;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + "isLobby"];
				tmp2 = tmp;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = o[tmp]();
			} else {
				tmp1 = o.isLobby;
			}
		}
		this.adjustPosSalesTimeLimitTag(!tmp1,false);
	}
	,openTournamentList: function(lobbyJson) {
		this.safeRunContentMethod("TopMenu.tournament","startLobby",[com_redpeakgames_cloud9_Global.mute,lobbyJson,false],false,this.canvasTournament);
		this.canvasTournamentIndex = this.getChildIndex(this.canvasTournament);
		this.setChildIndex(this.canvasTournament,this.get_numChildren() - 1);
	}
	,tournamentCanvasRealign: function() {
		this.setChildIndex(this.canvasTournament,this.canvasTournamentIndex);
	}
	,openTournament: function(j,t,d,r) {
		if(t == null) {
			t = "lobby";
		}
		this.tournamentData = { lobbyJson : j, type : t, data : d, result : r};
		var dataTournament = new openfl_net_URLVariables();
		dataTournament.uid = this.udt.uid;
		dataTournament.sig = this.udt.sig;
		this.httpTournament.request(dataTournament);
	}
	,replacePlayerd: function(sid) {
		this.udt.played = sid;
	}
	,closeTournament: function(mini) {
		if(mini == null) {
			mini = false;
		}
		if(!mini) {
			this.removeScreen();
		}
		var loader = this.getLoaderSafe("TopMenu.tournament",this.canvasTournament);
		if(loader != null) {
			this.getContentFromLoader(loader).onRemove();
			loader.set_visible(false);
		}
	}
	,openTournamentResult: function() {
		var httpTr = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "get.tournament.result.php",$bind(this,this.loadTournamentResult),$bind(this,this.onLoadError));
		var data = new openfl_net_URLVariables();
		data.uid = this.udt.uid;
		data.sig = this.udt.sig;
		httpTr.request(data);
	}
	,openLastTournamentResult: function() {
		var httpTr = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "get.last.tournament.result.php",$bind(this,this.loadTournamentResult),$bind(this,this.onLoadError));
		var data = new openfl_net_URLVariables();
		data.uid = this.udt.uid;
		data.sig = this.udt.sig;
		httpTr.request(data);
	}
	,loadTournamentResult: function(e) {
		var json = JSON.parse(e.target.data);
		if(json.rank != -1) {
			this.openTournament(null,"result",null,json);
		} else {
			var o = this.parent;
			var tmp;
			var tmp1;
			if(o == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(o.__properties__) {
					tmp = o.__properties__["get_" + "isLobby"];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = o[tmp]();
				} else {
					tmp1 = o.isLobby;
				}
			}
			if(tmp1 == false) {
				this.openTournament(null,"empty",null);
			} else {
				com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"openRemainingPopup",[]);
			}
		}
	}
	,tournamentMute: function(value) {
		var _gthis = this;
		var loader = this.getLoaderSafe("TopMenu.tournament",this.canvasTournament);
		if(loader != null) {
			this.getContentFromLoader(loader).mute(value);
			return;
		}
		var tmr = new haxe_Timer(10);
		tmr.run = function() {
			if(loader != null) {
				tmr.stop();
				_gthis.getContentFromLoader(loader).mute(value);
			}
		};
		tmr.run();
	}
	,profileLoaded: function(e) {
		var image = Reflect.field(e.target,"content");
		image.smoothing = true;
		image.set_scaleX(0.72);
		image.set_scaleY(0.72);
	}
	,onClickChristy: function(e) {
		openfl_Lib.getURL(new openfl_net_URLRequest("http://m.me/hitthefive"),"_blank");
	}
	,onClickFirstPurchase: function(e) {
		this.addScreen();
		var fp = new com_redpeakgames_cloud9_dialog_FirstPurchase(this.voucherOrder > 6);
		fp.set_x(557);
		if(openfl_Lib.current.stage.get_displayState() == 2) {
			fp.set_y(126);
		} else {
			fp.set_y(195);
		}
		this.addChild(fp);
	}
	,onAddedStage: function(e) {
		var _gthis = this;
		this.removeEventListener("addedToStage",$bind(this,this.onAddedStage));
		this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/topmenu/top_menu_bg.png")));
		var format = new openfl_text_TextFormat("verdana",13,5855577);
		format.align = 0;
		this.stepTextB = com_redpeakgames_cloud9_ui_TxField.make(0,910,1920,format,null,false);
		this.stepTextB.set_text("Webzen Inc. Global Digital Entertainment Leader COPYRIGHT©Webzen Inc. ALL RIGHTS RESERVED.");
		this.addChild(this.stepTextB);
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/topmenu/logo_ani_e.png",false),16,1,104,72);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0],false,15));
		var logo_e = new spritesheet_AnimatedSprite(ss);
		logo_e.set_x(563);
		logo_e.set_y(-1);
		logo_e.showBehavior("_e");
		this.animations.push(logo_e);
		this.addChild(logo_e);
		var tmr = new haxe_Timer(7000);
		tmr.run = function() {
			logo_e.showBehavior("_e");
		};
		ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/topmenu/top_coin_e.png",false),15,1,28,28);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,0],false,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[0],false,15));
		this.coin_e = new spritesheet_AnimatedSprite(ss);
		this.coin_e.set_x(716);
		this.coin_e.set_y(78);
		this.coin_e.showBehavior("stop");
		this.animations.push(this.coin_e);
		this.addChild(this.coin_e);
		var ss1 = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/topmenu/top_dia_e.png",false),15,1,28,28);
		ss1.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,0],false,15));
		ss1.addBehavior(new spritesheet_data_BehaviorData("stop",[0],false,15));
		this.dia_e = new spritesheet_AnimatedSprite(ss1);
		this.dia_e.set_x(1107);
		this.dia_e.set_y(78);
		this.dia_e.showBehavior("stop");
		this.animations.push(this.dia_e);
		this.addChild(this.dia_e);
		var format1 = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",13,16777215,0.5);
		format1.align = 0;
		this.txCoin = new com_redpeakgames_cloud9_ui_NumberText(format1,null,112,0,0,null);
		this.txCoin.set_x(758);
		this.txCoin.set_y(80);
		this.txCoin.tf.set_autoSize(3);
		this.addChild(this.txCoin);
		format1 = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",17,16777215,0.5);
		format1.align = 0;
		this.txDia = new com_redpeakgames_cloud9_ui_NumberText(format1,null,50,0,0,null);
		this.txDia.set_x(1050);
		this.txDia.set_y(78);
		this.txDia.tf.set_autoSize(1);
		this.addChild(this.txDia);
		var profile = new com_redpeakgames_cloud9_ui_ImageButton("img/topmenu/btn_profile",null,null,"mouse_click");
		profile.set_x(535);
		profile.set_y(69);
		profile.set_work(false);
		this.addChild(profile);
		if(this.udt.picture != null) {
			if(this.udt.picture.indexOf("http") != -1) {
				var ploader = new openfl_display_Loader();
				ploader.set_x(540);
				ploader.set_y(74);
				ploader.set_scaleX(0.72);
				ploader.set_scaleY(0.72);
				this.addChild(ploader);
				ploader.contentLoaderInfo.addEventListener("ioError",function(e1) {
					haxe_Log.trace("Cannot load",{ fileName : "TopMenu.hx", lineNumber : 2059, className : "com.redpeakgames.cloud9.TopMenu", methodName : "onAddedStage"});
				});
				ploader.contentLoaderInfo.addEventListener("complete",$bind(this,this.profileLoaded));
				ploader.load(new openfl_net_URLRequest(this.udt.picture));
			} else {
				var guest = com_redpeakgames_cloud9_utils_BitmapMaker.create("img/guest_img.jpg",null,540,74,1,true);
				guest.set_scaleX(0.225);
				guest.set_scaleY(0.225);
				this.addChild(guest);
			}
		}
		var btnProfile = new openfl_display_Sprite();
		btnProfile.buttonMode = true;
		btnProfile.addChild(this.makeInvisibleShape(544,73,36,36));
		btnProfile.addEventListener("mouseDown",function(e2) {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("mouse_click_c",0,0);
			}
			_gthis.openProfile(_gthis.udt.uid);
		});
		this.addChild(btnProfile);
		this.crown = new com_redpeakgames_cloud9_ui_ImageButton("img/topmenu/btn_" + this.layerStr[this.vlev - 1],null,null,"mouse_etcOver");
		this.crown.set_x(579);
		this.crown.set_y(70);
		this.crown.set_onClick(function(e3) {
			_gthis.openRMembers();
		});
		this.addChild(this.crown);
		this.expbarMask = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/topmenu/bar_ex.png"));
		this.expbarMask.set_x(551);
		this.expbarMask.set_y(93);
		this.expbarMask.set_cacheAsBitmap(true);
		this.addChild(this.expbarMask);
		this.expbar = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/topmenu/bar_ex.png"));
		this.expbar.set_x(623);
		this.expbar.set_y(93);
		this.expbar.set_cacheAsBitmap(true);
		this.expbar.set_mask(this.expbarMask);
		this.addChild(this.expbar);
		format1 = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",14,16777215);
		format1.align = 3;
		this.levText = com_redpeakgames_cloud9_ui_TxField.make(627,73,63,format1,new openfl_filters_GlowFilter(6160475,1.0,1.5,1.5,10,2));
		this.levText.set_text("Lv.");
		this.addChild(this.levText);
		this.makeBtnShops();
		this.expbarEffectMask = new openfl_display_Sprite();
		this.expbarEffectMask.set_x(623);
		this.expbarEffectMask.set_y(93);
		this.addChild(this.expbarEffectMask);
		var expem = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/topmenu/bar_ex.png"));
		expem.set_cacheAsBitmap(true);
		this.expbarEffectMask.addChild(expem);
		ss1 = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/topmenu/bar_ex_e.png",false),16,1,40,8);
		ss1.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],true,15));
		this.expbar_e = new spritesheet_AnimatedSprite(ss1);
		this.expbar_e.showBehavior("_e");
		this.expbar_e.set_x(-21);
		this.expbar_e.set_scaleY(1.666);
		this.expbar_e.set_alpha(0);
		this.expbar_e.set_mask(expem);
		this.expbar_e.set_cacheAsBitmap(true);
		this.expbarEffectMask.addChild(this.expbar_e);
		this.layerExpBoost = new openfl_display_Sprite();
		this.addChild(this.layerExpBoost);
		this.gift = new com_redpeakgames_cloud9_ui_ImageButton("img/topmenu/btn_gift",null,null,"mouse_etcOver");
		this.gift.set(1371,75);
		this.gift.set_onClick(function(e4) {
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.open.collect",true,false));
		});
		this.addChild(this.gift);
		this.fullscreen = new com_redpeakgames_cloud9_ui_ImageCheck("img/topmenu/btn_fullscreen");
		this.fullscreen.set_x(1339);
		this.fullscreen.set_y(75);
		this.fullscreen.set_onDirect($bind(this,this.toggleFullscreen));
		this.fullscreen.set_onClick(function(e5) {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("mouse_etcOver_c",0,0);
			}
		});
		this.fullscreen.set_onOver(function(e6) {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("mouse_etcOver_r",0,0);
			}
		});
		this.addChild(this.fullscreen);
		this.sound = new com_redpeakgames_cloud9_ui_ImageCheck("img/topmenu/btn_sound");
		this.sound.set_x(1307);
		this.sound.set_y(75);
		this.sound.set_checked(com_redpeakgames_cloud9_Global.mute);
		this.sound.set_onClick($bind(this,this.onClickSound));
		this.sound.set_onOver(function(e7) {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("mouse_etcOver_r",0,0);
			}
		});
		this.addChild(this.sound);
		this.cashout = new com_redpeakgames_cloud9_ui_ImageButton("img/topmenu/btn_lobby",null,null,"mouse_etcOver");
		this.cashout.set(1275,75);
		this.cashout.set_onClick($bind(this,this.backToLobby));
		this.cashout.set_onOver(function(e8) {
			var tt = new com_redpeakgames_cloud9_dialog_ToolTip(1246,119,92,37,0,false);
			tt.set_name("tooltip.cashout");
			tt.set_text("TO LOBBY");
			_gthis.addChild(tt);
		});
		this.cashout.set_onOut(function(e9) {
			try {
				_gthis.removeChild(_gthis.getChildByName("tooltip.cashout"));
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				haxe_Log.trace("topMenu.cashout MOUSE_OUT : " + Std.string(err),{ fileName : "TopMenu.hx", lineNumber : 2170, className : "com.redpeakgames.cloud9.TopMenu", methodName : "onAddedStage"});
			}
		});
		this.addChild(this.cashout);
		this.makeBtnShake();
		var christy = new com_redpeakgames_cloud9_ui_ImageButton("img/topmenu/btn_christy",null,null,"mouse_click");
		christy.set_x(1397);
		christy.set_y(0);
		christy.set_onClick($bind(this,this.onClickChristy));
		this.addChild(christy);
		this.like = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/topmenu/like.png"));
		this.like.set_x(439);
		this.like.set_y(0);
		this.addChild(this.like);
		this.httpConditionalDeal = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "get.conditional.deal.php",$bind(this,this.onRecvConditionalDeal),$bind(this,this.onLoadError));
		var dataCond = new openfl_net_URLVariables();
		dataCond.uid = this.udt.uid;
		dataCond.sig = this.udt.sig;
		this.httpConditionalDeal.request(dataCond);
		this.conditionalBtnCanvas = new openfl_display_Sprite();
		this.conditionalBtnCanvasPos = { x : 1334, y : 477};
		this.conditionalBtnCanvas.set_x(this.conditionalBtnCanvasPos.x);
		this.conditionalBtnCanvas.set_y(this.conditionalBtnCanvasPos.y);
		this.addChild(this.conditionalBtnCanvas);
		this.makeConditionalDealBtns();
		this.loadMysteryBox();
		this.httpHerald = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "get.jps.php",$bind(this,this.onRecvHerald));
		this.herald = new com_redpeakgames_cloud9_dialog_Herald(this.udt);
		this.addChild(this.herald);
		this.heraldRewards = [];
		this.makeLevelTooltip();
		this.makeCoinTooltip();
		this.makeBtnGoto();
		this.quickShop();
		if(com_redpeakgames_cloud9_TopMenu.getCoinOpenAvailable) {
			this.makeGetCoin();
		}
		this.canvasTournament = new openfl_display_Sprite();
		this.addChild(this.canvasTournament);
		this.safeRunContentMethod("TopMenu.tournament","",[],null,null,function() {
			_gthis.canvasTournament.addChild(_gthis.getLoaderSafe("TopMenu.tournament"));
		},null,null,false);
		this.httpTournament = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "get.tournament.php",$bind(this,this.loadTournament),$bind(this,this.onLoadError));
		var dataTour = new openfl_net_URLVariables();
		dataTour.uid = this.udt.uid;
		dataTour.sig = this.udt.sig;
		this.httpTournament.request(dataTour);
		this.makeShareSuccess();
		if(this.udt.lev < 31) {
			this.loadContentIntroduce();
		}
		this.loadReward();
		this.isTutorial = false;
		this.lastTick = openfl_Lib.getTimer();
		this.addEventListener("enterFrame",$bind(this,this.onLoop));
	}
	,makeBtnShops: function() {
		var _gthis = this;
		if(this.buyCoin != null) {
			this.buyCoin.removeChildren();
			this.removeChild(this.buyCoin);
			this.removeChild(this.btnFirst);
			var redDotLayer = this.getChildByName("red.dot");
			if(redDotLayer != null) {
				this.removeChild(redDotLayer);
			}
		}
		this.buyCoin = new com_redpeakgames_cloud9_ui_ImageButton(this.shopRemainTime <= 0?"img/topmenu/btn_bonus":"img/topmenu/btn_buycoins",null,null,"mouse_click");
		this.buyCoin.set_x(this.shopRemainTime <= 0?874:878);
		this.buyCoin.set_y(this.shopRemainTime <= 0?67:71);
		this.buyCoin.set_onClick($bind(this,this.onClickBuyCoins));
		this.buyCoin.set_onOver(function(e) {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("mouse_over_6-shop",0,0);
			}
		});
		this.addChildAt(this.buyCoin,12);
		if(this.udt.buyCount == 0) {
			this.btnFirst = this.makeBtnFirst("lifetime");
			this.addChildAt(this.btnFirst,13);
		} else {
			this.btnFirst = this.makeBtnFirst("bestdeal");
			this.addChildAt(this.btnFirst,13);
		}
		this.addMoreToBuycoins();
		var redDotLayer1 = new openfl_display_Sprite();
		redDotLayer1.set_name("red.dot");
		this.addChildAt(redDotLayer1,14);
		var redDotLeft = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/reddot/red_dot_l_1.png"));
		redDotLeft.set_x(933);
		redDotLeft.set_y(62);
		redDotLayer1.addChild(redDotLeft);
		var redDotRight = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/reddot/red_dot_l_1.png"));
		redDotRight.set_scaleX(-1);
		redDotRight.set_x(957);
		redDotRight.set_y(62);
		redDotLayer1.addChild(redDotRight);
		var redDotN = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/reddot/red_dot_txt_n_l.png"));
		redDotN.set_x(933);
		redDotN.set_y(62);
		redDotLayer1.addChild(redDotN);
	}
	,onRecvHerald: function(e) {
		var tmp;
		if(this.parent != null) {
			var o = this.parent;
			var tmp1;
			var tmp2;
			if(o == null) {
				tmp2 = null;
			} else {
				var tmp3;
				if(o.__properties__) {
					tmp1 = o.__properties__["get_" + "isLobby"];
					tmp3 = tmp1;
				} else {
					tmp3 = false;
				}
				if(tmp3) {
					tmp2 = o[tmp1]();
				} else {
					tmp2 = o.isLobby;
				}
			}
			tmp = tmp2 == false;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.updateHerald(e.target.data);
		}
		this.startHeraldTimer();
	}
	,updateHerald: function(data) {
		if(JSON.parse(data).herald == null) {
			haxe_Log.trace("get.jps.php(herald) : null received",{ fileName : "TopMenu.hx", lineNumber : 2318, className : "com.redpeakgames.cloud9.TopMenu", methodName : "updateHerald"});
			return;
		}
		var json = JSON.parse(data).herald;
		if(json.length > 0) {
			var heraldFlag = false;
			var heraldData = { prize : 0};
			var heraldDatas = [];
			var _g = 0;
			while(_g < json.length) {
				var data1 = json[_g];
				++_g;
				if(data1.type != "rwrd" && data1.uid != this.udt.uid) {
					heraldDatas.push(data1);
				}
				if(data1.type == "rwrd") {
					var matchFlag = false;
					var _g1 = 0;
					var _g2 = this.heraldRewards;
					while(_g1 < _g2.length) {
						var rwrd = _g2[_g1];
						++_g1;
						if(data1.uid == rwrd.uid) {
							matchFlag = true;
						}
					}
					if(!matchFlag) {
						this.heraldRewards.push(data1);
					}
				}
			}
			if(heraldDatas.length == 1) {
				heraldData = heraldDatas[0];
				heraldFlag = true;
			} else if(heraldDatas.length > 1) {
				var _g3 = 0;
				while(_g3 < heraldDatas.length) {
					var data2 = heraldDatas[_g3];
					++_g3;
					if(this.lev % 2 == Std.parseInt(data2.uid.charAt(data2.uid.length - 1)) % 2) {
						heraldFlag = true;
						if(heraldData.prize < data2.prize) {
							heraldData = data2;
						}
					}
				}
				if(!heraldFlag) {
					heraldFlag = true;
					heraldData = heraldDatas[0];
				}
			}
			if(heraldFlag && !this.herald.get_isCongratsAlive()) {
				this.herald.showHerald(heraldData.eid,heraldData.url,heraldData.name,heraldData.prize,heraldData.coin,heraldData.sid,heraldData.type,heraldData.uid);
			}
			haxe_Log.trace("call onRecvHerald() : " + Std.string(json),{ fileName : "TopMenu.hx", lineNumber : 2391, className : "com.redpeakgames.cloud9.TopMenu", methodName : "updateHerald"});
		}
	}
	,getHerald: function() {
		var data = new openfl_net_URLVariables();
		data.uid = this.udt.uid;
		data.sig = this.udt.sig;
		data.p = "herald";
		var tmp;
		if(this.parent != null) {
			var o = this.parent;
			var tmp1;
			if(o == null) {
				tmp = null;
			} else {
				var tmp2;
				if(o.__properties__) {
					tmp1 = o.__properties__["get_" + "isLobby"];
					tmp2 = tmp1;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp = o[tmp1]();
				} else {
					tmp = o.isLobby;
				}
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			data.at = "lobby";
		} else {
			data.at = "slot";
		}
		this.httpHerald.request(data);
	}
	,setShopRemainTime: function(value) {
		this.shopRemainTime = value;
		this.makeBtnShops();
	}
	,startHeraldTimer: function() {
		if(this.heraldTimer != null) {
			this.heraldTimer.stop();
		}
		this.heraldTimer = haxe_Timer.delay($bind(this,this.getHerald),3000);
	}
	,showCongrats: function() {
		var tmp;
		if(this.parent != null) {
			var o = this.parent;
			var tmp1;
			if(o == null) {
				tmp = null;
			} else {
				var tmp2;
				if(o.__properties__) {
					tmp1 = o.__properties__["get_" + "isLobby"];
					tmp2 = tmp1;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp = o[tmp1]();
				} else {
					tmp = o.isLobby;
				}
			}
		} else {
			tmp = true;
		}
		if(tmp) {
			return;
		}
		if(this.heraldRewards.length > 0) {
			var rwrds = [];
			rwrds = this.heraldRewards.splice(0,5);
			this.herald.showCongrats(rwrds);
		}
	}
	,onClickExclusive: function(e) {
		this.addScreen();
		var ex = new com_redpeakgames_cloud9_dialog_ExclusiveDeal();
		var ty = openfl_Lib.current.stage.get_displayState() == 2?152:221;
		ex.set_x(965);
		ex.set_y(ty + 241);
		ex.set_alpha(0);
		ex.set_scaleX(0);
		ex.set_scaleY(0);
		this.addChild(ex);
		motion_Actuate.tween(ex,0.2,{ alpha : 1, scaleX : 1, scaleY : 1, x : 552, y : ty}).ease(motion_easing_Back.get_easeOut());
	}
	,getHeight: function() {
		var height = openfl_Lib.current.stage.stageHeight;
		if(openfl_Lib.current.stage.get_displayState() == 2) {
			try {
				height = openfl_external_ExternalInterface.call("getWindowHeight");
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
					haxe_Log.trace(e.toString(),{ fileName : "TopMenu.hx", lineNumber : 2454, className : "com.redpeakgames.cloud9.TopMenu", methodName : "getHeight"});
				} else throw(e);
			}
		}
		return height;
	}
	,getYPos: function(size) {
		var height = this.getHeight();
		if(size > height) {
			return 0;
		} else {
			return (height - size) * 0.45 | 0;
		}
	}
	,hideFirstPurchase: function() {
		var idx = this.getChildIndex(this.btnFirst);
		this.removeBtnFirst();
		this.removeChild(this.btnFirst);
		this.btnFirst = this.makeBtnFirst("bestdeal");
		this.addChildAt(this.btnFirst,idx);
	}
	,openAdjustBet: function() {
		this.addScreen();
		if(!com_redpeakgames_cloud9_Global.mute) {
			this.seManager.play("etc03",0,0);
		}
		var ab = new com_redpeakgames_cloud9_dialog_AdjustBet();
		ab.set_alpha(0);
		ab.set_x(960);
		if(openfl_Lib.current.stage.get_displayState() == 2) {
			ab.set_y(368);
		} else {
			ab.set_y(440);
		}
		var ty = ab.get_y() - 233;
		ab.set_scaleX(0);
		ab.set_scaleY(0);
		this.addChild(ab);
		motion_Actuate.tween(ab,0.2,{ x : 672, y : ty, alpha : 1, scaleX : 1, scaleY : 1}).ease(motion_easing_Linear.get_easeNone());
	}
	,openBankrupt: function(b) {
		this.addScreen();
		if(!com_redpeakgames_cloud9_Global.mute) {
			this.seManager.play("etc02",0,0);
		}
		var br = new com_redpeakgames_cloud9_dialog_Bankrupt(this.udt,b);
		br.set_alpha(0);
		br.set_x(960);
		if(openfl_Lib.current.stage.get_displayState() == 2) {
			br.set_y(525);
		} else {
			br.set_y(456);
		}
		var ty = br.get_y() - 326;
		br.set_scaleX(0);
		br.set_scaleY(0);
		this.addChild(br);
		motion_Actuate.tween(br,0.2,{ x : 557, y : ty, alpha : 1, scaleX : 1, scaleY : 1}).ease(motion_easing_Linear.get_easeNone());
	}
	,openCollect: function() {
		this.addScreen();
		var inAppFriends = [];
		try {
			inAppFriends = openfl_external_ExternalInterface.call("function(){ return friends; }");
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
				haxe_Log.trace(e.toString(),{ fileName : "TopMenu.hx", lineNumber : 2535, className : "com.redpeakgames.cloud9.TopMenu", methodName : "openCollect"});
			} else throw(e);
		}
		this.addChild(new com_redpeakgames_cloud9_dialog_Gift("collect",inAppFriends,this.udt));
	}
	,showWelcome: function(day) {
		this.addScreen();
		this.addChild(new com_redpeakgames_cloud9_dialog_Welcome(715,189,day,this.udt));
		this.addEventListener("ge.close.welcome",$bind(this,this.onCloseWelcome));
	}
	,onCloseWelcome: function(e) {
		Std.parseInt(e.data);
		this.removeEventListener("ge.close.welcome",$bind(this,this.onCloseWelcome));
		this.isTutorial = false;
		this.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true,false));
	}
	,openTutorialSelectPopup: function() {
		var _gthis = this;
		var canvasSelect = new openfl_display_Sprite();
		canvasSelect.set_x(671);
		canvasSelect.set_y(124);
		canvasSelect.set_alpha(0);
		this.addChild(canvasSelect);
		canvasSelect.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/tutorial/tutorial_back.png")));
		var btnNo = new com_redpeakgames_cloud9_ui_ImageButton("img/tutorial/btn_tutorial_no",null,null,"mouse_click");
		btnNo.set_x(190);
		btnNo.set_y(218);
		btnNo.set_work(false);
		btnNo.set_onClick(function(e) {
			com_redpeakgames_cloud9_utils_Trace.trace(_gthis.udt.url,_gthis.udt.uid,_gthis.udt.sig,"tuto_skip");
			motion_Actuate.tween(canvasSelect,0.166,{ x : 960, y : 281.5, scaleX : 0, scaleY : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				_gthis.isTutorial = false;
				_gthis.removeScreen();
				_gthis.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true,false));
				_gthis.removeChild(canvasSelect);
			});
		});
		canvasSelect.addChild(btnNo);
		var btnYes = new com_redpeakgames_cloud9_ui_ImageButton("img/tutorial/btn_tutorial_yes",null,null,"mouse_click");
		btnYes.set_x(352);
		btnYes.set_y(218);
		btnYes.set_work(false);
		btnYes.set_onClick(function(e1) {
			motion_Actuate.tween(canvasSelect,0.166,{ x : 960, y : 281.5, scaleX : 0, scaleY : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				_gthis.startTutorial();
			});
		});
		canvasSelect.addChild(btnYes);
		motion_Actuate.tween(canvasSelect,0.166,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			btnNo.set_work(true);
			btnYes.set_work(true);
		});
	}
	,startTutorial: function() {
		this.isTutorial = true;
		var lobby = Reflect.field(this.parent,"lobby");
		lobby.shiftPage(2,true);
		var canvas = lobby.canvas;
		this.targetSlot = null;
		var _g1 = 0;
		var _g = canvas.get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			if(canvas.getChildAt(i).get_name().indexOf("pinocchio") != -1) {
				this.targetSlot = canvas.getChildAt(i);
				break;
			}
		}
		if(this.targetSlot != null) {
			var _g2 = this.targetSlot;
			_g2.set_x(_g2.get_x() + lobby.inner.x);
			var _g3 = this.targetSlot;
			_g3.set_y(_g3.get_y() + lobby.inner.y);
			this.addChild(this.targetSlot);
			var _g4 = this.targetSlot;
			_g4.set_x(_g4.get_x() + canvas.get_x());
			this.targetSlot.set_alpha(0.4);
			motion_Actuate.tween(this.targetSlot,0.6,{ alpha : 1},false);
			this.showTutorialArrow((this.targetSlot.get_x() | 0) + 113,(this.targetSlot.get_y() | 0) + 12,-45);
			this.showChristy((this.targetSlot.get_x() | 0) - 206,(this.targetSlot.get_y() | 0) + 2,1);
			var idx = this.getChildIndex(this.getChildByName("shp.screen"));
			var christy = this.getChildByName("tutorial.christy");
			var arrow = this.getChildByName("tutorial.arrow");
			this.setChildIndex(christy,idx + 1);
			this.setChildIndex(arrow,idx + 1);
			this.setChildIndex(this.targetSlot,idx + 1);
			this.targetSlot.addEventListener("click",$bind(this,this.onClickTutorialSlot));
		}
	}
	,onClickTutorialSlot: function(e) {
		if(this.targetSlot != null) {
			this.targetSlot.removeEventListener("click",$bind(this,this.onClickTutorialSlot));
		}
		com_redpeakgames_cloud9_utils_Trace.trace(this.udt.url,this.udt.uid,this.udt.sig,"sel_tuto_slot");
		this.set_conditionalBtnVisible(false);
	}
	,resetTutorialLobby: function() {
		var lobby = Reflect.field(this.parent,"lobby");
		var canvas = lobby.canvas;
		var _g = this.targetSlot;
		_g.set_x(_g.get_x() - lobby.inner.x);
		var _g1 = this.targetSlot;
		_g1.set_y(_g1.get_y() - lobby.inner.y);
		var _g2 = this.targetSlot;
		_g2.set_x(_g2.get_x() - canvas.get_x());
		Reflect.field(this.parent,"lobby").canvas.addChild(this.targetSlot);
		lobby.shiftPage(0,true);
		this.removeScreen();
		this.setButtons(false);
		this.fullscreen.set_interactive(true);
		this.fullscreen.set_onDirect($bind(this,this.toggleFullscreen));
		this.sound.set_interactive(true);
		this.removeChild(this.getChildByName("tutorial.christy"));
		this.removeChild(this.getChildByName("tutorial.arrow"));
	}
	,startTutorialGame: function() {
		var _gthis = this;
		this.addScreen();
		var blockStop = new openfl_display_Shape();
		blockStop.get_graphics().beginFill(0,0);
		blockStop.get_graphics().drawRect(0,0,158,47);
		blockStop.get_graphics().endFill();
		blockStop.set_x(1248);
		blockStop.set_y(792);
		blockStop.set_name("block.stop");
		this.addChild(blockStop);
		var blockPlusMinus = new openfl_display_Shape();
		blockPlusMinus.get_graphics().beginFill(0,0);
		blockPlusMinus.get_graphics().drawRect(0,0,62,88);
		blockPlusMinus.get_graphics().endFill();
		blockPlusMinus.set_x(835);
		blockPlusMinus.set_y(749);
		blockPlusMinus.set_name("block.plusminus");
		this.addChild(blockPlusMinus);
		var btnSpin = new com_redpeakgames_cloud9_ui_ImageButton("img/tutorial/btn_spin",null,null,"mouse_click");
		btnSpin.set_name("btn.spin");
		btnSpin.set_x(1256);
		btnSpin.set_y(721);
		btnSpin.set_onClick(function(e) {
			btnSpin.set_work(false);
			com_redpeakgames_cloud9_utils_DynamicCall.method(_gthis.parent,"callLoaderMethod",["doSpin",[]]);
			_gthis.removeScreen();
			_gthis.setButtons(false);
			motion_Actuate.timer(0.2).onComplete(function() {
				_gthis.removeChild(btnSpin);
			});
			motion_Actuate.tween(_gthis.getChildByName("tutorial.christy"),0.2,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				_gthis.removeChild(_gthis.getChildByName("tutorial.christy"));
			});
			motion_Actuate.tween(_gthis.getChildByName("tutorial.arrow"),0.2,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				_gthis.removeChild(_gthis.getChildByName("tutorial.arrow"));
			});
			com_redpeakgames_cloud9_utils_Trace.trace(_gthis.udt.url,_gthis.udt.uid,_gthis.udt.sig,"tuto_spin");
		});
		this.addChild(btnSpin);
		this.showTutorialArrow(btnSpin.get_x() + 112 | 0,(btnSpin.get_y() | 0) - 22,-45);
		this.showChristy(btnSpin.get_x() - 267 | 0,(btnSpin.get_y() | 0) - 83,2);
	}
	,endTutorialGame: function() {
		this.addScreen();
		this.setChildIndex(this.cashout,this.get_numChildren() - 1);
		this.showTutorialArrow((this.cashout.get_x() | 0) + 28,(this.cashout.get_y() | 0) - 12,0);
		this.showChristy((this.cashout.get_x() | 0) - 246,(this.cashout.get_y() | 0) + 10,3);
		this.cashout.set_work(true);
		this.cashout.set_onClick($bind(this,this.backToLobbyFromTutorial));
		this.removeChild(this.getChildByName("block.stop"));
		this.removeChild(this.getChildByName("block.plusminus"));
		com_redpeakgames_cloud9_utils_DynamicCall.method(Reflect.field(this.parent,"lobby"),"setStatus",[this.lev,this.exp]);
		this.isTutorial = false;
	}
	,backToLobbyFromTutorial: function(e) {
		var _gthis = this;
		this.closeTournament();
		this.cashout.set_onClick($bind(this,this.backToLobby));
		this.removeScreen();
		motion_Actuate.tween(this.getChildByName("tutorial.christy"),0.2,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_gthis.removeChild(_gthis.getChildByName("tutorial.christy"));
		});
		motion_Actuate.tween(this.getChildByName("tutorial.arrow"),0.2,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_gthis.removeChild(_gthis.getChildByName("tutorial.arrow"));
		});
		this.dispatchEvent(new openfl_events_DataEvent("ge.to.lobby",true,false,"popup"));
		com_redpeakgames_cloud9_utils_Trace.trace(this.udt.url,this.udt.uid,this.udt.sig,"tuto_to_lobby");
	}
	,showChristy: function(x,y,num) {
		var pack = new openfl_display_Sprite();
		pack.set_name("tutorial.christy");
		pack.set_x(x);
		pack.set_y(y);
		pack.set_alpha(0);
		var christy = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/tutorial/tutorial_christy.png"),1,true);
		var txt = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/tutorial/tutorial_txt_" + num + ".png"),1,true);
		if(num == 1) {
			txt.set_x(41);
			txt.set_y(147);
		} else if(num == 2) {
			txt.set_x(40);
			txt.set_y(149);
		} else if(num == 3) {
			txt.set_x(37);
			txt.set_y(137);
		}
		pack.addChild(christy);
		pack.addChild(txt);
		this.addChild(pack);
		motion_Actuate.timer(0.266).onComplete(function() {
			motion_Actuate.tween(pack,0.266,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(pack,0.2,{ scaleX : 1.1, scaleY : 1.1, x : pack.get_x() - 12, y : pack.get_y() - 11},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				motion_Actuate.tween(pack,0.2,{ scaleX : 1, scaleY : 1, x : pack.get_x() + 12, y : pack.get_y() + 11},false).ease(motion_easing_Linear.get_easeNone());
			});
		});
	}
	,showTutorialArrow: function(x,y,angle) {
		var pack = new openfl_display_Sprite();
		pack.set_x(x);
		pack.set_y(y);
		pack.set_name("tutorial.arrow");
		var arrow = new openfl_display_Sprite();
		var click = new openfl_display_Sprite();
		if(angle < 0) {
			click.set_x(44);
			click.set_y(-25);
		} else {
			click.set_x(36);
			click.set_y(22);
		}
		var arrowimg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/tutorial/tutorial_arrow.png"),1,true);
		var clickimg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/tutorial/tutorial_click.png"),1,true);
		arrow.addChild(arrowimg);
		click.addChild(clickimg);
		pack.addChild(arrow);
		pack.addChild(click);
		this.addChild(pack);
		arrowimg.set_x(53);
		arrowimg.set_alpha(0);
		arrow.set_rotation(angle);
		motion_Actuate.timer(0.266).onComplete(function() {
			motion_Actuate.tween(arrowimg,0.2,{ x : -10},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				motion_Actuate.tween(arrowimg,0.466,{ x : 10},false).ease(motion_easing_Linear.get_easeNone()).delay(0.2).repeat();
				motion_Actuate.tween(arrowimg,0.066,{ x : -17, scaleX : 0.8},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
					motion_Actuate.tween(arrowimg,0.066,{ x : 0, scaleX : 1},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
						motion_Actuate.tween(arrowimg,0.2,{ x : 0},false).ease(motion_easing_Linear.get_easeNone()).delay(0.466).repeat();
					});
				});
			});
		});
		var cw = 55;
		var ch = 30;
		clickimg.set_scaleX(1.5);
		clickimg.set_scaleY(1.5);
		clickimg.set_x(-(cw * 1.5 - cw) / 2);
		clickimg.set_y(-(ch * 1.5 - ch) / 2);
		clickimg.set_alpha(0);
		motion_Actuate.timer(0.266).onComplete(function() {
			arrowimg.set_alpha(1);
			motion_Actuate.timer(0.2).onComplete(function() {
				motion_Actuate.tween(clickimg,0.466,{ scaleX : 1.2, scaleY : 1.2, x : -(cw * 1.2 - cw) / 2, y : -(ch * 1.2 - ch) / 2},false).ease(motion_easing_Linear.get_easeNone()).delay(0.2).repeat();
			});
			motion_Actuate.tween(clickimg,0.4,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				motion_Actuate.tween(clickimg,0.2,{ scaleX : 1, scaleY : 1, x : 0, y : 0},false).ease(motion_easing_Linear.get_easeNone()).delay(0.466).repeat();
			});
			motion_Actuate.tween(clickimg,0.333,{ scaleX : 0.9, scaleY : 0.9, x : (cw - cw * 0.9) / 2, y : (ch - ch * 0.9) / 2},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				motion_Actuate.tween(clickimg,0.066,{ scaleX : 1, scaleY : 1, x : 0, y : 0},false).ease(motion_easing_Linear.get_easeNone());
			});
		});
	}
	,getBankruptBonus: function() {
		var http = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "getbankruptbonus.php",$bind(this,this.onGetBankruptBonus),$bind(this,this.onIoFail));
		var post = new openfl_net_URLVariables();
		post.uid = this.udt.uid;
		post.sig = this.udt.sig;
		http.request(post);
	}
	,onGetBankruptBonus: function(e) {
		var _gthis = this;
		var loader = e.target;
		var sy = 417;
		if(openfl_Lib.current.stage.get_displayState() != 2) {
			sy = 489;
		}
		var drawCoin = new com_redpeakgames_cloud9_ui_DrawCoins(1040,sy,713,85,1500,5);
		drawCoin.set_onCoinArrive(function() {
			_gthis.balanceChanged(haxe_Int64Helper.parseString(loader.data),_gthis.udt.dia,true);
		});
		this.addChild(drawCoin);
	}
	,onIoFail: function(e) {
		haxe_Log.trace(e.toString(),{ fileName : "TopMenu.hx", lineNumber : 2936, className : "com.redpeakgames.cloud9.TopMenu", methodName : "onIoFail"});
	}
	,giftPlaceProfile: function(inAppFriends) {
		try {
			var gift = this.getChildByName("popup.gift");
			if(gift != null) {
				gift.replaceInAppFriends(inAppFriends);
				gift.placeProfiles();
			}
		} catch( err ) {
			haxe_CallStack.lastException = err;
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace("topMenu.giftPlaceProfile : " + Std.string(err),{ fileName : "TopMenu.hx", lineNumber : 2952, className : "com.redpeakgames.cloud9.TopMenu", methodName : "giftPlaceProfile"});
		}
	}
	,openLeaderb: function() {
		this.addScreen();
		var leaderb = new com_redpeakgames_cloud9_dialog_Leaderb(this.udt);
		leaderb.set_x(947);
		if(openfl_Lib.current.stage.get_displayState() == 2) {
			leaderb.set_y(415);
		} else {
			leaderb.set_y(487);
		}
		var ty = leaderb.get_y() - 271;
		leaderb.set_alpha(0);
		leaderb.set_scaleX(0);
		leaderb.set_scaleY(0);
		this.addChild(leaderb);
		motion_Actuate.tween(leaderb,0.2,{ alpha : 1, x : 663, y : ty, scaleX : 1, scaleY : 1}).ease(motion_easing_Linear.get_easeNone());
	}
	,sentInvite: function() {
		com_redpeakgames_cloud9_utils_Console.log("sentInvite called");
		var _g1 = 0;
		var _g = this.get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			if(this.getChildAt(i).get_name() == "popup.Invite") {
				(js_Boot.__cast(this.getChildAt(i) , com_redpeakgames_cloud9_dialog_Invite)).removeCheck();
			}
		}
	}
	,cashSpin: function(usd) {
		com_redpeakgames_cloud9_utils_Console.log("usd : " + usd);
		var loader = this.getLoaderSafe("popup.dailywheel");
		if(loader != null) {
			var content = this.getContentFromLoader(loader);
			if(content != null) {
				content.onClickSpin(null);
			}
		}
	}
	,coinBought: function() {
		var loader = this.getLoaderSafe("popup.conditional");
		if(loader != null) {
			var content = this.getContentFromLoader(loader);
			if(content != null) {
				content.onRecvBuyCoins();
			}
		}
	}
	,openBonusStreak: function(day,first) {
		var _gthis = this;
		this.addScreen();
		var bonusStreak = new com_redpeakgames_cloud9_dialog_BonusStreak(day,first,this.udt);
		bonusStreak.set_x(581);
		if(openfl_Lib.current.stage.get_displayState() == 2) {
			bonusStreak.set_y(116);
		} else {
			bonusStreak.set_y(185);
		}
		haxe_Timer.delay(function() {
			_gthis.addChild(bonusStreak);
			bonusStreak.start();
		},200);
	}
	,openLinkBonus: function(which) {
		var _gthis = this;
		this.addScreen();
		haxe_Timer.delay(function() {
			_gthis.addChild(new com_redpeakgames_cloud9_dialog_Bonus(which));
		},200);
	}
	,openSales: function() {
		var _gthis = this;
		this.addScreen();
		haxe_Timer.delay(function() {
			var sale = new com_redpeakgames_cloud9_dialog_Sales(_gthis.sales);
			sale.set_alpha(0);
			_gthis.addChild(sale);
			motion_Actuate.tween(sale,0.2,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
		},200);
	}
	,openSalesTimeLimit: function(salesTrackingId) {
		if(com_redpeakgames_cloud9_TopMenu.salesExpiredTime - (new Date().getTime() + com_redpeakgames_cloud9_TopMenu.timezoneOffset * 60000) < 0) {
			this.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true,false));
			return;
		}
		this.addScreen();
		var salesTimeLimit = new com_redpeakgames_cloud9_dialog_SalesTimeLimit(534,62 + (this.fullscreen.get_checked()?69:0),salesTrackingId,this.udt);
		salesTimeLimit.set_name("sales.timelimit");
		salesTimeLimit.set_alpha(0);
		motion_Actuate.tween(salesTimeLimit,0.2,{ alpha : 1}).delay(0.2);
		this.addChild(salesTimeLimit);
	}
	,makeSalesTagTimeLimit: function() {
		var _gthis = this;
		if(com_redpeakgames_cloud9_TopMenu.salesExpiredTime - (new Date().getTime() + com_redpeakgames_cloud9_TopMenu.timezoneOffset * 60000) < 0) {
			return;
		}
		this.canvasSalesTimeLimitTag = new openfl_display_Sprite();
		this.canvasSalesTimeLimitTag.set_x(401);
		this.canvasSalesTimeLimitTag.set_y(520);
		this.addChildAt(this.canvasSalesTimeLimitTag,this.getChildIndex(this.canvasTournament) - 1);
		this.adjustPosSalesTimeLimitTag(false,false);
		this.bgTxTimeSales = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/sales/fathers_day/btn_ota_tag_collect_time.png"));
		this.bgTxTimeSales.set_x(1);
		this.bgTxTimeSales.set_y(84);
		this.canvasSalesTimeLimitTag.addChild(this.bgTxTimeSales);
		var bgTag = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/sales/fathers_day/tag_father_back.png"));
		this.canvasSalesTimeLimitTag.addChild(bgTag);
		this.canvasSalesTimeLimitTag.buttonMode = true;
		this.canvasSalesTimeLimitTag.addEventListener("click",function(e) {
			if(!_gthis.canvasSalesTimeLimitTag.buttonMode) {
				return;
			}
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("mouse_click_c",0,0);
			}
			var salesTrackingId = 2;
			if(_gthis.lobby) {
				salesTrackingId = 3;
			}
			_gthis.openSalesTimeLimit(salesTrackingId);
		});
		this.btnTimeSalesTag = new com_redpeakgames_cloud9_ui_ImageButton("img/sales/fathers_day/btn_father_open_s",null,null,"mouse_click");
		this.btnTimeSalesTag.set(0,0);
		this.btnTimeSalesTag.set_onClick(function(e1) {
			var salesTrackingId1 = 2;
			if(_gthis.lobby) {
				salesTrackingId1 = 3;
			}
			_gthis.openSalesTimeLimit(salesTrackingId1);
		});
		this.btnTimeSalesTag.set_visible(false);
		this.canvasSalesTimeLimitTag.addChild(this.btnTimeSalesTag);
		var tf = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",16,65280);
		tf.align = 0;
		this.txTimeSalesTimeLimit = com_redpeakgames_cloud9_ui_TxField.make(49,91,72,tf);
		this.canvasSalesTimeLimitTag.addChild(this.txTimeSalesTimeLimit);
		var tmr = new haxe_Timer(5000);
		tmr.run = function() {
			if(_gthis.canvasSalesTimeLimitTag == null) {
				tmr.stop();
				return;
			}
			motion_Actuate.tween(bgTag,0.2,{ scaleX : 1.1, scaleY : 1.1, x : bgTag.get_x() - bgTag.get_width() * 0.1 / 2, y : bgTag.get_y() - bgTag.get_height() * 0.1 / 2}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat(1).onComplete(function() {
				motion_Actuate.tween(bgTag,0.3,{ scaleX : 1.2, scaleY : 1.2, x : bgTag.get_x() - bgTag.get_width() * 0.2 / 2, y : bgTag.get_y() - bgTag.get_height() * 0.2 / 2}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat(1);
			});
		};
	}
	,adjustPosSalesTimeLimitTag: function(ingame,changeChildIndex) {
		if(this.canvasSalesTimeLimitTag == null) {
			return;
		}
		if(ingame == true) {
			if(changeChildIndex) {
				this.setChildIndex(this.canvasSalesTimeLimitTag,this.getChildIndex(this.canvasTournament));
			}
			this.canvasSalesTimeLimitTag.set_x(303);
			if(this.fullscreen.get_checked()) {
				this.canvasSalesTimeLimitTag.set_y(142);
			} else {
				this.canvasSalesTimeLimitTag.set_y(52);
			}
		} else {
			if(changeChildIndex) {
				this.setChildIndex(this.canvasSalesTimeLimitTag,this.getChildIndex(this.canvasTournament) - 1);
			}
			this.canvasSalesTimeLimitTag.set_x(401);
			if(this.fullscreen.get_checked()) {
				this.canvasSalesTimeLimitTag.set_y(589);
			} else {
				this.canvasSalesTimeLimitTag.set_y(520);
			}
		}
	}
	,openPlaySlot: function() {
		var _gthis = this;
		this.addScreen();
		haxe_Timer.delay(function() {
			var newGame = new com_redpeakgames_cloud9_dialog_NewGame(_gthis.udt);
			newGame.set_alpha(0);
			_gthis.addChild(newGame);
			motion_Actuate.tween(newGame,0.2,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
		},200);
	}
	,openHitTheFive: function(x,y,prize) {
		var hf = new com_redpeakgames_cloud9_dialog_HitTheFive(x,y,prize,com_redpeakgames_cloud9_Global.mute,this.seManager);
		this.addEventListener("ge.close.hitthefive",$bind(this,this.onCloseHitTheFive));
		this.isHitTheFive = true;
		hf.set_name("popup.hitthefive");
		this.addChild(hf);
	}
	,onCloseHitTheFive: function(e) {
		e.stopPropagation();
		this.isHitTheFive = false;
		this.removeEventListener("ge.close.hitthefive",$bind(this,this.onCloseHitTheFive));
	}
	,onLoadError: function(e) {
		haxe_Log.trace("Topmenu.onLoadError: " + Std.string(e),{ fileName : "TopMenu.hx", lineNumber : 3273, className : "com.redpeakgames.cloud9.TopMenu", methodName : "onLoadError"});
	}
	,enableToKeyboardSpin: function(value) {
		var o = this.parent;
		var tmp;
		var tmp1;
		if(o == null) {
			tmp1 = null;
		} else {
			var tmp2;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + "isLobby"];
				tmp2 = tmp;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = o[tmp]();
			} else {
				tmp1 = o.isLobby;
			}
		}
		if(tmp1) {
			return;
		}
		try {
			com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"callLoaderMethod",["enableToKeyboardSpin",[value]]);
		} catch( err ) {
			haxe_CallStack.lastException = err;
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace("topMenu.enableToKeyboardSpin() : " + Std.string(err),{ fileName : "TopMenu.hx", lineNumber : 3288, className : "com.redpeakgames.cloud9.TopMenu", methodName : "enableToKeyboardSpin"});
		}
	}
	,openDailyWheel: function(friendNum) {
		var wheelIdx = Reflect.field(this.parent,"lobby").wheelIdx;
		haxe_Log.trace(wheelIdx,{ fileName : "TopMenu.hx", lineNumber : 3295, className : "com.redpeakgames.cloud9.TopMenu", methodName : "openDailyWheel", customParams : [JSON.stringify(this.udt),friendNum]});
		this.addScreen();
		this.safeRunContentMethod("popup.dailywheel","start",[JSON.stringify(this.udt),wheelIdx,friendNum,com_redpeakgames_cloud9_Global.mute]);
	}
	,startDailyWheel: function(loader,friendNum) {
		var _gthis = this;
		if(this.getContentFromLoader(loader) == null) {
			haxe_Timer.delay(function() {
				_gthis.startDailyWheel(loader,friendNum);
			},100);
		} else {
			var wheelIdx = Reflect.field(this.parent,"lobby").wheelIdx;
			loader.set_visible(true);
			this.getContentFromLoader(loader).start(JSON.stringify(this.udt),wheelIdx,friendNum,com_redpeakgames_cloud9_Global.mute);
			this.setChildIndex(loader,this.get_numChildren() - 1);
		}
	}
	,openDiaWheel: function(friendNum) {
		this.addScreen();
		this.safeRunContentMethod("popup.diawheel","start",[com_redpeakgames_cloud9_Global.mute]);
	}
	,getLoaderSafe: function(name,from) {
		var obj = this;
		if(from != null) {
			obj = from;
		}
		var loader = null;
		try {
			loader = obj.getChildByName(name);
		} catch( err ) {
			haxe_CallStack.lastException = err;
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace(err,{ fileName : "TopMenu.hx", lineNumber : 3374, className : "com.redpeakgames.cloud9.TopMenu", methodName : "getLoaderSafe"});
		}
		return loader;
	}
	,getContentFromLoader: function(loader,name) {
		if(name == null) {
			name = "cloud9";
		}
		var ret = null;
		if(loader.content.get_name().indexOf(name) != -1) {
			ret = loader.content;
		} else {
			var _g1 = 0;
			var o = loader.content;
			var tmp;
			var tmp1;
			if(o == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(o.__properties__) {
					tmp = o.__properties__["get_" + "numChildren"];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = o[tmp]();
				} else {
					tmp1 = o.numChildren;
				}
			}
			var _g = tmp1;
			while(_g1 < _g) {
				var i = _g1++;
				if(com_redpeakgames_cloud9_utils_DynamicCall.method(loader.content,"getChildAt",[i]).name.indexOf(name) != -1) {
					ret = com_redpeakgames_cloud9_utils_DynamicCall.method(loader.content,"getChildAt",[i]);
				}
			}
		}
		return ret;
	}
	,safeRunContentMethod: function(loaderName,contentMethodName,params,setIndexToTop,from,onLoadedMethod,xy,contentName,loadingVisible) {
		var _gthis = this;
		var tmrLoader = new haxe_Timer(10);
		tmrLoader.run = function() {
			var loader = null;
			loader = com_redpeakgames_cloud9_ExternalLoaderManager.getLoader(loaderName);
			com_redpeakgames_cloud9_ExternalLoaderManager.load(loaderName);
			if(loader != null) {
				tmrLoader.stop();
				if(xy != null) {
					loader.set_x(xy.x);
					loader.set_y(xy.y);
				}
				var loading = new com_redpeakgames_cloud9_dialog_CircleLoading(loader,960,300,function() {
					var tmrContent = new haxe_Timer(10);
					tmrContent.run = function() {
						var content = _gthis.getContentFromLoader(loader,contentName);
						if(content != null) {
							tmrContent.stop();
							if(contentMethodName != null) {
								if(Object.prototype.hasOwnProperty.call(content,contentMethodName)) {
									Reflect.field(content,contentMethodName).apply(content,params);
								} else {
									haxe_Log.trace("There is no [" + contentMethodName + "] in content " + Std.string(content),{ fileName : "TopMenu.hx", lineNumber : 3437, className : "com.redpeakgames.cloud9.TopMenu", methodName : "safeRunContentMethod"});
								}
							}
							loader.set_visible(true);
							if(setIndexToTop == null) {
								setIndexToTop = true;
							}
							if(setIndexToTop) {
								_gthis.setChildIndex(loader,_gthis.get_numChildren() - 1);
							}
							if(onLoadedMethod != null) {
								onLoadedMethod();
							}
						}
					};
					tmrContent.run();
				});
				_gthis.addChild(loading);
				if(loadingVisible != null) {
					loading.set_visible(loadingVisible);
				}
			}
		};
		tmrLoader.run();
	}
	,onRecvConditionalDeal: function(e) {
		var _gthis = this;
		if(this.tmrHttpConditional != null) {
			this.tmrHttpConditional.stop();
		}
		this.set_dataConditionalDeal(e.target.data);
		this.dataConditionalRefreshed = true;
		com_redpeakgames_cloud9_utils_Console.log("Conditional deal data : " + this.dataConditionalDeal);
		if(this.forceCondiDataReq) {
			var content = this.getContentFromLoader(this.getLoaderSafe("popup.conditional"),"cloud9.conditional");
			if(content != null) {
				content.refreshData(this.dataConditionalDeal);
			}
			this.forceCondiDataReq = false;
		}
		JSON.parse(this.dataConditionalDeal);
		this.refreshConditionalDealBtns();
		this.tmrHttpConditional = haxe_Timer.delay(function() {
			var data = new openfl_net_URLVariables();
			data.uid = _gthis.udt.uid;
			data.sig = _gthis.udt.sig;
			_gthis.httpConditionalDeal.request(data);
		},3600000);
	}
	,refreshConditionalDealBtns: function() {
		var json = JSON.parse(this.dataConditionalDeal);
		if(json.day.id == 0) {
			this.btnDealSeven.set_visible(false);
		} else if(json.day.status != "offer") {
			this.btnDealSeven.set_visible(true);
			var sevenCollect = [2,2,2,2,2,2,2];
			var _g1 = 0;
			var _g = (js_Boot.__cast(json.day.collect , Array)).length;
			while(_g1 < _g) {
				var i = _g1++;
				sevenCollect[i] = Std.parseInt((js_Boot.__cast(json.day.collect , Array))[i]);
			}
			var idx = 0;
			var collectCnt = 0;
			var _g11 = 0;
			var _g2 = sevenCollect.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				if(sevenCollect[i1] != 2) {
					idx = i1;
				}
				if(sevenCollect[i1] == 1) {
					++collectCnt;
				}
			}
			this.makeConditionalBtn("day",false,idx + 1,collectCnt);
		}
		if(json.lev.id == 0) {
			this.btnDealLevel.set_visible(false);
		} else {
			this.btnDealLevel.set_visible(true);
			if(json.lev.status == "offer") {
				this.makeConditionalBtn("lev",true);
			} else {
				var levCollect = [2,2,2,2,2,2];
				var _g12 = 0;
				var _g3 = (js_Boot.__cast(json.lev.collect , Array)).length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					levCollect[i2] = Std.parseInt((js_Boot.__cast(json.lev.collect , Array))[i2]);
				}
				var idx1 = 0;
				var _g13 = 0;
				var _g4 = levCollect.length;
				while(_g13 < _g4) {
					var i3 = _g13++;
					if(levCollect[i3] != 2) {
						idx1 = i3;
					}
					var tmp = levCollect[i3] == 1;
				}
				if(json.lev.id == 1) {
					if(idx1 != 0) {
						var tmp1 = idx1 + 1 < 6;
					}
				} else if(this.lev >= 50) {
					var tmp2 = idx1 + 1 < 6;
				}
			}
		}
	}
	,makeConditionalDealBtns: function() {
		this.conditionalBtnCanvas.removeChildren();
		this.conditionalBtnCanvas.set_x(this.conditionalBtnCanvasPos.x);
		this.conditionalBtnCanvas.set_y(this.conditionalBtnCanvasPos.y);
		this.makeConditionalBtn("day",true,1);
		this.makeConditionalBtn("lev",true,10);
		if(this.btnDealSeven != null) {
			this.btnDealSeven.set_visible(false);
		}
		if(this.btnDealLevel != null) {
			this.btnDealLevel.set_visible(false);
		}
	}
	,makeConditionalBtn: function(type,isOffer,value,cnt) {
		var _gthis = this;
		var json = JSON.parse(this.dataConditionalDeal);
		var canvasBtnAni = new openfl_display_Sprite();
		var pathBtn = "";
		var pathAni = "";
		var pathAniTitle = "";
		if(isOffer) {
			pathBtn = "btn_deal_" + type + "_sale";
			pathAni = "deal_" + type + "_sale_e";
			pathAniTitle = "deal_" + type + "_sale_title_e";
		} else {
			pathBtn = "btn_deal_" + type;
			pathAni = "deal_" + type + "_e";
		}
		var btn = new com_redpeakgames_cloud9_ui_ImageButton("img/conditional/" + pathBtn,null,null,"mouse_click");
		this.conditionalBtnCanvas.addChild(btn);
		btn.addChild(canvasBtnAni);
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/conditional/" + pathAni + ".png",false),6,3,155,92);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],false,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("loop",[5,6,7,8,9,10,11,12,13,14],true,15));
		var ani = new spritesheet_AnimatedSprite(ss);
		ani.showBehaviors(["_e","loop"]);
		this.animations.push(ani);
		canvasBtnAni.addChild(ani);
		var tmrAni = new haxe_Timer(12233);
		var aniMethod = function() {
		};
		if(isOffer) {
			ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/conditional/" + pathAniTitle + ".png",false),6,3,155,92);
			ss.addBehavior(new spritesheet_data_BehaviorData("stop",[0],false,15));
			ss.addBehavior(new spritesheet_data_BehaviorData("_e",[1,2,3,4,5,6,7,8,9,10,11,12,13,14,0],false,15));
			var aniTitle = new spritesheet_AnimatedSprite(ss);
			aniTitle.showBehavior("stop");
			this.animations.push(aniTitle);
			canvasBtnAni.addChild(aniTitle);
			var max = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/conditional/btn_txt_max.png"));
			max.set_x(55);
			max.set_y(28);
			canvasBtnAni.addChild(max);
			var txtCoin = new com_redpeakgames_cloud9_ui_NumberBitmap("img/conditional/font_btn_maxcoin.png",105,12,15,12,1,-1,6);
			txtCoin.commaWidth = 6;
			txtCoin.set_commaY(2);
			txtCoin.set_x(25);
			txtCoin.set_y(50);
			canvasBtnAni.addChild(txtCoin);
			aniMethod = function() {
				if(type == "day") {
					if(json.day.id == 1) {
						txtCoin.draw(new haxe__$Int64__$_$_$Int64(0,4500000));
					} else if(json.day.id == 2) {
						txtCoin.draw(new haxe__$Int64__$_$_$Int64(0,17000000));
					}
				} else if(json.lev.id == 1) {
					txtCoin.draw(new haxe__$Int64__$_$_$Int64(0,1000000));
				} else if(json.lev.id == 2) {
					txtCoin.draw(new haxe__$Int64__$_$_$Int64(0,3000000));
				}
				motion_Actuate.stop(aniTitle);
				motion_Actuate.stop(max);
				motion_Actuate.stop(txtCoin);
				aniTitle.set_x(0);
				aniTitle.set_scaleX(1);
				aniTitle.showBehavior("_e");
				motion_Actuate.tween(aniTitle,0.2,{ x : 78, scaleX : 0},false).ease(motion_easing_Quad.get_easeIn()).delay(1.433);
				max.set_x(78);
				max.set_scaleX(0);
				motion_Actuate.tween(max,0.2,{ x : 55, scaleX : 1},false).ease(motion_easing_Quad.get_easeOut()).delay(1.633);
				txtCoin.set_x(83);
				txtCoin.set_scaleX(0);
				motion_Actuate.tween(txtCoin,0.2,{ x : 25, scaleX : 1},false).ease(motion_easing_Quad.get_easeOut()).delay(1.633);
				motion_Actuate.tween(max,0.2,{ x : 78, scaleX : 0},false).ease(motion_easing_Quad.get_easeIn()).delay(5.833);
				motion_Actuate.tween(txtCoin,0.2,{ x : 83, scaleX : 0},false).ease(motion_easing_Quad.get_easeIn()).delay(5.833);
				motion_Actuate.tween(aniTitle,0.2,{ x : 0, scaleX : 1},false).ease(motion_easing_Quad.get_easeOut()).delay(6.033);
			};
		} else {
			aniMethod = function() {
				ani.showBehavior("_e");
			};
		}
		tmrAni.run = aniMethod;
		tmrAni.run();
		if(!isOffer && value != null) {
			if(type == "day") {
				var dayimg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/conditional/txt_day_" + value + ".png"));
				dayimg.set_x(64);
				dayimg.set_y(38);
				btn.addChild(dayimg);
			} else {
				var tf = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",14,16777215);
				tf.align = 3;
				var lvtxt = com_redpeakgames_cloud9_ui_TxField.make(73,37,63,tf,new openfl_filters_GlowFilter(6160475,1.0,1.5,1.5,10,2));
				lvtxt.set_text("Lv. " + value);
				btn.addChild(lvtxt);
			}
		}
		if(cnt != null && cnt != 0) {
			btn.addChild(new com_redpeakgames_cloud9_ui_NumberNotification(cnt,117,11));
		}
		btn.set_onOver(function(e) {
			canvasBtnAni.set_visible(false);
			tmrAni.stop();
		});
		btn.set_onOut(function(e1) {
			canvasBtnAni.set_visible(true);
			tmrAni = new haxe_Timer(12233);
			tmrAni.run = aniMethod;
			tmrAni.run();
		});
		if(type == "lev") {
			if(this.btnDealLevel != null && this.btnDealLevel.parent != null) {
				this.conditionalBtnCanvas.removeChild(this.btnDealLevel);
			}
			if(json.day.id != 0) {
				btn.set_y(77);
			}
			btn.set_onClick(function(e2) {
				canvasBtnAni.set_visible(true);
				tmrAni.stop();
				_gthis.openConditionalDeal("lev");
			});
			this.btnDealLevel = btn;
		} else {
			if(this.btnDealSeven != null && this.btnDealSeven.parent != null) {
				this.conditionalBtnCanvas.removeChild(this.btnDealSeven);
			}
			this.btnDealSeven = btn;
			this.btnDealSeven.set_onClick(function(e3) {
				canvasBtnAni.set_visible(true);
				tmrAni.stop();
				_gthis.openConditionalDeal("day");
			});
		}
	}
	,openConditionalDeal: function(type,isStartPopup) {
		if(isStartPopup == null) {
			isStartPopup = false;
		}
		var _gthis = this;
		if(!this.dataConditionalRefreshed) {
			haxe_Timer.delay(function() {
				_gthis.openConditionalDeal(type,isStartPopup);
			},100);
			return;
		}
		var json = JSON.parse(this.dataConditionalDeal);
		if(type == "day" && json.day.id == 0 || type == "lev" && json.lev.id == 0) {
			this.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true,false));
			return;
		}
		this.addScreen();
		this.safeRunContentMethod("popup.conditional","start",[type,com_redpeakgames_cloud9_Global.mute,this.dataConditionalDeal],null,null,function() {
			var loader = _gthis.getLoaderSafe("popup.conditional");
			if(type == "day") {
				loader.set_x(_gthis.btnDealSeven.get_x() + _gthis.conditionalBtnCanvas.get_x() + 78);
				loader.set_y(_gthis.btnDealSeven.get_y() + _gthis.conditionalBtnCanvas.get_y() + 46);
			} else {
				loader.set_x(_gthis.btnDealLevel.get_x() + _gthis.conditionalBtnCanvas.get_x() + 78);
				loader.set_y(_gthis.btnDealLevel.get_y() + _gthis.conditionalBtnCanvas.get_y() + 46);
			}
			loader.set_scaleX(0);
			loader.set_scaleY(0);
			loader.set_alpha(0);
			var ty = 147;
			if(openfl_Lib.current.stage.get_displayState() != 2) {
				ty = 216;
			}
			motion_Actuate.tween(loader,0.3,{ alpha : 1},false).ease(motion_easing_Quad.get_easeIn());
			motion_Actuate.tween(loader,0.3,{ x : 671, y : ty, scaleX : 1, scaleY : 1},false).ease(motion_easing_Linear.get_easeNone());
		});
	}
	,set_conditionalBtnVisible: function(value) {
		this.conditionalBtnCanvas.set_visible(value);
		return this.conditionalBtnVisible = value;
	}
	,set_dataConditionalDeal: function(value) {
		return this.dataConditionalDeal = value;
	}
	,requestConditionalData: function() {
		var data = new openfl_net_URLVariables();
		data.uid = this.udt.uid;
		data.sig = this.udt.sig;
		this.forceCondiDataReq = true;
		this.httpConditionalDeal.request(data);
	}
	,closeConditionalDeal: function(type) {
		this.removeScreen();
		var loader = this.getLoaderSafe("popup.conditional");
		if(loader != null) {
			var tx = 78;
			var ty = 46;
			motion_Actuate.tween(loader,0.3,{ alpha : 0},false).ease(motion_easing_Quad.get_easeIn());
			motion_Actuate.tween(loader,0.3,{ x : tx, y : ty, scaleX : 0, scaleY : 0},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				loader.set_visible(false);
			});
		}
	}
	,removeScreenOnly: function() {
		var _gthis = this;
		var idx = this.get_numChildren() - 1;
		while(idx >= 0) {
			var obj = [this.getChildAt(idx)];
			if(obj[0].get_name() == "shp.screen") {
				motion_Actuate.tween(obj[0],0.2,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete((function(obj1) {
					return function() {
						_gthis.removeChild(obj1[0]);
					};
				})(obj));
				break;
			}
			--idx;
		}
	}
	,openRMembers: function(from) {
		if(from == null) {
			from = "";
		}
		if(from == "" || from == "rshop" || from == "topmenu") {
			this.addScreen();
		} else {
			this.overlappedPopupCounter += 1;
		}
		this.safeRunContentMethod("TopMenu.rmembershipLoader","start",[com_redpeakgames_cloud9_Global.mute,from]);
	}
	,closeRMembers: function(num) {
		if(num == 0) {
			this.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
		} else {
			this.removeScreen();
		}
		this.classUp(true);
		var loader = this.getLoaderSafe("TopMenu.rmembershipLoader");
		if(loader != null) {
			loader.set_visible(false);
		}
	}
	,quickShop: function() {
		var _gthis = this;
		var typeBg = [];
		var listStr = [com_redpeakgames_cloud9_utils_Number.addCommaInt(new haxe__$Int64__$_$_$Int64(0,35000000)) + " + 1,200 R Pts = $99",com_redpeakgames_cloud9_utils_Number.addCommaInt(new haxe__$Int64__$_$_$Int64(0,12500000)) + " + 500 R Pts = $49",com_redpeakgames_cloud9_utils_Number.addCommaInt(new haxe__$Int64__$_$_$Int64(0,5400000)) + " + 300 R Pts = $29",com_redpeakgames_cloud9_utils_Number.addCommaInt(new haxe__$Int64__$_$_$Int64(0,3200000)) + " + 200 R Pts = $19"];
		var buyUsd = ["99.00","49.00","29.00","19.00"];
		var listNumber = 4;
		var qss = new openfl_display_Sprite();
		qss.set_x(-431);
		qss.set_y(-4);
		qss.set_name("quickShop");
		this.addChild(qss);
		var getCoin = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/topmenu/txt_get_coins.png"));
		getCoin.set_x(1549);
		getCoin.set_y(12);
		qss.addChild(getCoin);
		var quickBg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/topmenu/bg_getcoin.png"));
		quickBg.set_x(1547);
		quickBg.set_y(27);
		qss.addChild(quickBg);
		var format = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",11,16777215);
		format.align = 0;
		var quickTxt = com_redpeakgames_cloud9_ui_TxField.make(1539,38,200,format,null,true);
		quickTxt.set_text(listStr[2]);
		qss.addChild(quickTxt);
		format.size = 12;
		format.align = 4;
		var dropDown = new com_redpeakgames_cloud9_ui_ImageButton("img/topmenu/btn_dropdown",null,null,"mouse_click");
		dropDown.set_x(1722);
		dropDown.set_y(33);
		dropDown.set_name("false");
		qss.addChild(dropDown);
		var btnBuy = new com_redpeakgames_cloud9_ui_ImageButton("img/topmenu/btn_buy",null,null,"mouse_click");
		btnBuy.set_x(1761);
		btnBuy.set_y(33);
		btnBuy.set_name(buyUsd[2]);
		btnBuy.set_onClick(function(e) {
			_gthis.toNormalScreen();
			try {
				openfl_external_ExternalInterface.call("buyCoins",btnBuy.get_name(),"coin");
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
				if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
				if( js_Boot.__instanceof(e1,openfl_errors_Error) ) {
					haxe_Log.trace(e1.toString(),{ fileName : "TopMenu.hx", lineNumber : 4091, className : "com.redpeakgames.cloud9.TopMenu", methodName : "quickShop"});
				} else throw(e1);
			}
			dropDown.set_scaleY(1);
			dropDown.set_y(33);
			var _g1 = 0;
			var _g = listNumber;
			while(_g1 < _g) {
				var i = _g1++;
				motion_Actuate.tween(typeBg[i],0.2,{ y : -101 + i * 25},false).ease(motion_easing_Quad.get_easeIn());
			}
			dropDown.set_name("false");
		});
		qss.addChild(btnBuy);
		var clip = new openfl_display_Shape();
		clip.get_graphics().beginFill(0,1);
		clip.get_graphics().drawRect(0,0,200,200);
		clip.get_graphics().endFill();
		clip.set_x(1554);
		clip.set_y(67);
		qss.addChild(clip);
		var quickList = new openfl_display_Sprite();
		quickList.set_x(1554);
		quickList.set_y(67);
		quickList.set_mask(clip);
		qss.addChild(quickList);
		var _g11 = 0;
		var _g2 = listNumber;
		while(_g11 < _g2) {
			var i1 = [_g11++];
			typeBg[i1[0]] = new com_redpeakgames_cloud9_ui_ImageButton("img/topmenu/btn_typebg",null,null,"mouse_click");
			typeBg[i1[0]].set_x(0);
			typeBg[i1[0]].set_y(-101 + i1[0] * 25);
			var tmp = i1[0];
			var tmp1 = (function(i2) {
				return function(e2) {
					quickTxt.set_text(listStr[i2[0]]);
					btnBuy.set_name(buyUsd[i2[0]]);
					var _g3 = 0;
					var _g21 = listNumber;
					while(_g3 < _g21) {
						var j = _g3++;
						typeBg[j].set_y(-101 + j * 25);
						dropDown.set_scaleY(1);
						dropDown.set_y(32);
						dropDown.set_name("false");
					}
				};
			})(i1);
			typeBg[tmp].set_onClick(tmp1);
			quickList.addChild(typeBg[i1[0]]);
			var typeTxt = com_redpeakgames_cloud9_ui_TxField.make(-5,2,200,format,null,true);
			typeTxt.set_text(listStr[i1[0]]);
			typeBg[i1[0]].addChild(typeTxt);
		}
		dropDown.set_onClick(function(e3) {
			if(dropDown.get_name() == "false") {
				dropDown.set_scaleY(-1);
				dropDown.set_y(63);
				var _g12 = 0;
				var _g4 = listNumber;
				while(_g12 < _g4) {
					var i3 = _g12++;
					motion_Actuate.tween(typeBg[i3],0.2,{ y : i3 * 25},false).ease(motion_easing_Quad.get_easeIn());
				}
				dropDown.set_name("true");
			} else {
				dropDown.set_scaleY(1);
				dropDown.set_y(32);
				var _g13 = 0;
				var _g5 = listNumber;
				while(_g13 < _g5) {
					var i4 = _g13++;
					motion_Actuate.tween(typeBg[i4],0.2,{ y : -126 + i4 * 25},false).ease(motion_easing_Quad.get_easeIn());
				}
				dropDown.set_name("false");
			}
		});
	}
	,rCongrats: function(vlev) {
		var _gthis = this;
		if(!com_redpeakgames_cloud9_Global.mute) {
			this.seManager.play("etc01",0,0);
		}
		var childIdx = 0;
		if(this.crown != null) {
			childIdx = this.getChildIndex(this.crown);
			this.removeChild(this.crown);
		}
		com_redpeakgames_cloud9_utils_DynamicCall.method(Reflect.field(this.parent,"lobby"),"makeMyClass",[vlev]);
		this.crown = new com_redpeakgames_cloud9_ui_ImageButton("img/topmenu/btn_" + this.layerStr[vlev - 1],null,null,"mouse_etcOver");
		this.crown.set_x(579);
		this.crown.set_y(70);
		this.crown.set_onClick(function(e) {
			_gthis.openRMembers();
		});
		this.addChild(this.crown);
		this.setChildIndex(this.crown,childIdx);
		haxe_Log.trace(childIdx,{ fileName : "TopMenu.hx", lineNumber : 4176, className : "com.redpeakgames.cloud9.TopMenu", methodName : "rCongrats", customParams : ["childIdx"]});
		this.addScreen();
		var rcPopup = new openfl_display_Sprite();
		if(openfl_Lib.current.stage.get_displayState() == 2) {
			rcPopup.set_y(-100);
		} else {
			rcPopup.set_y(-31);
		}
		this.addChild(rcPopup);
		var checkBg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/rmembers/pop/r_checkout_back.png"));
		checkBg.set_x(725);
		checkBg.set_y(286);
		rcPopup.addChild(checkBg);
		var checkTxt = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/rmembers/pop/r_checkout_txt.png"));
		checkTxt.set_x(859);
		checkTxt.set_y(358);
		rcPopup.addChild(checkTxt);
		var icon = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/rmembers/pop/icon_rank_" + this.layerStr[vlev - 1] + "_1.png"));
		icon.set_x(931);
		icon.set_y(419);
		rcPopup.addChild(icon);
		var layerTxt = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/rmembers/pop/txt_rank_" + this.layerStr[vlev - 1] + "_1.png"));
		layerTxt.set_x(908);
		layerTxt.set_y(481);
		rcPopup.addChild(layerTxt);
		var btnCheckOut = new com_redpeakgames_cloud9_ui_ImageButton("img/rmembers/pop/btn_checkout",null,null,"mouse_click");
		btnCheckOut.set_x(845);
		btnCheckOut.set_y(560);
		btnCheckOut.set_onClick(function(e1) {
			_gthis.removeScreen();
			_gthis.removeChild(rcPopup);
			_gthis.openRMembers();
		});
		rcPopup.addChild(btnCheckOut);
		var btnClose = new com_redpeakgames_cloud9_ui_ImageButton("img/bankrupt/btn_sales_x",null,null,"mouse_click");
		btnClose.set_x(1136);
		btnClose.set_y(309);
		btnClose.set_onClick(function(e2) {
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true,false));
			_gthis.removeChild(rcPopup);
			_gthis.classUp(true);
		});
		rcPopup.addChild(btnClose);
	}
	,classUp: function(open) {
		if(open == null) {
			open = false;
		}
		if(open) {
			if(this.myClassUp) {
				this.dispatchEvent(new openfl_events_DataEvent("ge.close.levelup",true,true));
			}
			this.myClassUp = false;
			if(this.voucherOrder != 0) {
				this.openVoucherBonus(this.voucherPrize);
			}
		} else if(this.myClassUp) {
			this.dispatchEvent(new openfl_events_DataEvent("ge.open.rcongrats",true,false,JSON.stringify(this.vlev)));
		} else if(this.voucherOrder != 0) {
			this.openVoucherBonus(this.voucherPrize);
		} else {
			this.dispatchEvent(new openfl_events_DataEvent("ge.close.levelup",true,true));
		}
	}
	,loadReward: function() {
		this.canvasReward = new openfl_display_Sprite();
		this.addChild(this.canvasReward);
		this.canvasReward.set_visible(false);
	}
	,openRewardPopup: function() {
		var _gthis = this;
		this.canvasReward.set_visible(true);
		var loader = com_redpeakgames_cloud9_ExternalLoaderManager.getLoader("TopMenu.reward");
		if(loader.parent != this.canvasReward) {
			this.canvasReward.addChild(loader);
		}
		this.safeRunContentMethod("TopMenu.reward","showNoticeButton",[this.lobby,com_redpeakgames_cloud9_Global.mute],false,this.canvasReward,function() {
			_gthis.removeScreen();
			_gthis.safeRunContentMethod("TopMenu.reward","openPopup",[],false,_gthis.canvasReward,null,null,null,!_gthis.lobby);
		},null,null,true);
	}
	,set_rewardNoticeVisible: function(value) {
		this.canvasReward.set_visible(value);
		var loader = com_redpeakgames_cloud9_ExternalLoaderManager.getLoader("TopMenu.reward");
		loader.set_visible(false);
		if(loader.parent != this.canvasReward) {
			this.canvasReward.addChild(loader);
		}
		if(value) {
			this.safeRunContentMethod("TopMenu.reward","showNoticeButton",[value,com_redpeakgames_cloud9_Global.mute],false,this.canvasReward,function() {
				loader.set_visible(true);
			},null,null,false);
		} else {
			com_redpeakgames_cloud9_ExternalLoaderManager.unload("TopMenu.reward");
		}
		return this.rewardNoticeVisible = value;
	}
	,rewardMute: function(value) {
		this.safeRunContentMethod("TopMenu.reward","mute",[value],false,this.canvasReward);
	}
	,openProfile: function(id,isAddScreen) {
		if(isAddScreen == null) {
			isAddScreen = true;
		}
		var _gthis = this;
		if(isAddScreen) {
			this.addScreen();
		} else {
			this.overlappedPopupCounter += 1;
		}
		this.safeRunContentMethod("TopMenu.profile","start",[com_redpeakgames_cloud9_Global.mute,id],null,null,function() {
			var loader = _gthis.getLoaderSafe("TopMenu.profile");
			loader.set_y(0);
			if(openfl_Lib.current.stage.get_displayState() != 2) {
				loader.set_y(69);
			}
		});
	}
	,closeProfile: function() {
		this.removeScreen();
		var loader = this.getLoaderSafe("TopMenu.profile");
		if(loader != null) {
			loader.set_visible(false);
		}
	}
	,makeBtnGoto: function() {
		this.canvasGoto = new openfl_display_Sprite();
		this.btnGotoUp = new com_redpeakgames_cloud9_ui_ImageButton("img/goto/btn_goto_up",null,null,"mouse_click");
		this.btnGotoUp.set_x(658);
		this.btnGotoUp.set_visible(false);
		this.btnGotoUp.set_onClick($bind(this,this.onClickGotoSlot));
		this.canvasGoto.addChild(this.btnGotoUp);
		this.btnGotoDown = new com_redpeakgames_cloud9_ui_ImageButton("img/goto/btn_goto_down",null,null,"mouse_click");
		this.btnGotoDown.set_x(658);
		this.btnGotoDown.set_onClick($bind(this,this.onClickGotoSlot));
		this.canvasGoto.addChild(this.btnGotoDown);
	}
	,onClickGotoSlot: function(e) {
		var _gthis = this;
		var number = Math.ceil(this.buttons.length / 9);
		var prevY = this.canvasGoto.get_y();
		if(this.btnGotoDown.get_visible() == false) {
			this.btnGotoDown.set_work(false);
			this.btnGotoDown.set_visible(true);
			this.btnGotoUp.set_visible(false);
			motion_Actuate.tween(this.canvasGoto,0.4,{ y : prevY - number * 80 - 19}).ease(motion_easing_Quad.get_easeOut()).onComplete(function() {
				_gthis.btnGotoDown.set_work(true);
			});
		} else if(this.btnGotoDown.get_visible() == true && e != null) {
			this.btnGotoUp.set_work(false);
			this.btnGotoDown.set_visible(false);
			this.btnGotoUp.set_visible(true);
			motion_Actuate.tween(this.canvasGoto,0.4,{ y : prevY + number * 80 + 19}).ease(motion_easing_Quad.get_easeOut()).onComplete(function() {
				_gthis.btnGotoUp.set_work(true);
			});
		}
	}
	,gotoSlotList: function(data) {
		var lobbyJson = JSON.parse(data);
		var level = lobbyJson.category.level;
		this.games = lobbyJson.slots;
		this.placeGotoSlots(this.games,level);
	}
	,placeGotoSlots: function(slots,level) {
		var _gthis = this;
		this.buttons = [];
		var number = Math.ceil(slots.length / 9);
		var slotPos = [];
		this.getChildByName("quickShop");
		var canvasGotoBlockArea = new openfl_display_Sprite();
		var shape = new openfl_display_Shape();
		shape.get_graphics().beginFill(0,1);
		shape.get_graphics().drawRect(0,0,950,500);
		shape.get_graphics().endFill();
		canvasGotoBlockArea.addChild(shape);
		canvasGotoBlockArea.set_alpha(0);
		canvasGotoBlockArea.set_x(500);
		canvasGotoBlockArea.set_y(-386);
		this.addChildAt(canvasGotoBlockArea,0);
		this.canvasGoto.set_x(580);
		this.canvasGoto.set_y(145);
		this.addChildAt(this.canvasGoto,0);
		this.btnGotoUp.set_y(number * 80 + 10);
		this.btnGotoDown.set_y(number * 80 + 10);
		var gotoBackLeft = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/goto/goto_back_2.png"));
		gotoBackLeft.set_x(19);
		gotoBackLeft.set_rotation(90);
		gotoBackLeft.set_scaleX(number * 80);
		gotoBackLeft.set_scaleY(0.95);
		this.canvasGoto.addChild(gotoBackLeft);
		var gotoBackRight = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/goto/goto_back_2.png"));
		gotoBackRight.set_x(737);
		gotoBackRight.set_y(number * 80);
		gotoBackRight.set_rotation(-90);
		gotoBackRight.set_scaleX(number * 80);
		gotoBackRight.set_scaleY(0.95);
		this.canvasGoto.addChild(gotoBackRight);
		var gotoBackCenter = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/goto/goto_back_2.png"));
		gotoBackCenter.set_x(20);
		gotoBackCenter.set_y(number * 80);
		gotoBackCenter.set_scaleX(717);
		gotoBackCenter.set_scaleY(0.95);
		this.canvasGoto.addChild(gotoBackCenter);
		var gotoBackEdgeLeft = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/goto/goto_back_1.png"));
		gotoBackEdgeLeft.set_y(number * 80 - 1);
		this.canvasGoto.addChild(gotoBackEdgeLeft);
		var gotoBackEdgeRight = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/goto/goto_back_1.png"));
		gotoBackEdgeRight.set_x(756);
		gotoBackEdgeRight.set_y(number * 80 - 1);
		gotoBackEdgeRight.set_scaleX(-1);
		this.canvasGoto.addChild(gotoBackEdgeRight);
		var gotoBackground = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/goto/goto_back_3.png"));
		gotoBackground.set_x(19);
		gotoBackground.set_scaleX(718);
		gotoBackground.set_scaleY(number * 80);
		this.canvasGoto.addChild(gotoBackground);
		var btnGotoBack = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/goto/goto_arrow_back.png"));
		btnGotoBack.set_x(653);
		btnGotoBack.set_y(number * 80 - 8);
		this.canvasGoto.addChild(btnGotoBack);
		var _g1 = 0;
		var _g = slots.length;
		while(_g1 < _g) {
			var i = [_g1++];
			var slotList = new openfl_display_Sprite();
			slotList.set_x(12 + (i[0] % 9 | 0) * 82);
			slotList.set_y(8 + (i[0] / 9 | 0) * 82);
			slotPos.push({ x : 12 + (i[0] % 9 | 0) * 82, y : 8 + (i[0] / 9 | 0) * 82 - (number * 80 + 50)});
			slotList.set_name(slots[i[0]].url);
			this.canvasGoto.addChild(slotList);
			this.buttons.push(slotList);
			var slot = [new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/tournament/theme_icon/" + Std.string(slots[i[0]].sid) + Std.string(slots[i[0]].type) + ".png"))];
			slot[0].set_name(slots[i[0]].url);
			slotList.addChild(slot[0]);
			var btnPlay = [new com_redpeakgames_cloud9_ui_ImageButton("img/tournament/btn_play",null,null,"mouse_click")];
			var lockNumber = Std.parseInt(slots[i[0]].lock);
			if(slots[i[0]].lev > this.udt.lev && lockNumber != 4) {
				slotList.buttonMode = false;
				var tmp = openfl_Assets.getBitmapData("img/tournament/theme_icon/cs_" + Std.string(slots[i[0]].sid) + Std.string(slots[i[0]].type) + ".png");
				slot[0].set_bitmapData(tmp);
				var lock = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/tournament/theme_icon/theme_vs_lock.png"));
				lock.set_x(44);
				lock.set_y(39);
				lock.set_name("lock");
				slotList.addChild(lock);
				btnPlay[0].set_visible(false);
			}
			btnPlay[0].set_name("play");
			btnPlay[0].set_alpha(0);
			var tmp1 = (function(slot1,i1) {
				return function(e) {
					_gthis.udt.played = Std.parseInt(slots[i1[0]].sid);
					com_redpeakgames_cloud9_utils_DynamicCall.method(Reflect.field(_gthis.parent,"lobby"),"setSlotType",[slots[i1[0]].type]);
					_gthis.onSelectSlot(slot1[0]);
				};
			})(slot,i);
			btnPlay[0].set_onClick(tmp1);
			var tmp2 = (function(btnPlay1) {
				return function(e1) {
					btnPlay1[0].set_alpha(1);
				};
			})(btnPlay);
			btnPlay[0].set_onOver(tmp2);
			var tmp3 = (function(btnPlay2) {
				return function(e2) {
					btnPlay2[0].set_alpha(0);
				};
			})(btnPlay);
			btnPlay[0].set_onOut(tmp3);
			slotList.addChild(btnPlay[0]);
		}
		var _g11 = 0;
		var _g2 = this.canvasGoto.get_numChildren();
		while(_g11 < _g2) {
			var _g21 = this.canvasGoto.getChildAt(_g11++);
			_g21.set_y(_g21.get_y() - (number * 80 + 50));
		}
		this.canvasGoto.setChildIndex(this.btnGotoUp,this.canvasGoto.get_numChildren() - 1);
		this.canvasGoto.setChildIndex(this.btnGotoDown,this.canvasGoto.get_numChildren() - 1);
		this.reposSlotIcons(slots,level,slotPos);
	}
	,replaceGotoSlotList: function(slots,lobby) {
		if(lobby == null) {
			lobby = false;
		}
		var _g1 = 0;
		var _g = slots.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lockNumber = Std.parseInt(slots[i].lock);
			if(slots[i].lev <= this.udt.lev || lockNumber == 4) {
				try {
					var lock = this.buttons[i].getChildByName("lock");
					if(lock != null) {
						this.buttons[i].removeChild(lock);
					}
					var play = this.buttons[i].getChildByName("play");
					if(play != null) {
						play.set_visible(true);
					}
				} catch( err ) {
					haxe_CallStack.lastException = err;
					if (err instanceof js__$Boot_HaxeError) err = err.val;
					haxe_Log.trace(err,{ fileName : "TopMenu.hx", lineNumber : 4510, className : "com.redpeakgames.cloud9.TopMenu", methodName : "replaceGotoSlotList"});
				}
				this.buttons[i].getChildAt(0).bitmapData = openfl_Assets.getBitmapData("img/tournament/theme_icon/" + Std.string(slots[i].sid) + Std.string(slots[i].type) + ".png");
			}
			try {
				var playing = this.buttons[i].getChildByName("playing");
				if(playing != null) {
					this.buttons[i].removeChild(playing);
				}
			} catch( err1 ) {
				haxe_CallStack.lastException = err1;
				if (err1 instanceof js__$Boot_HaxeError) err1 = err1.val;
				haxe_Log.trace(err1,{ fileName : "TopMenu.hx", lineNumber : 4523, className : "com.redpeakgames.cloud9.TopMenu", methodName : "replaceGotoSlotList"});
			}
			if(this.udt.played == slots[i].sid && lobby == false) {
				var play1 = this.buttons[i].getChildByName("play");
				if(play1 != null) {
					play1.set_visible(false);
				}
				this.buttons[i].getChildAt(0).bitmapData = openfl_Assets.getBitmapData("img/tournament/theme_icon/cs_" + Std.string(slots[i].sid) + Std.string(slots[i].type) + ".png");
				var playing1 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/goto/goto_playing.png"));
				playing1.set_name("playing");
				this.buttons[i].addChild(playing1);
			}
		}
	}
	,reposSlotIcons: function(slots,type,pos) {
		var _g1 = 0;
		var _g = type.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = slots.length;
			while(_g3 < _g2) {
				var j = _g3++;
				if(type[i].sid + type[i].type == slots[j].sid + slots[j].type) {
					var icon = this.buttons[j];
					if(icon != null) {
						icon.x = pos[i].x;
						icon.y = pos[i].y;
						break;
					}
				}
			}
		}
	}
	,onSelectSlot: function(slot,chage) {
		if(chage == null) {
			chage = false;
		}
		if(chage) {
			var lockNumber = Std.parseInt(slot.lock);
			if(slot.lev > this.udt.lev && lockNumber != 4 || this.udt.played == slot.sid) {
				return;
			}
			this.udt.played = Std.parseInt(slot.sid);
		}
		this.dispatchEvent(new openfl_events_DataEvent("ge.selected.slot",true,false));
		com_redpeakgames_cloud9_utils_DynamicCall.method(Reflect.field(this.parent,"lobby"),"stopBgm",[]);
		if(slot.name == null) {
			slot.name = slot.url;
		}
		var o = this.parent;
		var tmp;
		var tmp1;
		if(o == null) {
			tmp1 = null;
		} else {
			var tmp2;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + "isLobby"];
				tmp2 = tmp;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = o[tmp]();
			} else {
				tmp1 = o.isLobby;
			}
		}
		if(tmp1) {
			com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"loadSlot",[slot.name]);
		} else {
			com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"loadNextSlot",[slot.name]);
		}
		com_redpeakgames_cloud9_utils_DynamicCall.method(Reflect.field(this.parent,"lobby"),"clearLastPlayed",[]);
	}
	,onChangeSlot: function(sid) {
		var _g = 0;
		var _g1 = this.games;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.sid == Std.parseInt(sid)) {
				this.onSelectSlot(s,true);
				break;
			}
		}
	}
	,openOmg: function(nosee) {
		var _gthis = this;
		this.addScreen();
		haxe_Timer.delay(function() {
			var omg = new com_redpeakgames_cloud9_dialog_Omg(_gthis.udt,nosee);
			omg.set_alpha(0);
			_gthis.addChild(omg);
			motion_Actuate.tween(omg,0.2,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
		},200);
	}
	,openBillingStatus: function(isState,pData,usd,type) {
		var _gthis = this;
		this.addScreen();
		haxe_Timer.delay(function() {
			var billingStatus = new com_redpeakgames_cloud9_dialog_BillingStatus(isState,pData,usd,type);
			billingStatus.set_alpha(0);
			_gthis.addChild(billingStatus);
			motion_Actuate.tween(billingStatus,0.2,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
		},200);
	}
	,removeAdditionalWindows: function(lobby) {
		if(this.isHitTheFive) {
			this.getChildByName("popup.hitthefive").kill();
			this.isHitTheFive = false;
		}
		this.herald.toLobby();
		this.closeTournament();
		this.mysteryBoxVisible(false);
		this.contentIntroduceVisible(false);
		this.canvasCoinTreeVisible(false);
		this.superBoostDiaTagVisible(false);
		this.randomBoxTagVisible(false);
		if(this.games != null) {
			this.replaceGotoSlotList(this.games,lobby);
		}
	}
	,openLikeUs: function(udt) {
		this.addScreen();
		var likeUs = new com_redpeakgames_cloud9_dialog_LikeUs(udt);
		likeUs.set_alpha(0);
		this.addChild(likeUs);
		motion_Actuate.tween(likeUs,0.2,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
	}
	,loadMysteryBox: function() {
		this.canvasMysteryBox = new openfl_display_Sprite();
		this.addChild(this.canvasMysteryBox);
		this.canvasMysteryBoxIndex = this.getChildIndex(this.canvasMysteryBox);
	}
	,mysteryBoxOpen: function(data) {
		var _gthis = this;
		var loader = com_redpeakgames_cloud9_ExternalLoaderManager.getLoader("TopMenu.mystery");
		if(loader.parent != this.canvasMysteryBox) {
			this.canvasMysteryBox.addChild(loader);
		}
		haxe_Timer.delay(function() {
			_gthis.addScreen();
			_gthis.setChildIndex(_gthis.canvasMysteryBox,_gthis.get_numChildren() - 1);
		},600);
		this.safeRunContentMethod("TopMenu.mystery","openBox",[data.grade,data.which,data.prize],false,this.canvasMysteryBox);
		this.isGameReward = false;
	}
	,mysteryBoxClosed: function() {
		this.removeScreen();
		this.setChildIndex(this.canvasMysteryBox,this.canvasMysteryBoxIndex);
	}
	,mysteryBoxSetPos: function(x,y) {
		if(y == null) {
			y = 301;
		}
		if(x == null) {
			x = 1398;
		}
		var loader = com_redpeakgames_cloud9_ExternalLoaderManager.getLoader("TopMenu.mystery");
		if(loader.parent == null) {
			this.canvasMysteryBox.addChild(loader);
		}
		this.safeRunContentMethod("TopMenu.mystery","setBoxPos",[x,y],false,this.canvasMysteryBox,null,null,null,false);
	}
	,mysteryBoxStart: function(type) {
		var loader = com_redpeakgames_cloud9_ExternalLoaderManager.getLoader("TopMenu.mystery");
		loader.set_visible(false);
		if(loader.parent == null || loader.parent == this) {
			this.canvasMysteryBox.addChild(loader);
		}
		this.safeRunContentMethod("TopMenu.mystery","start",[type,com_redpeakgames_cloud9_Global.mute],false,this.canvasMysteryBox,function() {
			loader.set_visible(true);
		},null,null,false);
	}
	,mysteryBoxVisible: function(value) {
		if(value) {
			this.safeRunContentMethod("TopMenu.mystery","setVisible",[value],false,this.canvasMysteryBox,null,null,null,false);
		} else {
			com_redpeakgames_cloud9_ExternalLoaderManager.unload("TopMenu.mystery");
		}
	}
	,mysteryBoxMute: function(value) {
		if(!this.lobby) {
			return;
		}
		this.safeRunContentMethod("TopMenu.mystery","mute",[value],false,this.canvasMysteryBox,null,null,null,false);
	}
	,mysteryBoxBetChange: function(value) {
		this.safeRunContentMethod("TopMenu.mystery","betChange",[value],false,this.canvasMysteryBox,null,null,null,false);
	}
	,loadContentIntroduce: function() {
		if(this.canvasContentIntroduce == null) {
			this.canvasContentIntroduce = new openfl_display_Sprite();
			this.addChild(this.canvasContentIntroduce);
		}
	}
	,contentIntroduceVisible: function(value) {
		var _gthis = this;
		if(this.canvasContentIntroduce == null) {
			return;
		}
		var loader = com_redpeakgames_cloud9_ExternalLoaderManager.getLoader("TopMenu.introduce");
		if(loader == null) {
			return;
		}
		loader.set_visible(false);
		if(loader.parent != this.canvasContentIntroduce) {
			this.canvasContentIntroduce.addChild(loader);
		}
		this.canvasContentIntroduce.set_visible(value);
		if(!value) {
			com_redpeakgames_cloud9_ExternalLoaderManager.unload("TopMenu.introduce");
		} else {
			this.safeRunContentMethod("TopMenu.introduce","start",[this.lev,com_redpeakgames_cloud9_Global.mute],false,this.canvasContentIntroduce,function() {
				loader.set_visible(true);
				_gthis.safeRunContentMethod("TopMenu.introduce","setVisible",[value],false,_gthis.canvasContentIntroduce,null,null,null,false);
			},null,null,false);
		}
	}
	,contentIntroduceSetLevel: function() {
		if(this.canvasContentIntroduce == null) {
			return;
		}
		this.safeRunContentMethod("TopMenu.introduce","setLevel",[this.lev],false,this.canvasContentIntroduce);
	}
	,contentIntroduceMute: function(value) {
		if(!this.lobby) {
			return;
		}
		if(this.canvasContentIntroduce == null) {
			return;
		}
		this.safeRunContentMethod("TopMenu.introduce","mute",[value],false,this.canvasContentIntroduce);
	}
	,makeGetCoin: function() {
		this.getCoinBool = true;
		this.canvasGetCoin = new openfl_display_Sprite();
		this.canvasGetCoin.set_visible(false);
		this.canvasGetCoin.mouseChildren = false;
		this.canvasGetCoin.mouseEnabled = false;
		this.addChild(this.canvasGetCoin);
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/coin/coin_spin_e.png",false),12,1,58,43);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11],true,15));
		var coinSpin = new spritesheet_AnimatedSprite(ss);
		coinSpin.set_x(1315);
		coinSpin.set_y(70);
		coinSpin.set_name("getCoin");
		coinSpin.showBehavior("_e");
		this.animations.push(coinSpin);
		this.canvasGetCoin.addChild(coinSpin);
		ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/coin/get_coin_e.png",false),10,2,187,129);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],true,15));
		var getCoin = new spritesheet_AnimatedSprite(ss);
		getCoin.set_x(1251);
		getCoin.set_y(92);
		getCoin.set_name("getCoin");
		getCoin.showBehavior("_e");
		this.animations.push(getCoin);
		this.canvasGetCoin.addChild(getCoin);
		ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/coin/get_cash_e.png",false),10,2,187,129);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],true,15));
		var getCash = new spritesheet_AnimatedSprite(ss);
		getCash.set_x(1251);
		getCash.set_y(92);
		getCash.set_name("getCoin");
		getCash.showBehavior("_e");
		this.animations.push(getCash);
		this.canvasGetCoin.addChild(getCash);
		var format = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",18,16766976);
		format.align = 0;
		var txtGetCoin = com_redpeakgames_cloud9_ui_TxField.make(1292,170,100,format);
		txtGetCoin.set_text("+ 30,000");
		this.canvasGetCoin.addChild(txtGetCoin);
	}
	,openRichWheel: function(isStartPopup,buy) {
		var _gthis = this;
		this.addScreen();
		var richWheelPopup = new com_redpeakgames_cloud9_dialog_RichWheel(680,168,8,isStartPopup);
		this.addChild(richWheelPopup);
		if(!isStartPopup) {
			var httpRichWheel = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "event_rwb.php",function(e) {
				var data = JSON.parse(e.target.data);
				richWheelPopup.setValues(buy,parseFloat(data.multiple));
				haxe_Timer.delay(function() {
					richWheelPopup.spin(Std.parseInt(data.index),5,haxe_Int64Helper.fromFloat(haxe_Int64Helper.toFloat(buy) * parseFloat(data.multiple)));
				},2000);
				richWheelPopup.onClickCollect = function() {
					com_redpeakgames_cloud9_TopMenu.coinAdjust.pop();
					_gthis.balanceChanged(haxe_Int64Helper.parseString(data.coin),_gthis.get_dia(),true);
					com_redpeakgames_cloud9_utils_DynamicCall.method(_gthis.parent,"callLoaderMethod",["updateBalance",[data.coin]]);
				};
			});
			var data1 = new openfl_net_URLVariables();
			data1.uid = this.udt.uid;
			data1.sig = this.udt.sig;
			data1.buy = haxe__$Int64_Int64_$Impl_$.toString(buy);
			httpRichWheel.request(data1);
		}
	}
	,openDoubleUpTag: function(x,y,fy) {
		if(fy == null) {
			fy = 0;
		}
		var dy = openfl_Lib.current.stage.get_displayState() == 2?y:fy;
		this.doubleUpBtnCanvasPos = { y : y, fy : fy};
		var doubleup = new com_redpeakgames_cloud9_dialog_DoubleUp(x,dy);
		doubleup.set_name("doubleup");
		this.addChildAt(doubleup,this.isCoinTree?this.getChildIndex(this.canvasCoinTree):this.get_numChildren() - 1);
	}
	,closeDoubleUpTag: function() {
		var doubleup = this.getChildByName("doubleup");
		if(doubleup != null) {
			doubleup.onClose();
			doubleup = null;
		}
	}
	,openDoubleUp: function() {
		var _gthis = this;
		this.enableToKeyboardSpin(false);
		this.isDoubleUp = true;
		com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"callLoaderMethod",["onMute",[true]]);
		com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"callLoaderMethod",["onDoubleUp",[true]]);
		motion_Actuate.tween(this.cashout,0.5,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_gthis.cashout.set_visible(false);
		});
		motion_Actuate.tween(this.canvasGoto,0.2,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_gthis.canvasGoto.set_visible(false);
		});
		if(this.btnGotoDown.get_visible() == false) {
			var number = Math.ceil(this.buttons.length / 9);
			var prevY = this.canvasGoto.get_y();
			this.btnGotoDown.set_work(false);
			this.btnGotoDown.set_visible(true);
			this.btnGotoUp.set_visible(false);
			motion_Actuate.tween(this.canvasGoto,0.4,{ y : prevY - number * 80 - 19}).ease(motion_easing_Quad.get_easeOut()).onComplete(function() {
				_gthis.btnGotoDown.set_work(true);
			});
		}
		this.safeRunContentMethod("TopMenu.doubleup","start",[com_redpeakgames_cloud9_Global.mute],null,null,function() {
			_gthis.canvasReward.set_visible(false);
			_gthis.canvasCoinTree.set_visible(false);
			_gthis.canvasTournament.set_visible(false);
			_gthis.canvasMysteryBox.set_visible(false);
			var loader = _gthis.getLoaderSafe("TopMenu.doubleup");
			if(loader != null) {
				loader.set_alpha(1);
				loader.set_y(openfl_Lib.current.stage.get_displayState() == 2?0:69);
				_gthis.setChildIndex(loader,0);
			}
		});
	}
	,closeDoubleUp: function(prize,coin,type,back) {
		if(back == null) {
			back = false;
		}
		var _gthis = this;
		var loader = this.getLoaderSafe("TopMenu.doubleup");
		if(loader != null) {
			var delay = type == "lose"?500:0;
			if(back) {
				delay = 2000;
			}
			com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"callLoaderMethod",["updatePrize",[prize,coin,type]]);
			haxe_Timer.delay(function() {
				motion_Actuate.tween(loader,0.2,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
					loader.set_visible(false);
					_gthis.canvasReward.set_visible(true);
					_gthis.canvasCoinTree.set_visible(true);
					_gthis.canvasTournament.set_visible(true);
					_gthis.canvasMysteryBox.set_visible(true);
					_gthis.cashout.set_visible(true);
					motion_Actuate.tween(_gthis.cashout,0.5,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
					_gthis.canvasGoto.set_visible(false);
					motion_Actuate.tween(_gthis.canvasGoto,0.5,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
					_gthis.isDoubleUp = false;
					com_redpeakgames_cloud9_utils_DynamicCall.method(_gthis.parent,"callLoaderMethod",["onMute",[com_redpeakgames_cloud9_Global.mute]]);
					com_redpeakgames_cloud9_utils_DynamicCall.method(_gthis.parent,"callLoaderMethod",["onDoubleUp",[false]]);
				});
			},2000 - delay);
		}
	}
	,doubleUpMute: function(value) {
		var _gthis = this;
		if(!this.lobby) {
			return;
		}
		var tmrLoader = new haxe_Timer(10);
		tmrLoader.run = function() {
			var loader = null;
			loader = com_redpeakgames_cloud9_ExternalLoaderManager.getLoader("TopMenu.doubleup");
			com_redpeakgames_cloud9_ExternalLoaderManager.load("TopMenu.doubleup");
			if(loader != null) {
				tmrLoader.stop();
				_gthis.addChild(new com_redpeakgames_cloud9_dialog_CircleLoading(loader,960,300,function() {
					var tmrContent = new haxe_Timer(10);
					tmrContent.run = function() {
						var content = _gthis.getContentFromLoader(loader);
						if(content != null) {
							tmrContent.stop();
							if(Object.prototype.hasOwnProperty.call(content,"mute")) {
								Reflect.field(content,"mute").apply(content,[value]);
							}
						}
					};
					tmrContent.run();
				}));
			}
		};
		tmrLoader.run();
	}
	,takeWinDoubleUp: function() {
		var _gthis = this;
		var tmrLoader = new haxe_Timer(10);
		tmrLoader.run = function() {
			var loader = null;
			loader = com_redpeakgames_cloud9_ExternalLoaderManager.getLoader("TopMenu.doubleup");
			com_redpeakgames_cloud9_ExternalLoaderManager.load("TopMenu.doubleup");
			if(loader != null) {
				tmrLoader.stop();
				new com_redpeakgames_cloud9_dialog_CircleLoading(loader,960,300,function() {
					var tmrContent = new haxe_Timer(10);
					tmrContent.run = function() {
						var content = _gthis.getContentFromLoader(loader);
						if(content != null) {
							tmrContent.stop();
							if(Object.prototype.hasOwnProperty.call(content,"inGameOut")) {
								Reflect.field(content,"inGameOut").apply(content,[]);
							}
							if(Object.prototype.hasOwnProperty.call(content,"onClickTakeWin")) {
								Reflect.field(content,"onClickTakeWin").apply(content,[null]);
							}
						}
					};
					tmrContent.run();
				});
			}
		};
		tmrLoader.run();
	}
	,makeCoinTree: function() {
		var _gthis = this;
		this.isCoinTree = false;
		this.canvasCoinTree = new openfl_display_Sprite();
		this.canvasCoinTree.set_x(1485);
		this.canvasCoinTree.set_y(130);
		this.canvasCoinTree.set_visible(false);
		this.addChildAt(this.canvasCoinTree,this.getChildIndex(this.canvasTournament) - 1);
		this.appleCount = 0;
		this.appleIcon = [];
		this.treeMeta = [];
		this.applePos = [{ x : 79, y : 55},{ x : 117, y : 53},{ x : 146, y : 38},{ x : 177, y : 57},{ x : 51, y : 88},{ x : 104, y : 85},{ x : 171, y : 84},{ x : 76, y : 127},{ x : 131, y : 106},{ x : 158, y : 124}];
		if(this.treeData == null) {
			this.treeData = { 'grade' : 1, 'shake' : 0, 'prize' : { 'cur' : 3000000, 'max' : 3000000}, 'meta' : [0,3000000,3600000,6000000,7000000]};
		}
		this.treeMeta = this.treeData != null?this.treeData.meta:[0,1000000,1200000,2000000,3000000];
		var treeBottom = new com_redpeakgames_cloud9_ui_ImageButton("img/cointree/minitree_wood",null,null,"mouse_click");
		treeBottom.set_onClick(function(e) {
			_gthis.openCoinTree();
		});
		this.canvasCoinTree.addChild(treeBottom);
		this.treeTop = new openfl_display_Sprite();
		this.treeTop.set_x(130);
		this.treeTop.set_y(147.5);
		this.treeTop.mouseEnabled = false;
		this.canvasCoinTree.addChild(this.treeTop);
		this.treeTop.addChild(com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/cointree/minitree_leaf.png",false,-103,-128.5));
		var format = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",14,16773120);
		format.align = 0;
		this.fundCounter = new com_redpeakgames_cloud9_ui_NumberText(format,null,100,85,202);
		var tmp;
		if(this.treeData != null) {
			var x = Std.parseInt(this.treeData.prize.cur);
			tmp = new haxe__$Int64__$_$_$Int64(x >> 31,x);
		} else {
			tmp = new haxe__$Int64__$_$_$Int64(0,0);
		}
		this.fundCounter.set_value(tmp);
		this.canvasCoinTree.addChild(this.fundCounter);
		this.canvasCoinTree.addChild(com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/cointree/shake.png",false,102,187));
		this.treeGrade = this.treeData != null?this.treeData.grade | 0:1;
		var count = this.treeData != null?Std.parseInt(this.treeData.prize.cur) / Std.parseInt(this.treeData.prize.max) * 10 | 0:0;
		if(this.treeGrade == 1) {
			if(count > 0) {
				var _g1 = 0;
				var _g = count;
				while(_g1 < _g) {
					var i = _g1++;
					var apple = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/cointree/mini_bronze.png",false,this.applePos[i].x - 28 - 103,this.applePos[i].y - 19 - 128.5);
					this.treeTop.addChild(apple);
					this.appleIcon.push(apple);
					this.appleCount++;
				}
			}
		} else {
			var max = this.treeData != null?Std.parseInt(this.treeData.meta[this.treeGrade]) - Std.parseInt(this.treeData.meta[1]):1000000;
			var cur = this.treeData != null?Std.parseInt(this.treeData.prize.cur) - Std.parseInt(this.treeData.meta[1]):0;
			var layer = ["bronze","bronze","silver","gold","dia"];
			count = cur / max * 10 | 0;
			var _g2 = 0;
			while(_g2 < 10) {
				var i1 = _g2++;
				var type = count > i1?layer[this.treeGrade]:layer[1];
				if(count > i1) {
					this.appleCount++;
				}
				var apple1 = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/cointree/mini_" + type + ".png",false,this.applePos[i1].x - 28 - 103,this.applePos[i1].y - 19 - 128.5);
				this.treeTop.addChild(apple1);
				this.appleIcon.push(apple1);
			}
		}
		var fullTree = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/cointree/coin_tree_full.png",false));
		fullTree.set_x(162);
		fullTree.set_y(141);
		fullTree.set_name("fullTree");
		fullTree.set_visible(this.appleCount == 10);
		this.canvasCoinTree.addChild(fullTree);
	}
	,openCoinTree: function() {
		this.isCoinTree = true;
		this.addScreen();
		this.safeRunContentMethod("TopMenu.cointree","start",[com_redpeakgames_cloud9_Global.mute]);
		if(!this.isDoubleUp && this.lobby) {
			com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"callLoaderMethod",["onCoinTree",[true]]);
		}
	}
	,closeCoinTree: function() {
		this.isCoinTree = false;
		this.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
		if(!this.isDoubleUp && this.lobby) {
			com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"callLoaderMethod",["onCoinTree",[false]]);
		}
	}
	,resetCoinTree: function() {
		var http = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "ctree.upgrade.php",$bind(this,this.loadCoinTree),function(e) {
			haxe_Log.trace("ctree.get : " + Std.string(e),{ fileName : "TopMenu.hx", lineNumber : 5120, className : "com.redpeakgames.cloud9.TopMenu", methodName : "resetCoinTree"});
		});
		var data = new openfl_net_URLVariables();
		data.uid = this.udt.uid;
		data.sig = this.udt.sig;
		data.action = "get";
		http.request(data);
		this.safeRunContentMethod("TopMenu.cointree","buyComplete",[]);
	}
	,loadCoinTree: function(e) {
		this.treeData = JSON.parse(e.target.data);
		this.treeMeta = this.treeData.meta;
		this.treeGrade = 1;
		this.appleCount = 0;
		this.fundCounter.set_value(new haxe__$Int64__$_$_$Int64(0,0));
		this.shakeCounter.set_value(new haxe__$Int64__$_$_$Int64(0,0));
		var _g = 0;
		var _g1 = this.appleIcon;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.treeTop.removeChild(a);
		}
		this.appleIcon = [];
		this.canvasCoinTree.getChildByName("fullTree").set_visible(false);
	}
	,upgradeCoinTree: function(grade,meta) {
		this.treeMeta = meta;
		this.treeGrade = grade;
		this.appleCount = 0;
		this.canvasCoinTree.getChildByName("fullTree").set_visible(false);
	}
	,refreshTreeCounter: function(data) {
		var x = Std.parseInt(data.cur);
		this.fundCounter.set_value(new haxe__$Int64__$_$_$Int64(x >> 31,x));
		var x1 = Std.parseInt(data.cur);
		this.shakeCounter.set_value(new haxe__$Int64__$_$_$Int64(x1 >> 31,x1));
		var count = Std.parseInt(data.cur) / Std.parseInt(data.max) * 10 | 0;
		var fullTree = this.canvasCoinTree.getChildByName("fullTree");
		fullTree.set_visible(count == 10);
		if(fullTree.get_visible() == false) {
			this.moveTree();
		}
		if(this.treeGrade != 1) {
			var max = this.treeMeta[this.treeGrade] - this.treeMeta[1];
			count = (Std.parseInt(data.cur) - this.treeMeta[1]) / max * 10 | 0;
		}
		if(count != this.appleCount) {
			this.coinTreefruitOpen();
		}
	}
	,canvasCoinTreeVisible: function(value) {
		if(this.canvasCoinTree == null) {
			this.makeCoinTree();
		}
		this.canvasCoinTree.set_visible(value);
	}
	,coinTreefruitOpen: function() {
		var _gthis = this;
		if((this.appleIcon != null?this.appleIcon.length:0) >= 10 && this.treeGrade == 1) {
			return;
		}
		if(this.appleCount >= 10 && this.treeGrade != 1) {
			return;
		}
		var index = this.treeGrade == 1?this.appleIcon.length:this.appleCount;
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/cointree/fruit_particle_e.png",false),17,1,70,60);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],false,15));
		var fruitAni = new spritesheet_AnimatedSprite(ss);
		fruitAni.set_x(this.applePos[index].x - 20);
		fruitAni.set_y(this.applePos[index].y - 15);
		fruitAni.showBehavior("_e");
		var onComplete = null;
		onComplete = function(e) {
			fruitAni.removeEventListener("complete",onComplete);
			_gthis.canvasCoinTree.removeChild(fruitAni);
			fruitAni.spritesheet.updateImage(null);
			HxOverrides.remove(_gthis.animations,fruitAni);
		};
		fruitAni.addEventListener("complete",onComplete);
		this.animations.push(fruitAni);
		this.canvasCoinTree.addChild(fruitAni);
		haxe_Timer.delay(function() {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("fruit_get",0,0);
			}
			if(_gthis.treeGrade == 1) {
				var apple = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/cointree/mini_bronze.png",false,_gthis.applePos[_gthis.appleIcon.length].x - 28 - 103,_gthis.applePos[_gthis.appleIcon.length].y - 19 - 128.5);
				_gthis.treeTop.addChild(apple);
				_gthis.appleIcon.push(apple);
			} else {
				_gthis.appleIcon[_gthis.appleCount - 1].set_bitmapData(openfl_Assets.getBitmapData("img/cointree/mini_" + ["bronze","bronze","silver","gold","dia"][_gthis.treeGrade] + ".png",false));
			}
		},500);
		ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/cointree/leaf_particle_e.png",false),6,3,300,260);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],false,15));
		var leafShaking = new spritesheet_AnimatedSprite(ss);
		leafShaking.set_x(-15);
		leafShaking.set_y(-10);
		leafShaking.showBehavior("_e");
		var onComplete1 = null;
		onComplete1 = function(e1) {
			leafShaking.removeEventListener("complete",onComplete1);
			_gthis.canvasCoinTree.removeChild(leafShaking);
			leafShaking.spritesheet.updateImage(null);
			HxOverrides.remove(_gthis.animations,leafShaking);
		};
		leafShaking.addEventListener("complete",onComplete1);
		this.animations.push(leafShaking);
		this.canvasCoinTree.addChildAt(leafShaking,0);
		this.moveTree();
		this.appleCount++;
	}
	,moveTree: function() {
		var _gthis = this;
		var randNum = Std.random(2) == 0?1:-1;
		var orir = 0;
		var tmr = new haxe_Timer(20);
		var cnt = 0;
		tmr.run = function() {
			motion_Actuate.tween(_gthis.treeTop,0.05,{ rotation : orir + randNum * Math.random() * 3}).ease(motion_easing_Linear.get_easeNone());
			++cnt;
			if(cnt == 15) {
				tmr.stop();
				motion_Actuate.tween(_gthis.treeTop,0.05,{ rotation : orir}).ease(motion_easing_Linear.get_easeNone());
			}
		};
	}
	,stepTextVisible: function(value) {
		if(this.stepTextB != null) {
			this.stepTextB.set_visible(value);
		}
	}
	,onClickSound: function(e) {
		this.dispatchEvent(new openfl_events_DataEvent("ge.mute",true,false,Std.string(this.sound.get_checked())));
		var http = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "option2.php");
		var data = new openfl_net_URLVariables();
		data.uid = this.udt.uid;
		data.what = "sound";
		data.sig = this.udt.sig;
		data.data = this.sound.get_checked()?0:1;
		http.request(data);
	}
	,startSuperBoost: function(remain,scount) {
		var _gthis = this;
		if(remain > 5) {
			this.safeRunContentMethod("TopMenu.superboost","startBoost",[openfl_Lib.getTimer() + remain * 1000,scount,false],null,null,function() {
				try {
					_gthis.setChildIndex(_gthis.getLoaderSafe("TopMenu.superboost"),_gthis.getChildIndex(_gthis.canvasTournament) - 1);
				} catch( err ) {
					haxe_CallStack.lastException = err;
					if (err instanceof js__$Boot_HaxeError) err = err.val;
					haxe_Log.trace(err,{ fileName : "TopMenu.hx", lineNumber : 5293, className : "com.redpeakgames.cloud9.TopMenu", methodName : "startSuperBoost"});
				}
			});
			this.isSuperBoost = true;
			this.set_isExpBoost(true);
		}
	}
	,openSuperBoostPopup: function() {
		var _gthis = this;
		this.safeRunContentMethod("TopMenu.superboost","openPopup",[],null,null,function() {
			var loader = _gthis.getLoaderSafe("TopMenu.superboost");
			try {
				_gthis.setChildIndex(loader,_gthis.get_numChildren());
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				haxe_Log.trace(err,{ fileName : "TopMenu.hx", lineNumber : 5309, className : "com.redpeakgames.cloud9.TopMenu", methodName : "openSuperBoostPopup"});
			}
			var _onGeneralClose = null;
			_onGeneralClose = function(e) {
				loader.removeEventListener("ge.general.close",_onGeneralClose);
				try {
					_gthis.setChildIndex(loader,_gthis.getChildIndex(_gthis.canvasTournament) - 1);
				} catch( err1 ) {
					haxe_CallStack.lastException = err1;
					if (err1 instanceof js__$Boot_HaxeError) err1 = err1.val;
					haxe_Log.trace(err1,{ fileName : "TopMenu.hx", lineNumber : 5318, className : "com.redpeakgames.cloud9.TopMenu", methodName : "openSuperBoostPopup"});
				}
			};
			loader.addEventListener("ge.general.close",_onGeneralClose);
			loader.set_y(0);
			_gthis.isSuperBoost = true;
		});
	}
	,superBoostDiaTagVisible: function(value) {
		if(!this.isSuperBoost) {
			return;
		}
		this.safeRunContentMethod("TopMenu.superboost","setVisibleDiaTag",[value]);
	}
	,superBoostMute: function(value) {
		if(!this.isSuperBoost) {
			return;
		}
		this.safeRunContentMethod("TopMenu.superboost","mute",[value]);
	}
	,superBoostSpin: function() {
		if(!this.isSuperBoost) {
			return;
		}
		this.safeRunContentMethod("TopMenu.superboost","spin",[]);
	}
	,superBoostBuyComplete: function() {
		if(!this.isSuperBoost) {
			return;
		}
		com_redpeakgames_cloud9_utils_Console.log("superBoostBuyComplete");
		this.safeRunContentMethod("TopMenu.superboost","onBuyComplete",[this.lobby]);
		this.set_isExpBoost(true);
	}
	,setSuperBoostOff: function() {
		this.set_isExpBoost(false);
		this.isSuperBoost = false;
	}
	,set_isExpBoost: function(value) {
		if(value) {
			this.expbar.set_bitmapData(openfl_Assets.getBitmapData("img/topmenu/bar_ex_boost.png"));
		} else {
			this.expbar.set_bitmapData(openfl_Assets.getBitmapData("img/topmenu/bar_ex.png"));
		}
		return this.isExpBoost = value;
	}
	,openRandomBoxPopup: function() {
		var _gthis = this;
		this.safeRunContentMethod("TopMenu.randombox","openPopup",[],null,null,function() {
			var loader = _gthis.getLoaderSafe("TopMenu.randombox");
			try {
				_gthis.setChildIndex(loader,_gthis.get_numChildren());
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				haxe_Log.trace(err,{ fileName : "TopMenu.hx", lineNumber : 5393, className : "com.redpeakgames.cloud9.TopMenu", methodName : "openRandomBoxPopup"});
			}
			var _onGeneralClose = null;
			_onGeneralClose = function(e) {
				loader.removeEventListener("ge.general.close",_onGeneralClose);
				try {
					_gthis.setChildIndex(loader,_gthis.getChildIndex(_gthis.canvasTournament) - 1);
				} catch( err1 ) {
					haxe_CallStack.lastException = err1;
					if (err1 instanceof js__$Boot_HaxeError) err1 = err1.val;
					haxe_Log.trace(err1,{ fileName : "TopMenu.hx", lineNumber : 5402, className : "com.redpeakgames.cloud9.TopMenu", methodName : "openRandomBoxPopup"});
				}
			};
			loader.addEventListener("ge.general.close",_onGeneralClose);
			var _onCloseRandomBox;
			var _onOpenRandomBoxPopup = function(e1) {
				_gthis.safeRunContentMethod("TopMenu.randombox","openPopup",[]);
				try {
					_gthis.setChildIndex(loader,_gthis.get_numChildren());
				} catch( err2 ) {
					haxe_CallStack.lastException = err2;
					if (err2 instanceof js__$Boot_HaxeError) err2 = err2.val;
					haxe_Log.trace(err2,{ fileName : "TopMenu.hx", lineNumber : 5414, className : "com.redpeakgames.cloud9.TopMenu", methodName : "openRandomBoxPopup"});
				}
				var _onGeneralClose1 = null;
				_onGeneralClose1 = function(e2) {
					loader.removeEventListener("ge.general.close",_onGeneralClose1);
					try {
						_gthis.setChildIndex(loader,_gthis.getChildIndex(_gthis.canvasTournament) - 1);
					} catch( err3 ) {
						haxe_CallStack.lastException = err3;
						if (err3 instanceof js__$Boot_HaxeError) err3 = err3.val;
						haxe_Log.trace(err3,{ fileName : "TopMenu.hx", lineNumber : 5423, className : "com.redpeakgames.cloud9.TopMenu", methodName : "openRandomBoxPopup"});
					}
				};
				loader.addEventListener("ge.general.close",_onGeneralClose1);
			};
			_onCloseRandomBox = function(e3) {
				loader.removeEventListener("ge.close.salesrandomboxtag",_onCloseRandomBox);
				loader.removeEventListener("ge.open.randomboxpopup",_onOpenRandomBoxPopup);
				_gthis.isRandomBox = false;
			};
			loader.addEventListener("ge.close.salesrandomboxtag",_onCloseRandomBox);
			loader.addEventListener("ge.open.randomboxpopup",_onOpenRandomBoxPopup);
			loader.set_y(0);
			_gthis.isRandomBox = true;
		});
	}
	,setFullscreenRandomBox: function(value) {
		if(!this.isRandomBox) {
			return;
		}
		this.safeRunContentMethod("TopMenu.randombox","onFullScreen",[value]);
	}
	,randomBoxTagVisible: function(value) {
		if(!this.isRandomBox) {
			return;
		}
		this.safeRunContentMethod("TopMenu.randombox","setVisibleTag",[value]);
	}
	,randomBoxMute: function(value) {
		if(!this.isRandomBox) {
			return;
		}
		this.safeRunContentMethod("TopMenu.randombox","mute",[value]);
	}
	,randomBoxBuyComplete: function(coin) {
		var _gthis = this;
		if(!this.isRandomBox) {
			return;
		}
		var loader = this.getLoaderSafe("TopMenu.randombox");
		this.safeRunContentMethod("TopMenu.randombox","onBuyComplete",[coin]);
		var _onCollectRandomBox = null;
		_onCollectRandomBox = function(e) {
			loader.removeEventListener("ge.collect.randombox",_onCollectRandomBox);
			var drawCoin = new com_redpeakgames_cloud9_ui_DrawCoins(948,528,714,76,1000,1,null,null,true);
			drawCoin.set_onCoinArrive(function() {
				com_redpeakgames_cloud9_TopMenu.coinAdjust.pop();
				var a = _gthis.get_coin();
				var b = haxe_Int64Helper.parseString(coin);
				var high = a.high + b.high | 0;
				var low = a.low + b.low | 0;
				if(haxe__$Int32_Int32_$Impl_$.ucompare(low,a.low) < 0) {
					++high;
					high = high | 0;
				}
				_gthis.balanceChanged(new haxe__$Int64__$_$_$Int64(high,low),_gthis.get_dia(),true);
				var a1 = _gthis.get_coin();
				var b1 = haxe_Int64Helper.parseString(coin);
				var high1 = a1.high + b1.high | 0;
				var low1 = a1.low + b1.low | 0;
				if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,a1.low) < 0) {
					++high1;
					high1 = high1 | 0;
				}
				com_redpeakgames_cloud9_utils_DynamicCall.method(_gthis.parent,"callLoaderMethod",["updateBalance",[new haxe__$Int64__$_$_$Int64(high1,low1)]]);
			});
			_gthis.addChild(drawCoin);
		};
		loader.addEventListener("ge.collect.randombox",_onCollectRandomBox);
	}
	,openTournamentPackagePopup: function(data) {
		var _gthis = this;
		this.safeRunContentMethod("TopMenu.tournamentpackage","openPopup",[this.fullscreen.get_checked(),data],null,null,function() {
			var loader = _gthis.getLoaderSafe("TopMenu.tournamentpackage");
			try {
				_gthis.setChildIndex(loader,_gthis.get_numChildren());
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				haxe_Log.trace(err,{ fileName : "TopMenu.hx", lineNumber : 5499, className : "com.redpeakgames.cloud9.TopMenu", methodName : "openTournamentPackagePopup"});
			}
			var _onGeneralClose = null;
			_onGeneralClose = function(e) {
				loader.removeEventListener("ge.general.close",_onGeneralClose);
				try {
					_gthis.setChildIndex(loader,_gthis.getChildIndex(_gthis.canvasTournament) - 1);
				} catch( err1 ) {
					haxe_CallStack.lastException = err1;
					if (err1 instanceof js__$Boot_HaxeError) err1 = err1.val;
					haxe_Log.trace(err1,{ fileName : "TopMenu.hx", lineNumber : 5508, className : "com.redpeakgames.cloud9.TopMenu", methodName : "openTournamentPackagePopup"});
				}
			};
			loader.addEventListener("ge.general.close",_onGeneralClose);
			var _onCloseTournamentPackage = function(e1) {
				loader.removeEventListener("ge.close.salestournamentpackagetag",_onCloseTournamentPackage);
				_gthis.isTournamentPackage = false;
			};
			loader.addEventListener("ge.close.salestournamentpackagetag",_onCloseTournamentPackage);
			loader.set_y(0);
			_gthis.isTournamentPackage = true;
		});
	}
	,setFullscreenTournamentPackage: function(value) {
		if(!this.isTournamentPackage) {
			return;
		}
		this.safeRunContentMethod("TopMenu.tournamentpackage","onFullScreen",[value]);
	}
	,tournamentPackageTagVisible: function(value) {
		if(!this.isTournamentPackage) {
			return;
		}
		this.safeRunContentMethod("TopMenu.tournamentpackage","setVisibleTag",[value]);
	}
	,tournamentPackageMute: function(value) {
		if(!this.isTournamentPackage) {
			return;
		}
		this.safeRunContentMethod("TopMenu.tournamentpackage","mute",[value]);
	}
	,tournamentPackageBuyComplete: function() {
		if(!this.isTournamentPackage) {
			return;
		}
		this.getLoaderSafe("TopMenu.tournamentpackage");
		this.safeRunContentMethod("TopMenu.tournamentpackage","onBuyComplete",[]);
		this.isTournamentPackage = false;
	}
	,__class__: com_redpeakgames_cloud9_TopMenu
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_isExpBoost:"set_isExpBoost",set_conditionalBtnVisible:"set_conditionalBtnVisible",set_dataConditionalDeal:"set_dataConditionalDeal",set_rewardNoticeVisible:"set_rewardNoticeVisible",set_lobby:"set_lobby",set_dia:"set_dia",get_dia:"get_dia",set_coin:"set_coin",get_coin:"get_coin"})
});
var com_redpeakgames_cloud9_WheelBase = function(x,y,numValues) {
	openfl_display_Sprite.call(this);
	this.inited = false;
	this.set_x(x);
	this.set_y(y);
	this.numValues = numValues;
	this.lastRotation = -360 / numValues / 2;
	this.elapsedRotation = 0;
	this.sectorAngle = 360 / numValues;
	this.lastTick = numValues - 1;
	this.prize = new haxe__$Int64__$_$_$Int64(0,0);
	this.type = "";
	this.isSpinning = false;
	this.lastIdx = numValues - 1;
	this.animations = [];
	this.canvas = new openfl_display_Sprite();
	this.bgLayer = new openfl_display_Sprite();
	this.wheelLayer = new openfl_display_Sprite();
	this.wheelCanvas = new openfl_display_Sprite();
	this.tip = new openfl_display_Sprite();
	this.addChild(this.canvas);
	this.canvas.addChild(this.bgLayer);
	this.canvas.addChild(this.wheelLayer);
	this.canvas.addChild(this.tip);
	this.wheelLayer.addChild(this.wheelCanvas);
	this.wheelFxLayer = new openfl_display_Sprite();
	this.wheelLayer.addChild(this.wheelFxLayer);
	this.placeUI();
	this.inited = true;
	this.lastTick = openfl_Lib.getTimer();
	this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
	this.addEventListener("removedFromStage",$bind(this,this.onRemoved));
};
$hxClasses["com.redpeakgames.cloud9.WheelBase"] = com_redpeakgames_cloud9_WheelBase;
com_redpeakgames_cloud9_WheelBase.__name__ = ["com","redpeakgames","cloud9","WheelBase"];
com_redpeakgames_cloud9_WheelBase.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_WheelBase.prototype = $extend(openfl_display_Sprite.prototype,{
	inited: null
	,lastTick: null
	,lastRotation: null
	,elapsedRotation: null
	,animations: null
	,canvas: null
	,bgLayer: null
	,wheelLayer: null
	,wheelFxLayer: null
	,wheelCanvas: null
	,tip: null
	,tipLenght: null
	,wheelRadius: null
	,numValues: null
	,prize: null
	,type: null
	,sectorAngle: null
	,lastIdx: null
	,isSpinning: null
	,onRemoved: function(e) {
		this.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.removeEventListener("removedFromStage",$bind(this,this.onRemoved));
		if(this.animations != null) {
			var _g = 0;
			var _g1 = this.animations;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				a.clear();
			}
		}
		this.animations = null;
		motion_Actuate.stop(this.wheelCanvas);
		this.removeChildren();
	}
	,placeUI: function() {
	}
	,onEnterFrame: function(e) {
		var cur = openfl_Lib.getTimer();
		var delta = cur - this.lastTick;
		if(this.inited) {
			this.onUpdate(delta);
		}
		this.lastTick = cur;
	}
	,onUpdate: function(delta) {
		var _g = 0;
		var _g1 = this.animations;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a.update(delta);
		}
		if(this.isSpinning) {
			var canvasRot = this.wheelCanvas.get_rotation() - this.sectorAngle / 2;
			if(canvasRot >= 0) {
				canvasRot = canvasRot;
			} else {
				canvasRot += 360;
			}
			var curIdx = canvasRot / this.sectorAngle | 0;
			if(curIdx != this.lastIdx) {
				this.onIndexChangedDuringSpin();
				haxe_Log.trace(curIdx,{ fileName : "WheelBase.hx", lineNumber : 142, className : "com.redpeakgames.cloud9.WheelBase", methodName : "onUpdate"});
				this.lastIdx = curIdx;
			}
		}
	}
	,onIndexChangedDuringSpin: function() {
	}
	,rotationCorrection: function(rotation) {
		if(rotation < 0) {
			rotation += 360;
		}
		return rotation;
	}
	,getRadian: function(degree) {
		return this.rotationCorrection(degree) * 0.01745329252;
	}
	,getDegree: function(rad) {
		return rad * 57.295779513;
	}
	,spin: function(index,runtime,prize,type) {
		var _gthis = this;
		this.isSpinning = true;
		if(prize != null) {
			this.prize = prize;
		}
		if(type != null) {
			this.type = type;
		}
		haxe_Log.trace("spin index : " + index,{ fileName : "WheelBase.hx", lineNumber : 176, className : "com.redpeakgames.cloud9.WheelBase", methodName : "spin"});
		motion_Actuate.tween(this.wheelCanvas,0.3,{ rotation : this.wheelCanvas.get_rotation() - 10}).ease(motion_easing_Quad.get_easeInOut()).onComplete(function() {
			motion_Actuate.tween(_gthis.wheelCanvas,0.3,{ rotation : _gthis.wheelCanvas.get_rotation() + 10}).ease(motion_easing_Expo.get_easeIn()).onComplete(function() {
				var runtime1 = 1 / _gthis.numValues * index + runtime;
				var dis = index * (360 / _gthis.numValues);
				dis += 1440;
				_gthis.lastRotation = _gthis.wheelCanvas.get_rotation();
				motion_Actuate.tween(_gthis.wheelCanvas,runtime1,{ rotation : dis}).ease(motion_easing_Quad.get_easeOut()).onComplete(function() {
					_gthis.onStop();
				});
			});
		});
	}
	,reset: function() {
		motion_Actuate.stop(this.wheelCanvas);
		this.wheelCanvas.set_rotation(0);
		motion_Actuate.stop(this.canvas);
		this.canvas.set_x(0);
		this.canvas.set_y(0);
		this.prize = new haxe__$Int64__$_$_$Int64(0,0);
		this.type = "";
		this.isSpinning = false;
		this.lastIdx = this.numValues - 1;
		if(this.animations != null) {
			var _g = 0;
			var _g1 = this.animations;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				a.clear();
			}
		}
		this.animations = [];
		this.wheelFxLayer.removeChildren();
	}
	,onStop: function() {
		this.isSpinning = false;
	}
	,makeBitmap: function(path,x,y,smoothing) {
		if(smoothing == null) {
			smoothing = true;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var bitmap = new openfl_display_Bitmap(openfl_Assets.getBitmapData(path,false));
		bitmap.smoothing = true;
		bitmap.set_x(x);
		bitmap.set_y(y);
		return bitmap;
	}
	,__class__: com_redpeakgames_cloud9_WheelBase
});
var com_redpeakgames_cloud9_dialog_AdjustBet = function() {
	openfl_display_Sprite.call(this);
	this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/adjustbet/adjustbet_back.png")));
	var btnClose = new com_redpeakgames_cloud9_ui_ImageButton("img/adjustbet/btn_sales_x",null,null,"mouse_click");
	btnClose.set_x(534);
	btnClose.set_y(4);
	btnClose.set_onClick($bind(this,this.onClickClose));
	this.addChild(btnClose);
	var btnBuy = new com_redpeakgames_cloud9_ui_ImageButton("img/adjustbet/btn_getmore",null,null,"mouse_click");
	btnBuy.set_x(164);
	btnBuy.set_y(365);
	btnBuy.set_onClick($bind(this,this.onClickBuy));
	this.addChild(btnBuy);
};
$hxClasses["com.redpeakgames.cloud9.dialog.AdjustBet"] = com_redpeakgames_cloud9_dialog_AdjustBet;
com_redpeakgames_cloud9_dialog_AdjustBet.__name__ = ["com","redpeakgames","cloud9","dialog","AdjustBet"];
com_redpeakgames_cloud9_dialog_AdjustBet.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_AdjustBet.prototype = $extend(openfl_display_Sprite.prototype,{
	onClickClose: function(e) {
		var _gthis = this;
		var tx = this.get_x() + 553;
		var ty = this.get_y() + 22;
		if(e == null) {
			tx = this.get_x() + 286;
			ty = this.get_y() + 398;
		}
		motion_Actuate.tween(this,0.2,{ x : tx, y : ty, scaleX : 0, scaleY : 0, alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
			if(_gthis.parent != null) {
				_gthis.parent.removeChild(_gthis);
			}
		});
	}
	,onClickBuy: function(e) {
		if(this.parent != null) {
			com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"onClickBuyCoins",[null]);
		}
		this.onClickClose(null);
	}
	,__class__: com_redpeakgames_cloud9_dialog_AdjustBet
});
var com_redpeakgames_cloud9_dialog_Bankrupt = function(udt,b) {
	openfl_display_Sprite.call(this);
	this.udt = udt;
	this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/bankrupt/bankrupt_back.png")));
	var bonusCoins = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/bankrupt/txt_bonus_10000.png"));
	bonusCoins.set_x(164);
	bonusCoins.set_y(186);
	this.addChild(bonusCoins);
	var btnClose = new com_redpeakgames_cloud9_ui_ImageButton("img/bankrupt/btn_sales_x",null,null,"mouse_click");
	btnClose.set_x(727);
	btnClose.set_y(21);
	btnClose.set_onClick($bind(this,this.onClickClose));
	this.addChild(btnClose);
	var btnShop = new com_redpeakgames_cloud9_ui_ImageButton("img/bankrupt/btn_bankrupt_another",null,null,"mouse_click");
	btnShop.set_x(578);
	btnShop.set_y(197);
	btnShop.set_onClick($bind(this,this.onClickAnother));
	this.addChild(btnShop);
	var btnCollect = new com_redpeakgames_cloud9_ui_ImageButton("img/bankrupt/btn_bankrupt_collect",null,null,"mouse_click");
	btnCollect.set_x(405);
	btnCollect.set_y(197);
	btnCollect.set_enable(b == "1");
	btnCollect.set_onClick($bind(this,this.onClickCollect));
	this.addChild(btnCollect);
	var arrow = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/bankrupt/bankrupt_arrow.png"));
	arrow.set_x(379);
	arrow.set_y(174);
	this.addChild(arrow);
	var btnBuy12 = new com_redpeakgames_cloud9_ui_ImageButton("img/bankrupt/btn_bankrupt_buy",null,null,"mouse_click");
	btnBuy12.set_x(559);
	btnBuy12.set_y(301);
	btnBuy12.set_name("98.99");
	btnBuy12.set_onClick($bind(this,this.onClickBuy));
	this.addChild(btnBuy12);
	var btnBuy121 = new com_redpeakgames_cloud9_ui_ImageButton("img/bankrupt/btn_bankrupt_buy",null,null,"mouse_click");
	btnBuy121.set_x(559);
	btnBuy121.set_y(387);
	btnBuy121.set_name("48.99");
	btnBuy121.set_onClick($bind(this,this.onClickBuy));
	this.addChild(btnBuy121);
	var btnBuy122 = new com_redpeakgames_cloud9_ui_ImageButton("img/bankrupt/btn_bankrupt_buy",null,null,"mouse_click");
	btnBuy122.set_x(559);
	btnBuy122.set_y(473);
	btnBuy122.set_name("11.99");
	btnBuy122.set_onClick($bind(this,this.onClickBuy));
	this.addChild(btnBuy122);
	var btnBuy123 = new com_redpeakgames_cloud9_ui_ImageButton("img/bankrupt/btn_bankrupt_buy",null,null,"mouse_click");
	btnBuy123.set_x(559);
	btnBuy123.set_y(559);
	btnBuy123.set_name("4.99");
	btnBuy123.set_onClick($bind(this,this.onClickBuy));
	this.addChild(btnBuy123);
};
$hxClasses["com.redpeakgames.cloud9.dialog.Bankrupt"] = com_redpeakgames_cloud9_dialog_Bankrupt;
com_redpeakgames_cloud9_dialog_Bankrupt.__name__ = ["com","redpeakgames","cloud9","dialog","Bankrupt"];
com_redpeakgames_cloud9_dialog_Bankrupt.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_Bankrupt.prototype = $extend(openfl_display_Sprite.prototype,{
	udt: null
	,onClickClose: function(e) {
		var _gthis = this;
		motion_Actuate.tween(this,0.2,{ x : this.get_x() + 403, y : this.get_y() + 326, scaleX : 0, scaleY : 0, alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
			if(_gthis.parent != null) {
				_gthis.parent.removeChild(_gthis);
			}
		});
	}
	,onClickBuy: function(e) {
		this.dispatchEvent(new openfl_events_DataEvent("ge.to.normalscreen",true,false));
		try {
			openfl_external_ExternalInterface.call("buyCoins",js_Boot.__cast(Reflect.field(e.target,"name") , String),"coin");
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,openfl_errors_Error) ) {
				haxe_Log.trace(e1.toString(),{ fileName : "Bankrupt.hx", lineNumber : 112, className : "com.redpeakgames.cloud9.dialog.Bankrupt", methodName : "onClickBuy"});
			} else throw(e1);
		}
		this.onClickClose(null);
	}
	,onClickAnother: function(e) {
		if(this.parent != null) {
			if(this.udt.buyCount == 0) {
				com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"onClickFirstPurchase",[null]);
			} else {
				com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"onClickBuyCoins",[null]);
			}
		}
		this.onClickClose(null);
	}
	,onClickCollect: function(e) {
		e.target.set_enable(false);
		com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"getBankruptBonus",[]);
	}
	,__class__: com_redpeakgames_cloud9_dialog_Bankrupt
});
var com_redpeakgames_cloud9_dialog_BillingStatus = function(isState,pData,usd,type) {
	openfl_display_Sprite.call(this);
	this.set_x(714);
	this.set_y(152);
	this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/purchase/purchase_success_back.png")));
	this.btnX = new com_redpeakgames_cloud9_ui_ImageButton("img/purchase/btn_purchase_x",null,null,"mouse_click");
	this.btnX.set_x(458);
	this.btnX.set_y(-2);
	this.btnX.set_onClick($bind(this,this.onClickClose));
	this.addChild(this.btnX);
	if(isState) {
		if(pData != null) {
			this.prpoint = Std.parseInt(pData.get.rpoint);
			this.pcoin = pData.get.coin;
			this.pdia = pData.get.dia;
		}
		var isCondition = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/purchase/purchase_success_title.png"));
		isCondition.set_x(23);
		isCondition.set_y(10);
		this.addChild(isCondition);
		var cdImage = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/purchase/purchase_success_sum.png"));
		cdImage.set_x(28);
		cdImage.set_y(68);
		this.addChild(cdImage);
		this.btnClose = new com_redpeakgames_cloud9_ui_ImageButton("img/purchase/btn_purchase_ok",null,null,"mouse_click");
		this.btnClose.set_x(163);
		this.btnClose.set_y(306);
		this.btnClose.set_onClick($bind(this,this.onClickClose));
		this.addChild(this.btnClose);
		var tmp;
		var a = haxe_Int64Helper.parseString(this.pcoin);
		var b = new haxe__$Int64__$_$_$Int64(0,0);
		if(a.high != b.high || a.low != b.low) {
			var a1 = haxe_Int64Helper.parseString(this.pdia);
			var b1 = new haxe__$Int64__$_$_$Int64(0,0);
			if(!(a1.high != b1.high)) {
				tmp = a1.low != b1.low;
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			this.makeCDText("coin","font_deal_coin_1",this.pcoin,26);
			this.makeCDText("dia","font_deal_dia_1",this.pdia,55);
		} else {
			var tmp1;
			var a2 = haxe_Int64Helper.parseString(this.pcoin);
			var b2 = new haxe__$Int64__$_$_$Int64(0,0);
			if(a2.high != b2.high || a2.low != b2.low) {
				var a3 = haxe_Int64Helper.parseString(this.pdia);
				var b3 = new haxe__$Int64__$_$_$Int64(0,0);
				if(a3.high == b3.high) {
					tmp1 = a3.low == b3.low;
				} else {
					tmp1 = false;
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				this.makeCDText("coin","font_deal_coin_1",this.pcoin,41);
			} else {
				var tmp2;
				var a4 = haxe_Int64Helper.parseString(this.pcoin);
				var b4 = new haxe__$Int64__$_$_$Int64(0,0);
				if(a4.high == b4.high && a4.low == b4.low) {
					var a5 = haxe_Int64Helper.parseString(this.pdia);
					var b5 = new haxe__$Int64__$_$_$Int64(0,0);
					if(!(a5.high != b5.high)) {
						tmp2 = a5.low != b5.low;
					} else {
						tmp2 = true;
					}
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					this.makeCDText("dia","font_deal_dia_1",this.pdia,41);
				}
			}
		}
		if(this.prpoint != 0) {
			var format = new openfl_text_TextFormat(openfl_Assets.getFont("font/OpenSans-Bold.ttf").name,16,3604224);
			format.align = 0;
			var text = new com_redpeakgames_cloud9_ui_NumberText(format,null,150,316,254);
			var x = this.prpoint;
			text.set_value(new haxe__$Int64__$_$_$Int64(x >> 31,x));
			this.addChild(text);
		}
	} else {
		this.usd = usd;
		this.type = type;
		var isCondition1 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/purchase/purchase_cancel_title.png"));
		isCondition1.set_x(23);
		isCondition1.set_y(10);
		this.addChild(isCondition1);
		var cdImage1 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/purchase/txt_purchase_cancel_1.png"));
		cdImage1.set_x(49);
		cdImage1.set_y(161);
		this.addChild(cdImage1);
		this.btnRetry = new com_redpeakgames_cloud9_ui_ImageButton("img/purchase/btn_purchase_retry",null,null,"mouse_click");
		this.btnRetry.set_x(64);
		this.btnRetry.set_y(306);
		this.btnRetry.set_onClick($bind(this,this.onClickRetry));
		this.addChild(this.btnRetry);
		this.btnClose = new com_redpeakgames_cloud9_ui_ImageButton("img/purchase/btn_purchase_close",null,null,"mouse_click");
		this.btnClose.set_x(266);
		this.btnClose.set_y(306);
		this.btnClose.set_onClick($bind(this,this.onClickClose));
		this.addChild(this.btnClose);
	}
};
$hxClasses["com.redpeakgames.cloud9.dialog.BillingStatus"] = com_redpeakgames_cloud9_dialog_BillingStatus;
com_redpeakgames_cloud9_dialog_BillingStatus.__name__ = ["com","redpeakgames","cloud9","dialog","BillingStatus"];
com_redpeakgames_cloud9_dialog_BillingStatus.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_BillingStatus.prototype = $extend(openfl_display_Sprite.prototype,{
	btnX: null
	,btnRetry: null
	,btnClose: null
	,prpoint: null
	,pcoin: null
	,pdia: null
	,usd: null
	,type: null
	,onClickRetry: function(e) {
		this.dispatchEvent(new openfl_events_DataEvent("ge.to.normalscreen",true,false));
		try {
			openfl_external_ExternalInterface.call("buyCoins",this.usd,this.type);
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,openfl_errors_Error) ) {
				haxe_Log.trace(e1.toString(),{ fileName : "BillingStatus.hx", lineNumber : 137, className : "com.redpeakgames.cloud9.dialog.BillingStatus", methodName : "onClickRetry"});
			} else throw(e1);
		}
		this.close();
	}
	,makeCDText: function(path,type,pcd,oy) {
		var total = haxe_Int64Helper.parseString(pcd);
		var numDigit = 0;
		var numX = -25;
		while(true) {
			var a = haxe__$Int64_Int64_$Impl_$.divMod(total,new haxe__$Int64__$_$_$Int64(0,10)).quotient;
			var b = new haxe__$Int64__$_$_$Int64(0,0);
			var v = a.high - b.high | 0;
			if(v != 0) {
				v = v;
			} else {
				v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
			}
			if(!((a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) > 0)) {
				break;
			}
			total = haxe_Int64Helper.fromFloat(Std.parseInt(haxe__$Int64_Int64_$Impl_$.toString(total)) / 10);
			++numDigit;
			if(numDigit >= 7) {
				numX += 5;
			} else if(numDigit < 4) {
				numX += 5;
			} else {
				numX = 0;
			}
		}
		var icon = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/omg/" + path + ".png"));
		icon.set_x(95 - (numDigit - 1) * 5 - numX);
		icon.set_y(197 + oy);
		this.addChild(icon);
		var number = new com_redpeakgames_cloud9_ui_NumberBitmap("font/" + type + ".png",250,13,21,13,1,0);
		number.textAlign = 0;
		number.set_x(40);
		number.set_y(208 + oy);
		number.useDollar = false;
		number.commaWidth = 9;
		number.set_value(haxe_Int64Helper.parseString(pcd));
		this.addChild(number);
	}
	,onClickClose: function(e) {
		this.dispatchEvent(new openfl_events_DataEvent("ge.game.resume",true));
		this.close();
	}
	,close: function() {
		var _gthis = this;
		this.btnX.set_work(false);
		this.btnClose.set_work(false);
		if(this.btnRetry != null) {
			this.btnRetry.set_work(false);
		}
		this.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
		motion_Actuate.tween(this,0.2,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			if(_gthis.parent != null) {
				_gthis.parent.removeChild(_gthis);
			}
		});
	}
	,__class__: com_redpeakgames_cloud9_dialog_BillingStatus
});
var com_redpeakgames_cloud9_dialog_Bonus = function(which) {
	openfl_display_Sprite.call(this);
	this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/bonus/bonus_bg.png")));
	var txt = null;
	if(which == -1) {
		txt = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/bonus/bonus_not.jpg"));
	} else {
		txt = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/bonus/bonus_already.jpg"));
	}
	txt.set_x(142);
	txt.set_y(79);
	this.addChild(txt);
	var btn = new com_redpeakgames_cloud9_ui_ImageButton("img/bonus/btn_ok",null,null,"mouse_click");
	btn.set_x(218);
	btn.set_y(146);
	btn.set_onClick($bind(this,this.onClickClose));
	this.addChild(btn);
	this.set_x(657);
	if(openfl_Lib.current.stage.stageHeight > 1080) {
		this.set_y((openfl_Lib.current.stage.stageHeight - 256) / 2 - 188);
	} else {
		this.set_y(224);
	}
};
$hxClasses["com.redpeakgames.cloud9.dialog.Bonus"] = com_redpeakgames_cloud9_dialog_Bonus;
com_redpeakgames_cloud9_dialog_Bonus.__name__ = ["com","redpeakgames","cloud9","dialog","Bonus"];
com_redpeakgames_cloud9_dialog_Bonus.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_Bonus.prototype = $extend(openfl_display_Sprite.prototype,{
	onClickClose: function(e) {
		this.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,__class__: com_redpeakgames_cloud9_dialog_Bonus
});
var com_redpeakgames_cloud9_dialog_BonusStreak = function(day,first,udt) {
	openfl_display_Sprite.call(this);
	this.day = day;
	this.first = first;
	this.udt = udt;
	this.animations = [];
	this.placeUI();
	this.lastTick = openfl_Lib.getTimer();
	this.addEventListener("enterFrame",$bind(this,this.onUpdate));
};
$hxClasses["com.redpeakgames.cloud9.dialog.BonusStreak"] = com_redpeakgames_cloud9_dialog_BonusStreak;
com_redpeakgames_cloud9_dialog_BonusStreak.__name__ = ["com","redpeakgames","cloud9","dialog","BonusStreak"];
com_redpeakgames_cloud9_dialog_BonusStreak.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_BonusStreak.prototype = $extend(openfl_display_Sprite.prototype,{
	day: null
	,first: null
	,udt: null
	,lastTick: null
	,animations: null
	,btnClose: null
	,btnCollect: null
	,chkImg: null
	,todayCanvas: null
	,todayImg: null
	,todayAni: null
	,lightAni: null
	,placeUI: function() {
		this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/bonusstreak/daily_bonus_back_1.png")));
		var bgInner = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/bonusstreak/daily_bonus_back_2.jpg"));
		bgInner.set_x(12);
		bgInner.set_y(43);
		this.addChild(bgInner);
		this.btnClose = new com_redpeakgames_cloud9_ui_ImageButton("img/bonusstreak/btn_x",null,null,"mouse_click");
		this.btnClose.set_x(715);
		this.btnClose.set_y(36);
		this.btnClose.set_onClick($bind(this,this.onClickClose));
		this.addChild(this.btnClose);
		this.btnCollect = new com_redpeakgames_cloud9_ui_ImageButton("img/bonusstreak/btn_collect",null,null,"mouse_click");
		this.btnCollect.set_x(301);
		this.btnCollect.set_y(365);
		this.btnCollect.set_onClick($bind(this,this.onClickCollect));
		this.addChild(this.btnCollect);
		var _g = 0;
		while(_g < 7) {
			var i = _g++;
			var dayImg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/bonusstreak/daily_bonus_day_" + (i + 1) + ".png"));
			dayImg.set_x(38 + i * 98);
			dayImg.set_y(131);
			this.addChild(dayImg);
			if(i + 1 < this.day || !this.first && i + 1 == this.day) {
				dayImg.set_filters([new openfl_filters_ColorMatrixFilter([.4,.4,.4,0,0,.4,.4,.4,0,0,.4,.4,.4,0,0,0,0,0,1,0])]);
				var collected = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/bonusstreak/daily_bonus_collected.png"));
				collected.set_x(52 + i * 98);
				collected.set_y(207);
				this.addChild(collected);
			}
			if(i + 1 != this.day) {
				dayImg.get_transform().set_colorTransform(new openfl_geom_ColorTransform(.5,.5,.5));
			}
		}
		this.todayCanvas = new openfl_display_Sprite();
		this.todayCanvas.set_alpha(0);
		this.todayCanvas.set_x(38 + (this.day - 1) * 98);
		this.todayCanvas.set_y(88 + (7 - this.day) * 10 - 67);
		this.addChild(this.todayCanvas);
		this.todayImg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/bonusstreak/daily_bonus_today.png"));
		this.todayCanvas.addChild(this.todayImg);
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/bonusstreak/today_e.png",false),10,2,94,51);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],false,15));
		this.todayAni = new spritesheet_AnimatedSprite(ss);
		this.todayCanvas.addChild(this.todayAni);
		ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/bonusstreak/light_e.png",false),10,2,94,64);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13],false,15));
		this.lightAni = new spritesheet_AnimatedSprite(ss);
		this.lightAni.set_x(38 + (this.day - 1) * 98);
		this.lightAni.set_y(254);
		this.lightAni.set_visible(false);
		this.addChild(this.lightAni);
		this.chkImg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/bonusstreak/daily_bonus_check.png"),1,true);
		this.chkImg.set_x(52 + (this.day - 1) * 98 - 33);
		this.chkImg.set_y(166);
		this.chkImg.set_scaleX(2);
		this.chkImg.set_scaleY(2);
		this.chkImg.set_alpha(0);
		this.addChild(this.chkImg);
	}
	,start: function() {
		var _gthis = this;
		if(this.first) {
			this.chkImg.set_visible(true);
			motion_Actuate.tween(this.chkImg,0.4,{ scaleX : 1, scaleY : 1, x : this.chkImg.get_x() + 33, y : this.chkImg.get_y() + 33, alpha : 1}).ease(motion_easing_Quad.get_easeIn());
			this.todayCanvas.set_visible(true);
			motion_Actuate.tween(this.todayCanvas,0.266,{ y : this.todayCanvas.get_y() + 67, alpha : 1}).ease(motion_easing_Quad.get_easeIn()).onComplete(function() {
				motion_Actuate.tween(_gthis.todayCanvas,0.066,{ y : _gthis.todayCanvas.get_y() + 10, scaleY : 0.8}).ease(motion_easing_Quad.get_easeOut()).reflect().repeat(1).onComplete(function() {
					_gthis.todayAni.showBehavior("_e");
					_gthis.animations.push(_gthis.todayAni);
					_gthis.todayAni.addEventListener("complete",$bind(_gthis,_gthis.onAniComplete));
					_gthis.lightAni.set_visible(true);
					_gthis.lightAni.showBehavior("_e");
					_gthis.animations.push(_gthis.lightAni);
					_gthis.lightAni.addEventListener("complete",$bind(_gthis,_gthis.onAniComplete));
				});
			});
		} else {
			this.btnCollect.set_enable(false);
			this.todayCanvas.set_visible(true);
			this.todayCanvas.set_alpha(1);
			var _g = this.todayCanvas;
			_g.set_y(_g.get_y() + 67);
		}
	}
	,onAniComplete: function(e) {
		var _gthis = this;
		var ani = e.target;
		haxe_Timer.delay(function() {
			if(_gthis.parent != null) {
				ani.showBehavior("_e");
			} else {
				ani.removeEventListener("complete",$bind(_gthis,_gthis.onAniComplete));
			}
		},7000);
	}
	,onUpdate: function(e) {
		var cur = openfl_Lib.getTimer();
		var delta = cur - this.lastTick;
		var _g = 0;
		var _g1 = this.animations;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a.update(delta);
		}
		this.lastTick = cur;
	}
	,close: function() {
		var _gthis = this;
		this.btnClose.set_work(false);
		this.btnCollect.set_work(false);
		var kill = function() {
			_gthis.removeEventListener("enterFrame",$bind(_gthis,_gthis.onUpdate));
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
			if(_gthis.parent != null) {
				_gthis.parent.removeChild(_gthis);
			}
		};
		if(this.first) {
			var drawCoins = new com_redpeakgames_cloud9_ui_DrawCoins((this.btnCollect.get_x() + this.get_x() | 0) + 62,(this.btnCollect.get_y() + this.get_y() | 0) + 10,713,80,1500,10);
			drawCoins.set_onCoinArrive(function() {
				com_redpeakgames_cloud9_TopMenu.coinAdjust.pop();
				_gthis.dispatchEvent(new openfl_events_DataEvent("ge.balance.changed",true,false,JSON.stringify({ coin : haxe__$Int64_Int64_$Impl_$.toString(_gthis.udt.coin), showAddedCoin : true, udtCoinChange : false})));
				kill();
			});
			this.parent.addChild(drawCoins);
		} else {
			kill();
		}
	}
	,onClickClose: function(e) {
		this.btnClose.set_work(false);
		this.close();
	}
	,onClickCollect: function(e) {
		this.btnCollect.set_work(false);
		this.close();
	}
	,__class__: com_redpeakgames_cloud9_dialog_BonusStreak
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.transparent = transparent;
	if(width == null) {
		width = 0;
	} else {
		width = width;
	}
	if(height == null) {
		height = 0;
	} else {
		height = height;
	}
	if(width < 0) {
		width = 0;
	} else {
		width = width;
	}
	if(height < 0) {
		height = 0;
	} else {
		height = height;
	}
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
		this.readable = true;
	}
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	var onload1 = onload;
	var _gthis = bitmapData;
	lime_graphics_Image.fromBase64(base64,type,function(image) {
		_gthis.__fromImage(image);
		if(onload1 != null) {
			onload1(_gthis);
		}
	});
	return bitmapData;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	var rawAlpha1 = rawAlpha;
	var onload1 = onload;
	var _gthis = bitmapData;
	lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),function(image) {
		_gthis.__fromImage(image);
		if(rawAlpha1 != null) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
			lime_graphics_utils_ImageCanvasUtil.createImageData(image);
			var data = image.buffer.data;
			var _g1 = 0;
			var _g = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(rawAlpha1);
			while(_g1 < _g) data[_g1++ * 4 + 3] = rawAlpha1.readUnsignedByte();
			image.version++;
		}
		if(onload1 != null) {
			onload1(_gthis);
		}
	});
	return bitmapData;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	bitmapData.__fromFile(path,onload,onerror);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromTexture = function(texture) {
	if(texture == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(texture.__width,texture.__height,true,0);
	bitmapData.readable = false;
	bitmapData.__texture = texture.__textureID;
	bitmapData.image = null;
	return bitmapData;
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,readable: null
	,rect: null
	,transparent: null
	,width: null
	,__blendMode: null
	,__buffer: null
	,__bufferAlpha: null
	,__bufferData: null
	,__framebuffer: null
	,__isValid: null
	,__surface: null
	,__texture: null
	,__textureVersion: null
	,__transform: null
	,__worldColorTransform: null
	,__worldTransform: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable) {
			return;
		}
		filter.__applyFilter(sourceBitmapData,this,sourceRect,destPoint);
	}
	,clone: function() {
		if(!this.__isValid) {
			return new openfl_display_BitmapData(this.width,this.height,this.transparent,0);
		} else if(!this.readable && this.image == null) {
			var bitmapData = new openfl_display_BitmapData(0,0,this.transparent,0);
			bitmapData.width = this.width;
			bitmapData.height = this.height;
			bitmapData.rect.copyFrom(this.rect);
			bitmapData.__framebuffer = this.__framebuffer;
			bitmapData.__texture = this.__texture;
			bitmapData.__isValid = true;
			return bitmapData;
		} else {
			return openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
		}
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.readable) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) {
			return 0;
		} else if(otherBitmapData == null) {
			return -1;
		} else if(this.readable == false || otherBitmapData.readable == false) {
			return -2;
		} else if(this.width != otherBitmapData.width) {
			return -3;
		} else if(this.height != otherBitmapData.height) {
			return -4;
		}
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g1 = 0;
			var _g = bytes.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) {
				return 0;
			}
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g11 = 0;
		var _g2 = this.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = this.width;
			while(_g3 < _g21) {
				var x = _g3++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >>> 16 & 255) - (otherPixel >>> 16 & 255);
					g = (pixel >>> 8 & 255) - (otherPixel >>> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) {
						r *= -1;
					}
					if(g < 0) {
						g *= -1;
					}
					if(b < 0) {
						b *= -1;
					}
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >>> 24 & 255) - (otherPixel >>> 24 & 255);
						if(a != 0) {
							comparePixel = 16711680;
							comparePixel = 16776960;
							comparePixel = 16777215;
							comparePixel = (a & 255) << 24 | 16711680 | 65280 | 255;
							foundDifference = true;
						}
					} else {
						comparePixel = 0 | (r & 255) << 16 | 0 | 0;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | b & 255;
						comparePixel = -16777216 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) {
						bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					}
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) {
			return 0;
		}
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.readable) {
			return;
		}
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.readable || sourceBitmapData == null) {
			return;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null?alphaBitmapData.image:null,alphaPoint != null?alphaPoint.__toLimeVector2():null,mergeAlpha);
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		this.readable = false;
		this.__surface = null;
		this.__buffer = null;
		this.__framebuffer = null;
		this.__texture = null;
	}
	,disposeImage: function() {
		this.readable = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
			if(source.__transform != null) {
				matrix.copyFrom(source.__transform);
				matrix.tx = 0;
				matrix.ty = 0;
			}
		}
		if(!this.readable) {
			if(lime_graphics_opengl_GL.context != null) {
				var gl = lime_graphics_opengl_GL.context;
				gl.bindFramebuffer(gl.FRAMEBUFFER,this.__getFramebuffer(gl));
				gl.viewport(0,0,this.width,this.height);
				var renderer = new openfl__$internal_renderer_opengl_GLRenderer(openfl_Lib.current.stage,gl,false);
				renderer.resize(this.width,this.height);
				var renderSession = renderer.renderSession;
				renderSession.shaderManager = (js_Boot.__cast(openfl_Lib.current.stage.__renderer , openfl__$internal_renderer_opengl_GLRenderer)).renderSession.shaderManager;
				var matrixCache = source.__worldTransform;
				source.__updateTransforms(matrix);
				source.__updateChildren(false);
				source.__renderGL(renderer.renderSession);
				source.__updateTransforms(matrixCache);
				source.__updateChildren(true);
				gl.bindFramebuffer(gl.FRAMEBUFFER,null);
			}
		} else {
			if(colorTransform != null) {
				var tmp;
				var tmp1;
				if(source == null) {
					tmp1 = null;
				} else {
					var tmp2;
					if(source.__properties__) {
						tmp = source.__properties__["get_" + "width"];
						tmp2 = tmp;
					} else {
						tmp2 = false;
					}
					if(tmp2) {
						tmp1 = source[tmp]();
					} else {
						tmp1 = source.width;
					}
				}
				var width = Math.ceil(tmp1);
				var tmp3;
				var tmp4;
				if(source == null) {
					tmp4 = null;
				} else {
					var tmp5;
					if(source.__properties__) {
						tmp3 = source.__properties__["get_" + "height"];
						tmp5 = tmp3;
					} else {
						tmp5 = false;
					}
					if(tmp5) {
						tmp4 = source[tmp3]();
					} else {
						tmp4 = source.height;
					}
				}
				var height = Math.ceil(tmp4);
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source);
				copy.colorTransform(copy.rect,colorTransform);
				source = copy;
			}
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
			var buffer = this.image.buffer;
			var renderSession1 = new openfl__$internal_renderer_RenderSession();
			renderSession1.context = buffer.__srcContext;
			renderSession1.allowSmoothing = smoothing;
			renderSession1.roundPixels = true;
			renderSession1.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession1);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.msImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			if(clipRect != null) {
				renderSession1.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
			}
			var matrixCache1 = source.__worldTransform;
			source.__updateTransforms(matrix);
			source.__updateChildren(false);
			source.__renderCanvas(renderSession1);
			source.__updateTransforms(matrixCache1);
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.msImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			if(clipRect != null) {
				renderSession1.maskManager.popRect();
			}
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			buffer.__srcImageData = null;
			buffer.data = null;
			this.image.dirty = true;
			this.image.version++;
		}
	}
	,drawWithQuality: function(source,matrix,colorTransform,blendMode,clipRect,smoothing,quality) {
		if(smoothing == null) {
			smoothing = false;
		}
		this.draw(source,matrix,colorTransform,blendMode,clipRect,smoothing);
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.readable || rect == null) {
			byteArray = null;
			return byteArray;
		}
		if(byteArray == null) {
			byteArray = new openfl_utils_ByteArrayData(0);
		}
		if(js_Boot.__instanceof(compressor,openfl_display_PNGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.encode("png")));
			return byteArray;
		} else if(js_Boot.__instanceof(compressor,openfl_display_JPEGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.encode("jpg",(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality)));
			return byteArray;
		}
		byteArray = null;
		return byteArray;
	}
	,fillRect: function(rect,color) {
		if(rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		if(this.readable) {
			this.image.fillRect(rect.__toLimeRectangle(),color,1);
		} else if(this.__framebuffer != null) {
			var gl = lime_graphics_opengl_GL.context;
			var color1 = color;
			var useScissor = !this.rect.equals(rect);
			gl.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer);
			if(useScissor) {
				gl.enable(gl.SCISSOR_TEST);
				gl.scissor(Math.round(rect.x),Math.round(rect.y),Math.round(rect.width),Math.round(rect.height));
			}
			gl.clearColor((color1 >>> 16 & 255) / 255,(color1 >>> 8 & 255) / 255,(color1 & 255) / 255,(color1 >>> 24 & 255) / 255);
			gl.clear(gl.COLOR_BUFFER_BIT);
			if(useScissor) {
				gl.disable(gl.SCISSOR_TEST);
			}
			gl.bindFramebuffer(gl.FRAMEBUFFER,null);
		}
	}
	,floodFill: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.floodFill(x,y,color,1);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl,alpha) {
		if(this.__buffer == null) {
			var array = [this.width,this.height,0,1,1,alpha,0,this.height,0,0,1,alpha,this.width,0,0,1,0,alpha,0,0,0,0,0,alpha];
			this.__bufferData = array != null?new Float32Array(array):null;
			this.__bufferAlpha = alpha;
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,this.__bufferData,gl.STATIC_DRAW);
		} else if(this.__bufferAlpha != alpha) {
			this.__bufferData[5] = alpha;
			this.__bufferData[11] = alpha;
			this.__bufferData[17] = alpha;
			this.__bufferData[23] = alpha;
			this.__bufferAlpha = alpha;
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,this.__bufferData,gl.STATIC_DRAW);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) {
			findColor = true;
		}
		if(!this.readable) {
			return new openfl_geom_Rectangle(0,0,this.width,this.height);
		}
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >>> 24 & 255) == 0) {
				color1 = 0;
			}
		}
		var rect = this.image.getColorBoundsRect(mask,color,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.readable) {
			return null;
		}
		if(rect == null) {
			rect = this.rect;
		}
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
	}
	,getSurface: function() {
		if(!this.readable) {
			return null;
		}
		if(this.__surface == null) {
			this.__surface = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(this.image);
		}
		return this.__surface;
	}
	,getTexture: function(gl) {
		if(!this.__isValid) {
			return null;
		}
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.__textureVersion = -1;
		}
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
		if(this.image != null && this.image.version != this.__textureVersion) {
			var internalFormat;
			var format;
			if(this.__surface != null) {
				lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush(this.__surface);
			}
			if(this.image.buffer.bitsPerPixel == 1) {
				internalFormat = gl.ALPHA;
				format = gl.ALPHA;
			} else {
				internalFormat = gl.RGBA;
				format = gl.RGBA;
			}
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.image;
			if(textureImage.type != lime_graphics_ImageType.DATA && !textureImage.get_premultiplied()) {
				gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
			} else if(!textureImage.get_premultiplied() && textureImage.get_transparent()) {
				gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
			}
			if(textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
			}
			if(textureImage.type == lime_graphics_ImageType.DATA) {
				gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,textureImage.buffer.width,textureImage.buffer.height,0,format,gl.UNSIGNED_BYTE,textureImage.get_data());
			} else {
				gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,textureImage.get_src());
			}
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.__textureVersion = this.image.version;
		}
		if(!this.readable && this.image != null) {
			this.__surface = null;
			this.image = null;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels) / 4 | 0;
		var result = openfl__$Vector_Vector_$Impl_$.toIntVector(null,length,true);
		var _g1 = 0;
		while(_g1 < length) result.set(_g1++,pixels.readUnsignedInt());
		return result;
	}
	,histogram: function(hRect) {
		var pixels = this.getPixels(hRect != null?hRect:new openfl_geom_Rectangle(0,0,this.width,this.height));
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			++_g1;
			var _g2 = [];
			var _g3 = 0;
			while(_g3 < 256) {
				++_g3;
				_g2.push(0);
			}
			_g.push(_g2);
		}
		var _g21 = 0;
		var _g11 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels);
		while(_g21 < _g11) ++_g[_g21++ % 4][pixels.readUnsignedByte()];
		return _g;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) {
			secondAlphaThreshold = 1;
		}
		if(!this.readable) {
			return false;
		}
		if(js_Boot.__instanceof(secondObject,openfl_display_Bitmap)) {
			secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).bitmapData;
		}
		if(js_Boot.__instanceof(secondObject,openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				if((this.getPixel32(x,y) >> 24 & 255) >= firstAlphaThreshold) {
					return true;
				}
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x1;
			var y1;
			if(secondBitmapDataPoint == null) {
				x1 = 0;
				y1 = 0;
			} else {
				x1 = secondBitmapDataPoint.x - firstPoint.x | 0;
				y1 = secondBitmapDataPoint.y - firstPoint.y | 0;
			}
			if(this.rect.contains(x1,y1)) {
				var hitRect = openfl_geom_Rectangle.__temp;
				hitRect.setTo(x1,y1,Math.min(secondBitmapData.width,this.width - x1),Math.min(secondBitmapData.height,this.height - y1));
				var pixels = this.getPixels(hitRect);
				hitRect.offset(-x1,-y1);
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel;
				var testPixel;
				var _g1 = 0;
				while(_g1 < length) {
					++_g1;
					pixel = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if((pixel >> 24 & 255) >= firstAlphaThreshold && (testPixel >> 24 & 255) >= secondAlphaThreshold) {
						return true;
					}
				}
				return false;
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__temp;
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels1 = this.getPixels(secondRectangle);
				var length1 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels1) / 4 | 0;
				var pixel1;
				var _g11 = 0;
				while(_g11 < length1) {
					++_g11;
					pixel1 = pixels1.readUnsignedInt();
					if((pixel1 >> 24 & 255) >= firstAlphaThreshold) {
						return true;
					}
				}
			}
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable || sourceRect == null || destPoint == null) {
			return;
		}
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(high == null) {
			high = 255;
		}
		if(low == null) {
			low = 0;
		}
		if(!this.readable) {
			return;
		}
		var func = function() {
			randomSeed = randomSeed * 1103515245 + 12345;
			return (Math.abs(randomSeed / 65536) | 0) % 32768;
		};
		func();
		var range = high - low;
		new openfl_utils_ByteArrayData(0);
		var redChannel = (channelOptions & 1) == 1;
		var greenChannel = (channelOptions & 2) >> 1 == 1;
		var blueChannel = (channelOptions & 4) >> 2 == 1;
		var alphaChannel = (channelOptions & 8) >> 3 == 1;
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var red = 0;
				var blue = 0;
				var green = 0;
				var alpha = 255;
				if(grayScale) {
					blue = low + func() % range;
					green = blue;
					red = green;
					alpha = 255;
				} else {
					if(redChannel) {
						red = low + func() % range;
					}
					if(greenChannel) {
						green = low + func() % range;
					}
					if(blueChannel) {
						blue = low + func() % range;
					}
					if(alphaChannel) {
						alpha = low + func() % range;
					}
				}
				var rgb = alpha;
				rgb = (rgb << 8) + red;
				rgb = (rgb << 8) + green;
				rgb = (rgb << 8) + blue;
				this.setPixel32(x,y,rgb);
			}
		}
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = this.getPixels(sourceRect);
		pixels.position = 0;
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var c1;
		var c2;
		var c3;
		var c4;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) {
				c1 = pixelValue & -16777216;
			} else {
				c1 = alphaArray[pixelValue >> 24 & 255];
			}
			if(redArray == null) {
				c2 = pixelValue & 16711680;
			} else {
				c2 = redArray[pixelValue >> 16 & 255];
			}
			if(greenArray == null) {
				c3 = pixelValue & 65280;
			} else {
				c3 = greenArray[pixelValue >> 8 & 255];
			}
			if(blueArray == null) {
				c4 = pixelValue & 255;
			} else {
				c4 = blueArray[pixelValue & 255];
			}
			a = (c1 >> 24 & 255) + (c2 >> 24 & 255) + (c3 >> 24 & 255) + (c4 >> 24 & 255);
			r = (c1 >> 16 & 255) + (c2 >> 16 & 255) + (c3 >> 16 & 255) + (c4 >> 16 & 255);
			g = (c1 >> 8 & 255) + (c2 >> 8 & 255) + (c3 >> 8 & 255) + (c4 >> 8 & 255);
			b = (c1 & 255) + (c2 & 255) + (c3 & 255) + (c4 & 255);
			color = a << 24 | r << 16 | g << 8 | b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		this.setPixels(new openfl_geom_Rectangle(destPoint.x,destPoint.y,sw,sh),pixels);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(!this.readable) {
			return;
		}
		new openfl__$internal_utils_PerlinNoise(randomSeed,numOctaves,0.01).fill(this,baseX,baseY,0);
	}
	,scroll: function(x,y) {
		if(!this.readable) {
			return;
		}
		this.image.scroll(x,y);
	}
	,setPixel: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel(x,y,color,1);
	}
	,setPixel32: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel32(x,y,color,1);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.readable || rect == null) {
			return;
		}
		this.image.setPixels(rect.__toLimeRectangle(),openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(byteArray),1);
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new openfl_utils_ByteArrayData(0);
		openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(byteArray,inputVector.get_length() * 4);
		var _g = 0;
		while(_g < inputVector.get_length()) {
			var color = inputVector.get(_g);
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) {
			return 0;
		}
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,unlock: function(changeRect) {
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		lime_graphics_Image.fromBase64(base64,type,function(image) {
			_gthis.__fromImage(image);
			if(onload != null) {
				onload(_gthis);
			}
		});
	}
	,__fromBytes: function(bytes,rawAlpha,onload) {
		var _gthis = this;
		lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),function(image) {
			_gthis.__fromImage(image);
			if(rawAlpha != null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
				lime_graphics_utils_ImageCanvasUtil.createImageData(image);
				var data = image.buffer.data;
				var _g1 = 0;
				var _g = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(rawAlpha);
				while(_g1 < _g) data[_g1++ * 4 + 3] = rawAlpha.readUnsignedByte();
				image.version++;
			}
			if(onload != null) {
				onload(_gthis);
			}
		});
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		lime_graphics_Image.fromFile(path,function(image) {
			_gthis.__fromImage(image);
			if(onload != null) {
				onload(_gthis);
			}
		},onerror);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.readable = true;
			this.__isValid = true;
		}
	}
	,__getFramebuffer: function(gl) {
		if(this.__framebuffer == null) {
			this.getTexture(gl);
			this.__framebuffer = gl.createFramebuffer();
			gl.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer);
			gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.__texture,0);
		}
		return this.__framebuffer;
	}
	,__renderCairo: function(renderSession) {
		if(!this.readable) {
			return;
		}
		var cairo = renderSession.cairo;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else {
			cairo.set_matrix(transform.__toMatrix3());
		}
		var surface = this.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			if(!renderSession.allowSmoothing || cairo.get_antialias() == 1) {
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,3);
			} else {
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,1);
			}
			cairo.set_source(pattern);
			cairo.paint();
		}
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(!this.readable) {
			return;
		}
		if(this.image.type == lime_graphics_ImageType.DATA) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		}
		var context = renderSession.context;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		context.drawImage(this.image.get_src(),0,0);
	}
	,__renderCanvasMask: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		renderSession.blendModeManager.setBlendMode(10);
		var shader = renderSession.shaderManager.defaultShader;
		shader.get_data().uImage0.input = this;
		shader.get_data().uImage0.smoothing = renderSession.allowSmoothing && renderSession.upscaled;
		shader.get_data().uMatrix.value = renderer.getMatrix(this.__worldTransform);
		renderSession.shaderManager.setShader(shader);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.getBuffer(gl,1));
		gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,24,0);
		gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,24,12);
		gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,24,20);
		gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
	}
	,__sync: function() {
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateMask: function(maskGraphics) {
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform = overrideTransform;
		}
	}
	,__class__: openfl_display_BitmapData
};
var com_redpeakgames_cloud9_dialog_CircleCore = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(com_redpeakgames_cloud9_dialog_CircleCore.preload != null) {
		this.__fromImage(com_redpeakgames_cloud9_dialog_CircleCore.preload);
	} else {
		var base64 = haxe_Resource.getString(com_redpeakgames_cloud9_dialog_CircleCore.resourceName);
		var onload1 = function(b) {
			if(com_redpeakgames_cloud9_dialog_CircleCore.preload == null) {
				com_redpeakgames_cloud9_dialog_CircleCore.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(base64,com_redpeakgames_cloud9_dialog_CircleCore.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["com.redpeakgames.cloud9.dialog.CircleCore"] = com_redpeakgames_cloud9_dialog_CircleCore;
com_redpeakgames_cloud9_dialog_CircleCore.__name__ = ["com","redpeakgames","cloud9","dialog","CircleCore"];
com_redpeakgames_cloud9_dialog_CircleCore.__super__ = openfl_display_BitmapData;
com_redpeakgames_cloud9_dialog_CircleCore.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: com_redpeakgames_cloud9_dialog_CircleCore
});
var com_redpeakgames_cloud9_dialog_CircleBg = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(com_redpeakgames_cloud9_dialog_CircleBg.preload != null) {
		this.__fromImage(com_redpeakgames_cloud9_dialog_CircleBg.preload);
	} else {
		var base64 = haxe_Resource.getString(com_redpeakgames_cloud9_dialog_CircleBg.resourceName);
		var onload1 = function(b) {
			if(com_redpeakgames_cloud9_dialog_CircleBg.preload == null) {
				com_redpeakgames_cloud9_dialog_CircleBg.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(base64,com_redpeakgames_cloud9_dialog_CircleBg.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["com.redpeakgames.cloud9.dialog.CircleBg"] = com_redpeakgames_cloud9_dialog_CircleBg;
com_redpeakgames_cloud9_dialog_CircleBg.__name__ = ["com","redpeakgames","cloud9","dialog","CircleBg"];
com_redpeakgames_cloud9_dialog_CircleBg.__super__ = openfl_display_BitmapData;
com_redpeakgames_cloud9_dialog_CircleBg.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: com_redpeakgames_cloud9_dialog_CircleBg
});
var com_redpeakgames_cloud9_dialog_CircleLoading = function(loader,x,y,onCompleteMethod) {
	openfl_display_Sprite.call(this);
	this.loader = loader;
	this.onCompleteMethod = onCompleteMethod;
	if(loader.contentLoaderInfo.bytesTotal == loader.contentLoaderInfo.bytesLoaded && loader.content != null) {
		this.onComplete(null);
		return;
	}
	if(x != null) {
		this.set_x(x);
	} else {
		this.set_x(openfl_Lib.current.stage.stageWidth / 2);
	}
	if(y != null) {
		this.set_y(y);
	} else {
		this.set_y(300);
	}
	this.circleCore = new openfl_display_Sprite();
	this.circleCore.set_x(32);
	this.circleCore.set_y(32);
	var ccimg = new openfl_display_Bitmap(new com_redpeakgames_cloud9_dialog_CircleCore(0,0));
	ccimg.smoothing = true;
	ccimg.set_x(-32);
	ccimg.set_y(-32);
	this.circleCore.addChild(ccimg);
	this.addChild(this.circleCore);
	this.circleBg = new openfl_display_Bitmap(new com_redpeakgames_cloud9_dialog_CircleBg(0,0));
	this.circleBg.set_alpha(0.5);
	this.addChild(this.circleBg);
	motion_Actuate.tween(this.circleCore,1,{ rotation : 360}).ease(motion_easing_Linear.get_easeNone()).repeat();
	loader.contentLoaderInfo.addEventListener("complete",$bind(this,this.onComplete));
	loader.contentLoaderInfo.addEventListener("ioError",$bind(this,this.onIOError));
};
$hxClasses["com.redpeakgames.cloud9.dialog.CircleLoading"] = com_redpeakgames_cloud9_dialog_CircleLoading;
com_redpeakgames_cloud9_dialog_CircleLoading.__name__ = ["com","redpeakgames","cloud9","dialog","CircleLoading"];
com_redpeakgames_cloud9_dialog_CircleLoading.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_CircleLoading.prototype = $extend(openfl_display_Sprite.prototype,{
	circleBg: null
	,circleCore: null
	,loader: null
	,onCompleteMethod: null
	,onComplete: function(e) {
		var _gthis = this;
		this.loader.contentLoaderInfo.removeEventListener("complete",$bind(this,this.onComplete));
		this.loader.contentLoaderInfo.removeEventListener("ioError",$bind(this,this.onIOError));
		if(this.circleCore != null) {
			motion_Actuate.stop(this.circleCore);
		}
		this.removeChildren();
		if(this.onCompleteMethod != null) {
			this.onCompleteMethod();
		}
		haxe_Timer.delay(function() {
			if(_gthis.parent != null) {
				_gthis.parent.removeChild(_gthis);
			}
		},100);
	}
	,onIOError: function(e) {
		var _gthis = this;
		this.loader.contentLoaderInfo.removeEventListener("complete",$bind(this,this.onComplete));
		this.loader.contentLoaderInfo.removeEventListener("ioError",$bind(this,this.onIOError));
		haxe_Log.trace("Cannot load",{ fileName : "CircleLoading.hx", lineNumber : 100, className : "com.redpeakgames.cloud9.dialog.CircleLoading", methodName : "onIOError"});
		haxe_Timer.delay(function() {
			_gthis.removeChildren();
			if(_gthis.parent != null) {
				var topMenu = null;
				var target = _gthis;
				while(target != null) {
					if(target.get_name() == "cloud9.Main") {
						topMenu = Reflect.field(target,"topMenu");
						break;
					}
					target = target.parent;
				}
				if(topMenu != null) {
					com_redpeakgames_cloud9_utils_DynamicCall.method(topMenu,"removeScreen",[]);
				}
				_gthis.parent.removeChild(_gthis);
			}
		},100);
	}
	,__class__: com_redpeakgames_cloud9_dialog_CircleLoading
});
var com_redpeakgames_cloud9_dialog_DoubleUp = function(x,y) {
	var _gthis = this;
	openfl_display_Sprite.call(this);
	this.set_x(x);
	this.set_y(y);
	var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/doubleup/card_a_e.png",false),7,1,128,118);
	ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6],false,30));
	ss.addBehavior(new spritesheet_data_BehaviorData("stop",[0],false,1));
	this.cardA = new spritesheet_AnimatedSprite(ss);
	this.cardA.set_x(43);
	this.cardA.set_y(-22);
	this.cardA.showBehaviors(["stop","_e"]);
	this.addChild(this.cardA);
	this.canvas = new openfl_display_Sprite();
	this.canvas.set_alpha(0);
	this.addChild(this.canvas);
	this.btnDouble = new com_redpeakgames_cloud9_ui_ImageButton("img/doubleup/double_up_tag_back",null,null,"mouse_click");
	this.btnDouble.set_work(false);
	this.btnDouble.set_onClick($bind(this,this.onClickDoubleUp));
	this.canvas.addChild(this.btnDouble);
	this.tagLight00 = com_redpeakgames_cloud9_utils_BitmapMaker.create("img/doubleup/double_up_tag_light_1.png");
	this.tagLight00.set_alpha(0);
	this.btnDouble.addChild(this.tagLight00);
	this.tagLight01 = com_redpeakgames_cloud9_utils_BitmapMaker.create("img/doubleup/double_up_tag_light_2.png");
	this.btnDouble.addChild(this.tagLight01);
	motion_Actuate.tween(this.tagLight00,0.13,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat();
	this.btnDouble.addChild(com_redpeakgames_cloud9_utils_BitmapMaker.create("img/doubleup/double_up_tag_logo.png",null,81,26));
	this.btnDouble.addChild(com_redpeakgames_cloud9_utils_BitmapMaker.create("img/doubleup/double_up_tag_title.png",null,21,68));
	motion_Actuate.tween(this.canvas,0.2,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).delay(0.3).onComplete(function() {
		_gthis.btnDouble.set_work(true);
	});
	this.closeTimer = haxe_Timer.delay(function() {
		_gthis.onClose();
	},4000);
	this.addEventListener("enterFrame",$bind(this,this.onLoop));
};
$hxClasses["com.redpeakgames.cloud9.dialog.DoubleUp"] = com_redpeakgames_cloud9_dialog_DoubleUp;
com_redpeakgames_cloud9_dialog_DoubleUp.__name__ = ["com","redpeakgames","cloud9","dialog","DoubleUp"];
com_redpeakgames_cloud9_dialog_DoubleUp.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_DoubleUp.prototype = $extend(openfl_display_Sprite.prototype,{
	closeTimer: null
	,lastTick: null
	,canvas: null
	,btnDouble: null
	,cardA: null
	,tagLight00: null
	,tagLight01: null
	,onClickDoubleUp: function(e) {
		this.dispatchEvent(new openfl_events_DataEvent("ge.open.doubleup",true,false));
		this.onClose();
	}
	,onLoop: function(e) {
		var cur = openfl_Lib.getTimer();
		var delta = cur - this.lastTick;
		if(this.cardA != null) {
			this.cardA.update(delta);
		}
		if(this.tagLight00 != null && this.tagLight01 != null) {
			this.tagLight01.set_alpha(1 - this.tagLight00.get_alpha());
		}
		this.lastTick = cur;
	}
	,onClose: function() {
		var _gthis = this;
		if(this.btnDouble != null) {
			this.btnDouble.set_work(false);
		}
		if(this.closeTimer != null) {
			this.closeTimer.stop();
		}
		motion_Actuate.stop(this.tagLight00);
		motion_Actuate.tween(this,0.2,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			if(_gthis.parent != null) {
				_gthis.parent.removeChild(_gthis);
			}
			_gthis.removeEventListener("enterFrame",$bind(_gthis,_gthis.onLoop));
			while(_gthis.get_numChildren() > 0) _gthis.removeChildAt(0);
		});
	}
	,__class__: com_redpeakgames_cloud9_dialog_DoubleUp
});
var com_redpeakgames_cloud9_dialog_ExclusiveDeal = function() {
	openfl_display_Sprite.call(this);
	this.btnBuys = [];
	this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/exdeal/exclusive_back.png")));
	this.btnClose = new com_redpeakgames_cloud9_ui_ImageButton("img/exdeal/btn_x",null,null,"mouse_click");
	this.btnClose.set_x(700);
	this.btnClose.set_y(3);
	this.btnClose.set_onClick($bind(this,this.onClickClose));
	this.addChild(this.btnClose);
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var btn = new com_redpeakgames_cloud9_ui_ImageButton("img/exdeal/btn_dollar",null,null,"mouse_click");
		btn.set_x(155 + i * 342);
		btn.set_y(373 + i * 46);
		btn.set_name(i == 0?"2.99":"9.99");
		btn.set_onClick($bind(this,this.onClickBuy));
		this.addChild(btn);
		this.btnBuys.push(btn);
		btn.addChild(com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/exdeal/btn_txt_dollar_" + (i == 0?"299":"999") + ".png",false));
	}
};
$hxClasses["com.redpeakgames.cloud9.dialog.ExclusiveDeal"] = com_redpeakgames_cloud9_dialog_ExclusiveDeal;
com_redpeakgames_cloud9_dialog_ExclusiveDeal.__name__ = ["com","redpeakgames","cloud9","dialog","ExclusiveDeal"];
com_redpeakgames_cloud9_dialog_ExclusiveDeal.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_ExclusiveDeal.prototype = $extend(openfl_display_Sprite.prototype,{
	lastTick: null
	,twinkle: null
	,crown: null
	,coin: null
	,coinLight: null
	,playCrown: null
	,playCoin: null
	,btnClose: null
	,btnBuy: null
	,btnBuys: null
	,remainTime: null
	,onClickClose: function(e) {
		var _gthis = this;
		this.btnClose.set_enable(false);
		var _g = 0;
		var _g1 = this.btnBuys;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.set_enable(false);
		}
		motion_Actuate.tween(this,0.2,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
			if(_gthis.parent != null) {
				_gthis.parent.removeChild(_gthis);
			}
		});
	}
	,onClickBuy: function(e) {
		this.dispatchEvent(new openfl_events_DataEvent("ge.to.normalscreen",true,false));
		var o = e.target;
		var tmp;
		var usd;
		if(o == null) {
			usd = null;
		} else {
			var tmp1;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + "name"];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				usd = o[tmp]();
			} else {
				usd = o.name;
			}
		}
		try {
			openfl_external_ExternalInterface.call("buyCoins",usd,"sales");
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,openfl_errors_Error) ) {
				haxe_Log.trace(e1.toString(),{ fileName : "ExclusiveDeal.hx", lineNumber : 211, className : "com.redpeakgames.cloud9.dialog.ExclusiveDeal", methodName : "onClickBuy"});
			} else throw(e1);
		}
		this.onClickClose(null);
	}
	,__class__: com_redpeakgames_cloud9_dialog_ExclusiveDeal
});
var com_redpeakgames_cloud9_dialog_FirstPurchase = function(isVoucher) {
	if(isVoucher == null) {
		isVoucher = false;
	}
	openfl_display_Sprite.call(this);
	this.isVoucher = isVoucher;
	this.effects = [];
	this.addChild(this.makeBitmap("img/firstpurchase/bg.png"));
	this.btnClose = new com_redpeakgames_cloud9_ui_ImageButton("img/firstpurchase/btn_sales_x",null,null,"mouse_click");
	this.btnClose.set_x(700);
	this.btnClose.set_y(45);
	this.btnClose.set_onClick($bind(this,this.onClickClose));
	this.addChild(this.btnClose);
	var bestLight1 = this.makeBitmap("img/firstpurchase/best_light_1.png",114,112);
	var bestLight2 = this.makeBitmap("img/firstpurchase/best_light_2.png",114,112);
	bestLight2.set_alpha(0);
	this.addChild(bestLight1);
	this.addChild(bestLight2);
	var goodLight1 = this.makeBitmap("img/firstpurchase/good_light_1.png",414,112);
	var goodLight2 = this.makeBitmap("img/firstpurchase/good_light_2.png",414,112);
	goodLight2.set_alpha(0);
	this.addChild(goodLight1);
	this.addChild(goodLight2);
	this.effects.push(motion_Actuate.tween(bestLight1,0.233,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat());
	this.effects.push(motion_Actuate.tween(goodLight1,0.233,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat());
	this.effects.push(motion_Actuate.tween(bestLight2,0.233,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat());
	this.effects.push(motion_Actuate.tween(goodLight2,0.233,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat());
	var bestDeal = this.makeBitmap("img/firstpurchase/best_taglight_1.png",99,81);
	var bestDealHighlight = this.makeBitmap("img/firstpurchase/best_taglight_2.png",99,81);
	bestDealHighlight.set_alpha(0);
	this.addChild(bestDeal);
	this.addChild(bestDealHighlight);
	var goodDeal = this.makeBitmap("img/firstpurchase/good_taglight_1.png",395,92);
	var goodDealHighlight = this.makeBitmap("img/firstpurchase/good_taglight_2.png",395,92);
	goodDealHighlight.set_alpha(0);
	this.addChild(goodDeal);
	this.addChild(goodDealHighlight);
	this.effects.push(motion_Actuate.tween(bestDealHighlight,0.33,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat());
	this.effects.push(motion_Actuate.tween(goodDealHighlight,0.33,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat());
	this.addBuy("99.00",252,204,99,1200);
	this.addBuy("5.00",552,204,5,50);
	this.addBuy("19.00",252,374,19,200);
	this.addBuy("2.00",552,374,2,20);
};
$hxClasses["com.redpeakgames.cloud9.dialog.FirstPurchase"] = com_redpeakgames_cloud9_dialog_FirstPurchase;
com_redpeakgames_cloud9_dialog_FirstPurchase.__name__ = ["com","redpeakgames","cloud9","dialog","FirstPurchase"];
com_redpeakgames_cloud9_dialog_FirstPurchase.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_FirstPurchase.prototype = $extend(openfl_display_Sprite.prototype,{
	btnClose: null
	,isVoucher: null
	,effects: null
	,addBuy: function(name,x,y,price,rpoint) {
		var btnBuy = new com_redpeakgames_cloud9_ui_ImageButton("img/firstpurchase/btn",null,null,"mouse_click");
		btnBuy.set_x(x);
		btnBuy.set_y(y);
		btnBuy.set_onClick($bind(this,this.onClickBuy));
		btnBuy.set_name(name);
		this.addChild(btnBuy);
		var tf = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",34,16777215);
		tf.align = 0;
		var txtPrice = com_redpeakgames_cloud9_ui_TxField.make(0,-2,119,tf);
		txtPrice.set_height(62);
		txtPrice.set_text("$ " + price);
		btnBuy.addChild(txtPrice);
		tf = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",10,3997440);
		tf.align = 0;
		var txtRpoint = com_redpeakgames_cloud9_ui_TxField.make(0,38,119,tf);
		txtRpoint.set_height(20);
		txtRpoint.set_text("+ " + rpoint + " R points");
		btnBuy.addChild(txtRpoint);
	}
	,makeBelowText: function(string) {
		var tf = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",14,65280);
		tf.align = 4;
		var txtPrice = com_redpeakgames_cloud9_ui_TxField.make(437,458,238,tf);
		txtPrice.set_height(20);
		txtPrice.set_text(string);
		this.addChild(txtPrice);
	}
	,makeBitmap: function(path,x,y,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var bitmap = new openfl_display_Bitmap(openfl_Assets.getBitmapData(path,false));
		bitmap.smoothing = smoothing;
		bitmap.set_x(x);
		bitmap.set_y(y);
		return bitmap;
	}
	,onClickBuy: function(me) {
		var btn = me.target;
		if(this.parent != null) {
			this.dispatchEvent(new openfl_events_DataEvent("ge.to.normalscreen",true,false));
		}
		try {
			openfl_external_ExternalInterface.call("buyCoins",btn.get_name(),"pack");
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
				haxe_Log.trace(e.toString(),{ fileName : "FirstPurchase.hx", lineNumber : 139, className : "com.redpeakgames.cloud9.dialog.FirstPurchase", methodName : "onClickBuy"});
			} else throw(e);
		}
		this.onClickClose(null);
		btn.set_enable(false);
	}
	,onClickClose: function(me) {
		var _gthis = this;
		this.btnClose.set_enable(false);
		motion_Actuate.tween(this,0.2,{ x : 1370, y : 92, alpha : 0, scaleX : 0, scaleY : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			if(_gthis.isVoucher) {
				_gthis.dispatchEvent(new openfl_events_DataEvent("ge.close.voucher",true,false));
			}
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
			if(_gthis.parent != null) {
				_gthis.parent.removeChild(_gthis);
			}
			while(_gthis.effects.length > 0) {
				var obj = _gthis.effects.pop();
				motion_Actuate.stop(obj);
				motion_Actuate.unload(obj);
				obj = null;
			}
			while(_gthis.get_numChildren() > 0) _gthis.removeChildAt(0);
		});
	}
	,__class__: com_redpeakgames_cloud9_dialog_FirstPurchase
});
var com_redpeakgames_cloud9_dialog_Friends = function(sendMethod,invite) {
	var _gthis = this;
	openfl_display_Sprite.call(this);
	this.seManager = new com_redpeakgames_cloud9_utils_SeManager(com_redpeakgames_cloud9_Global.mute);
	this.curPage = 0;
	this.loaded = [];
	this.sendGiftCallback = sendMethod;
	this.inviteCallback = invite;
	var slots = new openfl_display_Sprite();
	slots.set_x(141);
	slots.set_y(7);
	slots.set_scrollRect(new openfl_geom_Rectangle(0,0,463,126));
	this.addChild(slots);
	this.canvas = new openfl_display_Sprite();
	slots.addChild(this.canvas);
	var it = new com_redpeakgames_cloud9_ui_ImageButton("img/friends/invite_btn",null,null,"mouse_over_7-invite friends",0,"jpg");
	it.set_x(7);
	it.set_y(7);
	it.set_onClick(invite);
	this.addChild(it);
	this.collect = new com_redpeakgames_cloud9_LiveIcon("img/friends/giftbox_e.png",[4,3,110,146],[0],[1],[2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,0]);
	this.collect.set_name("btn.collect");
	this.collect.set_x(642);
	this.collect.set_y(-16);
	this.collect.set_onClick(sendMethod);
	this.collect.set_onOver(function(e) {
		if(!com_redpeakgames_cloud9_Global.mute) {
			_gthis.seManager.play("mouse_over_6-gift",0,0);
		}
	});
	this.addChild(this.collect);
	this.prevp = new com_redpeakgames_cloud9_ui_ImageButton("img/friends/btn_next",null,null,"mouse_etcOver",0,"jpg");
	this.prevp.set_x(104);
	this.prevp.set_y(34);
	this.prevp.set_onClick($bind(this,this.onScroll));
	this.addChild(this.prevp);
	this.firstp = new com_redpeakgames_cloud9_ui_ImageButton("img/friends/btn_last",null,null,"mouse_etcOver",0,"jpg");
	this.firstp.set_x(104);
	this.firstp.set_y(77);
	this.firstp.set_onClick($bind(this,this.onScroll));
	this.addChild(this.firstp);
	this.nextp = new com_redpeakgames_cloud9_ui_ImageButton("img/friends/btn_next",null,null,"mouse_etcOver",0,"jpg");
	this.nextp.set_x(637);
	this.nextp.set_y(34);
	this.nextp.set_scaleX(-1);
	this.nextp.set_onClick($bind(this,this.onScroll));
	this.addChild(this.nextp);
	this.lastp = new com_redpeakgames_cloud9_ui_ImageButton("img/friends/btn_last",null,null,"mouse_etcOver",0,"jpg");
	this.lastp.set_x(637);
	this.lastp.set_y(77);
	this.lastp.set_scaleX(-1);
	this.lastp.set_onClick($bind(this,this.onScroll));
	this.addChild(this.lastp);
	this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
};
$hxClasses["com.redpeakgames.cloud9.dialog.Friends"] = com_redpeakgames_cloud9_dialog_Friends;
com_redpeakgames_cloud9_dialog_Friends.__name__ = ["com","redpeakgames","cloud9","dialog","Friends"];
com_redpeakgames_cloud9_dialog_Friends.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_Friends.prototype = $extend(openfl_display_Sprite.prototype,{
	curPage: null
	,friends: null
	,canvas: null
	,loaded: null
	,collect: null
	,prevp: null
	,nextp: null
	,firstp: null
	,lastp: null
	,sendGiftCallback: null
	,inviteCallback: null
	,lastTick: null
	,seManager: null
	,onEnterFrame: function(e) {
		var cur = openfl_Lib.getTimer();
		this.collect.update(cur - this.lastTick);
		this.lastTick = cur;
	}
	,onScroll: function(event) {
		var btn = event.target;
		if(btn == this.prevp || btn == this.nextp) {
			var target = btn == this.prevp?this.curPage - 1:this.curPage + 1;
			if(target >= 0 && target < this.loaded.length) {
				this.draw(target);
				motion_Actuate.tween(this.canvas,0.6,{ x : -target * 93 * 5}).ease(motion_easing_Back.get_easeOut());
			}
		}
		if(btn == this.firstp) {
			this.draw(1);
			this.draw(0);
			this.canvas.set_x(-465);
			motion_Actuate.tween(this.canvas,0.6,{ x : 0}).ease(motion_easing_Back.get_easeOut());
		}
		if(btn == this.lastp) {
			var t = this.loaded.length - 1;
			this.draw(t - 1);
			this.draw(t);
			this.canvas.set_x(-(t - 1) * 93 * 5);
			motion_Actuate.tween(this.canvas,0.6,{ x : -t * 93 * 5}).ease(motion_easing_Back.get_easeOut());
		}
	}
	,makeProfile: function(profile) {
		var _gthis = this;
		var p = new openfl_display_Sprite();
		p.set_name(profile.id);
		p.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/friends/person_btn.jpg")));
		var loader = new openfl_display_Loader();
		loader.set_x(18);
		loader.set_y(8);
		loader.contentLoaderInfo.addEventListener("ioError",$bind(this,this.onError));
		loader.load(new openfl_net_URLRequest(decodeURIComponent(profile.url.split("+").join(" "))));
		p.addChild(loader);
		var shape = new openfl_display_Shape();
		shape.get_graphics().beginFill(0,0);
		shape.get_graphics().drawRect(18,8,52,52);
		shape.get_graphics().endFill();
		var btnProfile = new openfl_display_Sprite();
		btnProfile.buttonMode = true;
		btnProfile.addChild(shape);
		btnProfile.addEventListener("mouseDown",function(e) {
			if(!com_redpeakgames_cloud9_Global.mute) {
				_gthis.seManager.play("mouse_click_c",0,0);
			}
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.open.profile",true,false,JSON.stringify({ id : profile.id})));
		});
		p.addChild(btnProfile);
		var ltf = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",14,16777215);
		ltf.align = 4;
		var tx = com_redpeakgames_cloud9_ui_TxField.make(21,42,50,ltf,new openfl_filters_GlowFilter(6160475,1.0,1.5,1.5,10,2));
		tx.set_defaultTextFormat(ltf);
		tx.set_text(profile.lev == null?"null":"" + profile.lev);
		tx.mouseEnabled = false;
		p.addChild(tx);
		ltf = new openfl_text_TextFormat();
		ltf.align = 4;
		var ntf = new openfl_text_TextFormat();
		ntf.align = 0;
		var ntx = new openfl_text_TextField();
		ntx.set_defaultTextFormat(ntf);
		ntx.set_x(0);
		ntx.set_y(57);
		ntx.set_textColor(16777215);
		ntx.set_width(87);
		ntx.set_height(22);
		ntx.set_text(profile.name);
		ntx.mouseEnabled = false;
		p.addChild(ntx);
		var mtx = new openfl_text_TextField();
		mtx.set_defaultTextFormat(ltf);
		mtx.set_x(28);
		mtx.set_y(75);
		mtx.set_width(46);
		mtx.set_height(18);
		mtx.set_textColor(16772117);
		mtx.set_text(com_redpeakgames_cloud9_utils_Number.shortenString(profile.coin));
		mtx.mouseEnabled = false;
		p.addChild(mtx);
		var btn = new com_redpeakgames_cloud9_ui_ImageButton("img/friends/gift_btn",null,null,"mouse_etcOver");
		btn.set_name("btn.gift");
		btn.set_x(13);
		btn.set_y(94);
		btn.set_onClick(this.sendGiftCallback);
		p.addChild(btn);
		if(profile.enable == 0) {
			btn.set_enable(false);
		}
		return p;
	}
	,onError: function(e) {
		haxe_Log.trace(e.toString(),{ fileName : "Friends.hx", lineNumber : 250, className : "com.redpeakgames.cloud9.dialog.Friends", methodName : "onError"});
	}
	,set_inAppFriends: function(friends) {
		this.friends = friends;
		var numPage = Math.ceil(friends.length / 5);
		if(numPage == 0) {
			numPage = 1;
		}
		var _g1 = 0;
		var _g = numPage;
		while(_g1 < _g) {
			++_g1;
			this.loaded.push(false);
		}
		return friends;
	}
	,get_inAppFriends: function() {
		return this.friends;
	}
	,draw: function(target) {
		if(target == null) {
			target = 0;
		}
		if(target >= this.loaded.length) {
			return;
		}
		if(this.loaded[target] == false) {
			var start = target * 5;
			var end = start + 5;
			var _g1 = start;
			while(_g1 < end) {
				var i = _g1++;
				if(i < this.friends.length) {
					var p = this.makeProfile(this.friends[i]);
					p.set_x(i * 93);
					p.set_y(0);
					this.canvas.addChild(p);
				} else {
					var p1 = new com_redpeakgames_cloud9_ui_ImageButton("img/friends/invite2_btn",null,null,"mouse_over_7-invite friends",0,"jpg");
					p1.set_x(i * 93);
					p1.set_y(0);
					p1.set_onClick(this.inviteCallback);
					this.canvas.addChild(p1);
				}
			}
		}
		this.curPage = target;
		this.loaded[target] = true;
		this.enableNext(true);
		this.enablePrev(true);
		if(target == 0) {
			this.enablePrev(false);
		}
		if(target == this.loaded.length - 1) {
			this.enableNext(false);
		}
	}
	,enablePrev: function(enable) {
		this.prevp.set_enable(enable);
		this.firstp.set_enable(enable);
	}
	,enableNext: function(enable) {
		this.nextp.set_enable(enable);
		this.lastp.set_enable(enable);
	}
	,refreshProfile: function() {
		var _g = 0;
		var _g1 = this.friends;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			try {
				var btn = this.canvas.getChildByName(p.id).getChildByName("btn.gift");
				if(p.enable == 0) {
					btn.set_enable(false);
				}
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				haxe_Log.trace(Std.string(p) + " : " + Std.string(err),{ fileName : "Friends.hx", lineNumber : 331, className : "com.redpeakgames.cloud9.dialog.Friends", methodName : "refreshProfile"});
			}
		}
	}
	,__class__: com_redpeakgames_cloud9_dialog_Friends
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_inAppFriends:"set_inAppFriends",get_inAppFriends:"get_inAppFriends"})
});
var com_redpeakgames_cloud9_dialog_Gift = function(type,inAppFriends,udt) {
	var _gthis = this;
	openfl_display_Sprite.call(this);
	this.set_alpha(0);
	this.inAppFriends = inAppFriends;
	this.udt = udt;
	this.set_x(737);
	this.set_y(238);
	if(openfl_Lib.current.stage.get_displayState() == 2) {
		this.set_y(189);
	} else {
		this.set_y(258);
	}
	this.set_scaleX(0.7);
	this.set_scaleY(0.7);
	this.pos = 0;
	this.maxPos = 0;
	this.animations = [];
	this.isThumbOn = false;
	this.timers = [];
	this.isNew = true;
	this.bannerType = "";
	this.set_name("popup.gift");
	if(type == "send") {
		this.send();
	} else {
		this.collect();
	}
	this.makeLight();
	this.isNew = false;
	motion_Actuate.tween(this,0.266,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone());
	motion_Actuate.tween(this,0.133,{ x : this.get_x() - 96 - 16, y : this.get_y() - 91 - 15, scaleX : 1.05, scaleY : 1.05},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
		motion_Actuate.tween(_gthis,0.133,{ x : _gthis.get_x() + 16, y : _gthis.get_y() + 15, scaleX : 1, scaleY : 1},false).ease(motion_easing_Linear.get_easeNone());
	});
	this.lastTick = openfl_Lib.getTimer();
	this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
	openfl_Lib.current.stage.addEventListener("mouseUp",$bind(this,this.onMouseUp));
};
$hxClasses["com.redpeakgames.cloud9.dialog.Gift"] = com_redpeakgames_cloud9_dialog_Gift;
com_redpeakgames_cloud9_dialog_Gift.__name__ = ["com","redpeakgames","cloud9","dialog","Gift"];
com_redpeakgames_cloud9_dialog_Gift.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_Gift.prototype = $extend(openfl_display_Sprite.prototype,{
	canvas: null
	,udt: null
	,btnUp: null
	,btnDown: null
	,btnThumb: null
	,isThumbOn: null
	,scrollBar: null
	,timers: null
	,isNew: null
	,selects: null
	,searchSelects: null
	,collects: null
	,numFriends: null
	,txSelected: null
	,inAppFriends: null
	,senders: null
	,pos: null
	,maxPos: null
	,cointf: null
	,cnf: null
	,txCollect: null
	,lastTick: null
	,animations: null
	,searchField: null
	,selectedNum: null
	,bannerType: null
	,makeLight: function() {
		var lightbd = openfl_Assets.getBitmapData("img/gift/light.png");
		var lightBig = new openfl_display_Sprite();
		lightBig.set_x(122);
		lightBig.set_y(43);
		lightBig.set_alpha(0);
		lightBig.set_name("light.big");
		var lightBigImg = new openfl_display_Bitmap(lightbd,1,true);
		lightBigImg.set_x(-32);
		lightBigImg.set_y(-32);
		lightBig.addChild(lightBigImg);
		this.addChild(lightBig);
		var lightSmall = new openfl_display_Sprite();
		lightSmall.set_x(41);
		lightSmall.set_y(59);
		lightSmall.set_alpha(0);
		lightSmall.set_name("light.small");
		var lightSmallImg = new openfl_display_Bitmap(lightbd,1,true);
		lightSmallImg.set_x(-19);
		lightSmallImg.set_y(-19);
		lightSmallImg.set_scaleX(0.6);
		lightSmallImg.set_scaleY(0.6);
		lightSmall.addChild(lightSmallImg);
		this.addChild(lightSmall);
		motion_Actuate.tween(lightBig,1.066,{ rotation : 180},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			lightBig.set_rotation(0);
		});
		motion_Actuate.tween(lightBig,0.533,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			motion_Actuate.tween(lightBig,0.533,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone());
		});
		motion_Actuate.tween(lightSmall,1.066,{ rotation : 90},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			lightSmall.set_rotation(0);
		});
		motion_Actuate.tween(lightSmall,0.533,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			motion_Actuate.tween(lightSmall,0.533,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone());
		});
		var tmr = new haxe_Timer(6000);
		tmr.run = function() {
			motion_Actuate.tween(lightBig,1.066,{ rotation : 180},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				lightBig.set_rotation(0);
			});
			motion_Actuate.tween(lightBig,0.533,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				motion_Actuate.tween(lightBig,0.533,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone());
			});
		};
		var tmrSmall = new haxe_Timer(8000);
		tmrSmall.run = function() {
			motion_Actuate.tween(lightSmall,1.066,{ rotation : 90},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				lightSmall.set_rotation(0);
			});
			motion_Actuate.tween(lightSmall,0.533,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				motion_Actuate.tween(lightSmall,0.533,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone());
			});
		};
	}
	,send: function() {
		this.pos = 0;
		this.selects = [];
		this.searchSelects = [];
		var _g = 0;
		var _g1 = this.timers;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.stop();
		}
		this.timers = [];
		this.animations = [];
		this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/gift/bg.png")));
		var close = new com_redpeakgames_cloud9_ui_ImageButton("img/gift/btn_x",null,null,"mouse_click");
		close.set_x(594);
		close.set_y(53);
		close.set_onClick($bind(this,this.onClose));
		this.addChild(close);
		var tabCollect = new com_redpeakgames_cloud9_ui_ImageButton("img/gift/btn_tab_collect",null,null,"mouse_click");
		tabCollect.set_x(25);
		tabCollect.set_y(155);
		tabCollect.set_name("tab.collect");
		tabCollect.set_onClick($bind(this,this.onClickTab));
		this.addChild(tabCollect);
		var tabSend = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/gift/gift_tab_send.png"));
		tabSend.set_x(151);
		tabSend.set_y(155);
		this.addChild(tabSend);
		var clip = new openfl_display_Shape();
		clip.get_graphics().beginFill(0,1);
		clip.get_graphics().drawRect(0,0,558,240);
		clip.get_graphics().endFill();
		clip.set_x(29);
		clip.set_y(253);
		this.addChild(clip);
		var missing = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/gift/txt_missing.png"));
		missing.set_x(10);
		missing.set_y(605);
		this.addChild(missing);
		this.canvas = new openfl_display_Sprite();
		this.canvas.set_x(29);
		this.canvas.set_y(253);
		this.canvas.set_name("canvas.send");
		this.canvas.set_mask(clip);
		this.addChild(this.canvas);
		this.makeScrollbar();
		var btnSA = new com_redpeakgames_cloud9_ui_ImageCheck("img/gift/btn_select");
		btnSA.set_name("btn.sa");
		btnSA.set_x(37);
		btnSA.set_y(200);
		btnSA.set_checked(true);
		btnSA.set_onClick($bind(this,this.toggleAllSelect));
		this.addChild(btnSA);
		var btnSG = new com_redpeakgames_cloud9_ui_ImageButton("img/gift/btn_send",null,null,"mouse_click");
		btnSG.set_x(216);
		btnSG.set_y(519);
		btnSG.set_name("btn.send");
		btnSG.set_onClick($bind(this,this.onSendGift));
		this.addChild(btnSG);
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/gift/effects/btn_send_e.png",false),4,5,216,66);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],false,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[16],false,1));
		var btnSG_e = new spritesheet_AnimatedSprite(ss);
		btnSG.addChild(btnSG_e);
		btnSG_e.showBehaviors(["_e","stop"]);
		btnSG_e.set_name("btn.sg.e");
		this.animations.push(btnSG_e);
		var tmr = new haxe_Timer(5000);
		tmr.run = function() {
			btnSG_e.showBehaviors(["_e","stop"]);
		};
		this.timers.push(tmr);
		var txtFind = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/gift/txt_find.png"));
		txtFind.set_x(387);
		txtFind.set_y(155);
		this.addChild(txtFind);
		this.makeSearchField();
		var ssf = new openfl_text_TextFormat();
		ssf.align = 4;
		ssf.size = 12;
		ssf.color = 16777215;
		var friendBack = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/gift/friend_back.png"));
		friendBack.set_x(447);
		friendBack.set_y(205);
		this.addChild(friendBack);
		this.txSelected = com_redpeakgames_cloud9_ui_TxField.make(504,220,90,ssf,null,false);
		this.txSelected.set_text("0/" + this.numFriends);
		this.addChild(this.txSelected);
		this.placeProfiles(this.inAppFriends);
	}
	,collect: function() {
		var _gthis = this;
		this.collects = [];
		this.pos = 0;
		var _g = 0;
		var _g1 = this.timers;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.stop();
		}
		this.timers = [];
		this.animations = [];
		this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/gift/bg.png")));
		var close = new com_redpeakgames_cloud9_ui_ImageButton("img/gift/btn_x",null,null,"mouse_click");
		close.set_x(594);
		close.set_y(53);
		close.set_onClick($bind(this,this.onClose));
		this.addChild(close);
		var tabCollect = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/gift/gift_tab_collect.png"));
		tabCollect.set_x(25);
		tabCollect.set_y(155);
		this.addChild(tabCollect);
		var tabSend = new com_redpeakgames_cloud9_ui_ImageButton("img/gift/btn_tab_send",null,null,"mouse_click");
		tabSend.set_x(166);
		tabSend.set_y(155);
		tabSend.set_name("tab.send");
		tabSend.set_onClick($bind(this,this.onClickTab));
		this.addChild(tabSend);
		this.makeScrollbar();
		var tmrDelay = 0;
		if(this.isNew) {
			tmrDelay = 266;
		} else {
			tmrDelay = 0;
		}
		this.timers.push(haxe_Timer.delay(function() {
			var http = new com_redpeakgames_cloud9_utils_Http(_gthis.udt.url + "getgiftlist.php",$bind(_gthis,_gthis.onRecvList),$bind(_gthis,_gthis.onError));
			var data = new openfl_net_URLVariables();
			data.uid = _gthis.udt.uid;
			data.sig = _gthis.udt.sig;
			http.request(data);
		},tmrDelay));
		this.cointf = new openfl_text_TextFormat();
		this.cointf.align = 4;
		this.cointf.size = 12;
		this.cointf.color = 10304315;
		this.cnf = new openfl_text_TextFormat();
		this.cnf.align = 0;
		this.cnf.size = 12;
		this.cnf.color = 0;
		var clip = new openfl_display_Shape();
		clip.get_graphics().beginFill(0,1);
		clip.get_graphics().drawRect(0,0,558,240);
		clip.get_graphics().endFill();
		clip.set_x(29);
		clip.set_y(253);
		this.addChild(clip);
		this.canvas = new openfl_display_Sprite();
		this.canvas.set_x(29);
		this.canvas.set_y(253);
		this.canvas.set_name("canvas.collect");
		this.canvas.set_mask(clip);
		this.addChild(this.canvas);
		var btnCA = new com_redpeakgames_cloud9_ui_ImageButton("img/gift/btn_allgift",null,null,"mouse_click");
		btnCA.set_x(216);
		btnCA.set_y(519);
		btnCA.set_name("btn.ca");
		btnCA.set_onClick($bind(this,this.onRecvGift));
		this.addChild(btnCA);
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/gift/effects/btn_collect_e.png",false),4,5,216,66);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],false,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[16],false,1));
		var btnCA_e = new spritesheet_AnimatedSprite(ss);
		btnCA_e.set_name("btn.ca.e");
		btnCA.addChild(btnCA_e);
		btnCA_e.showBehaviors(["_e","stop"]);
		this.animations.push(btnCA_e);
		var tmr = new haxe_Timer(5000);
		tmr.run = function() {
			btnCA_e.showBehaviors(["_e","stop"]);
		};
		this.timers.push(tmr);
		var giftNum = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/gift/gift_number_back.png"));
		giftNum.set_x(507);
		giftNum.set_y(149);
		this.addChild(giftNum);
		var txcf = new openfl_text_TextFormat();
		txcf.align = 4;
		txcf.color = 16777215;
		txcf.size = 12;
		this.txCollect = com_redpeakgames_cloud9_ui_TxField.make(535,157,62,txcf,null,false);
		this.addChild(this.txCollect);
		this.makeBanner("banner.normal","gift_banner_normal");
	}
	,makeBanner: function(type,path) {
		var _gthis = this;
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/gift/effects/" + path + "_e.png",false),1,11,576,54);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9],false,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[10],false,1));
		var btnBanner = new com_redpeakgames_cloud9_ui_ImageButton("img/gift/btn_banner",null,null,"mouse_click");
		btnBanner.set_x(31);
		btnBanner.set_y(191);
		btnBanner.set_onClick(function(e) {
			_gthis.bannerType = type;
			_gthis.onClose(null);
		});
		this.addChild(btnBanner);
		btnBanner.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/gift/" + path + ".png")));
		var banner_e = new spritesheet_AnimatedSprite(ss);
		banner_e.showBehaviors(["_e","stop"]);
		btnBanner.addChild(banner_e);
		this.animations.push(banner_e);
		var tmr = new haxe_Timer(5000);
		tmr.run = function() {
			banner_e.showBehaviors(["_e","stop"]);
		};
		this.timers.push(tmr);
	}
	,makeScrollbar: function() {
		this.btnUp = new com_redpeakgames_cloud9_ui_ImageButton("img/gift/btn_up",null,null,"mouse_click");
		this.btnUp.set_name("btn.up");
		this.btnUp.set_x(591);
		this.btnUp.set_y(257);
		this.btnUp.set_onClick($bind(this,this.onScroll));
		this.addChild(this.btnUp);
		var scrollBack = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/gift/scroll_back.jpg"));
		scrollBack.set_x(591);
		scrollBack.set_y(274);
		this.addChild(scrollBack);
		this.btnThumb = new com_redpeakgames_cloud9_ui_ImageButton("img/gift/btn_scroll",null,null,"mouse_click");
		this.btnThumb.set_x(591);
		this.btnThumb.set_y(274);
		this.btnThumb.addEventListener("mouseDown",$bind(this,this.onThumbDown));
		this.addChild(this.btnThumb);
		this.btnDown = new com_redpeakgames_cloud9_ui_ImageButton("img/gift/btn_down",null,null,"mouse_click");
		this.btnDown.set_name("btn.down");
		this.btnDown.set_x(591);
		this.btnDown.set_y(473);
		this.btnDown.set_onClick($bind(this,this.onScroll));
		this.addChild(this.btnDown);
		this.set_scrollBar(false);
	}
	,makeSearchField: function() {
		var txttf = new openfl_text_TextFormat();
		txttf.size = 12;
		txttf.color = 6710886;
		this.searchField = new openfl_text_TextField();
		this.searchField.set_x(390);
		this.searchField.set_y(158);
		this.searchField.set_width(192);
		this.searchField.set_height(22);
		this.searchField.set_type(1);
		this.searchField.addEventListener("click",$bind(this,this.onClickSearchTxField));
		this.searchField.addEventListener("keyUp",$bind(this,this.onTextInput));
		this.searchField.set_text("Search for friends");
		this.searchField.setTextFormat(txttf);
		this.addChild(this.searchField);
	}
	,onTextInput: function(e) {
		this.searchFriends(this.searchField.get_text());
	}
	,searchFriends: function(name) {
		if(this.canvas.get_name() != "canvas.send") {
			return;
		}
		this.searchSelects = [];
		(js_Boot.__cast(this.getChildByName("btn.sa") , com_redpeakgames_cloud9_ui_ImageCheck)).buttonMode = true;
		var btnSend = this.getChildByName("btn.send");
		(js_Boot.__cast(btnSend.getChildByName("btn.sg.e") , spritesheet_AnimatedSprite)).set_visible(true);
		btnSend.set_enable(true);
		if(name != "") {
			var newAppFriends = [];
			var _g = 0;
			var _g1 = this.inAppFriends;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				var fnameLC = f.name.toLowerCase();
				var fnameUC = f.name.toUpperCase();
				if(f.enable == 1 && (fnameLC.indexOf(name.toLowerCase()) != -1 || fnameUC.indexOf(name.toUpperCase()) != -1)) {
					newAppFriends.push(f);
				}
			}
			this.placeProfiles(newAppFriends);
		} else {
			this.placeProfiles(this.inAppFriends);
		}
	}
	,onClickSearchTxField: function(e) {
		if(this.parent != null) {
			this.dispatchEvent(new openfl_events_DataEvent("ge.to.normalscreen",true,false));
		}
		var tf = e.target;
		if(tf.get_text() != "Search for friends") {
			return;
		}
		tf.set_textColor(0);
		tf.set_text("");
	}
	,onMouseUp: function(e) {
		if(this.isThumbOn) {
			this.isThumbOn = false;
			this.onScroll();
		}
	}
	,onThumbDown: function(e) {
		this.isThumbOn = true;
	}
	,onClickTab: function(e) {
		var lb = this.getChildByName("light.big");
		var ls = this.getChildByName("light.small");
		if(js_Boot.__cast(Reflect.field(e.target,"name") , String) == "tab.collect") {
			this.removeChildren();
			this.collect();
		} else if(js_Boot.__cast(Reflect.field(e.target,"name") , String) == "tab.send") {
			this.removeChildren();
			this.send();
		}
		this.addChild(lb);
		this.addChild(ls);
	}
	,makeRecv: function(sender) {
		var btn = null;
		var ntx = com_redpeakgames_cloud9_ui_TxField.make(52,10,98,this.cnf,null,false);
		if(this.isRMember(sender.sender)) {
			var htmlFontTagColor = "";
			switch(sender.sender) {
			case "999992":
				htmlFontTagColor = "<font color = '#696969'>";
				break;
			case "999993":
				htmlFontTagColor = "<font color = '#B47837'>";
				break;
			case "999994":
				htmlFontTagColor = "<font color = '#00A064'>";
				break;
			case "999995":
				htmlFontTagColor = "<font color = '#5064FA'>";
				break;
			case "999996":
				htmlFontTagColor = "<font color = '#FF006E'>";
				break;
			case "999997":
				htmlFontTagColor = "<font color = '#000000'>";
				break;
			case "999998":
				htmlFontTagColor = "<font color = '#AA4128'>";
				break;
			}
			var _g1 = ntx;
			_g1.set_x(_g1.get_x() - 5);
			ntx.set_width(156);
			ntx.set_htmlText("<b>" + htmlFontTagColor + this.getRMemberRank(sender.sender).toUpperCase() + "</font> <font color='#5C00B1'> R MEMBERS</font></b>");
		} else if(this.isWeekly(sender.sender)) {
			var htmlFontTagColor1 = "";
			var txtType = "";
			if(sender.sender == "999991") {
				txtType = "Like's";
				htmlFontTagColor1 = "<font color = '#FF00AA'>";
			} else {
				txtType = "Weekly's";
				htmlFontTagColor1 = "<font color = '#148C00'>";
			}
			var _g = ntx;
			_g.set_x(_g.get_x() - 5);
			ntx.set_width(156);
			ntx.set_htmlText("<b>" + htmlFontTagColor1 + txtType + " Prize</font></b>");
		} else {
			ntx.set_text(sender.name);
		}
		var ctx = com_redpeakgames_cloud9_ui_TxField.make(280,10,122,this.cointf,null,false);
		var stf = new openfl_text_TextFormat();
		stf.align = 3;
		stf.size = 12;
		stf.color = 10304315;
		var stx = com_redpeakgames_cloud9_ui_TxField.make(210,10,67,stf,null,false);
		stx.set_text("sent you");
		if(this.isRMember(sender.sender)) {
			btn = new com_redpeakgames_cloud9_ui_ImageButton("img/gift/btn_rmember",null,null,"mouse_click");
		} else if(sender.sender == "999999") {
			btn = new com_redpeakgames_cloud9_ui_ImageButton("img/gift/btn_christy",null,null,"mouse_click");
		} else {
			btn = new com_redpeakgames_cloud9_ui_ImageButton("img/gift/btn_name",null,null,"mouse_click");
		}
		ctx.set_text((sender.iid == null?"null":"" + sender.iid) + " coins");
		if(this.isRMember(sender.sender)) {
			var rmember = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/gift/icon_gift_" + this.getRMemberRank(sender.sender) + "_1.png"));
			rmember.set_x(12);
			rmember.set_y(3);
			btn.addChild(rmember);
		} else if(sender.sender == "999999") {
			var christy = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/gift/christy_pic.jpg"));
			christy.set_x(12);
			christy.set_y(3);
			btn.addChild(christy);
		} else {
			var find = false;
			var _g2 = 0;
			var _g11 = this.inAppFriends;
			while(_g2 < _g11.length) {
				var f = _g11[_g2];
				++_g2;
				if(f.name == sender.name) {
					var loader = new openfl_display_Loader();
					loader.set_x(12);
					loader.set_y(3);
					loader.contentLoaderInfo.addEventListener("ioError",$bind(this,this.onError));
					loader.load(new openfl_net_URLRequest(decodeURIComponent(f.url.split("+").join(" "))));
					loader.set_scaleX(0.6);
					loader.set_scaleY(0.6);
					btn.addChild(loader);
					find = true;
					break;
				}
			}
			if(find == false) {
				var unknown = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/gift/unknown_pic.jpg"));
				unknown.set_x(12);
				unknown.set_y(3);
				unknown.set_width(30);
				unknown.set_height(30);
				btn.addChild(unknown);
			}
		}
		btn.set_name(sender.rid);
		btn.addChild(ntx);
		btn.addChild(stx);
		btn.addChild(ctx);
		return btn;
	}
	,makeSelect: function(profile) {
		var loader = new openfl_display_Loader();
		loader.set_x(38);
		loader.set_y(7);
		loader.set_scaleX(0.8);
		loader.set_scaleY(0.8);
		loader.contentLoaderInfo.addEventListener("ioError",$bind(this,this.onError));
		loader.load(new openfl_net_URLRequest(decodeURIComponent(profile.url.split("+").join(" "))));
		var ntf = new openfl_text_TextFormat();
		ntf.size = 12;
		ntf.align = 0;
		var ntx = com_redpeakgames_cloud9_ui_TxField.make(81,19,98,ntf,null,false);
		var pn = profile.name;
		if(pn.length > 10) {
			pn = HxOverrides.substr(pn,0,10) + "...";
		}
		ntx.set_text(pn);
		var btn = new com_redpeakgames_cloud9_ui_ImageCheck("img/gift/btn_profile");
		btn.set_name(profile.id);
		btn.addChild(ntx);
		btn.addChild(loader);
		return btn;
	}
	,placeProfiles: function(friends) {
		if(this.canvas.get_name() != "canvas.send") {
			return;
		}
		if(friends == null) {
			friends = this.inAppFriends;
		}
		this.canvas.removeChildren();
		this.canvas.set_y(253);
		var _g = 0;
		while(_g < friends.length) {
			var f = friends[_g];
			++_g;
			com_redpeakgames_cloud9_utils_Console.log("name : " + f.name + ", enable : " + f.enable);
		}
		this.selects = [];
		if(friends == null) {
			return;
		}
		var fs = [];
		var _g1 = 0;
		while(_g1 < friends.length) {
			var f1 = friends[_g1];
			++_g1;
			if(f1.enable == 1) {
				fs.push(f1);
			}
		}
		fs.sort(function(a,b) {
			return Reflect.compare(a.name.toLowerCase(),b.name.toLowerCase());
		});
		this.numFriends = fs.length;
		var _g2 = 0;
		while(_g2 < 34) {
			var r = _g2++;
			var _g11 = 0;
			while(_g11 < 3) {
				var c = _g11++;
				var index = r * 3 + c;
				if(index >= fs.length) {
					this.maxPos = this.selects.length / 3 - 3;
					this.pos = 0;
					if(this.selects.length <= 12) {
						this.set_scrollBar(false);
					} else {
						this.set_scrollBar(true);
					}
					if(this.numFriends == 0) {
						this.deleteList("send");
					} else {
						this.toggleAllSelect();
					}
					return;
				}
				var btn = this.makeSelect(fs[index]);
				btn.set_onClick($bind(this,this.onSelectChanged));
				btn.set_x(c * 186);
				btn.set_y(r * 54);
				this.canvas.addChild(btn);
				this.selects.push(btn);
			}
		}
	}
	,onSelectChanged: function(e) {
		var count = 0;
		var _g = 0;
		var _g1 = this.selects;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.get_checked()) {
				++count;
			}
		}
		if(count > 50) {
			e.target.set_checked(false);
			return;
		}
		this.txSelected.set_text(count + "/" + this.selects.length);
		if(count == 50 || count == this.selects.length) {
			this.getChildByName("btn.sa").set_checked(true);
		} else {
			this.getChildByName("btn.sa").set_checked(false);
		}
	}
	,onClose: function(event) {
		var _gthis = this;
		this.dispatchEvent(new openfl_events_DataEvent("ge.close.gift",true,false,this.bannerType));
		motion_Actuate.tween(this,0.2,{ x : 960, y : 451, scaleX : 0, scaleY : 0, alpha : 0},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			if(_gthis.searchField != null) {
				_gthis.searchField.removeEventListener("click",$bind(_gthis,_gthis.onClickSearchTxField));
				_gthis.searchField.removeEventListener("keyUp",$bind(_gthis,_gthis.onTextInput));
			}
			var _g = 0;
			var _g1 = _gthis.timers;
			while(_g < _g1.length) {
				var t = _g1[_g];
				++_g;
				t.stop();
			}
			_gthis.removeEventListener("enterFrame",$bind(_gthis,_gthis.onEnterFrame));
			openfl_Lib.current.stage.removeEventListener("mouseUp",$bind(_gthis,_gthis.onMouseUp));
			_gthis.btnThumb.removeEventListener("mouseDown",$bind(_gthis,_gthis.onThumbDown));
			if(_gthis.parent != null) {
				_gthis.parent.removeChild(_gthis);
			}
		});
	}
	,toggleAllSelect: function(e) {
		var btn = null;
		if(e != null) {
			btn = e.target;
		}
		this.selectedNum = 0;
		var _g = 0;
		var _g1 = this.selects;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.get_checked()) {
				this.selectedNum++;
			}
		}
		var _g2 = 0;
		var _g11 = this.selects;
		while(_g2 < _g11.length) {
			var s1 = _g11[_g2];
			++_g2;
			if(btn == null || btn.get_checked()) {
				if(this.selectedNum < 50 && s1.get_checked() == false) {
					s1.set_checked(true);
					this.selectedNum++;
				}
			} else {
				s1.set_checked(false);
			}
		}
		if(btn == null || btn.get_checked()) {
			this.txSelected.set_text(this.selectedNum + "/" + this.selects.length);
		} else {
			this.txSelected.set_text("0/" + this.selects.length);
		}
	}
	,onSendGift: function(e) {
		var ids = [];
		if(this.parent != null) {
			this.dispatchEvent(new openfl_events_DataEvent("ge.to.normalscreen",true,false));
		}
		var _g = 0;
		var _g1 = this.selects;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.get_checked()) {
				ids.push(s.get_name());
			}
		}
		this.txSelected.set_text("0/" + this.selects.length);
		(js_Boot.__cast(this.getChildByName("btn.sa") , com_redpeakgames_cloud9_ui_ImageCheck)).set_checked(true);
		try {
			openfl_external_ExternalInterface.call("sendGifts",ids.toString());
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,openfl_errors_Error) ) {
				haxe_Log.trace(e1.toString(),{ fileName : "Gift.hx", lineNumber : 969, className : "com.redpeakgames.cloud9.dialog.Gift", methodName : "onSendGift"});
			} else throw(e1);
		}
		this.searchField.set_text("");
	}
	,onRecvList: function(e) {
		if(this.canvas.get_name() != "canvas.collect") {
			return;
		}
		var loader = e.target;
		haxe_Log.trace(loader.data,{ fileName : "Gift.hx", lineNumber : 987, className : "com.redpeakgames.cloud9.dialog.Gift", methodName : "onRecvList"});
		this.senders = this.makeGiftSenders(JSON.parse(loader.data));
		if(this.senders.length > 0) {
			var _g1 = 0;
			var _g = this.senders.length;
			while(_g1 < _g) {
				var i = _g1++;
				var btn = this.makeRecv(this.senders[i]);
				btn.set_y(i * 38);
				btn.set_onClick($bind(this,this.onClickCollect));
				this.canvas.addChild(btn);
				this.collects.push(btn);
			}
			this.maxPos = this.collects.length - 6;
		} else {
			this.deleteList("collect");
		}
		this.txCollect.set_text("" + this.collects.length);
		if(this.collects.length <= 6) {
			this.set_scrollBar(false);
		} else {
			this.set_scrollBar(true);
		}
	}
	,onClickCollect: function(e) {
		var idx = 0;
		var btn = e.target;
		var _g1 = 0;
		var _g = this.collects.length;
		while(_g1 < _g) {
			if(btn == this.collects[_g1++]) {
				HxOverrides.remove(this.collects,btn);
				this.canvas.removeChild(btn);
				this.parent.addChild(new com_redpeakgames_cloud9_ui_DrawCoins((this.get_x() + this.canvas.get_x() + btn.get_x() | 0) + 473,(this.get_y() + this.canvas.get_y() + btn.get_y() | 0) - 3,713,80,800,1));
				break;
			}
			++idx;
		}
		var num = this.replaceGiftNumber();
		com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"hideGiftNumber",[num]);
		this.dispatchEvent(new openfl_events_DataEvent("ge.change.giftnumber",true,false,JSON.stringify(num)));
		this.maxPos = this.collects.length - 6;
		var _g11 = idx;
		var _g2 = this.collects.length;
		while(_g11 < _g2) {
			var i = _g11++;
			motion_Actuate.tween(this.collects[i],0.2,{ y : idx * 38 + (i - idx) * 38},true).ease(motion_easing_Quad.get_easeOut());
		}
		var rids = [];
		rids.push(btn.get_name());
		var http = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "recvgift.php",$bind(this,this.onResponseRecv),$bind(this,this.onError));
		var data = new openfl_net_URLVariables();
		data.uid = this.udt.uid;
		data.sig = this.udt.sig;
		data.rids = rids.toString();
		http.request(data);
		if((this.pos | 0) == this.maxPos + 1) {
			this.pos -= 1;
			if(this.pos < 0) {
				this.pos = 0;
			}
			motion_Actuate.tween(this.canvas,0.2,{ y : 253 + this.pos * -38},true).ease(motion_easing_Quad.get_easeOut());
		}
		this.txCollect.set_text("" + this.collects.length);
		if(this.collects.length <= 6) {
			this.set_scrollBar(false);
		}
	}
	,makeGiftSenders: function(data) {
		var ret = data.data;
		var _g = 0;
		while(_g < ret.length) {
			var s = ret[_g];
			++_g;
			var _g1 = 0;
			var _g2 = this.inAppFriends;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				if(s.sender == f.id) {
					s.name = f.name;
				}
			}
			if(s.name == null || s.name.length == 0) {
				if(s.sender == "999999") {
					s.name = "Christy";
				} else {
					s.name = "Unkown friend";
				}
			}
		}
		return ret;
	}
	,onError: function(e) {
		haxe_Log.trace(e.toString(),{ fileName : "Gift.hx", lineNumber : 1100, className : "com.redpeakgames.cloud9.dialog.Gift", methodName : "onError"});
	}
	,onRecvGift: function(e) {
		var rids = [];
		var _g = 0;
		var _g1 = this.collects;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			rids.push(s.get_name());
		}
		if(this.collects.length > 0) {
			this.parent.addChild(new com_redpeakgames_cloud9_ui_DrawCoins((this.get_x() | 0) + 216 + 92,(this.get_y() | 0) + 519 + 17,713,80,1500,10));
		}
		this.collects = [];
		var num = this.replaceGiftNumber();
		com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"hideGiftNumber",[num]);
		this.dispatchEvent(new openfl_events_DataEvent("ge.change.giftnumber",true,false,JSON.stringify(num)));
		var http = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "recvgift.php",$bind(this,this.onResponseRecv),$bind(this,this.onError));
		var data = new openfl_net_URLVariables();
		data.uid = this.udt.uid;
		data.sig = this.udt.sig;
		data.rids = rids.toString();
		http.request(data);
	}
	,replaceGiftNumber: function() {
		return this.collects != null?this.collects.length:0;
	}
	,onResponseRecv: function(e) {
		var loader = e.target;
		if(this.canvas.get_name() == "canvas.collect") {
			if(this.collects.length == 0) {
				this.deleteList("collect");
			}
		}
		this.dispatchEvent(new openfl_events_DataEvent("ge.balance.changed",true,false,loader.data));
	}
	,deleteList: function(type) {
		this.set_scrollBar(false);
		if(type == "collect" && this.canvas.get_name() == "canvas.collect") {
			this.collects = [];
			this.canvas.removeChildren();
			this.canvas.set_y(253);
			var img = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/gift/nofriends_collect.png"));
			img.set_x(100);
			img.set_y(29);
			this.canvas.addChild(img);
			this.maxPos = -6;
			this.txCollect.set_text("0");
			var btnCA = this.getChildByName("btn.ca");
			if(btnCA.get_enable() == true) {
				btnCA.removeChild(btnCA.getChildByName("btn.ca.e"));
			}
			btnCA.set_enable(false);
			com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"hideGiftNumber",[0]);
		} else if(type == "send" && this.canvas.get_name() == "canvas.send") {
			this.selects = [];
			this.canvas.removeChildren();
			this.canvas.set_y(253);
			var img1 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/gift/nofriends_send.png"));
			img1.set_x(100);
			img1.set_y(29);
			this.canvas.addChild(img1);
			this.maxPos = -3;
			(js_Boot.__cast(this.getChildByName("btn.sa") , com_redpeakgames_cloud9_ui_ImageCheck)).buttonMode = false;
			var btnSend = this.getChildByName("btn.send");
			(js_Boot.__cast(btnSend.getChildByName("btn.sg.e") , spritesheet_AnimatedSprite)).set_visible(false);
			btnSend.set_enable(false);
		}
	}
	,onScroll: function(e) {
		var name = "";
		if(e != null) {
			name = js_Boot.__cast(Reflect.field(e.target,"name") , String);
		}
		if(name == "btn.up") {
			if(this.canvas.get_name() == "canvas.collect") {
				this.pos -= 6;
			} else {
				this.pos -= 4;
			}
			if(this.pos < 0) {
				this.pos = 0;
			}
		} else if(name == "btn.down") {
			if(this.canvas.get_name() == "canvas.collect") {
				this.pos += 6;
			} else {
				this.pos += 4;
			}
			if(this.pos > this.maxPos) {
				this.pos = this.maxPos;
			}
		}
		if(this.canvas.get_name() == "canvas.collect") {
			motion_Actuate.tween(this.canvas,0.2,{ y : 253 + (this.pos | 0) * -38},true).ease(motion_easing_Quad.get_easeOut());
		} else {
			motion_Actuate.tween(this.canvas,0.2,{ y : 253 + (this.pos | 0) * -54},true).ease(motion_easing_Quad.get_easeOut());
		}
	}
	,onEnterFrame: function(e) {
		var delta = openfl_Lib.getTimer() - this.lastTick;
		var _g = 0;
		var _g1 = this.animations;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a.update(delta);
		}
		if(this.isThumbOn == true) {
			this.btnThumb.set_y(openfl_Lib.current.stage.get_mouseY() - 12 - this.get_y());
			if(this.btnThumb.get_y() <= 274) {
				this.btnThumb.set_y(274);
			}
			if(this.btnThumb.get_y() >= 448) {
				this.btnThumb.set_y(448);
			}
			this.pos = (this.btnThumb.get_y() - 274) / (174 / this.maxPos);
			if(this.canvas.get_name() == "canvas.collect") {
				this.canvas.set_y(253 + this.pos * -38);
			} else {
				this.canvas.set_y(253 + this.pos * -54);
			}
		} else {
			this.btnThumb.set_y(274 + 174 / (this.maxPos == 0?174:this.maxPos) * (this.pos | 0));
		}
		this.lastTick = openfl_Lib.getTimer();
	}
	,set_scrollBar: function(value) {
		this.btnThumb.set_enable(value);
		this.btnUp.set_enable(value);
		this.btnDown.set_enable(value);
		if(value == false) {
			this.btnThumb.set_y(274);
		}
		return this.scrollBar = value;
	}
	,replaceInAppFriends: function(friends) {
		this.inAppFriends = friends;
	}
	,isWeekly: function(value) {
		if(value == "999991") {
			return true;
		}
		if(value == "999990") {
			return true;
		}
		return false;
	}
	,isRMember: function(value) {
		var ret = false;
		switch(value) {
		case "999992":
			ret = true;
			break;
		case "999993":
			ret = true;
			break;
		case "999994":
			ret = true;
			break;
		case "999995":
			ret = true;
			break;
		case "999996":
			ret = true;
			break;
		case "999997":
			ret = true;
			break;
		case "999998":
			ret = true;
			break;
		default:
			ret = false;
		}
		return ret;
	}
	,getRMemberRank: function(value) {
		var ret = "";
		switch(value) {
		case "999992":
			ret = "silver";
			break;
		case "999993":
			ret = "gold";
			break;
		case "999994":
			ret = "emerald";
			break;
		case "999995":
			ret = "sapphire";
			break;
		case "999996":
			ret = "ruby";
			break;
		case "999997":
			ret = "diamond";
			break;
		case "999998":
			ret = "bronze";
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("getRMemberRank() : wrong input - " + value));
		}
		return ret;
	}
	,__class__: com_redpeakgames_cloud9_dialog_Gift
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_scrollBar:"set_scrollBar"})
});
var com_redpeakgames_cloud9_dialog_Herald = function(udt) {
	openfl_display_Sprite.call(this);
	this.udt = udt;
	this.set_y(69);
	this.timers = [];
	this.canvasHerald = new openfl_display_Sprite();
	this.canvasHeraldBody = new openfl_display_Sprite();
	this.canvasHeraldTop = new openfl_display_Sprite();
	this.canvasCongrats = new openfl_display_Sprite();
	this.isHeraldAlive = false;
	this.isCongratsAlive = false;
	this.animationsHerald = [];
	this.animationsCongrats = [];
	this.receivedCongrats = [];
	this.receivedCongrats.push(null);
	this.receivedCongrats.push(null);
	this.receivedCongrats.push(null);
	this.receivedCongrats.push(null);
	this.receivedCongrats.push(null);
	this.congratsIndex = 0;
	this.sndShowup = com_redpeakgames_cloud9_utils_CSound.get("herald00");
	this.makeHerald();
	this.makeCongrats();
	openfl_Lib.current.stage.addEventListener("fullScreen",$bind(this,this.onFullscreen));
};
$hxClasses["com.redpeakgames.cloud9.dialog.Herald"] = com_redpeakgames_cloud9_dialog_Herald;
com_redpeakgames_cloud9_dialog_Herald.__name__ = ["com","redpeakgames","cloud9","dialog","Herald"];
com_redpeakgames_cloud9_dialog_Herald.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_Herald.prototype = $extend(openfl_display_Sprite.prototype,{
	animationsHerald: null
	,animationsCongrats: null
	,isHeraldAlive: null
	,isCongratsAlive: null
	,udt: null
	,timers: null
	,likeCoin: null
	,sndShowup: null
	,closeTimerHerald: null
	,heraldAliveTimer: null
	,canvasHerald: null
	,canvasHeraldBody: null
	,canvasBodyContent: null
	,canvasHeraldTop: null
	,canvasTopContent: null
	,heraldBack: null
	,heraldBackLight00: null
	,heraldBackLight01: null
	,heraldSlot: null
	,btnLike: null
	,btnLikeEffect: null
	,bellLightEffect: null
	,heraldName: null
	,heraldCounter: null
	,eid: null
	,heraldTopBack: null
	,heraldTopBackLight00: null
	,heraldTopBackLight01: null
	,heraldTopStar00: null
	,heraldTopStar01: null
	,heraldTopStar02: null
	,heraldTopTextImage: null
	,canvasCongrats: null
	,receivedCongrats: null
	,congratsIndex: null
	,recvCongNum: null
	,coinEss: null
	,ssCoinParticle: null
	,makeHerald: function() {
		var _gthis = this;
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/herald/btn_like_e.png",false),7,3,146,84);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,0,0],true,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[0],false,1));
		ss.fillBitmaps();
		this.btnLikeEffect = new spritesheet_AnimatedSprite(ss);
		this.btnLikeEffect.showBehavior("stop");
		this.animationsHerald.push(this.btnLikeEffect);
		ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/herald/bell_light_e.png",false),3,4,329,220);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10],true,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[0],false,1));
		ss.fillBitmaps();
		this.bellLightEffect = new spritesheet_AnimatedSprite(ss);
		this.bellLightEffect.showBehavior("stop");
		this.animationsHerald.push(this.bellLightEffect);
		this.heraldBack = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/herald/herald_back.png"),1,true);
		this.canvasHeraldBody.addChild(this.heraldBack);
		var nameFont = new openfl_text_TextFormat();
		nameFont.size = 11;
		nameFont.color = 16777215;
		nameFont.align = 0;
		this.heraldName = new openfl_text_TextField();
		this.heraldName.set_defaultTextFormat(nameFont);
		this.heraldName.set_x(49);
		this.heraldName.set_y(135);
		this.heraldName.set_width(104);
		this.heraldName.mouseEnabled = false;
		this.heraldName.set_text("Super Joe");
		this.canvasHeraldBody.addChild(this.heraldName);
		this.btnLike = new com_redpeakgames_cloud9_ui_ImageButton("img/herald/btn_like",null,null,"");
		this.btnLike.set_x(28);
		this.btnLike.set_y(131);
		this.btnLike.set_work(false);
		this.canvasHeraldBody.addChild(this.btnLike);
		this.btnLike.addChild(this.btnLikeEffect);
		this.btnLike.set_onClick($bind(this,this.onClickLike));
		this.btnLike.set_onOver(function(e) {
			if(_gthis.btnLikeEffect != null && _gthis.btnLikeEffect.parent != null) {
				_gthis.btnLikeEffect.set_visible(false);
			}
		});
		this.btnLike.set_onOut(function(e1) {
			if(_gthis.btnLikeEffect != null && _gthis.btnLikeEffect.parent != null) {
				_gthis.btnLikeEffect.showBehavior("_e");
				_gthis.btnLikeEffect.set_visible(true);
			}
		});
		this.heraldBackLight00 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/herald/herald_light_1.png"));
		this.heraldBackLight00.set_x(-3);
		this.heraldBackLight00.set_y(35);
		this.heraldBackLight00.set_visible(false);
		this.canvasHeraldBody.addChild(this.heraldBackLight00);
		this.heraldBackLight01 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/herald/herald_light_2.png"));
		this.heraldBackLight01.set_x(-3);
		this.heraldBackLight01.set_y(35);
		this.heraldBackLight01.set_visible(false);
		this.canvasHeraldBody.addChild(this.heraldBackLight01);
		this.heraldCounter = new com_redpeakgames_cloud9_ui_NumberBitmap("font/font_herald.png",99,8,11,13,1,0,3);
		this.heraldCounter.set_x(61);
		this.heraldCounter.set_y(45);
		this.heraldCounter.commaWidth = 5;
		this.heraldCounter.set_value(new haxe__$Int64__$_$_$Int64(0,0));
		this.canvasHeraldBody.addChild(this.heraldCounter);
		this.bellLightEffect.set_x(-63);
		this.bellLightEffect.set_y(-94);
		this.canvasHeraldBody.addChild(this.bellLightEffect);
		this.canvasHeraldBody.set_visible(false);
		this.canvasHerald.addChild(this.canvasHeraldBody);
		this.canvasHerald.set_y(-69);
		this.addChild(this.canvasHerald);
		this.canvasBodyContent = new openfl_display_Sprite();
		this.canvasHeraldBody.addChild(this.canvasBodyContent);
		this.heraldTopStar02 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/herald/herald_star_3.png"),1,true);
		this.heraldTopStar02.set_x(17);
		this.heraldTopStar02.set_y(-27);
		this.canvasHeraldTop.addChild(this.heraldTopStar02);
		this.heraldTopStar01 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/herald/herald_star_2.png"),1,true);
		this.heraldTopStar01.set_x(43);
		this.heraldTopStar01.set_y(-45);
		this.canvasHeraldTop.addChild(this.heraldTopStar01);
		this.heraldTopStar00 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/herald/herald_star_1.png"),1,true);
		this.heraldTopStar00.set_x(82);
		this.heraldTopStar00.set_y(-62);
		this.canvasHeraldTop.addChild(this.heraldTopStar00);
		this.heraldTopBack = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/herald/herald_top_back.png"));
		this.canvasHeraldTop.addChild(this.heraldTopBack);
		this.heraldTopBackLight00 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/herald/herald_top_light_1.png"));
		this.heraldTopBackLight00.set_x(-10);
		this.heraldTopBackLight00.set_y(-14);
		this.heraldTopBackLight00.set_visible(false);
		this.canvasHeraldTop.addChild(this.heraldTopBackLight00);
		this.heraldTopBackLight01 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/herald/herald_top_light_2.png"));
		this.heraldTopBackLight01.set_x(-10);
		this.heraldTopBackLight01.set_y(-14);
		this.heraldTopBackLight01.set_visible(false);
		this.canvasHeraldTop.addChild(this.heraldTopBackLight01);
		this.canvasHeraldTop.set_visible(false);
		this.canvasHerald.addChild(this.canvasHeraldTop);
		this.canvasTopContent = new openfl_display_Sprite();
		this.canvasHeraldTop.addChild(this.canvasTopContent);
	}
	,makeCongrats: function() {
		this.coinEss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/herald/r_coin_e.png",false),12,1,58,43);
		this.coinEss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11],true,30));
		this.ssCoinParticle = spritesheet_importers_SparrowImporter.parse(openfl_Assets.getText("img/coin/coin_particle_small_e.xml"),"img/coin");
		this.ssCoinParticle.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10],false,15));
		var _g1 = 0;
		var _g = this.receivedCongrats.length;
		while(_g1 < _g) {
			var i = _g1++;
			var cong = new openfl_display_Sprite();
			cong.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/herald/herald_sentyou_back.png")));
			var nameFont = new openfl_text_TextFormat();
			nameFont.size = 12;
			nameFont.color = 16777215;
			nameFont.align = 0;
			var senderName = new openfl_text_TextField();
			senderName.set_defaultTextFormat(nameFont);
			senderName.set_x(11);
			senderName.set_y(75);
			senderName.set_width(70);
			senderName.set_text("Unknown player");
			senderName.set_name("name");
			cong.addChild(senderName);
			var wingLeft = new openfl_display_Sprite();
			var wingLeftImg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/herald/herald_sentyou_wing_1.png"),1,true);
			wingLeftImg.set_x(-24);
			wingLeftImg.set_y(-23);
			wingLeft.addChild(wingLeftImg);
			wingLeft.set_x(-9);
			wingLeft.set_y(37);
			wingLeft.set_name("wing.left");
			cong.addChild(wingLeft);
			var wingRight = new openfl_display_Sprite();
			var wingRightImg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/herald/herald_sentyou_wing_1.png"),1,true);
			wingRightImg.set_scaleX(-1);
			wingRightImg.set_x(24);
			wingRightImg.set_y(-23);
			wingRight.addChild(wingRightImg);
			wingRight.set_x(101);
			wingRight.set_y(37);
			wingRight.set_name("wing.right");
			cong.addChild(wingRight);
			this.receivedCongrats[i] = cong;
			cong.set_x(1444);
			cong.set_y(58 + i * 77);
			cong.set_visible(false);
			this.canvasCongrats.addChildAt(cong,0);
		}
		this.addChild(this.canvasCongrats);
	}
	,onFullscreen: function(e) {
		if(e.fullScreen) {
			this.canvasHerald.set_y(0);
		} else {
			this.canvasHerald.set_y(-69);
		}
	}
	,showHerald: function(eid,url,name,prize,coin,sid,type,uid) {
		var _gthis = this;
		if(this.isHeraldAlive) {
			return;
		}
		this.isHeraldAlive = true;
		this.eid = eid;
		this.likeCoin = coin;
		switch(type) {
		case "bwin":
			type = "bigwin";
			break;
		case "ewin":
			type = "epicwin";
			break;
		case "jpot":
			type = "jackpot";
			break;
		case "mwin":
			type = "megawin";
			break;
		case "swin":
			type = "superwin";
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("showHerald() - wrong type! received type : " + type));
		}
		if(url.indexOf("http") != -1) {
			var loader = new openfl_display_Loader();
			loader.set_x(46);
			loader.set_y(77);
			loader.contentLoaderInfo.addEventListener("ioError",$bind(this,this.onPicLoadError));
			loader.load(new openfl_net_URLRequest(decodeURIComponent(url.split("+").join(" "))));
			loader.set_name("pic");
			this.canvasBodyContent.addChild(loader);
		} else {
			var guest = com_redpeakgames_cloud9_utils_BitmapMaker.create("img/guest_img.jpg",null,46,77,1,true);
			guest.set_scaleX(0.3125);
			guest.set_scaleY(0.3125);
			this.canvasBodyContent.addChild(guest);
		}
		var shape = new openfl_display_Shape();
		shape.get_graphics().beginFill(0,0);
		shape.get_graphics().drawRect(46,77,52,52);
		shape.get_graphics().endFill();
		var btnProfile = new openfl_display_Sprite();
		btnProfile.buttonMode = true;
		btnProfile.addChild(shape);
		btnProfile.addEventListener("mouseDown",function(e) {
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.open.profile",true,false,JSON.stringify({ id : uid})));
		});
		this.canvasBodyContent.addChild(btnProfile);
		this.heraldTopTextImage = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/herald/herald_top_" + type + ".png"));
		this.heraldTopTextImage.set_x(27);
		this.heraldTopTextImage.set_y(28);
		this.canvasTopContent.addChild(this.heraldTopTextImage);
		this.heraldSlot = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/tournament/theme_icon/" + sid + ".png"),1,true);
		this.heraldSlot.set_x(101);
		this.heraldSlot.set_y(68);
		this.heraldSlot.set_scaleX(0.83);
		this.heraldSlot.set_scaleY(0.83);
		this.canvasBodyContent.addChild(this.heraldSlot);
		var shape1 = new openfl_display_Shape();
		shape1.get_graphics().beginFill(0,0);
		shape1.get_graphics().drawRect(101,68,63,63);
		shape1.get_graphics().endFill();
		btnProfile = new openfl_display_Sprite();
		btnProfile.buttonMode = true;
		btnProfile.addChild(shape1);
		btnProfile.addEventListener("mouseDown",function(e1) {
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.change.slot",true,false,sid == null?"null":"" + sid));
		});
		this.canvasBodyContent.addChild(btnProfile);
		this.heraldName.set_text(name);
		this.canvasHeraldBody.set_x(1439);
		this.canvasHeraldBody.set_y(122);
		this.canvasHeraldBody.set_alpha(0);
		this.canvasHeraldBody.set_visible(true);
		this.heraldCounter.set_value(new haxe__$Int64__$_$_$Int64(0,0));
		this.canvasHeraldTop.set_x(this.canvasHeraldBody.get_x() - 10);
		this.canvasHeraldTop.set_y(this.canvasHeraldBody.get_y() - 86 + 485);
		this.canvasHeraldTop.set_alpha(0);
		this.canvasHeraldTop.set_visible(true);
		motion_Actuate.stop(this.heraldTopStar00);
		motion_Actuate.stop(this.heraldTopStar01);
		motion_Actuate.stop(this.heraldTopStar02);
		this.heraldTopStar00.set_x(85);
		this.heraldTopStar00.set_y(-51);
		this.heraldTopStar00.set_scaleX(0.9);
		this.heraldTopStar00.set_scaleY(0.9);
		this.heraldTopStar01.set_x(50);
		this.heraldTopStar01.set_y(-36);
		this.heraldTopStar01.set_scaleX(0.9);
		this.heraldTopStar01.set_scaleY(0.9);
		this.heraldTopStar02.set_x(27);
		this.heraldTopStar02.set_y(-22);
		this.heraldTopStar02.set_scaleX(0.9);
		this.heraldTopStar02.set_scaleY(0.9);
		this.btnLike.set_enable(true);
		this.btnLike.set_work(false);
		this.btnLikeEffect.set_visible(true);
		motion_Actuate.stop(this.canvasHeraldBody);
		if(this.closeTimerHerald != null) {
			this.closeTimerHerald.stop();
		}
		this.canvasHeraldBody.set_scaleY(1.0);
		motion_Actuate.tween(this.canvasHeraldBody,0.266,{ y : 607, alpha : 1},false).ease(motion_easing_Quad.get_easeIn()).onComplete(function() {
			motion_Actuate.tween(_gthis.canvasHeraldBody,0.0666,{ y : 652, scaleY : 0.8},false).reflect().repeat(1).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				_gthis.btnLike.set_work(true);
				_gthis.btnLikeEffect.showBehavior("_e");
				_gthis.bellLightEffect.showBehavior("_e");
				_gthis.heraldCounter.draw(new haxe__$Int64__$_$_$Int64(prize >> 31,prize),true,2000);
				_gthis.heraldBackLight00.set_visible(true);
				_gthis.heraldBackLight01.set_visible(true);
				_gthis.heraldBackLight00.set_alpha(0);
				motion_Actuate.tween(_gthis.heraldBackLight00,0.133,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat();
				_gthis.closeTimerHerald = haxe_Timer.delay(function() {
					_gthis.closeHerald();
				},4000);
				if(!com_redpeakgames_cloud9_Global.mute && type == "epicwin") {
					_gthis.sndShowup.play();
				}
			});
			motion_Actuate.tween(_gthis.canvasHeraldTop,0.133,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				_gthis.heraldTopBackLight00.set_visible(true);
				_gthis.heraldTopBackLight01.set_visible(true);
				_gthis.heraldTopBackLight00.set_alpha(0);
				motion_Actuate.tween(_gthis.heraldTopBackLight00,0.133,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat();
				motion_Actuate.tween(_gthis.heraldTopStar00,0.266,{ x : 79, y : -73, scaleX : 1.1, scaleY : 1.1}).ease(motion_easing_Linear.get_easeNone()).repeat().reflect();
				motion_Actuate.timer(0.066).onComplete(function() {
					motion_Actuate.tween(_gthis.heraldTopStar01,0.266,{ x : 36, y : -54, scaleX : 1.1, scaleY : 1.1}).ease(motion_easing_Linear.get_easeNone()).repeat().reflect();
				});
				motion_Actuate.timer(0.133).onComplete(function() {
					motion_Actuate.tween(_gthis.heraldTopStar02,0.266,{ x : 7, y : -32, scaleX : 1.1, scaleY : 1.1}).ease(motion_easing_Linear.get_easeNone()).repeat().reflect();
				});
			});
		});
	}
	,onPicLoadError: function(e) {
		haxe_Log.trace(e.toString(),{ fileName : "Herald.hx", lineNumber : 505, className : "com.redpeakgames.cloud9.dialog.Herald", methodName : "onPicLoadError"});
	}
	,closeHerald: function() {
		var _gthis = this;
		if(this.closeTimerHerald != null) {
			this.closeTimerHerald.stop();
		}
		this.btnLike.set_work(false);
		this.btnLikeEffect.showBehavior("stop");
		motion_Actuate.stop(this.heraldBackLight00);
		motion_Actuate.tween(this.canvasHeraldBody,0.333,{ x : 1799, alpha : 0}).ease(motion_easing_Back.get_easeIn()).onComplete(function() {
			_gthis.canvasHeraldBody.set_visible(false);
		});
		motion_Actuate.tween(this.canvasHeraldTop,0.333,{ x : 1789, alpha : 0}).ease(motion_easing_Back.get_easeIn()).delay(0.066).onComplete(function() {
			_gthis.removeHeraldContents();
		});
	}
	,removeHeraldContents: function() {
		var _gthis = this;
		if(this.heraldAliveTimer != null) {
			this.heraldAliveTimer.stop();
		}
		this.canvasBodyContent.removeChildren();
		this.canvasTopContent.removeChildren();
		this.canvasHeraldTop.set_visible(false);
		this.heraldAliveTimer = haxe_Timer.delay(function() {
			_gthis.isHeraldAlive = false;
		},15000);
	}
	,showCongrats: function(arr) {
		var _gthis = this;
		this.isCongratsAlive = true;
		this.recvCongNum = arr.length;
		if(this.recvCongNum > 5) {
			this.recvCongNum = 5;
		}
		this.canvasCongrats.set_visible(true);
		var _g = 0;
		var _g1 = this.timers;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.stop();
		}
		this.timers = [];
		var totalPrize = 0;
		var _g11 = 0;
		var _g2 = this.recvCongNum;
		while(_g11 < _g2) totalPrize += Std.parseInt(arr[_g11++].prize);
		var _g12 = 0;
		var _g3 = this.recvCongNum;
		while(_g12 < _g3) {
			var i = [_g12++];
			this.timers.push(haxe_Timer.delay((function(i1) {
				return function() {
					_gthis.showSingleCongrats(i1[0],arr[i1[0]].url,arr[i1[0]].name,totalPrize);
				};
			})(i),266 * i[0]));
		}
	}
	,showSingleCongrats: function(idx,url,name,totalPrize) {
		var _gthis = this;
		if(this.receivedCongrats[idx] == null) {
			return;
		}
		var cong = this.receivedCongrats[idx];
		cong.set_x(1794);
		cong.set_y(64 + idx * 77);
		cong.set_alpha(0);
		cong.set_visible(true);
		var coin = new spritesheet_AnimatedSprite(this.coinEss);
		coin.set_x(1774);
		coin.set_y(103 + idx * 77);
		coin.set_name("coin.cong");
		coin.showBehavior("_e");
		this.animationsCongrats.push(coin);
		this.addChild(coin);
		motion_Actuate.tween(coin,0.4,{ y : 91 + idx * 77},false).ease(motion_easing_Quad.get_easeInOut()).reflect().repeat();
		motion_Actuate.tween(coin,0.6,{ x : 1424, alpha : 1},false).ease(motion_easing_Quad.get_easeOut());
		this.timers.push(haxe_Timer.delay(function() {
			motion_Actuate.stop(coin);
			var path = new motion_MotionPath();
			path.bezier(723,2,723,coin.get_y());
			motion_Actuate.motionPath(coin,1,{ x : path.get_x(), y : path.get_y()}).ease(motion_easing_Quad.get_easeIn()).onComplete(function() {
				HxOverrides.remove(_gthis.animationsCongrats,coin);
				_gthis.removeChild(coin);
				var ptcl = new spritesheet_AnimatedSprite(_gthis.ssCoinParticle);
				ptcl.set_x(570);
				ptcl.set_y(-136);
				ptcl.set_name("coin.ptcl");
				ptcl.showBehavior("_e");
				_gthis.animationsCongrats.push(ptcl);
				_gthis.addChild(ptcl);
				haxe_Timer.delay(function() {
					HxOverrides.remove(_gthis.animationsCongrats,ptcl);
					_gthis.removeChild(ptcl);
				},740);
				if(idx == _gthis.recvCongNum - 1) {
					_gthis.dispatchEvent(new openfl_events_DataEvent("ge.balance.changed",true,false,JSON.stringify({ coin : haxe_Int64Helper.toFloat(com_redpeakgames_cloud9_utils_DynamicCall.method(_gthis.parent,"get_coin",[])) + totalPrize, dia : _gthis.udt.dia, showAddedCoin : true})));
					haxe_Timer.delay(function() {
						_gthis.isCongratsAlive = false;
					},740);
				}
			});
		},1600));
		var senderName = null;
		try {
			senderName = cong.getChildByName("name");
		} catch( err ) {
			haxe_CallStack.lastException = err;
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace(err,{ fileName : "Herald.hx", lineNumber : 643, className : "com.redpeakgames.cloud9.dialog.Herald", methodName : "showSingleCongrats"});
		}
		if(senderName != null) {
			senderName.set_text(name);
		}
		motion_Actuate.stop(cong);
		motion_Actuate.tween(cong,0.4,{ y : 52 + idx * 77},false).ease(motion_easing_Quad.get_easeInOut()).reflect().repeat();
		motion_Actuate.tween(cong,0.6,{ x : 1444, alpha : 1},false).ease(motion_easing_Quad.get_easeOut());
		var loader = null;
		var guest = null;
		if(url.indexOf("http") != -1) {
			loader = new openfl_display_Loader();
			loader.set_x(26);
			loader.set_y(33);
			loader.contentLoaderInfo.addEventListener("ioError",$bind(this,this.onPicLoadError));
			loader.load(new openfl_net_URLRequest(decodeURIComponent(url.split("+").join(" "))));
			loader.set_name("pic");
			loader.set_cacheAsBitmap(true);
			loader.set_scaleX(0.8);
			loader.set_scaleY(0.8);
			cong.addChild(loader);
		} else {
			guest = com_redpeakgames_cloud9_utils_BitmapMaker.create("img/guest_img.jpg",null,26,33,1,true);
			guest.set_scaleX(0.25);
			guest.set_scaleY(0.25);
			cong.addChild(guest);
		}
		var leftWing = null;
		var rightWing = null;
		try {
			leftWing = cong.getChildByName("wing.left");
			rightWing = cong.getChildByName("wing.right");
		} catch( err1 ) {
			haxe_CallStack.lastException = err1;
			if (err1 instanceof js__$Boot_HaxeError) err1 = err1.val;
			haxe_Log.trace(err1,{ fileName : "Herald.hx", lineNumber : 683, className : "com.redpeakgames.cloud9.dialog.Herald", methodName : "showSingleCongrats"});
		}
		if(leftWing != null) {
			motion_Actuate.stop(leftWing);
			leftWing.set_rotation(35);
			motion_Actuate.tween(leftWing,0.4,{ rotation : -35}).ease(motion_easing_Quad.get_easeInOut()).reflect().repeat();
		}
		if(rightWing != null) {
			motion_Actuate.stop(rightWing);
			rightWing.set_rotation(-35);
			motion_Actuate.tween(rightWing,0.4,{ rotation : 35}).ease(motion_easing_Quad.get_easeInOut()).reflect().repeat();
		}
		motion_Actuate.tween(cong,0.466,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone()).delay(2.6).onComplete(function() {
			if(loader != null) {
				cong.removeChild(loader);
			}
			if(guest != null) {
				cong.removeChild(guest);
			}
			cong.set_visible(false);
		});
	}
	,update: function(delta) {
		if(this.isHeraldAlive) {
			var _g = 0;
			var _g1 = this.animationsHerald;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				a.update(delta);
			}
			this.heraldBackLight01.set_alpha(1 - this.heraldBackLight00.get_alpha());
			this.heraldTopBackLight01.set_alpha(1 - this.heraldTopBackLight00.get_alpha());
		}
		if(this.get_isCongratsAlive()) {
			var _g2 = 0;
			var _g11 = this.animationsCongrats;
			while(_g2 < _g11.length) {
				var a1 = _g11[_g2];
				++_g2;
				a1.update(delta);
			}
		}
	}
	,onCloseHerald: function() {
	}
	,onClickLike: function(e) {
		if(this.btnLike.get_enable() == false) {
			this.btnLike.set_enable(false);
			return;
		}
		this.btnLike.set_enable(false);
		var http = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "like.herald.php",$bind(this,this.onRecvLike));
		var data = new openfl_net_URLVariables();
		data.uid = this.udt.uid;
		data.sig = this.udt.sig;
		data.eid = this.eid;
		http.request(data);
		this.closeTimerHerald = haxe_Timer.delay($bind(this,this.closeHerald),3000);
	}
	,onRecvLike: function(e) {
		var _gthis = this;
		var json = JSON.parse(e.target.data);
		haxe_Log.trace("onRecvLike() : " + Std.string(json),{ fileName : "Herald.hx", lineNumber : 753, className : "com.redpeakgames.cloud9.dialog.Herald", methodName : "onRecvLike"});
		var drawCoins = new com_redpeakgames_cloud9_ui_DrawCoins(this.canvasHeraldBody.get_x() + 72 | 0,this.canvasHerald.get_y() + this.canvasHeraldBody.get_y() + 154 | 0,713,16,1500,1,null,null,true);
		drawCoins.set_onCoinArrive(function() {
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.balance.changed",true,false,JSON.stringify({ coin : haxe_Int64Helper.toFloat(com_redpeakgames_cloud9_utils_DynamicCall.method(_gthis.parent,"get_coin",[])) + json.prize, dia : _gthis.udt.dia, showAddedCoin : true})));
		});
		drawCoins.set_name("coin.like");
		this.addChild(drawCoins);
		var prizeText = new com_redpeakgames_cloud9_ui_NumberBitmap("font/font_herald_2.png",84,28,38,14,1,0,3);
		prizeText.set_x(this.canvasHeraldBody.get_x() + this.canvasHerald.get_x() + 59);
		prizeText.set_y(this.canvasHeraldBody.get_y() + this.canvasHerald.get_y() + 179);
		prizeText.draw(haxe_Int64Helper.fromFloat(json.prize));
		prizeText.set_name("herald.prize");
		prizeText.set_alpha(0);
		prizeText.mouseEnabled = false;
		this.addChild(prizeText);
		motion_Actuate.tween(prizeText,0.3,{ y : this.canvasHeraldBody.get_y() + this.canvasHerald.get_y() + 119, alpha : 1},false).ease(motion_easing_Quad.get_easeOut());
		motion_Actuate.tween(prizeText,0.3,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone()).delay(1.7).onComplete(function() {
			try {
				_gthis.canvasHeraldBody.removeChild(prizeText);
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				haxe_Log.trace("onRecvLike(), prizeText already removed : " + Std.string(err),{ fileName : "Herald.hx", lineNumber : 779, className : "com.redpeakgames.cloud9.dialog.Herald", methodName : "onRecvLike"});
			}
		});
	}
	,toLobby: function() {
		this.removeHeraldContents();
		this.isHeraldAlive = false;
		this.heraldAliveTimer.stop();
		this.isCongratsAlive = false;
		motion_Actuate.stop(this.canvasHeraldBody);
		motion_Actuate.stop(this.canvasHeraldTop);
		this.canvasHeraldBody.set_visible(false);
		this.canvasHeraldTop.set_visible(false);
		this.canvasCongrats.set_visible(false);
		var _g = 0;
		var _g1 = this.receivedCongrats;
		while(_g < _g1.length) {
			var cong = _g1[_g];
			++_g;
			cong.set_visible(false);
		}
		var _g2 = 0;
		var _g11 = this.timers;
		while(_g2 < _g11.length) {
			var t = _g11[_g2];
			++_g2;
			t.stop();
		}
		this.timers = [];
		var idx = this.get_numChildren() - 1;
		while(idx >= 0) {
			var obj = this.getChildAt(idx);
			if(obj.get_name() == "coin.cong" || obj.get_name() == "coin.ptcl") {
				var coin = obj;
				try {
					HxOverrides.remove(this.animationsCongrats,coin);
					this.removeChildAt(idx);
					if(obj.get_name() == "coin.cong") {
						motion_Actuate.stop(coin);
					}
				} catch( err ) {
					haxe_CallStack.lastException = err;
					if (err instanceof js__$Boot_HaxeError) err = err.val;
					haxe_Log.trace(err,{ fileName : "Herald.hx", lineNumber : 815, className : "com.redpeakgames.cloud9.dialog.Herald", methodName : "toLobby"});
				}
			}
			if(obj.get_name() == "coin.like") {
				try {
					this.removeChildAt(idx);
				} catch( err1 ) {
					haxe_CallStack.lastException = err1;
					if (err1 instanceof js__$Boot_HaxeError) err1 = err1.val;
					haxe_Log.trace(err1,{ fileName : "Herald.hx", lineNumber : 827, className : "com.redpeakgames.cloud9.dialog.Herald", methodName : "toLobby"});
				}
			}
			if(obj.get_name() == "herald.prize") {
				try {
					this.removeChildAt(idx);
					motion_Actuate.stop(obj);
				} catch( err2 ) {
					haxe_CallStack.lastException = err2;
					if (err2 instanceof js__$Boot_HaxeError) err2 = err2.val;
					haxe_Log.trace(err2,{ fileName : "Herald.hx", lineNumber : 841, className : "com.redpeakgames.cloud9.dialog.Herald", methodName : "toLobby"});
				}
			}
			--idx;
		}
		this.sndShowup.stop();
	}
	,get_isCongratsAlive: function() {
		return this.isCongratsAlive;
	}
	,__class__: com_redpeakgames_cloud9_dialog_Herald
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_isCongratsAlive:"get_isCongratsAlive"})
});
var com_redpeakgames_cloud9_dialog_HitTheFive = function(x,y,prize,mute,seMgr) {
	openfl_display_Sprite.call(this);
	this.animations = [];
	this.set_x(x);
	this.set_y(y);
	if(prize != null) {
		this.prize = prize;
	} else {
		this.prize = 0;
	}
	this.elapsed = 0;
	this.twinkleFlag = true;
	this.btnShareFlag = true;
	this.isClosing = false;
	this.mute = mute;
	this.seManager = seMgr;
	this.closeTmr = null;
	this.sharePosted = false;
	var ss = spritesheet_importers_SparrowImporter.parse(openfl_Assets.getText("img/hitthe5/hit5_into.xml"),"img/hitthe5");
	ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],false,15));
	this.hit5into = new spritesheet_AnimatedSprite(ss);
	this.hit5into.showBehavior("_e");
	this.hit5into.set_x(-185);
	this.hit5into.set_y(-215);
	this.addChild(this.hit5into);
	this.hit5back = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/hitthe5/hit5_back.png"));
	this.hit5back.set_x(0);
	this.hit5back.set_y(0);
	this.hit5back.set_alpha(0);
	this.addChild(this.hit5back);
	this.twinkle01 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/hitthe5/hit5_twinkle_1.png"));
	this.twinkle01.set_x(0);
	this.twinkle01.set_y(0);
	this.twinkle01.set_alpha(0);
	this.twinkle01.set_visible(false);
	this.addChild(this.twinkle01);
	this.twinkle02 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/hitthe5/hit5_twinkle_2.png"));
	this.twinkle02.set_x(0);
	this.twinkle02.set_y(0);
	this.twinkle02.set_alpha(0);
	this.twinkle02.set_visible(false);
	this.addChild(this.twinkle02);
	this.btnShare = new com_redpeakgames_cloud9_ui_ImageButton("img/hitthe5/btn_hit5_share",null,null,"");
	this.btnShare.set_x(30);
	this.btnShare.set_y(84);
	this.btnShare.set_scaleX(1.2);
	this.btnShare.set_scaleY(1.2);
	this.btnShare.set_alpha(0);
	this.btnShare.set_work(false);
	this.btnShare.set_onClick($bind(this,this.onClickShare));
	this.addChild(this.btnShare);
	this.show();
};
$hxClasses["com.redpeakgames.cloud9.dialog.HitTheFive"] = com_redpeakgames_cloud9_dialog_HitTheFive;
com_redpeakgames_cloud9_dialog_HitTheFive.__name__ = ["com","redpeakgames","cloud9","dialog","HitTheFive"];
com_redpeakgames_cloud9_dialog_HitTheFive.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_HitTheFive.prototype = $extend(openfl_display_Sprite.prototype,{
	prize: null
	,animations: null
	,hit5into: null
	,hit5back: null
	,twinkle01: null
	,twinkle02: null
	,btnShare: null
	,mute: null
	,seManager: null
	,sharePosted: null
	,lastTick: null
	,elapsed: null
	,twinkleFlag: null
	,btnShareFlag: null
	,isClosing: null
	,closeTmr: null
	,show: function() {
		var _gthis = this;
		this.animations.push(this.hit5into);
		if(this.seManager != null && this.mute == false) {
			this.seManager.play("hitthe5_v",0,0);
			this.seManager.play("hitthe5_bgm",0,0);
		}
		this.closeTmr = haxe_Timer.delay(function() {
			_gthis.onClose();
		},5200);
		this.lastTick = openfl_Lib.getTimer();
		this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
	}
	,onClose: function(e) {
		var _gthis = this;
		if(this.isClosing) {
			return;
		}
		this.btnShare.set_work(false);
		this.isClosing = true;
		this.elapsed = 0;
		if(this.seManager != null && this.mute == false) {
			this.seManager.stop("hitthe5_bgm");
			this.seManager.play("hitthe5_close",0,0);
		}
		if(this.closeTmr != null) {
			this.closeTmr.stop();
		}
		this.closeTmr = haxe_Timer.delay(function() {
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.close.hitthefive",true,true));
			try {
				_gthis.removeChildren();
				_gthis.removeEventListener("enterFrame",$bind(_gthis,_gthis.onEnterFrame));
				_gthis.parent.removeChild(_gthis);
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				haxe_Log.trace("HitTheFive : " + Std.string(err),{ fileName : "HitTheFive.hx", lineNumber : 152, className : "com.redpeakgames.cloud9.dialog.HitTheFive", methodName : "onClose"});
			}
		},333);
	}
	,onClickShare: function(e) {
		if(!this.sharePosted && this.prize != 0) {
			this.dispatchEvent(new openfl_events_DataEvent("ge.post.share",true,false,JSON.stringify({ type : "hit5", p1 : "udt.name", p2 : this.prize})));
		}
		this.sharePosted = true;
		this.onClose();
	}
	,onEnterFrame: function(e) {
		var cur = openfl_Lib.getTimer();
		var delta = cur - this.lastTick;
		this.elapsed += delta;
		var _g = 0;
		var _g1 = this.animations;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a.update(delta);
		}
		if(!this.isClosing) {
			if(this.elapsed >= 1400) {
				if(this.hit5into.get_alpha() > 0) {
					var _g2 = this.hit5into;
					_g2.set_alpha(_g2.get_alpha() - 0.005 * delta);
				} else {
					this.hit5into.set_alpha(0);
				}
				if(this.hit5back.get_alpha() < 1) {
					var _g3 = this.hit5back;
					_g3.set_alpha(_g3.get_alpha() + 0.005 * delta);
				} else {
					this.hit5back.set_alpha(1);
				}
				if(this.btnShare.get_x() < 42) {
					var _g4 = this.btnShare;
					_g4.set_x(_g4.get_x() + 0.06 * delta);
				} else {
					this.btnShare.set_x(42);
				}
				if(this.btnShare.get_y() < 89) {
					var _g5 = this.btnShare;
					_g5.set_y(_g5.get_y() + 0.025 * delta);
				} else {
					this.btnShare.set_y(89);
				}
				if(this.btnShare.get_scaleX() > 1) {
					var _g6 = this.btnShare;
					_g6.set_scaleX(_g6.get_scaleX() - 0.001 * delta);
				} else {
					this.btnShare.set_scaleX(1);
				}
				if(this.btnShare.get_scaleY() > 1) {
					var _g7 = this.btnShare;
					_g7.set_scaleY(_g7.get_scaleY() - 0.001 * delta);
				} else {
					this.btnShare.set_scaleY(1);
				}
				if(this.btnShare.get_alpha() <= 1) {
					var _g8 = this.btnShare;
					_g8.set_alpha(_g8.get_alpha() + 0.005 * delta);
				} else {
					this.btnShare.set_alpha(1);
				}
			}
			if(this.elapsed >= 1600) {
				if(this.btnShareFlag) {
					this.btnShare.set_work(true);
					this.btnShareFlag = false;
				}
			}
			if(this.elapsed >= 1733 && this.elapsed < 5600) {
				this.twinkle01.set_visible(true);
				if(this.twinkleFlag) {
					if(this.twinkle01.get_alpha() <= 1) {
						var _g9 = this.twinkle01;
						_g9.set_alpha(_g9.get_alpha() + 0.0075187969924812026 * delta);
					} else {
						this.twinkleFlag = false;
					}
				} else if(this.twinkle01.get_alpha() >= 0) {
					var _g10 = this.twinkle01;
					_g10.set_alpha(_g10.get_alpha() - 0.0075187969924812026 * delta);
				} else {
					this.twinkleFlag = true;
				}
			}
			if(this.elapsed >= 1866 && this.elapsed < 5600) {
				this.twinkle02.set_visible(true);
			}
			if(this.elapsed >= 5600) {
				this.twinkle01.set_visible(false);
				this.twinkle02.set_visible(false);
			}
			if(this.twinkle02.get_visible() == true) {
				this.twinkle02.set_alpha(1 - this.twinkle01.get_alpha());
			}
		} else if(this.elapsed < 66) {
			var _g11 = this;
			_g11.set_x(_g11.get_x() - 0.30303030303030304 * delta);
		} else {
			var _g12 = this;
			_g12.set_x(_g12.get_x() + 1.9548872180451127 * delta);
			var _g13 = this;
			_g13.set_alpha(_g13.get_alpha() - 0.0037593984962406013 * delta);
		}
		this.lastTick = cur;
	}
	,kill: function() {
		if(this.closeTmr != null) {
			this.closeTmr.stop();
		}
		if(this.seManager != null) {
			this.seManager.stop("hitthe5_bgm");
			this.seManager.stop("hitthe5_v");
			this.seManager.stop("hitthe5_close");
		}
		try {
			this.parent.removeChild(this);
		} catch( err ) {
			haxe_CallStack.lastException = err;
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace("Hit The Five : " + Std.string(err),{ fileName : "HitTheFive.hx", lineNumber : 265, className : "com.redpeakgames.cloud9.dialog.HitTheFive", methodName : "kill"});
		}
	}
	,__class__: com_redpeakgames_cloud9_dialog_HitTheFive
});
var com_redpeakgames_cloud9_dialog_Invite = function(udt) {
	openfl_display_Sprite.call(this);
	this.pos = 0;
	this.inited = false;
	this.coins = [];
	this.accumulate = [];
	this.udt = udt;
	this.mapDesc = new haxe_ds_StringMap();
	openfl_Lib.current.stage.addEventListener("fullScreen",$bind(this,this.onFullscreen));
	this.getInvite();
};
$hxClasses["com.redpeakgames.cloud9.dialog.Invite"] = com_redpeakgames_cloud9_dialog_Invite;
com_redpeakgames_cloud9_dialog_Invite.__name__ = ["com","redpeakgames","cloud9","dialog","Invite"];
com_redpeakgames_cloud9_dialog_Invite.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_Invite.prototype = $extend(openfl_display_Sprite.prototype,{
	pos: null
	,udt: null
	,lastTick: null
	,canvas: null
	,saveMouseY: null
	,coins: null
	,sentAlready: null
	,invites: null
	,accumulate: null
	,mapDesc: null
	,format: null
	,curTotal: null
	,textBox: null
	,txBlueCount: null
	,nextCoint: null
	,nextFriend: null
	,curPossible: null
	,btnEffect: null
	,btnInvite: null
	,scrollBar: null
	,btnUp: null
	,btnDown: null
	,select: null
	,totalStartCoint: null
	,curSentCoins: null
	,invitables: null
	,inited: null
	,init: function() {
		var _gthis = this;
		this.set_x(639);
		if(openfl_Lib.current.stage.get_displayState() == 2) {
			this.set_y(73);
		} else {
			this.set_y(140);
		}
		this.set_alpha(0);
		this.saveMouseY = 0;
		motion_Actuate.tween(this,0.3,{ x : 609, y : this.get_y() - 15, scaleX : 1.1, scaleY : 1.1, alpha : 1},false).ease(motion_easing_Quad.get_easeInOut()).onComplete(function() {
			motion_Actuate.tween(_gthis,0.1,{ x : 639, y : _gthis.get_y() + 15, scaleX : 1, scaleY : 1},false).ease(motion_easing_Quad.get_easeInOut());
		});
		this.addImage("img/invite/invite_back.png",0,0);
		this.addImage("img/invite/nofriends_send.png",172,324,0);
		this.addImage("img/invite/friend_back.png",449,230);
		this.addImage("img/invite/txt_missing.png",12,632);
		var close = new com_redpeakgames_cloud9_ui_ImageButton("img/invite/btn_x",null,null,"mouse_click");
		close.set_x(596);
		close.set_y(79);
		close.set_onClick($bind(this,this.onClose));
		this.addChild(close);
		this.addImage("img/invite/invite_magnifying.png",128,182);
		this.btnUp = new com_redpeakgames_cloud9_ui_ImageButton("img/invite/scroll_arrow_top",null,null,"mouse_click");
		this.btnUp.set_name("btn.up");
		this.btnUp.set_x(593);
		this.btnUp.set_y(284);
		this.btnUp.set_onClick($bind(this,this.onScroll));
		this.addChild(this.btnUp);
		this.btnDown = new com_redpeakgames_cloud9_ui_ImageButton("img/invite/scroll_arrow_bottom",null,null,"mouse_click");
		this.btnDown.set_name("btn.Down");
		this.btnDown.set_x(593);
		this.btnDown.set_y(500);
		this.btnDown.set_onClick($bind(this,this.onScroll));
		this.addChild(this.btnDown);
		this.addImage("img/invite/scroll_back.png",593,301);
		this.scrollBar = new com_redpeakgames_cloud9_ui_ImageButton("img/invite/scroll_bar",null,null,"mouse_click");
		this.scrollBar.set_name("scrollBar");
		this.scrollBar.set_x(593);
		this.scrollBar.set_y(302);
		this.scrollBar.addEventListener("mouseDown",$bind(this,this.onMouseClick));
		this.addChild(this.scrollBar);
		this.select = new com_redpeakgames_cloud9_ui_ImageCheck("img/invite/select_all");
		this.select.set_name("select");
		this.select.set_x(141);
		this.select.set_y(225);
		this.select.set_onClick($bind(this,this.toggleSelectAll));
		this.select.set_checked(true);
		this.addChild(this.select);
		this.btnInvite = new com_redpeakgames_cloud9_ui_ImageButton("img/invite/btn_invite",null,null,"mouse_click");
		this.btnInvite.set_x(213);
		this.btnInvite.set_y(550);
		this.btnInvite.set_onClick($bind(this,this.onInviteFriends));
		this.addChild(this.btnInvite);
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/invite/btn_invite_e.png",false),9,2,216,66);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],false,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[0],false,1));
		this.btnEffect = new spritesheet_AnimatedSprite(ss);
		this.btnEffect.set_x(0);
		this.btnEffect.set_y(0);
		this.btnEffect.set_name("btn.Effect");
		this.btnEffect.showBehavior("_e");
		this.btnInvite.addChild(this.btnEffect);
		this.btnInvite.set_onOver(function(e) {
			_gthis.btnEffect.showBehavior("stop");
			_gthis.btnEffect.set_visible(false);
		});
		this.btnInvite.set_onOut(function(e1) {
			_gthis.btnEffect.set_visible(true);
		});
		var tmr = new haxe_Timer(3000);
		tmr.run = function() {
			if(_gthis.btnEffect.get_visible()) {
				_gthis.btnEffect.showBehavior("_e");
			}
		};
		var clip = new openfl_display_Shape();
		clip.get_graphics().beginFill(0,1);
		clip.get_graphics().drawRect(0,0,456,238);
		clip.get_graphics().endFill();
		clip.set_x(133);
		clip.set_y(282);
		this.addChild(clip);
		this.canvas = new openfl_display_Sprite();
		this.canvas.set_x(133);
		this.canvas.set_y(282);
		this.canvas.set_mask(clip);
		this.addChild(this.canvas);
		this.format = new openfl_text_TextFormat("system",12,16777215);
		this.format.align = 0;
		this.curTotal = com_redpeakgames_cloud9_ui_TxField.make(530,245,81,this.format,null,false);
		this.addChild(this.curTotal);
		this.format = com_redpeakgames_cloud9_ui_TxField.format("system",12,0);
		this.format.align = 3;
		this.textBox = new openfl_text_TextField();
		this.textBox.set_x(132);
		this.textBox.set_y(184);
		this.textBox.set_width(452);
		this.textBox.set_height(24);
		this.textBox.set_type(1);
		this.textBox.addEventListener("mouseUp",$bind(this,this.textInit));
		this.textBox.addEventListener("keyUp",$bind(this,this.onTextInput));
		this.textBox.set_text("Search for friends");
		this.textBox.setTextFormat(this.format);
		this.addChild(this.textBox);
		this.coinNext();
		this.addCoins();
		this.addEventListener("enterFrame",$bind(this,this.loop));
	}
	,loop: function(e) {
		var cur = openfl_Lib.getTimer();
		var delta = cur - this.lastTick;
		if(this.btnInvite.getChildByName("btn.Effect") != null) {
			this.btnInvite.getChildByName("btn.Effect").update(delta);
		}
		this.lastTick = cur;
	}
	,onRecvInvite: function(e) {
		var loader = e.target;
		haxe_Log.trace(loader.data,{ fileName : "Invite.hx", lineNumber : 271, className : "com.redpeakgames.cloud9.dialog.Invite", methodName : "onRecvInvite"});
		var s = loader.data;
		this.sentAlready = JSON.parse(decodeURIComponent(s.split("+").join(" ")));
		if(this.inited == false) {
			this.init();
			this.inited = true;
		}
		this.placeProfiles();
	}
	,onTextInput: function(e) {
		this.canvas.removeChildren();
		this.curPossible = 0;
		this.canvas.set_y(282);
		this.scrollBar.set_y(302);
		this.pos = 0;
		if(this.textBox.get_text() != "") {
			var searchList = [];
			var _g = 0;
			var _g1 = this.invitables;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				var fnameLC = i.name.toLowerCase();
				var fnameUC = i.name.toUpperCase();
				if(fnameLC.indexOf(this.textBox.get_text()) != -1 || fnameUC.indexOf(this.textBox.get_text()) != -1) {
					searchList.push(i);
					this.curPossible++;
				}
			}
			searchList.sort(function(a,b) {
				return Reflect.compare(a.name.toLowerCase(),b.name.toLowerCase());
			});
			this.makeBtnList(searchList);
		} else {
			this.makeBtnList(this.invitables);
		}
	}
	,textInit: function(e) {
		if(this.parent != null) {
			this.dispatchEvent(new openfl_events_DataEvent("ge.to.normalscreen",true,false));
		}
		if(this.textBox.get_text() != "Search for friends") {
			return;
		}
		this.textBox.set_text("");
	}
	,onMouseClick: function(e) {
		var img = e.target;
		this.stage.addEventListener("mouseMove",$bind(this,this.onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.onMouseUp));
		this.saveMouseY = img.get_y() - this.get_mouseY();
	}
	,onMouseMove: function(e) {
		var targetY = this.get_mouseY() + this.saveMouseY;
		this.scrollBar.set_y(this.scrollBar.get_y() + (targetY - this.scrollBar.get_y()) * 0.5);
		if(this.scrollBar.get_y() <= 302) {
			this.scrollBar.set_y(302);
		}
		if(this.scrollBar.get_y() >= 474) {
			this.scrollBar.set_y(474);
		}
		this.pos = (this.scrollBar.get_y() - 302) / (172 / ((this.invites.length - 15) / 3)) | 0;
		haxe_Log.trace(this.pos,{ fileName : "Invite.hx", lineNumber : 339, className : "com.redpeakgames.cloud9.dialog.Invite", methodName : "onMouseMove"});
		this.canvas.set_y(282 + this.pos * -36);
	}
	,onMouseUp: function(e) {
		if(this.scrollBar.get_y() <= 302 + 24 / (this.invites.length / 3)) {
			this.scrollBar.set_y(302);
		}
		if(this.scrollBar.get_y() >= 474 - 24 / (this.invites.length / 3)) {
			this.scrollBar.set_y(474);
		}
		this.stage.removeEventListener("mouseMove",$bind(this,this.onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.onMouseUp));
	}
	,addCoins: function() {
		var _g = 0;
		while(_g < 50) {
			var c = _g++;
			var coin = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/invite/invite_coin.png"));
			coin.set_x(61);
			coin.set_y(518 - c * 6);
			coin.set_alpha(1);
			coin.set_name("coin" + c);
			this.addChild(coin);
			this.coins.push(coin);
		}
	}
	,addNumInvite: function(path,x,y,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		var nin = new openfl_display_Bitmap(openfl_Assets.getBitmapData(path));
		nin.set_x(x);
		nin.set_y(y);
		nin.set_alpha(alpha);
		nin.set_name(HxOverrides.substr(path,11,null));
		this.addChild(nin);
		this.accumulate.push(nin);
	}
	,addImage: function(path,x,y,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		var icon = new openfl_display_Bitmap(openfl_Assets.getBitmapData(path));
		icon.set_x(x);
		icon.set_y(y);
		icon.set_alpha(alpha);
		icon.set_name(HxOverrides.substr(path,11,null));
		this.addChild(icon);
	}
	,totalRefresh: function(num,totalNumber,atInit) {
		this.curTotal.set_text(num + " / " + totalNumber);
		this.totalCoin();
		try {
			if(atInit == null) {
				if(num == 0) {
					this.getChildByName("nofriends_send.png").set_alpha(1);
				} else {
					this.getChildByName("nofriends_send.png").set_alpha(0);
				}
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
				haxe_Log.trace(e.toString(),{ fileName : "Invite.hx", lineNumber : 401, className : "com.redpeakgames.cloud9.dialog.Invite", methodName : "totalRefresh"});
			} else throw(e);
		}
	}
	,toggleSelectAll: function(e) {
		var btn = e.target;
		var count = 0;
		var _g = 0;
		var _g1 = this.invites;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.get_checked()) {
				++count;
			}
		}
		var _g2 = 0;
		var _g11 = this.invites;
		while(_g2 < _g11.length) {
			var i1 = _g11[_g2];
			++_g2;
			if(btn.get_checked()) {
				if(count < 50 && i1.get_checked() == false) {
					i1.set_checked(true);
					++count;
				}
			} else {
				i1.set_checked(false);
			}
		}
		if(btn.get_checked()) {
			this.btnEffect.set_visible(true);
			this.btnInvite.set_enable(true);
			this.curPossible = count;
			this.totalRefresh(count,this.invites.length,true);
		} else {
			this.btnEffect.set_visible(false);
			this.btnInvite.set_enable(false);
			this.curPossible = 0;
			this.totalRefresh(0,this.invites.length,true);
		}
	}
	,onInviteFriends: function(e) {
		var to = [];
		var names = [];
		var _g = 0;
		var _g1 = this.invites;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.get_checked()) {
				to.push(i.get_name());
				var key = i.get_name();
				var _this = this.mapDesc;
				names.push(__map_reserved[key] != null?_this.getReserved(key):_this.h[key]);
			}
		}
		if(this.parent != null) {
			this.dispatchEvent(new openfl_events_DataEvent("ge.to.normalscreen",true,false));
		}
		try {
			openfl_external_ExternalInterface.call("sendInvites",to,names);
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,openfl_errors_Error) ) {
				haxe_Log.trace(e1.toString(),{ fileName : "Invite.hx", lineNumber : 459, className : "com.redpeakgames.cloud9.dialog.Invite", methodName : "onInviteFriends"});
			} else throw(e1);
		}
		this.select.set_checked(true);
		this.coinNext();
	}
	,removeCheck: function() {
		var idx = this.invitables.length - 1;
		while(idx >= 0) {
			if(this.invites[idx].get_checked()) {
				HxOverrides.remove(this.invitables,this.invitables[idx]);
			}
			--idx;
		}
		this.canvas.removeChildren();
		this.makeBtnList(this.invitables);
	}
	,coinNext: function() {
		this.nextFriend = 30;
		this.nextCoint = 10000;
	}
	,totalCoin: function() {
		var mokCoin = this.curPossible;
		if(mokCoin >= 0 && mokCoin < 10) {
			this.txBlueCount = 200 * mokCoin;
		}
		if(mokCoin >= 10 && mokCoin < 20) {
			this.txBlueCount = 200 * mokCoin + 3000;
		}
		if(mokCoin >= 20 && mokCoin < 30) {
			this.txBlueCount = 200 * mokCoin + 3000 + 5000;
		}
		if(mokCoin >= 30 && mokCoin < 50) {
			this.txBlueCount = 200 * mokCoin + 3000 + 5000 + 10000;
		}
		if(mokCoin >= 50) {
			this.txBlueCount = 200 * mokCoin + 3000 + 5000 + 10000 + 20000;
		}
	}
	,onScroll: function(e) {
		var _gthis = this;
		var name = Reflect.field(e.target,"name");
		if(name == "btn.up") {
			if(this.pos > 0) {
				this.pos -= 1;
			}
		} else if(this.pos < (this.invites.length - 15) / 3 - 1 && this.invites.length > 18) {
			this.pos += 1;
		}
		motion_Actuate.tween(this.canvas,0.1,{ y : 282 + this.pos * -36}).ease(motion_easing_Quad.get_easeOut());
		if(this.scrollBar.get_y() > 474 && name == "btn.up") {
			this.scrollBar.set_y(474);
		} else if(this.scrollBar.get_y() <= 302 && name == "btn.down") {
			this.scrollBar.set_y(302);
		} else {
			motion_Actuate.tween(this.scrollBar,0.1,{ y : 302 + this.pos * (172 / ((this.invites.length - 18) / 3))}).ease(motion_easing_Quad.get_easeOut()).onComplete(function() {
				if(_gthis.scrollBar.get_y() > 474) {
					_gthis.scrollBar.set_y(474);
				}
				if(_gthis.scrollBar.get_y() < 302) {
					_gthis.scrollBar.set_y(302);
				}
			});
		}
	}
	,placeProfiles: function(inviteList) {
		this.canvas.removeChildren();
		this.invitables = [];
		var totalList = [];
		try {
			totalList = openfl_external_ExternalInterface.call("function() { return invitables; }");
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
				haxe_Log.trace(e.toString(),{ fileName : "Invite.hx", lineNumber : 562, className : "com.redpeakgames.cloud9.dialog.Invite", methodName : "placeProfiles"});
			} else throw(e);
		}
		var idx = 0;
		var _g = 0;
		while(_g < totalList.length) {
			var t = totalList[_g];
			++_g;
			if(this.sentAlready.indexOf(t.name) == -1) {
				if(inviteList != null && inviteList > idx) {
					this.invitables.push(t);
				} else if(inviteList == null) {
					this.invitables.push(t);
				}
				++idx;
			}
		}
		if(this.invitables.length > 50) {
			this.curSentCoins = 50;
		} else {
			this.curSentCoins = this.invitables.length | 0;
		}
		this.makeBtnList(this.invitables);
	}
	,makeBtnList: function(profile) {
		this.curPossible = 0;
		this.invites = [];
		if(profile != null && profile.length < 18 || profile == null) {
			this.btnUp.set_enable(false);
			this.btnDown.set_enable(false);
			this.scrollBar.set_enable(false);
		} else {
			this.btnUp.set_enable(true);
			this.btnDown.set_enable(true);
			this.scrollBar.set_enable(true);
		}
		if(profile == null || profile.length == 0) {
			this.select.mouseEnabled = false;
			this.btnInvite.set_enable(false);
			this.btnEffect.set_visible(false);
		} else {
			this.select.set_checked(true);
			this.select.mouseEnabled = true;
			this.btnInvite.set_enable(true);
			this.btnEffect.set_visible(true);
		}
		var list = (profile.length / 3 | 0) + 1;
		var _g1 = 0;
		while(_g1 < list) {
			var r = _g1++;
			var _g2 = 0;
			while(_g2 < 3) {
				var c = _g2++;
				var index = r * 3 + c;
				if(index >= profile.length) {
					this.totalRefresh(this.curPossible,this.invites.length);
					return;
				}
				this.format.align = 0;
				var ntx = com_redpeakgames_cloud9_ui_TxField.make(41,12,98,this.format,null,false);
				ntx.set_textColor(0);
				ntx.set_text(profile[index].name);
				var btn = this.makeInvite(profile[index]);
				btn.set_onClick($bind(this,this.onSelectChanged));
				btn.set_x(c * 152);
				btn.set_y(r * 36);
				btn.addChild(ntx);
				this.canvas.addChild(btn);
				this.invites.push(btn);
				if(this.curPossible < 50) {
					btn.set_checked(true);
					this.curPossible++;
				} else {
					btn.set_checked(false);
					this.curPossible = 50;
				}
			}
		}
	}
	,makeInvite: function(profile) {
		var ntx = com_redpeakgames_cloud9_ui_TxField.make(41,12,98,this.format,null,false);
		ntx.set_text(profile.name);
		var btn = new com_redpeakgames_cloud9_ui_ImageCheck("img/invite/invite_friends_select");
		btn.set_name(profile.id);
		var v = profile.name;
		var _this = this.mapDesc;
		var key = profile.id;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,v);
		} else {
			_this.h[key] = v;
		}
		btn.addChild(ntx);
		return btn;
	}
	,onSelectChanged: function(e) {
		var btn = e.target;
		var count = 0;
		var _g = 0;
		var _g1 = this.invites;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.get_checked()) {
				++count;
				if(count > 50) {
					count = 50;
					btn.set_checked(false);
				}
			}
		}
		this.curPossible = count;
		this.totalRefresh(count,this.invites.length,true);
		if(count == 50) {
			this.select.set_checked(true);
		}
		if(count < 50) {
			this.select.set_checked(false);
		}
		if(count == 0) {
			this.btnInvite.set_enable(false);
			this.btnEffect.set_visible(false);
		} else {
			this.btnInvite.set_enable(true);
			this.btnEffect.set_visible(true);
		}
	}
	,onError: function(e) {
		haxe_Log.trace(e.toString(),{ fileName : "Invite.hx", lineNumber : 718, className : "com.redpeakgames.cloud9.dialog.Invite", methodName : "onError"});
	}
	,onClose: function(e) {
		this.removeEventListener("enterFrame",$bind(this,this.loop));
		this.textBox.removeEventListener("mouseUp",$bind(this,this.textInit));
		this.scrollBar.removeEventListener("mouseDown",$bind(this,this.onMouseClick));
		this.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,getInvite: function() {
		var callinvite = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "gettodayinvite.php",$bind(this,this.onRecvInvite));
		var data = new openfl_net_URLVariables();
		data.uid = this.udt.uid;
		data.sig = this.udt.sig;
		callinvite.request(data);
	}
	,onFullscreen: function(e) {
		if(e.fullScreen) {
			this.set_y(140);
		} else {
			this.set_y(73);
		}
	}
	,__class__: com_redpeakgames_cloud9_dialog_Invite
});
var com_redpeakgames_cloud9_dialog_JulySale = function() {
	openfl_display_Sprite.call(this);
	this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/julysale/sales_popup.png")));
	this.set_x(655);
	if(openfl_Lib.current.stage.stageHeight < 1080) {
		this.set_y(134);
	} else {
		this.set_y((openfl_Lib.current.stage.stageHeight - 462) / 2 - 116);
	}
	var tmp = this.get_y();
	haxe_Log.trace(openfl_Lib.current.stage.stageHeight,{ fileName : "JulySale.hx", lineNumber : 47, className : "com.redpeakgames.cloud9.dialog.JulySale", methodName : "new", customParams : [tmp]});
	var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/julysale/buy_e.png",false),8,2,251,70);
	ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11],false,15));
	ss.addBehavior(new spritesheet_data_BehaviorData("stop",[11],false,1));
	this.btnBuy = new com_redpeakgames_cloud9_ui_AnimatedButton("img/julysale/btn_buynow","mouse_click","png",new spritesheet_AnimatedSprite(ss),4);
	this.btnBuy.set_x(179);
	this.btnBuy.set_y(392);
	this.btnBuy.set_onClick($bind(this,this.onClickBuy));
	this.addChild(this.btnBuy);
	var close = new com_redpeakgames_cloud9_ui_ImageButton("img/julysale/btn_sales_x",null,null,"mouse_click");
	close.set_x(645);
	close.set_y(18);
	close.set_onClick($bind(this,this.onClickClose));
	this.addChild(close);
	this.remainTime = com_redpeakgames_cloud9_ui_TxField.make(549,438,45,com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",16,16711680),null,true);
	this.addChild(this.remainTime);
	this.addEventListener("enterFrame",$bind(this,this.onLoop));
};
$hxClasses["com.redpeakgames.cloud9.dialog.JulySale"] = com_redpeakgames_cloud9_dialog_JulySale;
com_redpeakgames_cloud9_dialog_JulySale.__name__ = ["com","redpeakgames","cloud9","dialog","JulySale"];
com_redpeakgames_cloud9_dialog_JulySale.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_JulySale.prototype = $extend(openfl_display_Sprite.prototype,{
	btnBuy: null
	,remainTime: null
	,onClickClose: function(e) {
		this.removeEventListener("enterFrame",$bind(this,this.onLoop));
		this.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,onClickBuy: function(e) {
		this.dispatchEvent(new openfl_events_DataEvent("ge.to.normalscreen",true,false));
		try {
			openfl_external_ExternalInterface.call("buyCoins","0100","coin");
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,openfl_errors_Error) ) {
				haxe_Log.trace(e1.toString(),{ fileName : "JulySale.hx", lineNumber : 87, className : "com.redpeakgames.cloud9.dialog.JulySale", methodName : "onClickBuy"});
			} else throw(e1);
		}
		this.onClickClose(null);
	}
	,onLoop: function(e) {
		var cur = openfl_Lib.getTimer();
		if(cur > 3600000) {
			this.onClickClose(null);
		}
		var secs = 3600 - (cur / 1000 | 0);
		this.remainTime.set_text(((secs / 60 | 0) < 10?"0" + (secs / 60 | 0):Std.string(secs / 60 | 0)) + ":" + (secs % 60 < 10?"0" + secs % 60:Std.string(secs % 60)));
	}
	,__class__: com_redpeakgames_cloud9_dialog_JulySale
});
var com_redpeakgames_cloud9_dialog_Leaderb = function(udt) {
	openfl_display_Sprite.call(this);
	this.pos = 0;
	this.udt = udt;
	this.seManager = new com_redpeakgames_cloud9_utils_SeManager(com_redpeakgames_cloud9_Global.mute);
	this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/leaderb/leaderboard_back.png")));
	this.btnClose = new com_redpeakgames_cloud9_ui_ImageButton("img/bankrupt/btn_sales_x",null,null,"mouse_click");
	this.btnClose.set_x(551);
	this.btnClose.set_y(5);
	this.btnClose.set_onClick($bind(this,this.onClickClose));
	this.addChild(this.btnClose);
	this.makeTabBtns();
	this.canvas = new openfl_display_Sprite();
	this.canvas.set_x(10);
	this.canvas.set_y(135);
	this.addChild(this.canvas);
	this.rankerName = new openfl_text_TextFormat();
	this.rankerName.align = 0;
	this.rankerName.size = 12;
	this.rankerName.color = 0;
	this.rankerData = new openfl_text_TextFormat();
	this.rankerData.align = 4;
	this.rankerData.size = 12;
	this.rankerData.color = 16777215;
	this.itemFormat = new openfl_text_TextFormat();
	this.itemFormat.align = 3;
	this.itemFormat.size = 12;
	this.itemFormat.color = 16777215;
	this.rankFormat = new openfl_text_TextFormat();
	this.rankFormat.align = 0;
	this.rankFormat.size = 12;
	this.rankFormat.color = 16777215;
	this.timeFormat = new openfl_text_TextFormat();
	this.timeFormat.align = 4;
	this.timeFormat.size = 13;
	this.timeFormat.color = 16777215;
	var http = new com_redpeakgames_cloud9_utils_Http(udt.url + "leaderboard.php",$bind(this,this.onLoadComplete),$bind(this,this.onIoError));
	var data = new openfl_net_URLVariables();
	data.uid = udt.uid;
	data.sig = udt.sig;
	haxe_Log.trace(udt.uid,{ fileName : "Leaderb.hx", lineNumber : 119, className : "com.redpeakgames.cloud9.dialog.Leaderb", methodName : "new", customParams : [udt.sig]});
	http.request(data);
};
$hxClasses["com.redpeakgames.cloud9.dialog.Leaderb"] = com_redpeakgames_cloud9_dialog_Leaderb;
com_redpeakgames_cloud9_dialog_Leaderb.__name__ = ["com","redpeakgames","cloud9","dialog","Leaderb"];
com_redpeakgames_cloud9_dialog_Leaderb.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_Leaderb.prototype = $extend(openfl_display_Sprite.prototype,{
	pos: null
	,udt: null
	,btnToday: null
	,btnWeekly: null
	,btnLike: null
	,btnLev: null
	,btnClose: null
	,saveMouseY: null
	,remainDay: null
	,remainTime: null
	,baseTime: null
	,curType: null
	,canvas: null
	,json: null
	,seManager: null
	,rankerName: null
	,rankerData: null
	,itemFormat: null
	,rankFormat: null
	,timeFormat: null
	,makeTabBtns: function() {
		this.btnToday = this.makeTabBtn("today",14,103);
		this.addChild(this.btnToday);
		this.btnWeekly = this.makeTabBtn("weekly",116,103);
		this.addChild(this.btnWeekly);
		this.btnLike = this.makeTabBtn("like",218,103);
		this.addChild(this.btnLike);
		this.btnLev = this.makeTabBtn("lev",320,103);
		this.addChild(this.btnLev);
	}
	,makeTabBtn: function(name,x,y) {
		var btnChk = new com_redpeakgames_cloud9_ui_ImageCheck("img/leaderb/tab_" + name);
		btnChk.set_x(x);
		btnChk.set_y(y);
		btnChk.set_name("btn." + name);
		btnChk.set_onClick($bind(this,this.onChangeTab));
		return btnChk;
	}
	,onClickClose: function(e) {
		var _gthis = this;
		this.removeEventListener("enterFrame",$bind(this,this.onLoop));
		motion_Actuate.tween(this,0.2,{ x : this.get_x() + 570, y : this.get_y() + 24, alpha : 0, scaleX : 0, scaleY : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
			if(_gthis.parent != null) {
				_gthis.parent.removeChild(_gthis);
			}
		});
	}
	,onChangeTab: function(e) {
		this.pos = 0;
		if(!com_redpeakgames_cloud9_Global.mute) {
			this.seManager.play("mouse_click_c",0,0);
		}
		var btn = e.target;
		if(btn.get_checked() == false) {
			btn.set_checked(true);
			return;
		}
		this.btnToday.set_checked(false);
		this.btnWeekly.set_checked(false);
		this.btnLike.set_checked(false);
		this.btnLev.set_checked(false);
		btn.set_checked(true);
		this.canvas.removeChildren();
		if(btn.get_name() == "btn.lev") {
			this.tabLevel();
		} else if(btn.get_name() == "btn.like") {
			this.tabLike();
		} else if(btn.get_name() == "btn.weekly") {
			this.tabWeekly();
		} else {
			this.tabToday();
		}
	}
	,tabLevel: function() {
		var level = this.json.level.data;
		var pics = this.json.level.pics;
		if(level.length == 0) {
			return;
		}
		if(level.length > 0) {
			this.canvas.addChild(this.makeRanker(1,level[0].name,level[0].lev,pics[0],"lv",level[0].uid));
		}
		if(level.length > 1) {
			this.canvas.addChild(this.makeRanker(2,level[1].name,level[1].lev,pics[1],"lv",level[1].uid));
		}
		if(level.length > 2) {
			this.canvas.addChild(this.makeRanker(3,level[2].name,level[2].lev,pics[2],"lv",level[2].uid));
		}
		this.makeTag("lv");
		this.makeAnimatedBar();
		var per = 0.0;
		if(this.json.level.rank == false) {
			per = 1;
		} else {
			per = Std.parseInt(this.json.level.rank) / Std.parseInt(this.json.level.size);
		}
		per *= 100;
		var t = Math.ceil(per);
		if(this.json.level.rank == false) {
			this.makeSpinIt();
		} else {
			var me = this.makePosition(Math.ceil(per) + "%",this.json.level.rank + 1,this.udt.name,Std.string(this.udt.lev),this.udt.picture,"lv");
			me.set_x(504);
			me.set_y(341);
			me.set_alpha(0);
			this.canvas.addChild(me);
			motion_Actuate.tween(me,0.266,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(me,0.00734 * (100 - t),{ y : 341 - 3.19 * (100 - t)}).ease(motion_easing_Linear.get_easeNone()).delay(0.266);
		}
		this.makeVScroll();
		var clip = new openfl_display_Shape();
		clip.get_graphics().beginFill(0,1);
		clip.get_graphics().drawRect(0,0,361,223);
		clip.get_graphics().endFill();
		clip.set_x(12);
		clip.set_y(154);
		this.canvas.addChild(clip);
		var srect = new openfl_display_Sprite();
		srect.set_x(12);
		srect.set_y(154);
		srect.set_name("canvas.srect");
		srect.set_mask(clip);
		this.canvas.addChild(srect);
		var ypos = 0;
		var _g1 = 3;
		var _g = level.length;
		while(_g1 < _g) {
			var i = _g1++;
			var item = this.makeItem(i + 1,level[i].name,level[i].lev,"","lv",level[i].uid == this.udt.uid);
			item.set_x(0);
			item.set_y(ypos);
			item.set_name("item" + i);
			srect.addChild(item);
			ypos += 30;
		}
		this.curType = "level";
	}
	,tabLike: function() {
		var like = this.json.wlike.data;
		var pics = this.json.wlike.pics;
		var remainbg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/leaderb/leaderboard_time_left.png"));
		remainbg.set_x(416);
		remainbg.set_y(-30);
		this.canvas.addChild(remainbg);
		this.remainDay = com_redpeakgames_cloud9_ui_TxField.make(444,-25,30,this.timeFormat,null,false);
		this.remainDay.set_text("");
		this.canvas.addChild(this.remainDay);
		this.remainTime = com_redpeakgames_cloud9_ui_TxField.make(507,-25,54,this.timeFormat,null,false);
		this.remainTime.set_text("0");
		this.remainTime.set_autoSize(3);
		this.canvas.addChild(this.remainTime);
		var days = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/leaderb/txt_leaderboard_days.png"));
		days.set_x(477);
		days.set_y(-21);
		this.canvas.addChild(days);
		if(like.length == 0) {
			return;
		}
		if(like.length > 0) {
			this.canvas.addChild(this.makeRanker(1,like[0].name,com_redpeakgames_cloud9_utils_Number.addCommaStr(like[0].coin),pics[0],"like",like[0].uid));
		}
		if(like.length > 1) {
			this.canvas.addChild(this.makeRanker(2,like[1].name,com_redpeakgames_cloud9_utils_Number.addCommaStr(like[1].coin),pics[1],"like",like[1].uid));
		}
		if(like.length > 2) {
			this.canvas.addChild(this.makeRanker(3,like[2].name,com_redpeakgames_cloud9_utils_Number.addCommaStr(like[2].coin),pics[2],"like",like[2].uid));
		}
		this.makeTag("like");
		this.makeAnimatedBar();
		var per = 0.0;
		if(this.json.wlike.rank == false && this.json.wlike.weekly == false) {
			per = 1;
		} else {
			per = Std.parseInt(this.json.wlike.rank) / Std.parseInt(this.json.wlike.size);
		}
		per *= 100;
		var t = Math.ceil(per);
		if(this.json.wlike.rank == false && this.json.wlike.weekly == false) {
			this.makeSpinIt();
		} else {
			var me = this.makePosition(Math.ceil(per) + "%",this.json.wlike.rank + 1,this.udt.name,this.json.wlike.weekly,this.udt.picture,"like");
			me.set_x(504);
			me.set_y(341);
			me.set_alpha(0);
			this.canvas.addChild(me);
			motion_Actuate.tween(me,0.266,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(me,0.00734 * (100 - t),{ y : 341 - 3.19 * (100 - t)}).ease(motion_easing_Linear.get_easeNone()).delay(0.266);
		}
		this.makeVScroll();
		var clip = new openfl_display_Shape();
		clip.get_graphics().beginFill(0,1);
		clip.get_graphics().drawRect(0,0,361,223);
		clip.get_graphics().endFill();
		clip.set_x(12);
		clip.set_y(154);
		this.canvas.addChild(clip);
		var srect = new openfl_display_Sprite();
		srect.set_x(12);
		srect.set_y(154);
		srect.set_name("canvas.srect");
		srect.set_mask(clip);
		this.canvas.addChild(srect);
		var ypos = 0;
		var _g1 = 3;
		var _g = like.length;
		while(_g1 < _g) {
			var i = _g1++;
			var item = this.makeItem(i + 1,like[i].name,like[i].coin,"","like",like[i].uid == this.udt.uid);
			item.set_x(0);
			item.set_y(ypos);
			srect.addChild(item);
			ypos += 30;
		}
		this.curType = "wlike";
	}
	,tabWeekly: function() {
		var weekly = this.json.wspin.data;
		var pics = this.json.wspin.pics;
		var remainbg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/leaderb/leaderboard_time_left.png"));
		remainbg.set_x(416);
		remainbg.set_y(-30);
		this.canvas.addChild(remainbg);
		this.remainDay = com_redpeakgames_cloud9_ui_TxField.make(444,-25,30,this.timeFormat,null,false);
		this.remainDay.set_text("");
		this.canvas.addChild(this.remainDay);
		this.remainTime = com_redpeakgames_cloud9_ui_TxField.make(443,-25,118,this.timeFormat,null,false);
		this.remainTime.set_text("0");
		this.remainTime.set_autoSize(3);
		this.canvas.addChild(this.remainTime);
		var days = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/leaderb/txt_leaderboard_days.png"));
		days.set_x(477);
		days.set_y(-21);
		this.canvas.addChild(days);
		if(weekly.length == 0) {
			return;
		}
		if(weekly.length > 0) {
			this.canvas.addChild(this.makeRanker(1,weekly[0].name,com_redpeakgames_cloud9_utils_Number.addCommaStr(weekly[0].coin),pics[0],"weekly",weekly[0].uid));
		}
		if(weekly.length > 1) {
			this.canvas.addChild(this.makeRanker(2,weekly[1].name,com_redpeakgames_cloud9_utils_Number.addCommaStr(weekly[1].coin),pics[1],"weekly",weekly[1].uid));
		}
		if(weekly.length > 2) {
			this.canvas.addChild(this.makeRanker(3,weekly[2].name,com_redpeakgames_cloud9_utils_Number.addCommaStr(weekly[2].coin),pics[2],"weekly",weekly[2].uid));
		}
		this.makeTag("weekly");
		this.makeAnimatedBar();
		var per = 0.0;
		if(this.json.wspin.rank == false && this.json.wspin.weekly == false) {
			per = 1;
		} else {
			per = Std.parseInt(this.json.wspin.rank) / Std.parseInt(this.json.wspin.size);
		}
		per *= 100;
		var t = Math.ceil(per);
		if(this.json.wspin.rank == false && this.json.wspin.weekly == false) {
			this.makeSpinIt();
		} else {
			var me = this.makePosition(Math.ceil(per) + "%",this.json.wspin.rank + 1,this.udt.name,this.json.wspin.weekly,this.udt.picture,"coin");
			me.set_x(504);
			me.set_y(341);
			me.set_alpha(0);
			this.canvas.addChild(me);
			motion_Actuate.tween(me,0.266,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(me,0.00734 * (100 - t),{ y : 341 - 3.19 * (100 - t)}).ease(motion_easing_Linear.get_easeNone()).delay(0.266);
		}
		this.makeVScroll();
		var clip = new openfl_display_Shape();
		clip.get_graphics().beginFill(0,1);
		clip.get_graphics().drawRect(0,0,361,223);
		clip.get_graphics().endFill();
		clip.set_x(12);
		clip.set_y(154);
		this.canvas.addChild(clip);
		var srect = new openfl_display_Sprite();
		srect.set_x(12);
		srect.set_y(154);
		srect.set_name("canvas.srect");
		srect.set_mask(clip);
		this.canvas.addChild(srect);
		var ypos = 0;
		var _g1 = 3;
		var _g = weekly.length;
		while(_g1 < _g) {
			var i = _g1++;
			var item = this.makeItem(i + 1,weekly[i].name,com_redpeakgames_cloud9_utils_Number.addCommaStr(weekly[i].coin),"","weekly",weekly[i].uid == this.udt.uid);
			item.set_x(0);
			item.set_y(ypos);
			srect.addChild(item);
			ypos += 30;
		}
		this.curType = "wspin";
	}
	,tabToday: function() {
		var today = this.json.today.data;
		var pics = this.json.today.pics;
		var remainbg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/leaderb/leaderboard_time_left.png"));
		remainbg.set_x(416);
		remainbg.set_y(-30);
		this.canvas.addChild(remainbg);
		this.remainTime = com_redpeakgames_cloud9_ui_TxField.make(443,-25,118,this.timeFormat,null,false);
		this.remainTime.set_text("0");
		this.remainTime.set_autoSize(3);
		this.canvas.addChild(this.remainTime);
		var tf = new openfl_text_TextFormat();
		tf.align = 3;
		tf.size = 13;
		tf.color = 9868950;
		var txtLeft = com_redpeakgames_cloud9_ui_TxField.make(443,-25,36,tf,null,false);
		txtLeft.set_text("Left");
		this.canvas.addChild(txtLeft);
		if(today.length == 0) {
			return;
		}
		if(today.length > 0) {
			this.canvas.addChild(this.makeRanker(1,today[0].name,com_redpeakgames_cloud9_utils_Number.addCommaStr(today[0].coin),pics[0],"coin",today[0].uid));
		}
		if(today.length > 1) {
			this.canvas.addChild(this.makeRanker(2,today[1].name,com_redpeakgames_cloud9_utils_Number.addCommaStr(today[1].coin),pics[1],"coin",today[1].uid));
		}
		if(today.length > 2) {
			this.canvas.addChild(this.makeRanker(3,today[2].name,com_redpeakgames_cloud9_utils_Number.addCommaStr(today[2].coin),pics[2],"coin",today[2].uid));
		}
		this.makeTag("today");
		this.makeAnimatedBar();
		var per = 0.0;
		if(this.json.today.rank == false && this.json.today.today == false) {
			per = 1;
		} else {
			per = Std.parseInt(this.json.today.rank) / Std.parseInt(this.json.today.size);
		}
		per *= 100;
		var t = Math.ceil(per);
		if(this.json.today.rank == false && this.json.today.today == false) {
			this.makeSpinIt();
		} else {
			var me = this.makePosition(Math.ceil(per) + "%",this.json.today.rank + 1,this.udt.name,this.json.today.today,this.udt.picture,"coin");
			me.set_x(504);
			me.set_y(341);
			me.set_alpha(0);
			this.canvas.addChild(me);
			motion_Actuate.tween(me,0.266,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(me,0.00734 * (100 - t),{ y : 341 - 3.19 * (100 - t)}).ease(motion_easing_Linear.get_easeNone()).delay(0.266);
		}
		this.makeVScroll();
		var clip = new openfl_display_Shape();
		clip.get_graphics().beginFill(0,1);
		clip.get_graphics().drawRect(0,0,361,223);
		clip.get_graphics().endFill();
		clip.set_x(12);
		clip.set_y(154);
		this.canvas.addChild(clip);
		var srect = new openfl_display_Sprite();
		srect.set_x(12);
		srect.set_y(154);
		srect.set_name("canvas.srect");
		srect.set_mask(clip);
		this.canvas.addChild(srect);
		var ypos = 0;
		var _g1 = 3;
		var _g = today.length;
		while(_g1 < _g) {
			var i = _g1++;
			var item = this.makeItem(i + 1,today[i].name,com_redpeakgames_cloud9_utils_Number.addCommaStr(today[i].coin),"","coin",today[i].uid == this.udt.uid);
			item.set_x(0);
			item.set_y(ypos);
			srect.addChild(item);
			ypos += 30;
		}
		this.curType = "today";
	}
	,makeVScroll: function() {
		var up = new com_redpeakgames_cloud9_ui_ImageButton("img/leaderb/scroll_arrow_up",null,null,"mouse_click");
		up.set_x(379);
		up.set_y(154);
		up.set_name("btn.up");
		up.set_onClick($bind(this,this.onScroll));
		this.canvas.addChild(up);
		var down = new com_redpeakgames_cloud9_ui_ImageButton("img/leaderb/scroll_arrow_down",null,null,"mouse_click");
		down.set_x(379);
		down.set_y(357);
		down.set_name("btn.down");
		down.set_onClick($bind(this,this.onScroll));
		this.canvas.addChild(down);
		var sbar = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/leaderb/scroll_bar_back.png"));
		sbar.set_x(379);
		sbar.set_y(171);
		this.canvas.addChild(sbar);
		var sthumb = new com_redpeakgames_cloud9_ui_ImageButton("img/leaderb/scroll_bar",null,null,"mouse_click");
		sthumb.set_x(379);
		sthumb.set_y(171);
		sthumb.set_name("btn.scroll");
		sthumb.addEventListener("mouseDown",$bind(this,this.onMoveThumb));
		this.canvas.addChild(sthumb);
	}
	,makeRanker: function(order,name,data,pic,type,uid) {
		if(pic == null) {
			pic = "";
		}
		var _gthis = this;
		var spr = new openfl_display_Sprite();
		spr.set_y(40);
		switch(order) {
		case 1:
			spr.set_x(9);
			break;
		case 2:
			spr.set_x(139);
			break;
		case 3:
			spr.set_x(269);
			break;
		}
		var shorten = name != null?name:"";
		if(shorten.length > 8) {
			shorten = HxOverrides.substr(name,0,8) + "...";
		}
		var txName = com_redpeakgames_cloud9_ui_TxField.make(53,31,60,this.rankerName,null,false);
		txName.set_text(shorten);
		spr.addChild(txName);
		if(pic != null) {
			var picture = new openfl_display_Sprite();
			picture.set_x(9);
			picture.set_y(7);
			spr.addChild(picture);
			if(pic.indexOf("http") != -1) {
				var ploader = new openfl_display_Loader();
				ploader.set_scaleX(0.8);
				ploader.set_scaleY(0.8);
				picture.addChild(ploader);
				ploader.contentLoaderInfo.addEventListener("ioError",function(e) {
					haxe_Log.trace("Cannot load",{ fileName : "Leaderb.hx", lineNumber : 609, className : "com.redpeakgames.cloud9.dialog.Leaderb", methodName : "makeRanker"});
				});
				ploader.contentLoaderInfo.addEventListener("complete",$bind(this,this.profileLoaded));
				ploader.load(new openfl_net_URLRequest(decodeURIComponent(pic.split("+").join(" "))));
			} else {
				var guest = com_redpeakgames_cloud9_utils_BitmapMaker.create("img/guest_img.jpg",null,0,0,1,true);
				guest.set_scaleX(0.25);
				guest.set_scaleY(0.25);
				picture.addChild(guest);
				picture.addChild(com_redpeakgames_cloud9_utils_BitmapMaker.create("img/mobile_icon.png",null,-5,15));
			}
			picture.mouseEnabled = true;
			picture.buttonMode = true;
			picture.addEventListener("click",function(e1) {
				_gthis.dispatchEvent(new openfl_events_DataEvent("ge.open.profile",true,false,JSON.stringify({ id : uid, screen : false})));
			});
		}
		var txLength = 71;
		var txPosX = 33;
		if(type == "coin" || type == "weekly") {
			txLength = 95;
			txPosX = 26;
		}
		var txData = com_redpeakgames_cloud9_ui_TxField.make(txPosX,50,txLength,this.rankerData,null,false);
		txData.set_text(data);
		spr.addChild(txData);
		var path = "img/leaderb/leaderboard_" + type + ".png";
		if(type == "weekly") {
			path = "img/leaderb/leaderboard_coin.png";
		}
		var typeIcon = new openfl_display_Bitmap(openfl_Assets.getBitmapData(path));
		typeIcon.set_x(type == "coin" || type == "weekly"?2:13);
		typeIcon.set_y(49);
		spr.addChild(typeIcon);
		if(type == "like" || type == "weekly") {
			var rwrdIcon = new com_redpeakgames_cloud9_ui_ImageButton("img/leaderb/leaderboard_reward_icon",null,null,"mouse_click");
			rwrdIcon.set(95,1);
			rwrdIcon.set_onClick(function(e2) {
				_gthis.openWeeklyReward(type);
			});
			spr.addChild(rwrdIcon);
		}
		return spr;
	}
	,openWeeklyReward: function(type) {
		var _gthis = this;
		this.btnClose.set_work(false);
		this.btnClose.buttonMode = false;
		var screen = new openfl_display_Shape();
		screen.get_graphics().beginFill(0,0.7);
		screen.get_graphics().drawRect(-this.get_x(),-this.get_y(),1920,1080);
		screen.get_graphics().endFill();
		this.addChild(screen);
		var rewardLayer = new openfl_display_Sprite();
		rewardLayer.set_x(61);
		rewardLayer.set_y(49);
		this.addChild(rewardLayer);
		rewardLayer.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/leaderb/leaderboard_reward_back.png")));
		var icon = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/leaderb/leaderboard_title_" + type + ".png"));
		icon.set_x(117);
		icon.set_y(26);
		rewardLayer.addChild(icon);
		var btnExit = new com_redpeakgames_cloud9_ui_ImageButton("img/buttons/btn_sales_x",null,null,"mouse_click");
		btnExit.set(417,6);
		btnExit.set_onClick(function(e) {
			_gthis.btnClose.set_work(true);
			_gthis.btnClose.buttonMode = true;
			_gthis.removeChild(screen);
			rewardLayer.removeChildren();
			_gthis.removeChild(rewardLayer);
		});
		rewardLayer.addChild(btnExit);
		var tf = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",16,8230615);
		tf.align = 0;
		var rankTable = ["#4 ~ #6","#7 ~ #10","#11 ~ #20","#21 ~ #30","#31 ~ #50"];
		var prizeTable = [10000000,5000000,3000000,2000000,1000000,700000,500000,300000];
		var _g = 0;
		while(_g < 5) {
			var i = _g++;
			var rankTxt = com_redpeakgames_cloud9_ui_TxField.make(33,212 + i * 39,147,tf);
			rankTxt.set_text(rankTable[i]);
			rewardLayer.addChild(rankTxt);
		}
		var _g1 = 0;
		while(_g1 < 8) {
			var i1 = _g1++;
			var px = 252;
			var ps = 1.0;
			var width = 157;
			if(i1 >= 1 && i1 < 5) {
				px = 260;
				ps = 0.9;
				width = 139;
			}
			if(i1 >= 5) {
				px = 270;
				ps = 0.8;
				width = 119;
			}
			var icon1 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/topmenu/top_icon_coin.png"));
			icon1.set_x(px - 25);
			icon1.set_y(95 + i1 * 39);
			rewardLayer.addChild(icon1);
			var prize = new com_redpeakgames_cloud9_ui_NumberBitmap("font/font_deal_coin_1.png",width,13,21,13,1,0);
			prize.textAlign = 0;
			prize.set_x(px - (prize.len * ps - prize.len) / 2);
			prize.set_y(101 + i1 * 39 - (prize.tile.height * ps - prize.tile.height) / 2);
			prize.commaWidth = 9;
			prize.set_scaleX(ps);
			prize.set_scaleY(ps);
			var x = prizeTable[i1];
			prize.set_value(new haxe__$Int64__$_$_$Int64(x >> 31,x));
			rewardLayer.addChild(prize);
		}
	}
	,profileLoaded: function(e) {
		(js_Boot.__cast(Reflect.field(e.target,"content") , openfl_display_Bitmap)).smoothing = true;
	}
	,makeItem: function(rank,name,data,pic,type,me) {
		if(pic == null) {
			pic = "";
		}
		var _gthis = this;
		var spr = new openfl_display_Sprite();
		spr.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/leaderb/leaderboard_bar_back_" + (type == "lv"?type:"coin") + (me?"_2.png":"_1.png"))));
		if(me == false) {
			var txRank = com_redpeakgames_cloud9_ui_TxField.make(1,3,38,this.rankFormat,null,false);
			txRank.set_text(rank == null?"null":"" + rank);
			spr.addChild(txRank);
		}
		var txName = com_redpeakgames_cloud9_ui_TxField.make(79,4,210,this.itemFormat,null,false);
		txName.set_text(name != null?name:"");
		spr.addChild(txName);
		var txData = com_redpeakgames_cloud9_ui_TxField.make(257,5,97,this.rankerData,null,false);
		txData.set_text(data);
		spr.addChild(txData);
		if(rank <= 50 && (type == "weekly" || type == "like")) {
			var rwrdIcon = new com_redpeakgames_cloud9_ui_ImageButton("img/leaderb/leaderboard_reward_icon",null,null,"mouse_click");
			if(type == "lv") {
				rwrdIcon.set_x(272);
			} else {
				rwrdIcon.set_x(217);
			}
			rwrdIcon.set_onClick(function(e) {
				_gthis.openWeeklyReward(type);
			});
			spr.addChild(rwrdIcon);
		}
		return spr;
	}
	,makeAnimatedBar: function() {
		var _gthis = this;
		var mask = new openfl_display_Shape();
		mask.get_graphics().beginFill(0,1);
		mask.get_graphics().drawRect(0,0,31,319);
		mask.get_graphics().endFill();
		mask.set_x(472);
		mask.set_y(373);
		var tbar = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/leaderb/leaderboard_bar.png"));
		tbar.set_x(472);
		tbar.set_y(54);
		tbar.set_mask(mask);
		this.canvas.addChild(tbar);
		this.canvas.addChild(mask);
		motion_Actuate.tween(mask,0.734,{ y : 54}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			tbar.set_mask(null);
			if(mask != null && mask.parent != null) {
				_gthis.canvas.removeChild(mask);
			}
		}).delay(0.266);
		this.setStep("100",366,0.066);
		this.setStep("90",334,0.132);
		this.setStep("80",302,0.198);
		this.setStep("70",270,0.264);
		this.setStep("60",238,0.33);
		this.setStep("50",206,0.396);
		this.setStep("40",174,0.462);
		this.setStep("30",142,0.528);
		this.setStep("20",110,0.594);
		this.setStep("10",78,0.66);
		this.setStep("0",46,0.726);
	}
	,setStep: function(per,y,delay) {
		var step = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/leaderb/leaderboard_per_" + per + ".png"));
		step.set_x(387);
		step.set_y(y);
		step.set_alpha(0);
		this.canvas.addChild(step);
		motion_Actuate.tween(step,0.33,{ alpha : 1, x : 417}).ease(motion_easing_Quad.get_easeIn()).delay(delay);
	}
	,makeSpinIt: function(x,y) {
		if(y == null) {
			y = 341;
		}
		if(x == null) {
			x = 504;
		}
		var spinit = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/leaderb/leaderboard_spinit.png"));
		spinit.set_x(x);
		spinit.set_y(y);
		spinit.set_alpha(0);
		this.canvas.addChild(spinit);
		motion_Actuate.tween(spinit,0.266,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
	}
	,makeTag: function(type) {
		var nameTag = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/leaderb/txt_name.png"));
		nameTag.set_x(146);
		nameTag.set_y(135);
		this.canvas.addChild(nameTag);
		var path = "";
		switch(type) {
		case "like":
			path = "img/leaderb/txt_likes.png";
			break;
		case "lv":
			path = "img/leaderb/txt_level.png";
			break;
		default:
			path = "img/leaderb/txt_coinsgained.png";
		}
		var typeTag = new openfl_display_Bitmap(openfl_Assets.getBitmapData(path));
		typeTag.set_x(286);
		typeTag.set_y(135);
		this.canvas.addChild(typeTag);
		if(type == "lv") {
			nameTag.set_x(168);
			typeTag.set_x(331);
		} else if(type == "like") {
			typeTag.set_x(304);
		}
	}
	,onScroll: function(e) {
		var name = js_Boot.__cast(Reflect.field(e.target,"name") , String);
		var level = this.json.level.data;
		if(name == "btn.up") {
			if(this.pos > 0) {
				this.pos -= 1;
				var btn_sc = this.canvas.getChildByName("btn.scroll");
				if(btn_sc.get_y() < 175) {
					btn_sc.set_y(175);
				} else if(btn_sc.get_y() <= 175 + 24 / (level.length - 10)) {
					motion_Actuate.tween(btn_sc,0.1,{ y : 175}).ease(motion_easing_Quad.get_easeOut());
				} else {
					motion_Actuate.tween(btn_sc,0.1,{ y : btn_sc.get_y() - 161 / (level.length - 10)}).ease(motion_easing_Quad.get_easeOut());
				}
			}
		} else if(this.pos < level.length - 10) {
			this.pos += 1;
			var btn_sc1 = this.canvas.getChildByName("btn.scroll");
			if(btn_sc1.get_y() > 336) {
				btn_sc1.set_y(336);
			} else if(btn_sc1.get_y() >= 336 - 24 / (level.length - 10)) {
				motion_Actuate.tween(btn_sc1,0.1,{ y : 336}).ease(motion_easing_Quad.get_easeOut());
			} else {
				motion_Actuate.tween(btn_sc1,0.1,{ y : btn_sc1.get_y() + 161 / (level.length - 10)}).ease(motion_easing_Quad.get_easeOut());
			}
		}
		motion_Actuate.tween(this.canvas.getChildByName("canvas.srect"),0.1,{ y : 290 + this.pos * -30 - 135}).ease(motion_easing_Quad.get_easeOut());
	}
	,onMoveThumb: function(e) {
		var img = e.target;
		this.stage.addEventListener("mouseMove",$bind(this,this.onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.onMouseUp));
		this.saveMouseY = img.get_y() - this.get_mouseY();
	}
	,onMouseMove: function(e) {
		var level = this.json.level.data;
		var btn_sc = this.canvas.getChildByName("btn.scroll");
		var targetY = this.get_mouseY() + this.saveMouseY;
		btn_sc.set_y(btn_sc.get_y() + (targetY - btn_sc.get_y()) * 0.5);
		if(btn_sc.get_y() <= 171) {
			btn_sc.set_y(171);
		}
		if(btn_sc.get_y() >= 333) {
			btn_sc.set_y(333);
		}
		this.pos = (btn_sc.get_y() - 171) / (163 / (level.length - 9)) | 0;
		this.canvas.getChildByName("canvas.srect").set_y(155 + this.pos * -30);
	}
	,onMouseUp: function(e) {
		var level = this.json.level.data;
		var btn_sc = this.canvas.getChildByName("btn.scroll");
		if(btn_sc.get_y() <= 171 + 24 / level.length) {
			btn_sc.set_y(171);
		}
		if(btn_sc.get_y() >= 333 - 24 / level.length) {
			btn_sc.set_y(333);
		}
		this.stage.removeEventListener("mouseMove",$bind(this,this.onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.onMouseUp));
	}
	,makePosition: function(step,rank,name,data,pic,type) {
		var spr = new openfl_display_Sprite();
		spr.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/leaderb/leaderboard_yourrank.png")));
		var txStep = com_redpeakgames_cloud9_ui_TxField.make(14,22,28,this.rankerName,null,false);
		txStep.set_text(step);
		spr.addChild(txStep);
		var txRank = com_redpeakgames_cloud9_ui_TxField.make(82,17,72,this.rankerName,null,false);
		txRank.set_text("#" + (rank == null?"null":"" + rank));
		spr.addChild(txRank);
		var txName = com_redpeakgames_cloud9_ui_TxField.make(82,33,72,this.rankerName,null,false);
		txName.set_text(name);
		spr.addChild(txName);
		var txData = com_redpeakgames_cloud9_ui_TxField.make(type == "coin" || type == "weekly"?73:62,52,83,this.rankerData,null,false);
		if(data.indexOf(".") != -1) {
			data = data.split(".")[0];
		}
		txData.set_text(com_redpeakgames_cloud9_utils_Number.addCommaStr(data));
		spr.addChild(txData);
		if(pic != null) {
			if(pic.indexOf("http") != -1) {
				var ploader = new openfl_display_Loader();
				ploader.set_x(50);
				ploader.set_y(19);
				ploader.set_scaleX(0.6);
				ploader.set_scaleY(0.6);
				spr.addChild(ploader);
				ploader.contentLoaderInfo.addEventListener("ioError",function(e) {
					haxe_Log.trace("Cannot load",{ fileName : "Leaderb.hx", lineNumber : 971, className : "com.redpeakgames.cloud9.dialog.Leaderb", methodName : "makePosition"});
				});
				ploader.contentLoaderInfo.addEventListener("complete",function(e1) {
					(js_Boot.__cast(Reflect.field(e1.target,"content") , openfl_display_Bitmap)).smoothing = true;
				});
				ploader.load(new openfl_net_URLRequest(pic));
			} else {
				var guest = com_redpeakgames_cloud9_utils_BitmapMaker.create("img/guest_img.jpg",null,50,19,1,true);
				guest.set_scaleX(0.1875);
				guest.set_scaleY(0.1875);
				spr.addChild(guest);
			}
		}
		var typeIcon = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/leaderb/leaderboard_" + type + ".png"));
		typeIcon.set_x(type == "coin" || type == "weekly"?38:45);
		typeIcon.set_y(52);
		spr.addChild(typeIcon);
		return spr;
	}
	,onLoadComplete: function(e) {
		var loader = e.target;
		haxe_Log.trace(loader.data,{ fileName : "Leaderb.hx", lineNumber : 999, className : "com.redpeakgames.cloud9.dialog.Leaderb", methodName : "onLoadComplete"});
		this.json = JSON.parse(loader.data);
		this.baseTime = openfl_Lib.getTimer();
		this.btnToday.set_checked(true);
		this.tabToday();
		this.addEventListener("enterFrame",$bind(this,this.onLoop));
	}
	,onIoError: function(e) {
		haxe_Log.trace(e.toString(),{ fileName : "Leaderb.hx", lineNumber : 1012, className : "com.redpeakgames.cloud9.dialog.Leaderb", methodName : "onIoError"});
	}
	,onLoop: function(e) {
		var cur = openfl_Lib.getTimer();
		if(this.remainTime != null && Object.prototype.hasOwnProperty.call(Reflect.field(this.json,this.curType),"remain")) {
			var remain = Std.parseInt(Reflect.field(this.json,this.curType).remain) - ((cur - this.baseTime) / 1000 | 0);
			var day = 0;
			if(this.curType != "today") {
				day = remain / 86400 | 0;
				remain %= 86400;
				this.remainDay.set_text(day == null?"null":"" + day);
			}
			var hour = (remain / 3600 | 0) < 10?"0" + (remain / 3600 | 0):Std.string(remain / 3600 | 0);
			remain %= 3600;
			this.remainTime.set_text(hour + ":" + ((remain / 60 | 0) < 10?"0" + (remain / 60 | 0):Std.string(remain / 60 | 0)) + ":" + (remain % 60 < 10?"0" + remain % 60:Std.string(remain % 60)));
		}
	}
	,__class__: com_redpeakgames_cloud9_dialog_Leaderb
});
var com_redpeakgames_cloud9_dialog_Levelup = function(inLev,inCoin,inRp,udt) {
	openfl_display_Sprite.call(this);
	this.udt = udt;
	this.lev = inLev;
	this.set_x(671);
	this.sharePosted = false;
	if(openfl_Lib.current.stage.get_displayState() == 2) {
		this.set_y(141);
	} else {
		this.set_y(320);
	}
	this.init(inLev,inCoin,inRp);
};
$hxClasses["com.redpeakgames.cloud9.dialog.Levelup"] = com_redpeakgames_cloud9_dialog_Levelup;
com_redpeakgames_cloud9_dialog_Levelup.__name__ = ["com","redpeakgames","cloud9","dialog","Levelup"];
com_redpeakgames_cloud9_dialog_Levelup.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_Levelup.prototype = $extend(openfl_display_Sprite.prototype,{
	spinner: null
	,timer: null
	,udt: null
	,lev: null
	,sharePosted: null
	,init: function(inLev,inCoin,inRp) {
		var _gthis = this;
		var screen = new openfl_display_Bitmap(new openfl_display_BitmapData(1,1,false,0));
		screen.set_scaleX(1920);
		screen.set_scaleY(1259);
		screen.set_x(-671);
		screen.set_y(-251);
		screen.set_alpha(0.7);
		this.addChild(screen);
		var seIntro = com_redpeakgames_cloud9_utils_CSound.get("lvup_intro");
		var seBg = com_redpeakgames_cloud9_utils_CSound.get("lvup_bgm");
		var seChange = com_redpeakgames_cloud9_utils_CSound.get("lvup_change");
		com_redpeakgames_cloud9_utils_CSound.get("lvup_click");
		if(com_redpeakgames_cloud9_Global.mute == false) {
			seIntro.play(0);
			seBg.play(0);
		}
		this.spinner = new openfl_display_Sprite();
		this.spinner.set_x(288);
		this.spinner.set_y(288);
		this.addChild(this.spinner);
		motion_Actuate.tween(this.spinner,4,{ rotation : 359}).ease(motion_easing_Linear.get_easeNone()).repeat(100);
		var spin = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lvup/lev_light_back.png"));
		spin.set_x(-288);
		spin.set_y(-288);
		spin.set_alpha(0);
		this.spinner.addChild(spin);
		motion_Actuate.tween(spin,0.7,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).delay(1.0);
		var urnow = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lvup/now.png"));
		urnow.set_x(152);
		urnow.set_y(63);
		urnow.set_alpha(0);
		this.addChild(urnow);
		motion_Actuate.tween(urnow,0.14,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).delay(0.35);
		var levelup = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lvup/levelup.png"));
		levelup.set_x(289);
		levelup.set_y(204);
		levelup.set_scaleX(0);
		levelup.set_scaleY(0);
		levelup.set_alpha(0);
		this.addChild(levelup);
		motion_Actuate.tween(levelup,0.35,{ x : 132, y : 102, alpha : 1, scaleX : 1, scaleY : 1}).ease(motion_easing_Back.get_easeOut());
		var light1 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lvup/light_1.png"));
		light1.set_x(206);
		light1.set_y(73);
		light1.set_alpha(0);
		this.addChild(light1);
		motion_Actuate.tween(light1,0.17,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).delay(0.35);
		motion_Actuate.tween(light1,0.35,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone()).delay(1.35);
		var light2 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lvup/light_2.png"));
		light2.set_x(134);
		light2.set_y(89);
		light2.set_alpha(0);
		this.addChild(light2);
		motion_Actuate.tween(light2,0.17,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).delay(0.35);
		motion_Actuate.tween(light2,0.35,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone()).delay(1.35);
		var light3 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lvup/light_2.png"));
		light3.set_x(276);
		light3.set_y(164);
		light3.set_alpha(0);
		this.addChild(light3);
		motion_Actuate.tween(light3,0.17,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).delay(0.35);
		motion_Actuate.tween(light3,0.35,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone()).delay(1.35);
		var light4 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lvup/light_2.png"));
		light4.set_x(383);
		light4.set_y(143);
		light4.set_alpha(0);
		this.addChild(light4);
		motion_Actuate.tween(light4,0.17,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).delay(0.35);
		motion_Actuate.tween(light4,0.35,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone()).delay(1.35);
		var light5 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lvup/light_2.png"));
		light5.set_x(409);
		light5.set_y(84);
		light5.set_alpha(0);
		this.addChild(light5);
		motion_Actuate.tween(light5,0.17,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).delay(0.35);
		motion_Actuate.tween(light5,0.35,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone()).delay(1.35);
		var rrs = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lvup/star_red.png"));
		rrs.set_x(346);
		rrs.set_y(330);
		rrs.set_scaleX(0);
		rrs.set_scaleY(0);
		rrs.set_alpha(0);
		this.addChild(rrs);
		motion_Actuate.tween(rrs,0.28,{ scaleX : 1, scaleY : 1, y : 138, alpha : 1},false).ease(motion_easing_Back.get_easeOut()).delay(0.42).onComplete(function() {
			motion_Actuate.tween(rrs,0.28,{ scaleX : 1.1, scaleY : 1.1, y : rrs.get_y() - 19},false).reflect().repeat().ease(motion_easing_Linear.get_easeNone());
		});
		var rbs = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lvup/star_blue.png"),1,true);
		rbs.set_x(346);
		rbs.set_y(330);
		rbs.set_scaleX(0);
		rbs.set_scaleY(0);
		rbs.set_alpha(0);
		this.addChild(rbs);
		motion_Actuate.tween(rbs,0.28,{ scaleX : 1, scaleY : 1, y : 138, alpha : 1},false).ease(motion_easing_Back.get_easeOut()).delay(0.49).onComplete(function() {
			motion_Actuate.tween(rbs,0.28,{ scaleX : 1.1, scaleY : 1.1, y : rbs.get_y() - 19},false).reflect().repeat().ease(motion_easing_Linear.get_easeNone());
		});
		var rys = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lvup/star_yell.png"),1,true);
		rys.set_x(346);
		rys.set_y(330);
		rys.set_scaleX(0);
		rys.set_scaleY(0);
		rys.set_alpha(0);
		this.addChild(rys);
		motion_Actuate.tween(rys,0.28,{ scaleX : 1, scaleY : 1, y : 138, alpha : 1},false).ease(motion_easing_Back.get_easeOut()).delay(0.35).onComplete(function() {
			motion_Actuate.tween(rys,0.28,{ scaleX : 1.1, scaleY : 1.1, y : rys.get_y() - 19},false).reflect().repeat().ease(motion_easing_Linear.get_easeNone());
		});
		var lrs = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lvup/star_red.png"),1,true);
		lrs.set_x(232);
		lrs.set_y(330);
		lrs.set_scaleX(0);
		lrs.set_scaleY(0);
		lrs.set_alpha(0);
		this.addChild(lrs);
		motion_Actuate.tween(lrs,0.28,{ scaleX : -1, scaleY : 1, y : 138, alpha : 1},false).ease(motion_easing_Back.get_easeOut()).delay(0.42).onComplete(function() {
			motion_Actuate.tween(lrs,0.28,{ scaleX : -1.1, scaleY : 1.1, y : lrs.get_y() - 19},false).reflect().repeat().ease(motion_easing_Linear.get_easeNone());
		});
		var lbs = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lvup/star_blue.png"),1,true);
		lbs.set_x(232);
		lbs.set_y(330);
		lbs.set_scaleX(0);
		lbs.set_scaleY(0);
		lbs.set_alpha(0);
		this.addChild(lbs);
		motion_Actuate.tween(lbs,0.28,{ scaleX : -1, scaleY : 1, y : 138, alpha : 1},false).ease(motion_easing_Back.get_easeOut()).delay(0.49).onComplete(function() {
			motion_Actuate.tween(lbs,0.28,{ scaleX : -1.1, scaleY : 1.1, y : lbs.get_y() - 19},false).reflect().repeat().ease(motion_easing_Linear.get_easeNone());
		});
		var lys = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lvup/star_yell.png"),1,true);
		lys.set_x(232);
		lys.set_y(330);
		lys.set_scaleX(-1);
		lys.set_scaleX(0);
		lys.set_scaleY(0);
		lys.set_alpha(0);
		this.addChild(lys);
		motion_Actuate.tween(lys,0.28,{ scaleX : -1, scaleY : 1, y : 138, alpha : 1},false).ease(motion_easing_Back.get_easeOut()).delay(0.35).onComplete(function() {
			motion_Actuate.tween(lys,0.28,{ scaleX : -1.1, scaleY : 1.1, y : lys.get_y() - 19},false).reflect().repeat().ease(motion_easing_Linear.get_easeNone());
		});
		var levBack = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lvup/level_back.png"),1,true);
		levBack.set_x(113);
		levBack.set_y(208);
		levBack.set_alpha(0);
		this.addChild(levBack);
		motion_Actuate.tween(levBack,0.14,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).delay(0.21);
		var newlev = new com_redpeakgames_cloud9_ui_NumberBitmap("font/font_level_big.png",300,52,74,10,1,0,0);
		newlev.textAlign = 0;
		newlev.set_scaleX(3.5);
		newlev.set_scaleY(3.5);
		newlev.set_alpha(0);
		newlev.set_x(-239);
		newlev.set_y(156);
		newlev.commaWidth = 0;
		newlev.set_value(new haxe__$Int64__$_$_$Int64(inLev >> 31,inLev));
		this.addChild(newlev);
		motion_Actuate.tween(newlev,0.28,{ alpha : 1, x : 136, y : 248, scaleX : 1, scaleY : 1}).ease(motion_easing_Back.get_easeOut()).delay(0.49);
		motion_Actuate.tween(newlev,0.3,{ alpha : 0, y : 400},false).ease(motion_easing_Back.get_easeIn()).delay(1.7);
		if(com_redpeakgames_cloud9_Global.mute == false) {
			motion_Actuate.timer(1.7).onComplete(function() {
				seChange.play(0);
			});
		}
		var close = new com_redpeakgames_cloud9_ui_ImageButton("img/lvup/x_green",null,null,"lvup");
		close.set_x(526);
		close.set_y(40);
		close.set_onClick($bind(this,this.onClickClose));
		close.set_alpha(0);
		close.set_work(false);
		this.addChild(close);
		motion_Actuate.tween(close,0.21,{ alpha : 1}).ease(motion_easing_Quad.get_easeOut()).delay(2.0).onComplete(function() {
			close.set_work(true);
		});
		var share = new com_redpeakgames_cloud9_ui_ImageButton("img/lvup/bt_share",null,null,"lvup");
		share.set_x(173);
		share.set_y(384);
		share.set_onClick($bind(this,this.onClickShare));
		share.set_alpha(0);
		share.set_work(false);
		this.addChild(share);
		motion_Actuate.tween(share,0.21,{ alpha : 1}).ease(motion_easing_Quad.get_easeOut()).delay(2.0).onComplete(function() {
			share.set_work(true);
		});
		var reward = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lvup/txt_reward.png"));
		reward.set_x(167);
		reward.set_y(578);
		reward.set_alpha(0);
		this.addChild(reward);
		motion_Actuate.tween(reward,0.21,{ alpha : 1, y : 257}).ease(motion_easing_Linear.get_easeNone()).delay(2.0);
		var txReward = new com_redpeakgames_cloud9_ui_NumberBitmap("font/font_levelup_small.png",99,14,19,13,1,0,3);
		txReward.set_x(289);
		txReward.set_y(578);
		txReward.set_alpha(0);
		txReward.textAlign = 4;
		txReward.set_value(new haxe__$Int64__$_$_$Int64(inCoin >> 31,inCoin));
		this.addChild(txReward);
		motion_Actuate.tween(txReward,0.21,{ alpha : 1, y : 260}).ease(motion_easing_Linear.get_easeNone()).delay(2.0);
		var rp = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/lvup/txt_vip.png"));
		rp.set_x(167);
		rp.set_y(578);
		rp.set_alpha(0);
		this.addChild(rp);
		motion_Actuate.tween(rp,0.21,{ alpha : 1, y : 289}).ease(motion_easing_Linear.get_easeNone()).delay(2.0);
		var txRp = new com_redpeakgames_cloud9_ui_NumberBitmap("font/font_levelup_small.png",99,14,19,13,1,0,3);
		txRp.set_x(289);
		txRp.set_y(578);
		txRp.textAlign = 4;
		txRp.set_alpha(0);
		txRp.set_value(new haxe__$Int64__$_$_$Int64(inRp >> 31,inRp));
		this.addChild(txRp);
		motion_Actuate.tween(txRp,0.21,{ alpha : 1, y : 292}).ease(motion_easing_Linear.get_easeNone()).delay(2.0);
		this.timer = haxe_Timer.delay(function() {
			_gthis.onClickClose(null);
		},5210);
	}
	,onClickClose: function(e) {
		this.timer.stop();
		this.dispatchEvent(new openfl_events_DataEvent("ge.open.newslot",true));
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,onClickShare: function(e) {
		if(!this.sharePosted) {
			this.dispatchEvent(new openfl_events_DataEvent("ge.post.share",true,false,JSON.stringify({ type : "lev", p1 : "udt.name", p2 : this.lev})));
		}
		this.sharePosted = true;
		this.onClickClose(null);
	}
	,__class__: com_redpeakgames_cloud9_dialog_Levelup
});
var com_redpeakgames_cloud9_dialog_LikeUs = function(udt) {
	openfl_display_Sprite.call(this);
	this.set_x(597);
	this.set_y(openfl_Lib.current.stage.get_displayState() == 2?56:125);
	this.udt = udt;
	this.likeLight = [];
	this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/likeus/bg.png")));
	this.btnClose = this.makeImageButton("likeus/btn_x",607,107);
	this.btnClose.set_onClick($bind(this,this.onClickClose));
	this.addChild(this.btnClose);
	this.btnGotoFanPage = this.makeImageButton("likeus/btn_go",264,460);
	this.btnGotoFanPage.set_onClick($bind(this,this.onClickFanPage));
	this.addChild(this.btnGotoFanPage);
	this.btnAlreadyLike = this.makeImageCheck("likeus/v_check",133,490);
	this.btnAlreadyLike.set_checked(false);
	this.btnAlreadyLike.set_onClick($bind(this,this.onClickAlreadyLike));
	this.addChild(this.btnAlreadyLike);
	this.likeLight[0] = this.makeBitmap("likeus/light_01.png",52,22);
	this.addChild(this.likeLight[0]);
	this.likeLight[1] = this.makeBitmap("likeus/light_02.png",52,22);
	this.addChild(this.likeLight[1]);
	this.addEventListener("enterFrame",$bind(this,this.onLoop));
};
$hxClasses["com.redpeakgames.cloud9.dialog.LikeUs"] = com_redpeakgames_cloud9_dialog_LikeUs;
com_redpeakgames_cloud9_dialog_LikeUs.__name__ = ["com","redpeakgames","cloud9","dialog","LikeUs"];
com_redpeakgames_cloud9_dialog_LikeUs.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_LikeUs.prototype = $extend(openfl_display_Sprite.prototype,{
	udt: null
	,btnClose: null
	,btnGotoFanPage: null
	,btnAlreadyLike: null
	,likeLight: null
	,lastTick: null
	,onLoop: function(e) {
		var _gthis = this;
		var cur = openfl_Lib.getTimer();
		var bi = (cur / 300 | 0) % 2;
		if(bi != (this.lastTick / 300 | 0) % 2) {
			var cur1 = 0;
			var prev = 1;
			if(bi == 1) {
				cur1 = 1;
				prev = 0;
			}
			if(this.likeLight.length > 1) {
				this.likeLight[cur1].set_alpha(0);
				this.likeLight[cur1].set_visible(true);
				motion_Actuate.tween(this.likeLight[cur1],0.2,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
				motion_Actuate.tween(this.likeLight[prev],0.2,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
					_gthis.likeLight[prev].set_visible(false);
				});
			}
		}
		this.lastTick = cur;
	}
	,onClickClose: function(e) {
		var _gthis = this;
		this.btnClose.set_work(false);
		this.btnGotoFanPage.set_work(false);
		this.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
		motion_Actuate.tween(this,0.2,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			if(_gthis.parent != null) {
				_gthis.parent.removeChild(_gthis);
			}
			_gthis.removeEventListener("enterFrame",$bind(_gthis,_gthis.onLoop));
		});
	}
	,onClickFanPage: function(e) {
		openfl_Lib.getURL(new openfl_net_URLRequest("https://www.facebook.com/hitthefive/"),"_blank");
		this.onClickClose(null);
	}
	,onClickAlreadyLike: function(e) {
		var checkIndex = this.btnAlreadyLike.get_checked()?1:0;
		var http = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "option2.php");
		var data = new openfl_net_URLVariables();
		data.uid = this.udt.uid;
		data.sig = this.udt.sig;
		data.what = "like";
		data.data = checkIndex;
		http.request(data);
	}
	,makeBitmap: function(path,ox,oy) {
		var image = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/" + path));
		image.set_x(ox);
		image.set_y(oy);
		return image;
	}
	,makeImageButton: function(path,ox,oy) {
		var btnImage = new com_redpeakgames_cloud9_ui_ImageButton("img/" + path,null,null,"mouse_click");
		btnImage.set(ox,oy);
		return btnImage;
	}
	,makeImageCheck: function(path,ox,oy) {
		var checkImage = new com_redpeakgames_cloud9_ui_ImageCheck("img/" + path);
		checkImage.set_x(ox);
		checkImage.set_y(oy);
		return checkImage;
	}
	,__class__: com_redpeakgames_cloud9_dialog_LikeUs
});
var com_redpeakgames_cloud9_game_Game = function() {
	openfl_display_Sprite.call(this);
	this.ses = new haxe_ds_StringMap();
	this.seTimers = new haxe_ds_StringMap();
	this.gs = com_redpeakgames_cloud9_game_GameState.Base;
	this.data = new com_redpeakgames_cloud9_game_SlotData();
	this.reels = [];
	this.curStops = [];
	this.udt = new com_redpeakgames_cloud9_game_UserData();
	this.gf = new openfl_filters_GlowFilter(16693031,1,12,12,2);
	this.set_enableToKeyboardSpin(true);
	this.shopOpend = false;
	this.spinCount = 0;
	this.isDoubleUp = false;
	this.paused = false;
	this.spinState = com_redpeakgames_cloud9_game_SpinState.Ready;
	this.addEventListener("ge.bigwin.end",$bind(this,this.bigwinEnd));
	this.addEventListener("ge.close.paytable",$bind(this,this.onClosePaytable));
	this.addEventListener("ge.status.change",$bind(this,this.onStatusChange));
	this.addEventListener("ge.choose.autonum",$bind(this,this.onChooseAutonum));
	this.addEventListener("addedToStage",$bind(this,this.onAdded));
};
$hxClasses["com.redpeakgames.cloud9.game.Game"] = com_redpeakgames_cloud9_game_Game;
com_redpeakgames_cloud9_game_Game.__name__ = ["com","redpeakgames","cloud9","game","Game"];
com_redpeakgames_cloud9_game_Game.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_game_Game.prototype = $extend(openfl_display_Sprite.prototype,{
	outer: null
	,inner: null
	,roller: null
	,ui: null
	,seTopLayer: null
	,seBottomLayer: null
	,fseTLayer: null
	,fseBLayer: null
	,btnSpin: null
	,btnPlusBet: null
	,btnMinusBet: null
	,btnAuto: null
	,btnOption: null
	,btnPaytable: null
	,autoBg: null
	,btnAutoStop: null
	,prize: null
	,balance: null
	,stake: null
	,betUnit: null
	,betLines: null
	,fsCounter: null
	,autoCounter: null
	,miniCounter: null
	,autoCounterBG: null
	,payTable: null
	,autoPopup: null
	,data: null
	,reels: null
	,net: null
	,setBetUnit: null
	,stripName: null
	,lastTick: null
	,spinCount: null
	,elapsed: null
	,gs: null
	,idle: null
	,correction: null
	,timing: null
	,curStops: null
	,nearWin: null
	,forceStop: null
	,paused: null
	,autoCnt: null
	,spinDisableTimer: null
	,betting: null
	,isBettingTableChanged: null
	,betlines: null
	,udt: null
	,plineOffsets: null
	,gf: null
	,spinState: null
	,delays: null
	,currentLevel: null
	,prevLevel: null
	,bankrupt: null
	,tournamentInited: null
	,isTournamentDataDispatched: null
	,shopOpend: null
	,isVoucher: null
	,isReward: null
	,isAliveDoubleUpButton: null
	,slotType: null
	,isDoubleUp: null
	,ses: null
	,seTimers: null
	,changeBetting: null
	,enableToKeyboardSpin: null
	,onDisableSpin: function(e) {
		var _gthis = this;
		if(this.spinDisableTimer != null) {
			this.spinDisableTimer.stop();
		}
		var disableTime = 0;
		if(e.data != "") {
			disableTime = Std.parseInt(e.data);
		}
		this.btnSpin.set_work(false);
		if(disableTime != 0) {
			this.spinDisableTimer = haxe_Timer.delay(function() {
				_gthis.btnSpin.set_work(true);
			},disableTime);
		}
	}
	,onAdded: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.onAdded));
		this.dispatchEvent(new openfl_events_DataEvent("ge.loaded.slot",true,false));
		this.dispatchEvent(new openfl_events_DataEvent("ge.open.empty.tournament",true));
	}
	,onChooseAutonum: function(e) {
		if(this.isDoubleUp) {
			return;
		}
		this.set_changeBetting(false);
		if(e == null) {
			this.autoCnt = -1;
			this.changeSpinButton(false);
		} else {
			var job = JSON.parse(e.data);
			this.autoCnt = job.num;
			this.changeSpinButton(false);
			this.btnAuto.set_interactive(false);
			if(this.autoCounter != null && this.autoCnt >= 0) {
				var x = this.autoCnt;
				this.autoCounter.set_value(new haxe__$Int64__$_$_$Int64(x >> 31,x));
			}
			this.enableAutoPopup(false);
		}
		if(this.elapsed == 0 || this.idle > 30) {
			this.onClickSpin();
		}
	}
	,onStatusChange: function(e) {
		var status = JSON.parse(e.data);
		this.statusChange(status.lev);
	}
	,statusChange: function(lev) {
		this.prevLevel = this.currentLevel;
		this.currentLevel = lev;
	}
	,resize: function(width_a) {
		if(width_a > 760) {
			this.outer.set_x(-((1920 - width_a) / 2));
		} else {
			this.outer.set_x(-580.);
		}
	}
	,start: function(completionHandler,errorHandler) {
		this.data.load(openfl_Assets.getText("data/slot.json"));
		this.nearWin = new com_redpeakgames_cloud9_game_NearWin(this.data.sc,this.data.cols);
		this.setBetUnit = new com_redpeakgames_cloud9_game_SetBetUnit(this.udt,this.data.id);
		this.setBetUnit.addEventListener("ge.disable.spin",$bind(this,this.onDisableSpin));
		var _g1 = 0;
		var _g = this.data.cols;
		while(_g1 < _g) {
			++_g1;
			this.curStops.push(-1);
		}
		this.timing = this.makeIdleTiming();
		this.betting = new com_redpeakgames_cloud9_game_Betting(this.makeBettingTable(),1);
		this.net = new com_redpeakgames_cloud9_utils_Net(completionHandler,errorHandler);
		this.currentLevel = this.udt.lev;
		this.prevLevel = this.udt.lev;
		this.placeUI();
		openfl_Lib.current.stage.addEventListener("keyDown",$bind(this,this.onKeydown));
		this.addEventListener("removedFromStage",$bind(this,this.onRemoved));
		openfl_Lib.current.stage.addEventListener("fullScreen",$bind(this,this.onFullscreen));
	}
	,onRemoved: function(e) {
		if(this.setBetUnit != null) {
			this.setBetUnit.removeEventListener("ge.disable.spin",$bind(this,this.onDisableSpin));
		}
		openfl_Lib.current.stage.removeEventListener("keyDown",$bind(this,this.onKeydown));
		this.removeEventListener("removedFromStage",$bind(this,this.onRemoved));
		this.removeEventListener("enterFrame",$bind(this,this.idleLoop));
		this.removeEventListener("enterFrame",$bind(this,this.gameLoop));
		openfl_Lib.current.stage.removeEventListener("fullScreen",$bind(this,this.onFullscreen));
		this.removeEventListener("ge.bigwin.end",$bind(this,this.bigwinEnd));
		this.removeEventListener("ge.close.paytable",$bind(this,this.onClosePaytable));
		this.removeEventListener("ge.status.change",$bind(this,this.onStatusChange));
		this.removeEventListener("ge.choose.autonum",$bind(this,this.onChooseAutonum));
		this.stopAllSound();
		this.clearResources();
	}
	,stopAllSound: function() {
		var _this = this.seTimers;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var t = tmp.next();
			if(t != null) {
				t.stop();
			}
		}
		var _this1 = this.ses;
		var tmp1 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
		while(tmp1.hasNext()) {
			var s = tmp1.next();
			if(s != null) {
				s.stop();
			}
		}
	}
	,placeUI: function() {
		this.outer = this.data.getOuter();
		this.outer.set_name("outer");
		this.addChild(this.outer);
		this.postSetupOuter();
		this.inner = new openfl_display_Sprite();
		this.inner.set_name("inner");
		this.outer.addChild(this.inner);
		this.data.setInnerBottom(this.inner);
		this.roller = new com_redpeakgames_cloud9_game_Roller();
		this.roller.set_name("roller");
		this.inner.addChild(this.roller);
		this.roller.set_scrollRect(new openfl_geom_Rectangle(0,0,this.data.matrix[this.data.matrix.length - 1].x + this.data.profile.width,this.getWindowHeight(this.data.matrix,this.data.profile.height,this.data.profile.oy)));
		this.roller.set_x(this.data.profile.initx);
		this.roller.set_y(this.data.profile.inity);
		var _g1 = 0;
		var _g = this.data.cols;
		while(_g1 < _g) {
			var i = _g1++;
			var reel = new com_redpeakgames_cloud9_game_Reel(this.data.matrix[i].x,this.data.matrix[i].y,this.data.profile.height + this.data.profile.oy,this.data.matrix[i].row,this.data.symbols,this.data.spin);
			reel.set_name("reel." + i);
			reel.set_rIndex(i);
			var _this = this.data.strips;
			reel.setStrip((__map_reserved.start != null?_this.getReserved("start"):_this.h["start"])[i],2);
			this.reels.push(reel);
			this.roller.addChild(reel);
		}
		this.seBottomLayer = new openfl_display_Sprite();
		this.seBottomLayer.set_name("seBottomLayer");
		this.roller.addChild(this.seBottomLayer);
		this.seTopLayer = new openfl_display_Sprite();
		this.seTopLayer.set_name("seTopLayer");
		this.roller.addChild(this.seTopLayer);
		var http = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "selectslot.php",$bind(this,this.onLoadStrip),$bind(this,this.onLoadFail));
		var post = new openfl_net_URLVariables();
		post.uid = this.udt.uid;
		post.sid = this.data.id;
		post.sig = this.udt.sig;
		http.request(post);
		this.data.setInnerTop(this.inner);
		this.ui = new openfl_display_Sprite();
		this.ui.set_name("ui");
		this.outer.addChild(this.ui);
		this.postSetupUI();
		this.betlines = this.data.betlines;
		this.btnMinusBet = this.data.makeMinusBet();
		if(this.btnMinusBet != null) {
			this.btnMinusBet.set_onClick($bind(this,this.onMinusBet));
			this.ui.addChild(this.btnMinusBet);
		}
		this.btnPlusBet = this.data.makePlusBet();
		if(this.btnPlusBet != null) {
			this.btnPlusBet.set_onClick($bind(this,this.onPlusBet));
			this.ui.addChild(this.btnPlusBet);
		}
		this.btnAuto = this.data.makeAuto();
		if(this.btnAuto != null) {
			this.btnAuto.set_name("btnAuto");
			this.btnAuto.set_onClick($bind(this,this.onClickAuto));
			this.ui.addChild(this.btnAuto);
		}
		this.autoCounterBG = this.data.makeAutoCounterBG();
		if(this.autoCounterBG != null) {
			this.autoCounterBG.set_visible(false);
			this.ui.addChild(this.autoCounterBG);
		}
		this.btnSpin = this.data.makeSpin();
		this.btnSpin.set_onClick($bind(this,this.onClickSpin));
		this.ui.addChild(this.btnSpin);
		this.btnAutoStop = this.data.makeAutoStop();
		if(this.btnAutoStop != null) {
			this.btnAutoStop.set_onClick($bind(this,this.onClickAutoStop));
			this.btnAutoStop.set_visible(false);
			this.btnAutoStop.set_work(false);
			this.ui.addChild(this.btnAutoStop);
		}
		this.autoCounter = this.data.makeAutoCounter(0);
		if(this.autoCounter != null) {
			var x = this.autoCnt;
			this.autoCounter.set_value(new haxe__$Int64__$_$_$Int64(x >> 31,x));
			this.autoCounter.set_visible(false);
			this.ui.addChild(this.autoCounter);
		}
		this.btnOption = this.data.makeOption();
		if(this.btnOption != null) {
			this.ui.addChild(this.btnOption);
		}
		this.btnPaytable = this.data.makePaytable();
		if(this.btnPaytable != null) {
			this.btnPaytable.set_onClick($bind(this,this.onShowPaytable));
			this.ui.addChild(this.btnPaytable);
		}
		this.inner.set_x((this.outer.get_width() - this.inner.get_width()) / 2);
		this.ui.set_x(this.inner.get_x());
		haxe_Log.trace("inner's x: " + this.inner.get_x(),{ fileName : "Game.hx", lineNumber : 467, className : "com.redpeakgames.cloud9.game.Game", methodName : "placeUI"});
		this.fseBLayer = new openfl_display_Sprite();
		this.fseBLayer.set_name("fseBLayer");
		this.inner.addChild(this.fseBLayer);
		this.fseTLayer = new openfl_display_Sprite();
		this.fseTLayer.set_name("fseTLayer");
		this.inner.addChild(this.fseTLayer);
	}
	,onClickAuto: function(e) {
		if(this.gs != com_redpeakgames_cloud9_game_GameState.Base) {
			this.btnAuto.set_interactive(false);
			return;
		}
		if(this.data.isAutoPopup()) {
			if(this.autoPopup == null) {
				this.enableAutoPopup(true);
			} else {
				this.enableAutoPopup(false);
			}
		} else {
			this.onChooseAutonum();
		}
	}
	,onClickAutoStop: function(e) {
		this.autoCnt = 0;
		this.changeSpinButton(true);
		if(this.gs == com_redpeakgames_cloud9_game_GameState.Base) {
			this.btnAuto.set_interactive(true);
		} else {
			this.btnAuto.set_interactive(false);
		}
		this.btnAuto.set_checked(false);
	}
	,onLoadStrip: function(e) {
		var slot = this.data.setStrip(e.target.data);
		if(slot.version == null) {
			this.onIoError(null);
		} else {
			this.data.version = slot.version;
			this.reelChange("base");
			this.udt.state = JSON.stringify({ type : slot.type, bonus_count : slot.bonus_count, p1 : slot.p1, p2 : slot.p2, bet : slot.bet, first : slot.first});
			this.betting = new com_redpeakgames_cloud9_game_Betting(slot.bets,1);
			this.onLoadStripComplete();
		}
	}
	,onLoadStripComplete: function() {
		var state = JSON.parse(this.udt.state);
		haxe_Log.trace(this.udt.state,{ fileName : "Game.hx", lineNumber : 542, className : "com.redpeakgames.cloud9.game.Game", methodName : "onLoadStripComplete"});
		this.betting.set_value(state.bet);
		var x = this.betting.get_value();
		this.betUnit.set_value(new haxe__$Int64__$_$_$Int64(x >> 31,x));
		var x1 = this.betting.get_value() * this.betlines;
		this.stake.set_value(new haxe__$Int64__$_$_$Int64(x1 >> 31,x1));
		if(this.betting.get_index() == this.betting.get_bettingTable().length - 1) {
			this.btnPlusBet.setEnableImgOnly(false);
		}
		this.dispatchEvent(new openfl_events_DataEvent("ge.bet.changed",true,false,state.bet == null?"null":"" + state.bet));
		if(state.type != "base") {
			this.set_changeBetting(false);
			this.idle = 26;
			this.elapsed = this.timing.sumTime(25);
			this.btnAuto.set_interactive(false);
			this.makeForceResponse();
			this.startIdleLoop();
		} else {
			this.udt.state = null;
		}
	}
	,makeForceResponse: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override makeForceResponse"));
	}
	,onShowPaytable: function(e) {
		if(this.payTable == null) {
			this.payTable = this.data.showPaytable();
			this.inner.addChild(this.payTable);
		} else {
			this.onClosePaytable(null);
		}
		if(this.autoPopup != null) {
			this.enableAutoPopup(false);
			this.btnAuto.set_checked(false);
		}
	}
	,onClosePaytable: function(e) {
		this.inner.removeChild(this.payTable);
		this.payTable = null;
	}
	,getWindowHeight: function(matrix,h,oy) {
		var max = 0;
		var _g = 0;
		while(_g < matrix.length) {
			var mtrx = matrix[_g];
			++_g;
			if(mtrx.row > max) {
				max = mtrx.row;
			}
		}
		return max * h + (max - 1) * oy;
	}
	,preSpin: function() {
		var _gthis = this;
		if(this.isDoubleUp) {
			return false;
		}
		this.isVoucher = false;
		this.isReward = false;
		this.isAliveDoubleUpButton = false;
		this.isBettingTableChanged = false;
		this.isTournamentDataDispatched = false;
		var tmp;
		var x = this.betlines * 2;
		var a = new haxe__$Int64__$_$_$Int64(x >> 31,x);
		var b = this.balance.get_value();
		var v = a.high - b.high | 0;
		if(v != 0) {
			v = v;
		} else {
			v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
		}
		if((a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) > 0) {
			tmp = this.gs == com_redpeakgames_cloud9_game_GameState.Base;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.dispatchEvent(new openfl_events_DataEvent("get.open.purchage",true));
			this.set_changeBetting(true);
			return false;
		}
		var tmp1;
		var a1 = this.betUnit.get_value();
		var x1 = this.betlines;
		var b1 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
		var al = a1.low & 65535;
		var ah = a1.low >>> 16;
		var bl = b1.low & 65535;
		var bh = b1.low >>> 16;
		var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
		var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
		var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
		var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
		var low = p00;
		var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
		p01 = p01 << 16;
		low = p00 + p01 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
			++high;
			high = high | 0;
		}
		p10 = p10 << 16;
		low = low + p10 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
			++high;
			high = high | 0;
		}
		high = high + (haxe__$Int32_Int32_$Impl_$.mul(a1.low,b1.high) + haxe__$Int32_Int32_$Impl_$.mul(a1.high,b1.low) | 0) | 0;
		var a2 = new haxe__$Int64__$_$_$Int64(high,low);
		var b2 = this.balance.get_value();
		var v1 = a2.high - b2.high | 0;
		if(v1 != 0) {
			v1 = v1;
		} else {
			v1 = haxe__$Int32_Int32_$Impl_$.ucompare(a2.low,b2.low);
		}
		if((a2.high < 0?b2.high < 0?v1:-1:b2.high >= 0?v1:1) > 0) {
			tmp1 = this.gs == com_redpeakgames_cloud9_game_GameState.Base;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			this.onClickAutoStop();
			this.dispatchEvent(new openfl_events_DataEvent("ge.open.adjustbet",true));
			this.set_changeBetting(true);
			haxe_Log.trace("prespin - dispatchEvent OpenAdjustBet, changeBetting true",{ fileName : "Game.hx", lineNumber : 648, className : "com.redpeakgames.cloud9.game.Game", methodName : "preSpin"});
			return false;
		}
		this.enableSpinButton(false);
		var tmp2;
		var a3 = this.balance.get_value();
		var a4 = this.betUnit.get_value();
		var x2 = this.betlines;
		var b3 = new haxe__$Int64__$_$_$Int64(x2 >> 31,x2);
		var al1 = a4.low & 65535;
		var ah1 = a4.low >>> 16;
		var bl1 = b3.low & 65535;
		var bh1 = b3.low >>> 16;
		var p001 = haxe__$Int32_Int32_$Impl_$.mul(al1,bl1);
		var p101 = haxe__$Int32_Int32_$Impl_$.mul(ah1,bl1);
		var p011 = haxe__$Int32_Int32_$Impl_$.mul(al1,bh1);
		var p111 = haxe__$Int32_Int32_$Impl_$.mul(ah1,bh1);
		var low1 = p001;
		var high1 = (p111 + (p011 >>> 16) | 0) + (p101 >>> 16) | 0;
		p011 = p011 << 16;
		low1 = p001 + p011 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,p011) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		p101 = p101 << 16;
		low1 = low1 + p101 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,p101) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		high1 = high1 + (haxe__$Int32_Int32_$Impl_$.mul(a4.low,b3.high) + haxe__$Int32_Int32_$Impl_$.mul(a4.high,b3.low) | 0) | 0;
		var b4 = new haxe__$Int64__$_$_$Int64(high1,low1);
		var v2 = a3.high - b4.high | 0;
		if(v2 != 0) {
			v2 = v2;
		} else {
			v2 = haxe__$Int32_Int32_$Impl_$.ucompare(a3.low,b4.low);
		}
		if((a3.high < 0?b4.high < 0?v2:-1:b4.high >= 0?v2:1) < 0) {
			tmp2 = this.gs != com_redpeakgames_cloud9_game_GameState.Base;
		} else {
			tmp2 = true;
		}
		if(tmp2) {
			this.stopIdleLoop();
			this.set_changeBetting(false);
			this.idle = 0;
			this.elapsed = 0;
			this.forceStop = false;
			this.nearWin.reset();
			this.dispatchEvent(new openfl_events_DataEvent("ge.close.doubleup",true,false,JSON.stringify({ prize : 0, coin : this.udt.coin, type : "tag"})));
			if(this.gs == com_redpeakgames_cloud9_game_GameState.Base) {
				this.clearFX();
				this.balance.add(this.betUnit.get_valueInt() * this.betlines * -1);
				this.dispatchEvent(new openfl_events_DataEvent("ge.balance.changed",true,false,JSON.stringify({ coin : haxe__$Int64_Int64_$Impl_$.toString(this.balance.get_value()), dia : this.udt.dia})));
				haxe_Timer.delay(function() {
					if(!_gthis.forceStop) {
						_gthis.prize.set_value(new haxe__$Int64__$_$_$Int64(0,0));
					}
				},600);
				this.btnAuto.set_interactive(true);
				if(this.autoCnt > 0) {
					this.autoCnt -= 1;
					if(this.autoCnt < 0) {
						this.autoCnt = 0;
					}
				}
			}
			if(this.gs == com_redpeakgames_cloud9_game_GameState.Freespin) {
				if(this.fsCounter != null) {
					var count = this.fsCounter.get_value();
					var b5 = new haxe__$Int64__$_$_$Int64(0,1);
					var high2 = count.high - b5.high | 0;
					var low2 = count.low - b5.low | 0;
					if(haxe__$Int32_Int32_$Impl_$.ucompare(count.low,b5.low) < 0) {
						--high2;
						high2 = high2 | 0;
					}
					this.fsCounter.set_value(new haxe__$Int64__$_$_$Int64(high2,low2));
				}
			}
			this.spinState = com_redpeakgames_cloud9_game_SpinState.Started;
			if(this.autoCnt <= 0 && this.autoCnt != -1) {
				if(this.btnAutoStop != null && this.btnAutoStop.get_visible() == true) {
					this.changeSpinButton(true);
				}
				this.btnAuto.set_checked(false);
			}
			if(this.autoCounter != null && this.autoCnt >= 0) {
				var x3 = this.autoCnt;
				this.autoCounter.draw(new haxe__$Int64__$_$_$Int64(x3 >> 31,x3));
			}
			++this.spinCount;
			return true;
		} else {
			++this.spinCount;
			return true;
		}
	}
	,clearFX: function() {
		if(this.delays != null) {
			while(this.delays.length != 0) {
				var delay = this.delays.pop();
				delay.stop();
				delay = null;
			}
			this.delays = null;
		}
		this.seBottomLayer.removeChildren();
		this.seTopLayer.removeChildren();
		var obj = this.fseTLayer.getChildByName("minicounter");
		if(obj != null) {
			this.fseTLayer.removeChild(obj);
		}
		if(this.miniCounter != null) {
			motion_Actuate.stop(this.miniCounter);
		}
	}
	,enableSpinButton: function(value) {
		if(value == null) {
			value = true;
		}
		this.btnSpin.set_work(value);
		this.btnSpin.set_enable(value);
	}
	,enableAutoPopup: function(value) {
		if(value == null) {
			value = true;
		}
		if(value) {
			if(this.autoPopup == null) {
				this.autoPopup = this.data.showAutoPopup(0);
				if(this.autoPopup != null) {
					this.autoPopup.set_name("autoPopup");
					this.ui.addChild(this.autoPopup);
				}
			}
		} else if(this.autoPopup != null) {
			this.ui.removeChild(this.autoPopup);
			this.autoPopup = null;
		}
	}
	,gameLoop: function(e) {
		var cur = openfl_Lib.getTimer();
		var delta = cur - this.lastTick;
		var stopCount = 0;
		this.elapsed += delta;
		if(this.elapsed >= 9500 && this.reels[0].get_stop() == -1) {
			this.onIoError(null);
		}
		var _g1 = 0;
		var _g = this.data.cols;
		while(_g1 < _g) {
			var i = _g1++;
			var stop = this.reels[i].update(delta);
			stopCount += stop;
			if(stop == 1 && this.nearWin.isFirst(i)) {
				this.reelStopped(i);
			}
		}
		if(stopCount == this.data.cols) {
			this.elapsed = 0;
			this.onStop();
		}
		this.gameLoopSub(delta);
		this.lastTick = cur;
	}
	,onStopResponse: function(bankrupt) {
		this.bankrupt = bankrupt;
		this.enableSpinButton();
		this.spinState = com_redpeakgames_cloud9_game_SpinState.Response;
	}
	,reelStopped: function(index) {
		this.nearWin.reelStopped(this.reels,index);
	}
	,onStop: function() {
		this.stopGameLoop();
		if(this.isBettingTableChanged) {
			this.showTooltipBettingTableChanged();
			this.btnPlusBet.setEnableImgOnly(true);
		}
		this.startIdleLoop();
		this.spinState = com_redpeakgames_cloud9_game_SpinState.Stopped;
	}
	,onCloseLevelup: function() {
		var _this = this.ses;
		if((__map_reserved.bg00 != null?_this.getReserved("bg00"):_this.h["bg00"]) != null) {
			var _this1 = this.ses;
			(__map_reserved.bg00 != null?_this1.getReserved("bg00"):_this1.h["bg00"]).resume();
		}
		if(this.isVoucher) {
			return;
		}
		this.resumeGameFromOnStop();
	}
	,onCloseVoucher: function() {
		this.isVoucher = false;
		this.resumeGameFromOnStop();
	}
	,resumeGameFromOnStop: function() {
		if(this.isBettingTableChanged) {
			this.showTooltipBettingTableChanged();
			this.btnPlusBet.setEnableImgOnly(true);
		}
		this.idle = 0;
		this.elapsed = 0;
	}
	,showTooltipBettingTableChanged: function() {
		var _gthis = this;
		if(!openfl_Assets.exists("img/tip/tip_arrow.png","IMAGE")) {
			return;
		}
		if(!openfl_Assets.exists("font/OpenSans-Bold.ttf","FONT")) {
			return;
		}
		var tooltip = new com_redpeakgames_cloud9_ui_ToolTip(this.btnPlusBet.get_x() - (200 - this.btnPlusBet.get_width()) / 2,this.btnPlusBet.get_y() - this.btnPlusBet.get_height() - 20,200,1,false);
		var tf = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",16,16761830);
		tf.align = 0;
		tooltip.set_textFormat(tf);
		tooltip.set_text("<font color='#FFFF00'>PLACE A HIGHER BET!</font>");
		this.ui.addChild(tooltip);
		motion_Actuate.tween(tooltip,0.233,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).delay(5).onComplete(function() {
			_gthis.ui.removeChild(tooltip);
		});
	}
	,startGameLoop: function() {
		this.addEventListener("enterFrame",$bind(this,this.gameLoop));
	}
	,stopGameLoop: function() {
		this.removeEventListener("enterFrame",$bind(this,this.gameLoop));
	}
	,startIdleLoop: function() {
		this.addEventListener("enterFrame",$bind(this,this.idleLoop));
	}
	,stopIdleLoop: function() {
		this.removeEventListener("enterFrame",$bind(this,this.idleLoop));
	}
	,idleLoop: function(e) {
		var cur = openfl_Lib.getTimer();
		var delta = cur - this.lastTick;
		this.elapsed += delta;
		if(this.idle == 0) {
			this.enableSpinButton(false);
			if(this.winChangeSymbol()) {
				this.changeSymbol();
				++this.idle;
			} else {
				this.moveNextPhase(0);
			}
		}
		if(this.idle == 1 && this.elapsed >= this.timing.sumTime(0)) {
			if(this.bigWin()) {
				this.bigWinMovie();
				++this.idle;
			} else {
				this.moveNextPhase(1);
			}
		}
		if(this.idle == 2 && this.elapsed >= this.timing.sumTime(1)) {
			if(this.hasPostBigWin()) {
				this.postBigWin();
				++this.idle;
			} else {
				this.moveNextPhase(2);
			}
		}
		if(this.idle == 3 && this.elapsed >= this.timing.sumTime(2)) {
			if(this.hasWin()) {
				this.drawWinline();
				++this.idle;
			} else {
				this.moveNextPhase(3);
			}
			if(this.gs == com_redpeakgames_cloud9_game_GameState.Base) {
				this.prize.set_value(new haxe__$Int64__$_$_$Int64(0,0));
			}
			this.showPrize();
			this.skip();
		}
		if(this.idle == 4 && this.elapsed >= this.timing.sumTime(3)) {
			if(this.hasPostWin()) {
				this.drawPostWin();
				++this.idle;
				this.enableAutoPopup(false);
				if(this.btnAuto.get_checked() == false) {
					this.btnAuto.set_interactive(false);
				}
			} else {
				this.moveNextPhase(4);
			}
		}
		this.paylineMacro(0,$bind(this,this.readyToSpin));
		this.paylineMacro(1);
		this.paylineMacro(2);
		this.paylineMacro(3);
		this.paylineMacro(4);
		this.paylineMacro(5);
		this.paylineMacro(6);
		this.paylineMacro(7);
		this.paylineMacro(8);
		this.paylineMacro(9);
		this.paylineMacro(10);
		this.paylineMacro(11);
		this.paylineMacro(12);
		this.paylineMacro(13);
		this.paylineMacro(14);
		this.paylineMacro(15);
		this.paylineMacro(16);
		this.paylineMacro(17);
		this.paylineMacro(18);
		this.paylineMacro(19);
		if(this.idle == 25 && this.elapsed >= this.timing.sumTime(24)) {
			if(this.winExtraspin()) {
				this.showExtraspin();
				++this.idle;
			} else {
				this.moveNextPhase(25);
			}
		}
		if(this.idle == 26 && this.elapsed >= this.timing.sumTime(25)) {
			if(this.winFreespin() || this.winBonus()) {
				this.enableSpinButton(false);
				if(this.winFreespin()) {
					this.startFreespin();
				}
				if(this.winBonus()) {
					this.startBonus();
				}
				++this.idle;
			} else {
				this.moveNextPhase(26);
			}
		}
		if(this.idle == 27 && this.elapsed >= this.timing.sumTime(26)) {
			if(this.isFreespinEnd()) {
				this.showFreespinResult();
				++this.idle;
			} else {
				this.moveNextPhase(27);
			}
		}
		if(this.idle == 28 && this.elapsed >= this.timing.sumTime(27)) {
			if(this.hasPostEffect()) {
				this.showPostEffect();
				++this.idle;
			} else {
				this.moveNextPhase(28);
			}
		}
		if(this.idle == 29 && this.elapsed >= this.timing.sumTime(28)) {
			if(this.hasGrandTotal()) {
				this.showGrandTotal();
				++this.idle;
			} else {
				this.moveNextPhase(29);
			}
		}
		if(this.idle == 30 && this.elapsed >= this.timing.sumTime(29)) {
			if(this.needIdleWait()) {
				++this.idle;
			} else {
				this.moveNextPhase(30);
			}
		}
		if(this.idle == 31 && this.elapsed >= this.timing.sumTime(30)) {
			++this.idle;
			this.enableSpinButton(false);
			this.checkBettingTable();
			this.checkBalance();
			this.checkAutospin();
		}
		this.idleUpdate(delta);
		this.lastTick = cur;
	}
	,checkBalance: function() {
		if(this.data.id != 9999) {
			var a = this.betUnit.get_value();
			var x = this.betlines;
			var b = new haxe__$Int64__$_$_$Int64(x >> 31,x);
			var al = a.low & 65535;
			var ah = a.low >>> 16;
			var bl = b.low & 65535;
			var bh = b.low >>> 16;
			var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
			var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
			var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
			var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
			var low = p00;
			var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
			p01 = p01 << 16;
			low = p00 + p01 | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
				++high;
				high = high | 0;
			}
			p10 = p10 << 16;
			low = low + p10 | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
				++high;
				high = high | 0;
			}
			high = high + (haxe__$Int32_Int32_$Impl_$.mul(a.low,b.high) + haxe__$Int32_Int32_$Impl_$.mul(a.high,b.low) | 0) | 0;
			var _totalbet = new haxe__$Int64__$_$_$Int64(high,low);
			var tmp;
			var tmp1;
			var b1 = this.balance.get_value();
			var v = _totalbet.high - b1.high | 0;
			if(v != 0) {
				v = v;
			} else {
				v = haxe__$Int32_Int32_$Impl_$.ucompare(_totalbet.low,b1.low);
			}
			if((_totalbet.high < 0?b1.high < 0?v:-1:b1.high >= 0?v:1) > 0) {
				var a1 = new haxe__$Int64__$_$_$Int64(0,3000);
				var v1 = a1.high - _totalbet.high | 0;
				if(v1 != 0) {
					v1 = v1;
				} else {
					v1 = haxe__$Int32_Int32_$Impl_$.ucompare(a1.low,_totalbet.low);
				}
				tmp1 = (a1.high < 0?_totalbet.high < 0?v1:-1:_totalbet.high >= 0?v1:1) >= 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				tmp = this.gs == com_redpeakgames_cloud9_game_GameState.Base;
			} else {
				tmp = false;
			}
			if(tmp) {
				haxe_Log.trace("bankrupt",{ fileName : "Game.hx", lineNumber : 1173, className : "com.redpeakgames.cloud9.game.Game", methodName : "checkBalance"});
				this.dispatchEvent(new openfl_events_DataEvent("get.open.purchage",true,false,JSON.stringify({ type : 1, state : this.bankrupt})));
				this.onClickAutoStop();
				this.set_changeBetting(true);
			} else {
				var tmp2;
				var tmp3;
				var b2 = this.balance.get_value();
				var v2 = _totalbet.high - b2.high | 0;
				if(v2 != 0) {
					v2 = v2;
				} else {
					v2 = haxe__$Int32_Int32_$Impl_$.ucompare(_totalbet.low,b2.low);
				}
				if((_totalbet.high < 0?b2.high < 0?v2:-1:b2.high >= 0?v2:1) > 0) {
					var a2 = new haxe__$Int64__$_$_$Int64(0,3000);
					var v3 = a2.high - _totalbet.high | 0;
					if(v3 != 0) {
						v3 = v3;
					} else {
						v3 = haxe__$Int32_Int32_$Impl_$.ucompare(a2.low,_totalbet.low);
					}
					tmp3 = (a2.high < 0?_totalbet.high < 0?v3:-1:_totalbet.high >= 0?v3:1) < 0;
				} else {
					tmp3 = false;
				}
				if(tmp3) {
					tmp2 = this.gs == com_redpeakgames_cloud9_game_GameState.Base;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					haxe_Log.trace("bankrupt",{ fileName : "Game.hx", lineNumber : 1182, className : "com.redpeakgames.cloud9.game.Game", methodName : "checkBalance"});
					this.dispatchEvent(new openfl_events_DataEvent("get.open.purchage",true,false,JSON.stringify({ type : 2, state : this.bankrupt})));
					this.onClickAutoStop();
					this.set_changeBetting(true);
				}
			}
		}
	}
	,skip: function() {
		var _gthis = this;
		if(this.gs == com_redpeakgames_cloud9_game_GameState.Base && this.btnAuto.get_checked() == false && this.winFreespin() == false && this.winExtraspin() == false) {
			var tmr = haxe_Timer.delay(function() {
				_gthis.set_changeBetting(true);
				_gthis.readyToSpin();
			},300);
			if(this.delays != null) {
				this.delays.push(tmr);
			}
		}
	}
	,readyToSpin: function() {
		this.spinState = com_redpeakgames_cloud9_game_SpinState.Ready;
		if(this.gs == com_redpeakgames_cloud9_game_GameState.Base && !this.winFreespin()) {
			this.enableSpinButton();
		}
	}
	,paylineMacro: function(num,method) {
		if(this.idle == 5 + num && this.elapsed >= this.timing.sumTime(4 + num)) {
			if(this.hasPayline(num)) {
				this.showPayline(num);
				++this.idle;
			} else {
				this.moveNextPhase(5 + num);
			}
			if(method != null) {
				method();
			}
		}
	}
	,moveNextPhase: function(nextPhase) {
		++this.idle;
		this.elapsed += this.timing.time(nextPhase);
	}
	,reelChange: function(sn) {
		this.stripName = sn;
		haxe_Log.trace("reelChange: " + sn,{ fileName : "Game.hx", lineNumber : 1240, className : "com.redpeakgames.cloud9.game.Game", methodName : "reelChange"});
		var _g1 = 0;
		var _g = this.data.cols;
		while(_g1 < _g) {
			var i = _g1++;
			var _this = this.data.strips;
			var tmp = __map_reserved[sn] != null?_this.getReserved(sn):_this.h[sn];
			this.reels[i].shadowStripChange(tmp[i]);
		}
	}
	,reelReplace: function(sn) {
		this.stripName = sn;
		var _g1 = 0;
		var _g = this.data.cols;
		while(_g1 < _g) {
			var i = _g1++;
			var _this = this.data.strips;
			var tmp = __map_reserved[sn] != null?_this.getReserved(sn):_this.h[sn];
			this.reels[i].set_strip(tmp[i]);
		}
	}
	,dataStripsChange: function(json) {
		this.data.setStrip(JSON.stringify(json));
		this.reelChange(this.stripName);
	}
	,checkAutospin: function() {
		var _gthis = this;
		if(this.isDoubleUp) {
			return;
		}
		if(this.gs == com_redpeakgames_cloud9_game_GameState.Freespin || this.gs == com_redpeakgames_cloud9_game_GameState.Respin || this.btnAuto.get_checked() && this.autoPopup == null) {
			haxe_Timer.delay(function() {
				_gthis.sePlay("spin_c");
				_gthis.onClickSpin();
			},200);
		} else {
			haxe_Timer.delay(function() {
				_gthis.btnSpin.set_enable(true);
				_gthis.btnAuto.set_interactive(true);
			},300);
		}
		if(this.gs == com_redpeakgames_cloud9_game_GameState.Base) {
			if(this.btnAutoStop != null) {
				this.btnAutoStop.set_enable(true);
			}
			if(this.btnAuto.get_checked() == false) {
				this.set_changeBetting(true);
			}
		}
	}
	,drawPayline: function(winid,gf,cleanup,inTime) {
		if(inTime == null) {
			inTime = 1950;
		}
		if(cleanup == null) {
			cleanup = true;
		}
		var _gthis = this;
		var idx = this.data.paylines[winid].index;
		var canvas = new openfl_display_Shape();
		var g = canvas.get_graphics();
		g.lineStyle(3,16770729,1,false,1,1,2);
		var oy = this.plineOffsets == null?this.data.profile.height / 2 | 0:this.plineOffsets[winid];
		g.moveTo(this.data.matrix[0].x,this.data.matrix[0].y + (idx[0] * (this.data.profile.height + this.data.profile.oy) | 0) + oy);
		var count = this.data.matrix.length;
		var tx = 0;
		var ty = 0;
		var _g1 = 0;
		while(_g1 < count) {
			var i = _g1++;
			tx = this.data.matrix[i].x + (this.data.profile.width / 2 | 0);
			ty = this.data.matrix[i].y + (idx[i] * (this.data.profile.height + this.data.profile.oy) | 0) + oy;
			g.lineTo(tx,ty);
		}
		g.lineTo(tx + this.data.profile.width / 2,ty);
		if(gf != null) {
			canvas.set_filters([gf]);
		}
		canvas.set_name(cleanup?"payline":"paylinef");
		this.seBottomLayer.addChild(canvas);
		if(cleanup) {
			haxe_Timer.delay(function() {
				try {
					_gthis.seBottomLayer.getChildIndex(canvas);
					_gthis.seBottomLayer.removeChild(canvas);
				} catch( e ) {
					haxe_CallStack.lastException = e;
					if (e instanceof js__$Boot_HaxeError) e = e.val;
					if( js_Boot.__instanceof(e,openfl_errors_ArgumentError) ) {
						haxe_Log.trace(e.toString(),{ fileName : "Game.hx", lineNumber : 1343, className : "com.redpeakgames.cloud9.game.Game", methodName : "drawPayline"});
					} else throw(e);
				}
			},inTime);
		}
	}
	,overPayline: function(e) {
		this.drawPayline(Std.parseInt(e.target.get_name()),this.gf,false);
	}
	,outPayline: function(e) {
		var obj = this.seBottomLayer.getChildByName("paylinef");
		if(obj != null) {
			this.seBottomLayer.removeChild(obj);
		}
	}
	,set_changeBetting: function(value) {
		this.btnPlusBet.set_work(value);
		this.btnMinusBet.set_work(value);
		return value;
	}
	,set_enableToKeyboardSpin: function(value) {
		return this.enableToKeyboardSpin = value;
	}
	,onBetChanged: function(value) {
		if(this.gs != com_redpeakgames_cloud9_game_GameState.Base) {
			return;
		}
		if(this.autoPopup != null) {
			this.enableAutoPopup(false);
			this.btnAuto.set_checked(false);
		}
		this.setBetUnit.set_bet(value);
		this.dispatchEvent(new openfl_events_DataEvent("ge.bet.changed",true,false,value == null?"null":"" + value));
		if(this.betting.get_index() == this.betting.get_bettingTable().length - 1) {
			this.btnPlusBet.setEnableImgOnly(false);
		} else {
			this.btnPlusBet.setEnableImgOnly(true);
		}
		if(this.betting.get_index() == 0) {
			this.btnMinusBet.setEnableImgOnly(false);
		} else {
			this.btnMinusBet.setEnableImgOnly(true);
		}
	}
	,onKeydown: function(e) {
		if(e.keyCode == 32 && this.btnSpin.get_enable() && this.enableToKeyboardSpin) {
			this.onClickSpin();
		}
	}
	,onClickSpin: function(e) {
		if(this.paused) {
			return;
		}
		if(this.spinState == com_redpeakgames_cloud9_game_SpinState.Ready) {
			if(this.preSpin()) {
				this.sePlay("spin_c");
				this.net.set_GameId(this.data.id);
				this.net.set_Key(this.udt.sig);
				this.net.set_Uid(this.udt.uid);
				this.net.url = this.udt.url;
				this.net.set_Version(this.data.version);
				this.net.spin(this.betUnit.get_valueInt(),this.betlines);
				var _g1 = 0;
				var _g = this.data.cols;
				while(_g1 < _g) {
					var i = _g1++;
					this.reels[i].startSpin(this.data.spin.delay.begin[i],this.data.spin.delay.stop[i],false);
				}
				this.lastTick = openfl_Lib.getTimer();
				this.startGameLoop();
			}
		}
		if(this.spinState == com_redpeakgames_cloud9_game_SpinState.Response) {
			this.sePlay("spin_c");
			this.spinState = com_redpeakgames_cloud9_game_SpinState.Forced;
			this.forceStop = true;
			var _g11 = 0;
			var _g2 = this.data.cols;
			while(_g11 < _g2) this.reels[_g11++].forceStop();
		}
		if(this.data.isAutoPopup() && this.autoPopup != null) {
			this.btnAuto.set_checked(false);
			this.enableAutoPopup(false);
		}
	}
	,onLoadFail: function(e) {
		haxe_Log.trace("Fail to load reel strips",{ fileName : "Game.hx", lineNumber : 1467, className : "com.redpeakgames.cloud9.game.Game", methodName : "onLoadFail"});
	}
	,loadSharedObject: function() {
		var so = openfl_net_SharedObject.getLocal("cnc.redpeakgames","/");
		if(so != null && so.data != null) {
			this.udt.coin = haxe_Int64Helper.parseString(so.data.coin);
			this.udt.uid = so.data.uid;
			this.udt.sig = so.data.sig;
			this.udt.url = so.data.url;
			this.udt.dia = so.data.dia;
			this.udt.lev = so.data.lev;
			this.slotType = so.data.type;
			com_redpeakgames_cloud9_Global.mute = so.data.mute;
			haxe_Log.trace(this.udt.uid,{ fileName : "Game.hx", lineNumber : 1485, className : "com.redpeakgames.cloud9.game.Game", methodName : "loadSharedObject", customParams : [this.udt.sig,this.udt.url,haxe__$Int64_Int64_$Impl_$.toString(this.udt.coin),this.udt.dia,this.udt.lev]});
		} else {
			haxe_Log.trace("Shared objects are null",{ fileName : "Game.hx", lineNumber : 1489, className : "com.redpeakgames.cloud9.game.Game", methodName : "loadSharedObject"});
		}
	}
	,needIdleWait: function() {
		if(this.gs != com_redpeakgames_cloud9_game_GameState.Freespin) {
			return this.btnAuto.get_checked();
		} else {
			return true;
		}
	}
	,pause: function() {
		this.paused = true;
		var _g = 0;
		var _g1 = this.reels;
		while(_g < _g1.length) {
			var reel = _g1[_g];
			++_g;
			motion_Actuate.pause(reel);
		}
		this.stopIdleLoop();
		this.stopGameLoop();
	}
	,resume: function() {
		this.lastTick = openfl_Lib.getTimer();
		this.paused = false;
		var _g = 0;
		var _g1 = this.reels;
		while(_g < _g1.length) {
			var reel = _g1[_g];
			++_g;
			motion_Actuate.resume(reel);
		}
		if(this.spinState == com_redpeakgames_cloud9_game_SpinState.Stopped || this.spinState == com_redpeakgames_cloud9_game_SpinState.Ready) {
			this.startIdleLoop();
		} else {
			this.startGameLoop();
		}
	}
	,addBitmap: function(layer,x,y,path,name) {
		var tmp = new openfl_display_Bitmap(openfl_Assets.getBitmapData(path));
		tmp.set_x(x);
		tmp.set_y(y);
		if(name != null) {
			tmp.set_name(name);
		}
		layer.addChild(tmp);
	}
	,seLoad: function(sn,loop) {
		if(loop == null) {
			loop = 0;
		}
		var _this = this.ses;
		if((__map_reserved[sn] != null?_this.getReserved(sn):_this.h[sn]) == null) {
			var v = com_redpeakgames_cloud9_utils_CSound.get(sn,loop);
			var _this1 = this.ses;
			if(__map_reserved[sn] != null) {
				_this1.setReserved(sn,v);
			} else {
				_this1.h[sn] = v;
			}
		} else {
			var _this2 = this.ses;
			(__map_reserved[sn] != null?_this2.getReserved(sn):_this2.h[sn]).loop = loop;
		}
	}
	,sePlay: function(sn,loop,delay) {
		if(delay == null) {
			delay = 0;
		}
		if(loop == null) {
			loop = 0;
		}
		var _gthis = this;
		this.seLoad(sn,loop);
		var tmp;
		if(com_redpeakgames_cloud9_Global.mute == false) {
			var _this = this.ses;
			tmp = (__map_reserved[sn] != null?_this.getReserved(sn):_this.h[sn]) != null;
		} else {
			tmp = false;
		}
		if(tmp) {
			if(delay > 0) {
				var v = haxe_Timer.delay(function() {
					if(com_redpeakgames_cloud9_Global.mute == false) {
						var _this1 = _gthis.ses;
						(__map_reserved[sn] != null?_this1.getReserved(sn):_this1.h[sn]).play();
					}
				},delay);
				var _this2 = this.seTimers;
				if(__map_reserved[sn] != null) {
					_this2.setReserved(sn,v);
				} else {
					_this2.h[sn] = v;
				}
			} else {
				var _this3 = this.ses;
				(__map_reserved[sn] != null?_this3.getReserved(sn):_this3.h[sn]).play();
			}
		}
	}
	,seStop: function(sn) {
		var _this = this.ses;
		if((__map_reserved[sn] != null?_this.getReserved(sn):_this.h[sn]) != null) {
			var _this1 = this.ses;
			(__map_reserved[sn] != null?_this1.getReserved(sn):_this1.h[sn]).stop();
		}
	}
	,seToBonus: function() {
		var _this = this.ses;
		if((__map_reserved.bg00 != null?_this.getReserved("bg00"):_this.h["bg00"]) != null) {
			var _this1 = this.ses;
			(__map_reserved.bg00 != null?_this1.getReserved("bg00"):_this1.h["bg00"]).stop();
		}
		var v = com_redpeakgames_cloud9_utils_CSound.get("bnbg",99999);
		var _this2 = this.ses;
		if(__map_reserved.bg00 != null) {
			_this2.setReserved("bg00",v);
		} else {
			_this2.h["bg00"] = v;
		}
		var tmp;
		if(com_redpeakgames_cloud9_Global.mute == false && com_redpeakgames_cloud9_Global.muteBgm == false) {
			var _this3 = this.ses;
			tmp = (__map_reserved.bg00 != null?_this3.getReserved("bg00"):_this3.h["bg00"]) != null;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this4 = this.ses;
			(__map_reserved.bg00 != null?_this4.getReserved("bg00"):_this4.h["bg00"]).play(0);
		}
	}
	,seToFreespin: function() {
		var _this = this.ses;
		if((__map_reserved.bg00 != null?_this.getReserved("bg00"):_this.h["bg00"]) != null) {
			var _this1 = this.ses;
			(__map_reserved.bg00 != null?_this1.getReserved("bg00"):_this1.h["bg00"]).stop();
		}
		var v = com_redpeakgames_cloud9_utils_CSound.get("fsbg",99999);
		var _this2 = this.ses;
		if(__map_reserved.bg00 != null) {
			_this2.setReserved("bg00",v);
		} else {
			_this2.h["bg00"] = v;
		}
		var tmp;
		if(com_redpeakgames_cloud9_Global.mute == false && com_redpeakgames_cloud9_Global.muteBgm == false) {
			var _this3 = this.ses;
			tmp = (__map_reserved.bg00 != null?_this3.getReserved("bg00"):_this3.h["bg00"]) != null;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this4 = this.ses;
			(__map_reserved.bg00 != null?_this4.getReserved("bg00"):_this4.h["bg00"]).play(0);
		}
	}
	,seToBase: function() {
		var _this = this.ses;
		if((__map_reserved.bg00 != null?_this.getReserved("bg00"):_this.h["bg00"]) != null) {
			var _this1 = this.ses;
			(__map_reserved.bg00 != null?_this1.getReserved("bg00"):_this1.h["bg00"]).stop();
		}
		var v = com_redpeakgames_cloud9_utils_CSound.get("bg00",99999);
		var _this2 = this.ses;
		if(__map_reserved.bg00 != null) {
			_this2.setReserved("bg00",v);
		} else {
			_this2.h["bg00"] = v;
		}
		var tmp;
		if(com_redpeakgames_cloud9_Global.mute == false && com_redpeakgames_cloud9_Global.muteBgm == false) {
			var _this3 = this.ses;
			tmp = (__map_reserved.bg00 != null?_this3.getReserved("bg00"):_this3.h["bg00"]) != null;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this4 = this.ses;
			(__map_reserved.bg00 != null?_this4.getReserved("bg00"):_this4.h["bg00"]).play(0);
		}
	}
	,sePause: function(sn,fadeOut) {
		if(fadeOut == null) {
			fadeOut = 1.2;
		}
		var _this = this.ses;
		if((__map_reserved[sn] != null?_this.getReserved(sn):_this.h[sn]) != null) {
			var _this1 = this.ses;
			(__map_reserved[sn] != null?_this1.getReserved(sn):_this1.h[sn]).pause(fadeOut);
		}
	}
	,seResume: function(sn,fadeIn) {
		if(fadeIn == null) {
			fadeIn = 1.2;
		}
		var _this = this.ses;
		if((__map_reserved[sn] != null?_this.getReserved(sn):_this.h[sn]) != null) {
			var _this1 = this.ses;
			(__map_reserved[sn] != null?_this1.getReserved(sn):_this1.h[sn]).resume(fadeIn);
		}
	}
	,onMute: function(mute) {
		com_redpeakgames_cloud9_Global.mute = mute;
		if(com_redpeakgames_cloud9_Global.mute) {
			var _this = this.ses;
			if((__map_reserved.bg00 != null?_this.getReserved("bg00"):_this.h["bg00"]) != null) {
				var _this1 = this.ses;
				(__map_reserved.bg00 != null?_this1.getReserved("bg00"):_this1.h["bg00"]).stop();
			}
		} else {
			var _this2 = this.ses;
			if((__map_reserved.bg00 != null?_this2.getReserved("bg00"):_this2.h["bg00"]) != null) {
				var _this3 = this.ses;
				(__map_reserved.bg00 != null?_this3.getReserved("bg00"):_this3.h["bg00"]).play();
			}
		}
	}
	,onMuteBgm: function(mute) {
		if(com_redpeakgames_cloud9_Global.muteBgm) {
			var _this = this.ses;
			if((__map_reserved.bg00 != null?_this.getReserved("bg00"):_this.h["bg00"]) != null) {
				var _this1 = this.ses;
				(__map_reserved.bg00 != null?_this1.getReserved("bg00"):_this1.h["bg00"]).stop();
			}
		} else if(com_redpeakgames_cloud9_Global.mute == false) {
			var _this2 = this.ses;
			if((__map_reserved.bg00 != null?_this2.getReserved("bg00"):_this2.h["bg00"]) != null) {
				var _this3 = this.ses;
				(__map_reserved.bg00 != null?_this3.getReserved("bg00"):_this3.h["bg00"]).play();
			}
		}
	}
	,loadMiniCounter: function(x,y,len) {
		this.miniCounter = new com_redpeakgames_cloud9_ui_NumberBitmap("font/font_common.png",len,38,64,13,1,0,13);
		this.miniCounter.set_name("minicounter");
		this.miniCounter.textAlign = 0;
		this.miniCounter.commaWidth = 20;
		this.miniCounter.set_commaY(5);
		this.miniCounter.useDollar = true;
		this.miniCounter.set_dollarY(-7);
		this.miniCounter.dollarWidth = 30;
		this.miniCounter.minStep = 1;
		this.miniCounter.set_x(x);
		this.miniCounter.set_y(y);
	}
	,showMiniCounter: function(prize) {
		var _gthis = this;
		this.fseTLayer.addChild(this.miniCounter);
		this.miniCounter.draw(prize,true,1900);
		motion_Actuate.tween(this.miniCounter,0.5,{ alpha : 0, scaleX : 0, scaleY : 0, x : this.miniCounter.get_x() + this.miniCounter.len / 2, y : this.miniCounter.get_y() + this.miniCounter.tile.height / 2}).delay(1.9).ease(motion_easing_Back.get_easeIn()).onComplete(function() {
			try {
				_gthis.fseTLayer.getChildIndex(_gthis.miniCounter);
				_gthis.fseTLayer.removeChild(_gthis.miniCounter);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				if( js_Boot.__instanceof(e,openfl_errors_ArgumentError) ) {
					haxe_Log.trace(e.toString(),{ fileName : "Game.hx", lineNumber : 1685, className : "com.redpeakgames.cloud9.game.Game", methodName : "showMiniCounter"});
				} else throw(e);
			}
		});
	}
	,showMiniCounterDirect: function(prize) {
		var _gthis = this;
		this.fseTLayer.addChild(this.miniCounter);
		this.miniCounter.draw(prize);
		motion_Actuate.tween(this.miniCounter,0.1,{ alpha : 0}).ease(motion_easing_Quad.get_easeIn()).delay(0.9).onComplete(function() {
			try {
				_gthis.fseTLayer.getChildIndex(_gthis.miniCounter);
				_gthis.fseTLayer.removeChild(_gthis.miniCounter);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				if( js_Boot.__instanceof(e,openfl_errors_ArgumentError) ) {
					haxe_Log.trace(e.toString(),{ fileName : "Game.hx", lineNumber : 1706, className : "com.redpeakgames.cloud9.game.Game", methodName : "showMiniCounterDirect"});
				} else throw(e);
			}
		});
	}
	,onMinusBet: function(e) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override onMinusBet"));
	}
	,onPlusBet: function(e) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override onPlusBet"));
	}
	,makeIdleTiming: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override makeIdleTiming"));
	}
	,makeBettingTable: function() {
		return [2,5,10,30,50,100,200,300,500,1000,5000,10000,50000];
	}
	,gameLoopSub: function(delta) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override gameLoopSub"));
	}
	,winChangeSymbol: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override winChangeSymbol"));
	}
	,bigWin: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override bigWin"));
	}
	,hasPostBigWin: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override hasPostBigWin"));
	}
	,hasWin: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override isWin"));
	}
	,hasPostWin: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override hasPostWin"));
	}
	,winFreespin: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override winFreespin"));
	}
	,winBonus: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override winBonus"));
	}
	,isFreespinEnd: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override isFreespinEnd"));
	}
	,startFreespin: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override startFreespin"));
	}
	,winExtraspin: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override winExtraspin"));
	}
	,showExtraspin: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override showExtraspin"));
	}
	,startBonus: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override startBonus"));
	}
	,changeSymbol: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override changeSymbol"));
	}
	,bigWinMovie: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override bigWinMovie"));
	}
	,postBigWin: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override postBigWin"));
	}
	,drawWinline: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override drawWinline"));
	}
	,drawPostWin: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override drawPostWin"));
	}
	,showFreespinResult: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override showFreespinResult"));
	}
	,hasPostEffect: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override hasPostEffect"));
	}
	,showPostEffect: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override showSpinResult"));
	}
	,hasGrandTotal: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override hasGrandTotal"));
	}
	,showGrandTotal: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override showGrandTotal"));
	}
	,showPrize: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override showPrize"));
	}
	,idleUpdate: function(delta) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override idleUpdate"));
	}
	,postSetupOuter: function() {
	}
	,postSetupUI: function() {
	}
	,changeSpinButton: function(isNormal) {
	}
	,hasPayline: function(num) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override hasPayline"));
	}
	,showPayline: function(num) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override showPayline"));
	}
	,bigwinEnd: function(e) {
		this.elapsed = this.timing.sumTime(1) - 600;
	}
	,onIoError: function(e) {
		motion_Actuate.reset();
		this.stopGameLoop();
	}
	,onFullscreen: function(e) {
	}
	,checkBettingTable: function() {
		if(this.gs != com_redpeakgames_cloud9_game_GameState.Base) {
			return;
		}
	}
	,arrayCompare: function(arr1,arr2) {
		if(arr1.length != arr2.length) {
			return false;
		} else {
			var _g1 = 0;
			var _g = arr1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(arr1[i] != arr2[i]) {
					return false;
				}
			}
		}
		return true;
	}
	,clearResources: function() {
		this.net.clear();
		while(this.reels.length > 0) {
			var obj = this.reels.pop();
			obj.clear();
			obj = null;
		}
		this.outer.removeChild(this.outer.getChildByName("outer.bg"));
		while(this.get_numChildren() > 0) this.removeChildAt(0);
		this.data.clear();
		this.data = null;
		openfl_Assets.cache.clear();
	}
	,addCoinToPrize: function(value,coin,type) {
		if(this.gs != com_redpeakgames_cloud9_game_GameState.Base) {
			var addPrize = haxe_Int64Helper.parseString(value);
			if(type == "lose") {
				var b = new haxe__$Int64__$_$_$Int64(-1,-1);
				var al = addPrize.low & 65535;
				var ah = addPrize.low >>> 16;
				var bl = b.low & 65535;
				var bh = b.low >>> 16;
				var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
				var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
				var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
				var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
				var low = p00;
				var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
				p01 = p01 << 16;
				low = p00 + p01 | 0;
				if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
					++high;
					high = high | 0;
				}
				p10 = p10 << 16;
				low = low + p10 | 0;
				if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
					++high;
					high = high | 0;
				}
				high = high + (haxe__$Int32_Int32_$Impl_$.mul(addPrize.low,b.high) + haxe__$Int32_Int32_$Impl_$.mul(addPrize.high,b.low) | 0) | 0;
				addPrize = new haxe__$Int64__$_$_$Int64(high,low);
			}
			var a = this.prize.get_value();
			var high1 = a.high + addPrize.high | 0;
			var low1 = a.low + addPrize.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,a.low) < 0) {
				++high1;
				high1 = high1 | 0;
			}
			this.prize.draw(new haxe__$Int64__$_$_$Int64(high1,low1),true);
		} else {
			this.prize.set_value(new haxe__$Int64__$_$_$Int64(0,0));
			this.dispatchEvent(new openfl_events_DataEvent("ge.balance.changed",true,false,JSON.stringify({ coin : coin, showAddedCoin : true})));
		}
	}
	,dispatchTournamentData: function(tournamentData) {
		if(this.isTournamentDataDispatched) {
			return;
		}
		this.isTournamentDataDispatched = true;
		if(this.tournamentInited == false) {
			this.tournamentInited = true;
			this.dispatchEvent(new openfl_events_DataEvent("ge.participation.tournament",true,false,tournamentData));
		} else if(tournamentData == null || tournamentData == "") {
			this.tournamentInited = false;
		} else {
			this.dispatchEvent(new openfl_events_DataEvent("ge.player.refresh",true,false,tournamentData));
		}
	}
	,__class__: com_redpeakgames_cloud9_game_Game
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_enableToKeyboardSpin:"set_enableToKeyboardSpin",set_changeBetting:"set_changeBetting"})
});
var com_redpeakgames_cloud9_dialog_Minislot = function(udt,megaStack) {
	com_redpeakgames_cloud9_game_Game.call(this);
	this.set_name("cloud9.luckyspin");
	this.udt = udt;
	this.outerUI = new openfl_display_Sprite();
	this.slotTypes = [];
	this.animations = [];
	this.slotTypes = ["free","x5","x10","x30","x50","x100"];
	this.slotTypesIndex = 0;
	this.megaStackNum = megaStack - 1;
	if(this.megaStackNum < 0) {
		this.megaStackNum = 0;
	}
	if(this.megaStackNum >= 5) {
		this.megaStackNum = 5;
	}
	this.currentType = "free";
	this.prevType = "free";
	this.spinCnt = 0;
};
$hxClasses["com.redpeakgames.cloud9.dialog.Minislot"] = com_redpeakgames_cloud9_dialog_Minislot;
com_redpeakgames_cloud9_dialog_Minislot.__name__ = ["com","redpeakgames","cloud9","dialog","Minislot"];
com_redpeakgames_cloud9_dialog_Minislot.__super__ = com_redpeakgames_cloud9_game_Game;
com_redpeakgames_cloud9_dialog_Minislot.prototype = $extend(com_redpeakgames_cloud9_game_Game.prototype,{
	outerUI: null
	,innerBackLayer: null
	,megaStackLayer: null
	,response: null
	,effectTick: null
	,currentType: null
	,prevType: null
	,slotTypes: null
	,slotTypesIndex: null
	,megaStackNum: null
	,spinCnt: null
	,paytableAniTmr: null
	,animations: null
	,lightAni: null
	,barAni: null
	,stackLights: null
	,lightLeft: null
	,lightRight: null
	,innerBacks: null
	,innerBackBDs: null
	,blinkTmr: null
	,btnLeft: null
	,btnRight: null
	,winupLeft: null
	,winupRight: null
	,placeUI: function() {
		com_redpeakgames_cloud9_game_Game.prototype.placeUI.call(this);
		this.inner.set_x(0);
		this.ui.set_x(0);
		this.outer.addChild(this.outerUI);
		this.makeBack();
		this.prize = this.data.makePrize(0);
		this.prize.set_value(new haxe__$Int64__$_$_$Int64(0,0));
		this.ui.addChild(this.prize);
		this.betUnit = this.data.makeBetting(0);
		this.betUnit.set_value(new haxe__$Int64__$_$_$Int64(0,1));
		this.ui.addChild(this.betUnit);
		var btnX = new com_redpeakgames_cloud9_ui_ImageButton("img/minislot/minislot_x",null,null,"mouse_click");
		btnX.set_name("btn.x");
		btnX.set_x(464);
		btnX.set_y(15);
		btnX.set_alpha(0);
		btnX.set_visible(false);
		btnX.set_onClick($bind(this,this.onClickClose));
		this.ui.addChild(btnX);
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/minislot/light_e.png",false),2,1,268,152);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1],true,2));
		this.lightAni = new spritesheet_AnimatedSprite(ss);
		this.lightAni.set_x(135);
		this.lightAni.set_y(220);
		this.lightAni.showBehavior("_e");
		this.ui.addChild(this.lightAni);
		this.animations.push(this.lightAni);
		ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/minislot/bar_e.png",false),11,1,84,226);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10],false,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[0],false,1));
		this.barAni = new spritesheet_AnimatedSprite(ss);
		this.barAni.set_x(420);
		this.barAni.set_y(223);
		this.barAni.showBehavior("stop");
		this.ui.addChild(this.barAni);
		this.animations.push(this.barAni);
		ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/minislot/paytable_e.png"),4,5,252,99);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],false,15));
		var paytableAni = new spritesheet_AnimatedSprite(ss);
		paytableAni.set_x(143);
		paytableAni.set_y(73);
		paytableAni.showBehavior("_e");
		this.animations.push(paytableAni);
		this.ui.addChild(paytableAni);
		this.paytableAniTmr = new haxe_Timer(7000);
		this.paytableAniTmr.run = function() {
			paytableAni.showBehavior("_e");
		};
		var txRemain = com_redpeakgames_cloud9_ui_TxField.make(289,380,88,com_redpeakgames_cloud9_ui_TxField.format("font/digital7_italic.ttf",24,15081003),null,true);
		txRemain.set_name("tx.remain");
		var cur = openfl_Lib.getTimer() / 1000 | 0;
		if(this.udt.spin - cur < 0) {
			txRemain.set_text("00:00:00");
			if(this.megaStackNum >= 5) {
				this.ui.removeChild(this.btnSpin);
				this.btnSpin = new com_redpeakgames_cloud9_ui_ImageButton("img/minislot/btn_megaspin",null,null,"luckybonus_btn_spin");
				this.btnSpin.set_x(156);
				this.btnSpin.set_y(427);
				this.btnSpin.set_onClick($bind(this,this.onClickSpin));
				this.ui.addChild(this.btnSpin);
			}
		} else {
			txRemain.set_text(this.setTimeFormat(this.udt.spin,cur));
			this.changeSlotMachine("x5",true);
			btnX.set_visible(true);
			btnX.set_alpha(1);
		}
		this.ui.addChild(txRemain);
		this.megaStackLayer = new openfl_display_Sprite();
		this.inner.addChild(this.megaStackLayer);
		this.makeLights(this.megaStackNum);
		this.btnSpin.set_name("free_spin");
		this.effectTick = openfl_Lib.getTimer();
		this.addEventListener("enterFrame",$bind(this,this.updateAni));
	}
	,makeChangeButton: function() {
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/wheel/btn_rotation_e.png",false),5,4,184,59);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],true,15));
		var leftRotEffect = new spritesheet_AnimatedSprite(ss);
		leftRotEffect.set_x(-14);
		leftRotEffect.set_y(377);
		leftRotEffect.set_scaleX(-1);
		leftRotEffect.showBehavior("_e");
		this.outerUI.addChild(leftRotEffect);
		this.animations.push(leftRotEffect);
		var rightRotEffect = new spritesheet_AnimatedSprite(ss);
		rightRotEffect.set_x(566);
		rightRotEffect.set_y(377);
		rightRotEffect.showBehavior("_e");
		this.outerUI.addChild(rightRotEffect);
		this.animations.push(rightRotEffect);
		var winupto = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/minislot/winupto_back_1.png"));
		winupto.set_x(-201);
		winupto.set_y(439);
		this.outerUI.addChild(winupto);
		winupto = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/minislot/winupto_back_1.png"));
		winupto.set_x(564);
		winupto.set_y(439);
		this.outerUI.addChild(winupto);
		var tf = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",18,16766976);
		tf.align = 0;
		this.winupLeft = com_redpeakgames_cloud9_ui_TxField.make(-187,460,153,tf);
		this.outerUI.addChild(this.winupLeft);
		this.winupRight = com_redpeakgames_cloud9_ui_TxField.make(580,460,153,tf);
		this.outerUI.addChild(this.winupRight);
		this.winupLeft.set_text("3,000,000 coins");
		this.winupRight.set_text("210,000 coins");
		this.btnLeft = new com_redpeakgames_cloud9_ui_ImageButton("img/minislot/arrow_next",null,null,"mouse_click");
		this.btnLeft.set_x(-78);
		this.btnLeft.set_y(333);
		this.btnLeft.set_scaleX(-0.8);
		this.btnLeft.set_scaleY(0.8);
		this.btnLeft.set_onClick($bind(this,this.onClickChangeLeft));
		this.outerUI.addChild(this.btnLeft);
		motion_Actuate.tween(this.btnLeft,0.6,{ x : -83, y : 325, scaleX : -1, scaleY : 1},false).ease(motion_easing_Elastic.get_easeOut()).repeat().delay(2);
		this.btnRight = new com_redpeakgames_cloud9_ui_ImageButton("img/minislot/arrow_next",null,null,"mouse_click");
		this.btnRight.set_x(639);
		this.btnRight.set_y(333);
		this.btnRight.set_scaleX(0.8);
		this.btnRight.set_scaleY(0.8);
		this.btnRight.set_onClick($bind(this,this.onClickChangeRight));
		this.outerUI.addChild(this.btnRight);
		motion_Actuate.tween(this.btnRight,0.6,{ x : 634, y : 325, scaleX : 1, scaleY : 1},false).ease(motion_easing_Elastic.get_easeOut()).repeat().delay(2);
		this.outerUI.set_alpha(0);
		motion_Actuate.tween(this.outerUI,0.5,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
	}
	,onEndPrizeDraw: function() {
		var _gthis = this;
		this.prize.onEnd = null;
		var tmp;
		if(this.parent != null) {
			var a = this.prize.get_value();
			var b = new haxe__$Int64__$_$_$Int64(0,0);
			if(!(a.high != b.high)) {
				tmp = a.low != b.low;
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var targetObj = this.parent;
			try {
				this.seManagerStop("luckybonus_coinloop00");
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				haxe_Log.trace("prize onEnd - luckybonus coinloop stop : " + Std.string(err),{ fileName : "Minislot.hx", lineNumber : 268, className : "com.redpeakgames.cloud9.dialog.Minislot", methodName : "onEndPrizeDraw"});
			}
			var drawCoins = new com_redpeakgames_cloud9_ui_DrawCoins(883,550,705,75,1500,10);
			this.parent.addChild(drawCoins);
			drawCoins.set_onCoinArrive(function() {
				targetObj.dispatchEvent(new openfl_events_DataEvent("ge.balance.changed",true,false,JSON.stringify({ coin : _gthis.response.balance.coin, dia : _gthis.response.balance.dia, showAddedCoin : true})));
			});
		}
	}
	,makeLights: function(num) {
		var _gthis = this;
		this.megaStackLayer.removeChildren();
		this.stackLights = [];
		var posx = [];
		posx = [168,207,246,285,324];
		var _g1 = 0;
		while(_g1 < num) {
			var i = _g1++;
			var img = null;
			img = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/minislot/Minislot_light_lv_1.png"));
			img.set_x(posx[i]);
			img.set_y(201);
			this.megaStackLayer.addChild(img);
			this.stackLights.push(img);
		}
		this.lightLeft = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/minislot/Minislot_light_main_1.png"));
		this.lightLeft.set_x(148);
		this.lightLeft.set_y(198);
		this.inner.addChild(this.lightLeft);
		this.lightRight = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/minislot/Minislot_light_main_1.png"));
		this.lightRight.set_x(364);
		this.lightRight.set_y(198);
		this.inner.addChild(this.lightRight);
		if(num < 5) {
			motion_Actuate.stop(this.lightLeft);
			this.lightLeft.set_alpha(1);
			motion_Actuate.tween(this.lightLeft,0.5,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat();
			this.lightRight.set_alpha(0);
		} else {
			this.doBlink(0,125);
			this.blinkTmr = new haxe_Timer(1375);
			this.blinkTmr.run = function() {
				_gthis.doBlink(0,125);
			};
			var almost = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/minislot/txt_megabonnus.png"));
			almost.set_x(395);
			almost.set_y(147);
			this.megaStackLayer.addChild(almost);
		}
	}
	,doBlink: function(idx,delay) {
		if(idx == this.stackLights.length - 1) {
			if(this.stackLights[idx] != null) {
				motion_Actuate.tween(this.stackLights[idx],delay / 1000,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat(1);
			}
		} else if(this.stackLights[idx] != null) {
			motion_Actuate.tween(this.stackLights[idx],delay / 1000,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat(1).onComplete($bind(this,this.doBlink),[++idx,delay]);
		}
	}
	,makeButtons: function(type,dur) {
		this.ui.removeChild(this.btnSpin);
		this.btnSpin = new com_redpeakgames_cloud9_ui_ImageButton("img/minislot/btn_" + type + "_spin",null,null,"luckybonus_btn_spin");
		this.btnSpin.set_x(156);
		this.btnSpin.set_y(427);
		this.btnSpin.set_name(type + "_spin");
		this.btnSpin.set_onClick($bind(this,this.onClickSpin));
		this.ui.addChild(this.btnSpin);
		this.btnSpin.set_alpha(0);
		motion_Actuate.stop(this.btnSpin);
		motion_Actuate.tween(this.btnSpin,dur,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
	}
	,makeBack: function() {
		this.innerBackLayer = new openfl_display_Sprite();
		this.inner.addChildAt(this.innerBackLayer,0);
		this.innerBacks = [];
		this.innerBackBDs = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = this.slotTypes;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			var bd = openfl_Assets.getBitmapData("img/minislot/minislot_back_" + t + ".jpg");
			var _this = this.innerBackBDs;
			if(__map_reserved[t] != null) {
				_this.setReserved(t,bd);
			} else {
				_this.h[t] = bd;
			}
		}
		var _g2 = 0;
		while(_g2 < 2) {
			var i = _g2++;
			var _this1 = this.innerBackBDs;
			var key = this.slotTypes[i];
			var bm = new openfl_display_Bitmap(__map_reserved[key] != null?_this1.getReserved(key):_this1.h[key]);
			bm.set_x(118);
			bm.set_y(63);
			bm.set_name(this.slotTypes[i]);
			this.innerBackLayer.addChild(bm);
			this.innerBacks.push(bm);
		}
		this.innerBacks[1].set_alpha(0);
	}
	,onClickSpin: function(e) {
		if(this.spinState == com_redpeakgames_cloud9_game_SpinState.Ready) {
			if(this.preSpin()) {
				this.net.set_GameId(this.data.id);
				this.net.set_Key(this.udt.sig);
				this.net.set_Uid(this.udt.uid);
				this.net.url = this.udt.url;
				this.net.set_Version(this.data.version);
				var stype = "";
				if(this.currentType == "free") {
					if(this.megaStackNum >= 5) {
						stype = "mega";
					} else {
						stype = "base";
					}
				} else {
					switch(this.currentType) {
					case "x10":
						stype = "d10";
						break;
					case "x100":
						stype = "d100";
						break;
					case "x30":
						stype = "d30";
						break;
					case "x5":
						stype = "d5";
						break;
					case "x50":
						stype = "d50";
						break;
					}
				}
				this.net.spin(this.betUnit.get_valueInt(),this.betlines,stype);
				var _g1 = 0;
				var _g = this.data.cols;
				while(_g1 < _g) {
					var i = _g1++;
					this.reels[i].startSpin(this.data.spin.delay.begin[i],this.data.spin.delay.stop[i],false);
				}
				this.lastTick = openfl_Lib.getTimer();
				this.startGameLoop();
			}
		}
		if(this.spinState == com_redpeakgames_cloud9_game_SpinState.Response) {
			this.spinState = com_redpeakgames_cloud9_game_SpinState.Forced;
			this.forceStop = true;
			var _g11 = 0;
			var _g2 = this.data.cols;
			while(_g11 < _g2) this.reels[_g11++].forceStop();
		}
		if(this.data.isAutoPopup() && this.autoPopup != null) {
			this.btnAuto.set_checked(false);
			this.enableAutoPopup(false);
		}
	}
	,onClickChangeLeft: function(e) {
		--this.slotTypesIndex;
		if(this.slotTypesIndex < 0) {
			this.slotTypesIndex = this.slotTypes.length - 1;
		}
		this.changeSlotMachine(this.slotTypes[this.slotTypesIndex]);
	}
	,onClickChangeRight: function(e) {
		++this.slotTypesIndex;
		if(this.slotTypesIndex >= this.slotTypes.length) {
			this.slotTypesIndex = 0;
		}
		this.changeSlotMachine(this.slotTypes[this.slotTypesIndex]);
	}
	,changeSlotMachine: function(type,atStart) {
		var _gthis = this;
		this.currentType = type;
		var dur = 0.5;
		var idx = -1;
		if(atStart != null && atStart == true) {
			dur = 0;
		}
		var _g1 = 0;
		var _g = this.slotTypes.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.slotTypes[i] == type) {
				idx = i;
			}
		}
		if(idx == -1) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Minislot.changeBack(" + type + ") : wrong type"));
		}
		this.innerBackLayer.removeChildren();
		var key = this.innerBacks[0].get_name();
		var _this = this.innerBackBDs;
		this.innerBacks[1] = new openfl_display_Bitmap(__map_reserved[key] != null?_this.getReserved(key):_this.h[key]);
		var tmp = this.innerBacks[0].get_name();
		this.innerBacks[1].set_name(tmp);
		var _this1 = this.innerBackBDs;
		this.innerBacks[0] = new openfl_display_Bitmap(__map_reserved[type] != null?_this1.getReserved(type):_this1.h[type]);
		this.innerBacks[0].set_name(type);
		var _g2 = 0;
		while(_g2 < 2) {
			var i1 = _g2++;
			this.innerBacks[i1].set_x(118);
			this.innerBacks[i1].set_y(63);
			this.innerBackLayer.addChild(this.innerBacks[i1]);
		}
		this.innerBacks[1].set_visible(true);
		this.innerBacks[1].set_alpha(1);
		motion_Actuate.tween(this.innerBacks[1],dur,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone());
		this.makeButtons(type,dur);
		var prevSpinImg = this.makeDummyImg("spin");
		motion_Actuate.tween(prevSpinImg,dur,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			try {
				_gthis.ui.removeChild(prevSpinImg);
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				haxe_Log.trace(err,{ fileName : "Minislot.hx", lineNumber : 518, className : "com.redpeakgames.cloud9.dialog.Minislot", methodName : "changeSlotMachine"});
			}
		});
		this.ui.addChild(prevSpinImg);
		if(this.winupLeft != null) {
			var idx1 = this.slotTypesIndex - 1;
			if(idx1 < 0) {
				idx1 = this.slotTypes.length - 1;
			}
			this.winupLeft.set_text(this.getMaxPrizeTxt(this.slotTypes[idx1]));
		}
		if(this.winupRight != null) {
			var idx2 = this.slotTypesIndex + 1;
			if(idx2 >= this.slotTypes.length) {
				idx2 = 0;
			}
			this.winupRight.set_text(this.getMaxPrizeTxt(this.slotTypes[idx2]));
		}
		this.prevType = type;
		if(this.slotTypes.length == 6) {
			HxOverrides.remove(this.slotTypes,"free");
			this.slotTypesIndex -= 1;
			if(this.slotTypesIndex < 0) {
				this.slotTypesIndex = 0;
			}
			this.makeChangeButton();
		}
	}
	,getMaxPrizeTxt: function(type) {
		var ret = "";
		switch(type) {
		case "x10":
			ret = "210,000";
			break;
		case "x100":
			ret = "3,000,000";
			break;
		case "x30":
			ret = "600,000";
			break;
		case "x5":
			ret = "90,000";
			break;
		case "x50":
			ret = "1,200,000";
			break;
		}
		ret += " coins";
		return ret;
	}
	,makeDummyImg: function(btnType) {
		var prevImg = null;
		try {
			prevImg = this.ui.getChildByName("prev." + btnType + "img");
		} catch( err ) {
			haxe_CallStack.lastException = err;
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace(err,{ fileName : "Minislot.hx", lineNumber : 574, className : "com.redpeakgames.cloud9.dialog.Minislot", methodName : "makeDummyImg"});
		}
		if(prevImg != null) {
			this.ui.removeChild(prevImg);
		}
		var btnState = "_u";
		if(this.prevType == "free") {
			btnState = "_g";
		}
		prevImg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/minislot/btn_" + this.prevType + "_" + btnType + btnState + ".png"));
		if(this.prevType == "free" && this.megaStackNum > 5) {
			prevImg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/minislot/btn_megaspin_g.png"));
		}
		if(prevImg != null) {
			prevImg.set_x(this.btnSpin.get_x());
			prevImg.set_y(this.btnSpin.get_y());
			prevImg.set_name("prev." + btnType + "img");
		}
		return prevImg;
	}
	,onAdded: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.onAdded));
		this.dispatchEvent(new openfl_events_DataEvent("ge.loaded.slot",true,false));
	}
	,onLoadStrip: function(e) {
		com_redpeakgames_cloud9_game_Game.prototype.onLoadStrip.call(this,e);
		var job = JSON.parse(e.target.data);
		var types = job.types;
		if(types != null) {
			var _g = 0;
			while(_g < types.length) {
				var tp = types[_g];
				++_g;
				if(tp == "base") {
					var _this = this.data.strips;
					var value = job.base;
					if(__map_reserved.base != null) {
						_this.setReserved("base",value);
					} else {
						_this.h["base"] = value;
					}
				}
				if(tp == "mega") {
					var _this1 = this.data.strips;
					var value1 = job.mega;
					if(__map_reserved.mega != null) {
						_this1.setReserved("mega",value1);
					} else {
						_this1.h["mega"] = value1;
					}
				}
			}
		}
		if(this.megaStackNum >= 5 && this.currentType == "free") {
			this.reelReplace("mega");
		}
	}
	,onLoadStripComplete: function() {
	}
	,onRemoved: function(e) {
		com_redpeakgames_cloud9_game_Game.prototype.onRemoved.call(this,e);
		this.seManagerStop("luckybonus_coinloop00");
	}
	,postSetupOuter: function() {
	}
	,postSetupUI: function() {
	}
	,onMinusBet: function(e) {
	}
	,onPlusBet: function(e) {
	}
	,makeBettingTable: function() {
		return com_redpeakgames_cloud9_game_Game.prototype.makeBettingTable.call(this);
	}
	,makeIdleTiming: function() {
		return new com_redpeakgames_cloud9_game_IdleTiming([1000,1000,10,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000]);
	}
	,gameLoopSub: function(delta) {
	}
	,winChangeSymbol: function() {
		return false;
	}
	,preSpin: function() {
		this.stopIdleLoop();
		this.idle = 0;
		this.elapsed = 0;
		this.forceStop = false;
		this.prize.set_value(new haxe__$Int64__$_$_$Int64(0,0));
		this.prize.onEnd = $bind(this,this.onEndPrizeDraw);
		var btnClose = this.ui.getChildByName("btn.x");
		btnClose.set_work(false);
		var reqDia = 0;
		switch(this.currentType) {
		case "x10":
			reqDia = 10;
			break;
		case "x100":
			reqDia = 100;
			break;
		case "x30":
			reqDia = 30;
			break;
		case "x5":
			reqDia = 5;
			break;
		case "x50":
			reqDia = 50;
			break;
		default:
			reqDia = 0;
		}
		if(reqDia > this.getDia()) {
			if(this.parent != null) {
				com_redpeakgames_cloud9_utils_DynamicCall.method(Reflect.field(this.parent.parent,"topMenu"),"onClickBuyDias",[null]);
			}
			btnClose.set_work(true);
			return false;
		}
		this.enableSpinButton(false);
		this.barAni.showBehavior("_e");
		if(this.currentType == "free") {
			this.dispatchEvent(new openfl_events_DataEvent("ge.spin.luckyspin",true,false));
			var addTime = 0;
			switch(this.udt.vlev) {
			case 1:
				addTime = 7200;
				break;
			case 2:
				addTime = 6600;
				break;
			case 3:
				addTime = 6000;
				break;
			case 4:
				addTime = 5400;
				break;
			case 5:
				addTime = 4800;
				break;
			case 6:
				addTime = 3600;
				break;
			case 7:
				addTime = 1800;
				break;
			}
			this.udt.spin = (openfl_Lib.getTimer() / 1000 | 0) + addTime;
		} else {
			this.btnLeft.set_work(false);
			this.btnRight.set_work(false);
		}
		if(!com_redpeakgames_cloud9_Global.mute) {
			this.seManagerPlay("luckybonus_btn_spin00",0,0);
			this.seManagerPlay("luckybonus_btn_spin01",0,0);
		}
		this.spinCnt += 1;
		return true;
	}
	,checkAutospin: function() {
	}
	,hasWin: function() {
		return this.response.hasWin(com_redpeakgames_cloud9_game_GameState.Base);
	}
	,drawWinline: function() {
		this.gs = com_redpeakgames_cloud9_game_GameState.None;
	}
	,bigWin: function() {
		return false;
	}
	,hasPostBigWin: function() {
		return false;
	}
	,postBigWin: function() {
		return;
	}
	,winFreespin: function() {
		return false;
	}
	,isFreespinEnd: function() {
		return false;
	}
	,winExtraspin: function() {
		return false;
	}
	,winBonus: function() {
		return false;
	}
	,hasPostEffect: function() {
		return true;
	}
	,showPostEffect: function() {
		var obj = this.ui.getChildByName("btn.x");
		if(obj.get_visible() == false) {
			obj.set_visible(true);
			motion_Actuate.tween(obj,0.6,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
		}
	}
	,hasGrandTotal: function() {
		return false;
	}
	,showPrize: function() {
		this.prize.draw(this.response.prize,true);
		this.ui.getChildByName("btn.x").set_work(true);
	}
	,idleUpdate: function(delta) {
	}
	,hasPayline: function(num) {
		return false;
	}
	,onIoComplete: function(e) {
		var loader = e.target;
		haxe_Log.trace(loader.data,{ fileName : "Minislot.hx", lineNumber : 864, className : "com.redpeakgames.cloud9.dialog.Minislot", methodName : "onIoComplete"});
		var json = JSON.parse(loader.data);
		this.response = new com_redpeakgames_cloud9_dialog_Response();
		if(this.response.load(json)) {
			var _g1 = 0;
			var _g = this.data.cols;
			while(_g1 < _g) {
				var i = _g1++;
				this.reels[i].set_stop(this.response.stops[i]);
			}
		} else {
			haxe_Log.trace("Game: " + this.response.res,{ fileName : "Minislot.hx", lineNumber : 875, className : "com.redpeakgames.cloud9.dialog.Minislot", methodName : "onIoComplete"});
		}
	}
	,onStop: function() {
		var _gthis = this;
		com_redpeakgames_cloud9_game_Game.prototype.onStop.call(this);
		if(this.currentType == "free") {
			this.megaStackNum += 1;
		}
		if(this.spinCnt <= 1) {
			if(this.megaStackNum > 5) {
				this.megaStackNum = 0;
				this.inner.removeChild(this.lightLeft);
				this.inner.removeChild(this.lightRight);
				if(this.blinkTmr != null) {
					this.blinkTmr.stop();
				}
				motion_Actuate.tween(this.megaStackLayer,0.5,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
					_gthis.makeLights(0);
					_gthis.megaStackLayer.set_alpha(1);
				});
			} else {
				this.inner.removeChild(this.lightLeft);
				this.inner.removeChild(this.lightRight);
				if(this.blinkTmr != null) {
					this.blinkTmr.stop();
				}
				this.makeLights(this.megaStackNum);
			}
		}
		this.reelChange("base");
		try {
			if(!com_redpeakgames_cloud9_Global.mute) {
				this.seManagerPlay("luckybonus_coinloop00",999999,0);
			}
		} catch( err ) {
			haxe_CallStack.lastException = err;
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace("lucky bonus slot onStop() : " + Std.string(err),{ fileName : "Minislot.hx", lineNumber : 915, className : "com.redpeakgames.cloud9.dialog.Minislot", methodName : "onStop"});
		}
		haxe_Timer.delay(function() {
			if(_gthis.currentType == "free") {
				haxe_Timer.delay(function() {
					_gthis.onClickChangeRight(null);
				},5000);
			} else {
				_gthis.btnLeft.set_work(true);
				_gthis.btnRight.set_work(true);
				_gthis.btnSpin.set_enable(true);
			}
		},2000);
	}
	,onClickClose: function(e) {
		var _gthis = this;
		var delay = 0;
		if(!this.prize.isEnd()) {
			this.prize.draw(this.prize.get_value());
			delay = 1500;
		}
		haxe_Timer.delay(function() {
			if(_gthis.paytableAniTmr != null) {
				_gthis.paytableAniTmr.stop();
			}
			_gthis.removeEventListener("enterFrame",$bind(_gthis,_gthis.updateAni));
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.dailywheel.close",true));
			if(_gthis.parent != null) {
				_gthis.parent.removeChild(_gthis);
			}
		},delay);
	}
	,updateAni: function(e) {
		var cur = openfl_Lib.getTimer();
		var delta = cur - this.effectTick;
		var _g = 0;
		var _g1 = this.animations;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a.update(delta);
		}
		if(this.megaStackNum < 5) {
			this.lightRight.set_alpha(1 - this.lightLeft.get_alpha());
		}
		this.ui.getChildByName("tx.remain").set_text(this.setTimeFormat(this.udt.spin,cur));
		this.effectTick = cur;
	}
	,setTimeFormat: function(start,now) {
		var ret = "";
		var value = start - (now / 1000 | 0);
		if(value < 0) {
			return "00:00:00";
		}
		var hours = value / 3600 | 0;
		ret = "" + (hours < 10?"0" + hours:"" + hours);
		var mins = value % 3600 / 60 | 0;
		ret += mins < 10?":0" + mins:":" + mins;
		var secs = value % 60;
		ret += secs < 10?":0" + secs:":" + secs;
		return ret;
	}
	,hasPostWin: function() {
		return false;
	}
	,getDia: function() {
		var ret = 0;
		if(this.parent != null) {
			ret = com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"get_dia",[]);
		}
		return ret;
	}
	,seManagerPlay: function(sn,loop,fadeIn) {
		if(fadeIn == null) {
			fadeIn = 0;
		}
		if(loop == null) {
			loop = 0;
		}
		if(!com_redpeakgames_cloud9_Global.mute) {
			com_redpeakgames_cloud9_utils_DynamicCall.method(Reflect.field(this.parent,"seManager"),"play",[sn,loop,fadeIn]);
		}
	}
	,seManagerStop: function(sn) {
		com_redpeakgames_cloud9_utils_DynamicCall.method(Reflect.field(this.parent,"seManager"),"stop",[sn]);
	}
	,__class__: com_redpeakgames_cloud9_dialog_Minislot
});
var com_redpeakgames_cloud9_dialog_NewGame = function(udt) {
	openfl_display_Sprite.call(this);
	this.udt = udt;
	this.sid = 2009;
	this.set_x(533);
	this.set_y(130);
	this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/sales/newgame_coinfever_back.png")));
	this.btnClose = new com_redpeakgames_cloud9_ui_ImageButton("img/sales/btn_sales_x",null,null,"mouse_click");
	this.btnClose.set_x(738);
	this.btnClose.set_y(20);
	this.btnClose.set_onClick($bind(this,this.onClickClose));
	this.addChild(this.btnClose);
	this.http = new com_redpeakgames_cloud9_utils_Http(udt.url + "data/lobby.json",$bind(this,this.onLoadData));
	this.http.request();
};
$hxClasses["com.redpeakgames.cloud9.dialog.NewGame"] = com_redpeakgames_cloud9_dialog_NewGame;
com_redpeakgames_cloud9_dialog_NewGame.__name__ = ["com","redpeakgames","cloud9","dialog","NewGame"];
com_redpeakgames_cloud9_dialog_NewGame.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_NewGame.prototype = $extend(openfl_display_Sprite.prototype,{
	btnClose: null
	,btnPlay: null
	,http: null
	,udt: null
	,sid: null
	,onLoadData: function(e) {
		this.placeSlots(e.target.data);
	}
	,placeSlots: function(data) {
		var lobbyJson = JSON.parse(data);
		var slots = lobbyJson.slots;
		var _g = 0;
		while(_g < slots.length) {
			var s = slots[_g];
			++_g;
			if(s.sid == this.sid) {
				var ani = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/sales/btn_playnow_e.png",false),4,3,228,67);
				ani.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11],false,15));
				ani.addBehavior(new spritesheet_data_BehaviorData("stop",[11],false,1));
				this.btnPlay = new com_redpeakgames_cloud9_ui_AnimatedButton("img/sales/btn_playnow","mouse_click","png",new spritesheet_AnimatedSprite(ani),4);
				this.btnPlay.set_x(313);
				this.btnPlay.set_y(410);
				this.btnPlay.set_name(s.url);
				this.btnPlay.set_onClick($bind(this,this.onSlotSelected));
				this.addChild(this.btnPlay);
				break;
			}
		}
	}
	,onClickClose: function(e) {
		if(this.btnPlay != null) {
			this.btnPlay.set_work(false);
		}
		if(this.btnClose != null) {
			this.btnClose.set_work(false);
		}
		this.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,onSlotSelected: function(e) {
		this.udt.played = this.sid;
		com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent.parent,"loadSlot",[this.btnPlay.get_name()]);
		com_redpeakgames_cloud9_utils_DynamicCall.method(Reflect.field(this.parent.parent,"lobby"),"stopBgm",[]);
		this.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,__class__: com_redpeakgames_cloud9_dialog_NewGame
});
var com_redpeakgames_cloud9_dialog_Omg = function(udt,nosee) {
	var _gthis = this;
	openfl_display_Sprite.call(this);
	this.set_x(536);
	this.set_y(124);
	this.udt = udt;
	this.vlev = udt.vlev;
	this.seManager = new com_redpeakgames_cloud9_utils_SeManager();
	this.fxs = new haxe_ds_StringMap();
	this.animations = [];
	var mulTable = [1,1,1.5,2,3,10,20,50];
	var layer = ["","bronze","silver","gold","emerald","sapphire","ruby","diamond"];
	if(com_redpeakgames_cloud9_Global.mute == false) {
		this.seManager.play(Std.random(2) == 1?"welcome_f":"welcome_m",0,0);
	}
	this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/omg/omg_back.png")));
	this.btnCollect = new com_redpeakgames_cloud9_ui_ImageButton("img/omg/btn_collect",null,null,"mouse_click");
	this.btnCollect.set(294,361,1,false);
	this.btnCollect.set_onClick($bind(this,this.onClickClose));
	this.addChild(this.btnCollect);
	var curPrize = new com_redpeakgames_cloud9_ui_NumberBitmap("font/font_omg_1.png",180,26,42,14,1,6);
	curPrize.set_x(309);
	curPrize.set_y(282);
	curPrize.commaWidth = 9;
	curPrize.textAlign = 4;
	var x = nosee / mulTable[this.vlev] | 0;
	curPrize.set_value(new haxe__$Int64__$_$_$Int64(x >> 31,x));
	this.addChild(curPrize);
	var ox = this.vlev == 2?0:-20;
	var multiply = new com_redpeakgames_cloud9_type_NumberBitmapFloat("font/font_omg_1.png",150,26,42,14,1,6);
	multiply.set_x(447 - multiply.len + 12 + ox);
	multiply.set_y(282 - multiply.tile.height + 21);
	multiply.set_scaleX(2);
	multiply.set_scaleY(2);
	multiply.useDollar = true;
	multiply.set_dollarY(-5);
	multiply.dollarWidth = 20;
	multiply.commaWidth = 9;
	multiply.textAlign = 4;
	multiply.digits = this.vlev == 2?1:0;
	multiply.set_value(mulTable[this.vlev]);
	this.addChild(multiply);
	var curClass = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/shop/shop_r_status_" + layer[this.vlev] + "_1.png"));
	curClass.set_x(255);
	curClass.set_y(272);
	curClass.set_scaleX(0.5);
	curClass.set_scaleY(0.5);
	this.addChild(curClass);
	var totalPrize = new com_redpeakgames_cloud9_ui_NumberBitmap("font/font_omg_1.png",310,26,42,14,1,6);
	totalPrize.set_x(279);
	totalPrize.set_y(282);
	totalPrize.textAlign = 0;
	totalPrize.commaWidth = 9;
	totalPrize.set_alpha(0);
	totalPrize.set_value(new haxe__$Int64__$_$_$Int64(nosee >> 31,nosee));
	this.addChild(totalPrize);
	var coinIcon = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/omg/omg_coin.png"));
	coinIcon.set_x(266);
	coinIcon.set_y(283);
	coinIcon.set_alpha(0);
	this.addChild(coinIcon);
	var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/omg/btn_collect_e.png",false),8,2,254,64);
	ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],false,15));
	var _this = this.fxs;
	if(__map_reserved.btn_omg_collect_e != null) {
		_this.setReserved("btn_omg_collect_e",ss);
	} else {
		_this.h["btn_omg_collect_e"] = ss;
	}
	ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/omg/double_count_e.png",false),5,3,360,130);
	ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],false,15));
	var _this1 = this.fxs;
	if(__map_reserved.double_count_e != null) {
		_this1.setReserved("double_count_e",ss);
	} else {
		_this1.h["double_count_e"] = ss;
	}
	ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/shop/shop_r_status_e.png",false),9,2,108,108);
	ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13],false,15));
	var _this2 = this.fxs;
	if(__map_reserved.shop_r_status_e != null) {
		_this2.setReserved("shop_r_status_e",ss);
	} else {
		_this2.h["shop_r_status_e"] = ss;
	}
	ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/omg/coin_light_e.png",false),3,6,520,156);
	ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],false,15));
	var _this3 = this.fxs;
	if(__map_reserved.coin_light_e != null) {
		_this3.setReserved("coin_light_e",ss);
	} else {
		_this3.h["coin_light_e"] = ss;
	}
	this.makeAnimatedSprite("coin_light_e",162,221);
	this.makeAnimatedSprite("shop_r_status_e",255,272,0.5);
	this.makeAnimatedSprite("btn_omg_collect_e",294,361);
	motion_Actuate.tween(multiply,0.2,{ x : 459 + ox, y : 303, scaleX : 1, scaleY : 1},false).ease(motion_easing_Linear.get_easeNone());
	haxe_Timer.delay(function() {
		motion_Actuate.tween(curPrize,0.2,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone());
		motion_Actuate.tween(multiply,0.2,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone());
		motion_Actuate.tween(curClass,0.2,{ alpha : 0},false).ease(motion_easing_Linear.get_easeNone());
		motion_Actuate.tween(coinIcon,0.2,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone());
		motion_Actuate.tween(totalPrize,0.2,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			totalPrize.set_x(279 - (totalPrize.len - totalPrize.len * 0.8) / 2);
			totalPrize.set_y(282 - (totalPrize.tile.height - totalPrize.tile.height * 0.8) / 2);
			totalPrize.set_scaleX(1.2);
			totalPrize.set_scaleY(1.2);
			_gthis.makeAnimatedSprite("double_count_e",63,160,2.0);
			motion_Actuate.tween(totalPrize,0.1,{ x : 279, y : 282, scaleX : 1, scaleY : 1},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				_gthis.btnCollect.set_work(true);
			});
		});
	},1500);
	this.lastTick = openfl_Lib.getTimer();
	this.addEventListener("enterFrame",$bind(this,this.onUpdate));
};
$hxClasses["com.redpeakgames.cloud9.dialog.Omg"] = com_redpeakgames_cloud9_dialog_Omg;
com_redpeakgames_cloud9_dialog_Omg.__name__ = ["com","redpeakgames","cloud9","dialog","Omg"];
com_redpeakgames_cloud9_dialog_Omg.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_Omg.prototype = $extend(openfl_display_Sprite.prototype,{
	vlev: null
	,udt: null
	,btnCollect: null
	,lastTick: null
	,fxs: null
	,animations: null
	,seManager: null
	,makeAnimatedSprite: function(path,x,y,scale) {
		if(scale == null) {
			scale = 1.0;
		}
		var _gthis = this;
		var _this = this.fxs;
		var ani = new spritesheet_AnimatedSprite(__map_reserved[path] != null?_this.getReserved(path):_this.h[path],true);
		ani.set_x(x);
		ani.set_y(y);
		ani.set_scaleX(scale);
		ani.set_scaleY(scale);
		ani.showBehavior("_e");
		ani.mouseChildren = false;
		ani.mouseEnabled = false;
		var onLoadComplete = null;
		onLoadComplete = function(e) {
			ani.removeEventListener("complete",onLoadComplete);
			if(ani != null) {
				_gthis.removeChild(ani);
			}
			if(_gthis.animations != null) {
				HxOverrides.remove(_gthis.animations,ani);
				ani.spritesheet.clear();
			}
		};
		ani.addEventListener("complete",onLoadComplete);
		this.addChild(ani);
		this.animations.push(ani);
	}
	,onUpdate: function(e) {
		var cur = openfl_Lib.getTimer();
		var delta = cur - this.lastTick;
		if(this.animations != null) {
			var _g = 0;
			var _g1 = this.animations;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				a.update(delta);
			}
		}
		this.lastTick = cur;
	}
	,onClickClose: function(e) {
		var _gthis = this;
		this.btnCollect.set_work(false);
		this.addChild(new com_redpeakgames_cloud9_ui_DrawCoins(this.btnCollect.get_x() + 84 | 0,this.btnCollect.get_y() + 11 | 0,50,-5,1000,10,null,null,true));
		haxe_Timer.delay(function() {
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
			var data = { coin : _gthis.udt.coin, dia : _gthis.udt.dia, showAddedCoin : true, udtCoinChanage : false};
			com_redpeakgames_cloud9_TopMenu.coinAdjust.pop();
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.balance.changed",true,false,JSON.stringify(data)));
			motion_Actuate.tween(_gthis,0.2,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				_gthis.removeEventListener("enterFrame",$bind(_gthis,_gthis.onUpdate));
				var _this = _gthis.fxs;
				var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
				while(tmp.hasNext()) tmp.next().clear();
				if(_gthis.parent != null) {
					_gthis.parent.removeChild(_gthis);
				}
			});
		},2000);
	}
	,__class__: com_redpeakgames_cloud9_dialog_Omg
});
var com_redpeakgames_cloud9_dialog_PopupBase = function() {
	openfl_display_Sprite.call(this);
	this.animations = [];
	this.placeUI();
	this.lastTick = openfl_Lib.getTimer();
	this.addEventListener("enterFrame",$bind(this,this.onUpdate));
	this.addEventListener("removedFromStage",$bind(this,this.onRemoved));
};
$hxClasses["com.redpeakgames.cloud9.dialog.PopupBase"] = com_redpeakgames_cloud9_dialog_PopupBase;
com_redpeakgames_cloud9_dialog_PopupBase.__name__ = ["com","redpeakgames","cloud9","dialog","PopupBase"];
com_redpeakgames_cloud9_dialog_PopupBase.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_PopupBase.prototype = $extend(openfl_display_Sprite.prototype,{
	lastTick: null
	,animations: null
	,placeUI: function() {
	}
	,close: function() {
		this.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true,false));
		if(this.animations != null) {
			var _g = 0;
			var _g1 = this.animations;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				a.spritesheet.clear();
			}
		}
		this.animations = null;
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,onRemoved: function(e) {
		this.removeEventListener("removedFromStage",$bind(this,this.onRemoved));
		this.removeEventListener("enterFrame",$bind(this,this.onUpdate));
		this.removeChildren();
	}
	,onUpdate: function(e) {
		var cur = openfl_Lib.getTimer();
		if(this.animations != null) {
			var _g = 0;
			var _g1 = this.animations;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				a.update(cur - this.lastTick);
			}
		}
		this.lastTick = cur;
	}
	,__class__: com_redpeakgames_cloud9_dialog_PopupBase
});
var com_redpeakgames_cloud9_dialog_Reconnect = function(type) {
	openfl_display_Sprite.call(this);
	this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData(type == "reconnect"?"img/reconnect/reconnect_back.png":"img/reconnect/multieorror_back.png")));
	var btn = new com_redpeakgames_cloud9_ui_ImageButton("img/reconnect/btn",null,null,"mouse_click");
	btn.set_x(458);
	btn.set_y(361);
	btn.set_onClick($bind(this,this.onClickReconnect));
	this.addChild(btn);
};
$hxClasses["com.redpeakgames.cloud9.dialog.Reconnect"] = com_redpeakgames_cloud9_dialog_Reconnect;
com_redpeakgames_cloud9_dialog_Reconnect.__name__ = ["com","redpeakgames","cloud9","dialog","Reconnect"];
com_redpeakgames_cloud9_dialog_Reconnect.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_Reconnect.prototype = $extend(openfl_display_Sprite.prototype,{
	onClickReconnect: function(e) {
		e.target.set_enable(false);
		this.dispatchEvent(new openfl_events_DataEvent("ge.reload",true));
	}
	,__class__: com_redpeakgames_cloud9_dialog_Reconnect
});
var com_redpeakgames_cloud9_game_ResponseBase = function() {
	this.stops = [];
	this.wins = [];
};
$hxClasses["com.redpeakgames.cloud9.game.ResponseBase"] = com_redpeakgames_cloud9_game_ResponseBase;
com_redpeakgames_cloud9_game_ResponseBase.__name__ = ["com","redpeakgames","cloud9","game","ResponseBase"];
com_redpeakgames_cloud9_game_ResponseBase.prototype = {
	res: null
	,prize: null
	,bonus: null
	,balance: null
	,event: null
	,stops: null
	,wins: null
	,status: null
	,bankrupt: null
	,bets: null
	,reward: null
	,'double': null
	,ctree: null
	,sales: null
	,load: function(json) {
		var ret = false;
		try {
			this.res = json.res;
			if(this.res == 0) {
				this.prize = haxe_Int64Helper.parseString(json.prize);
				this.bonus = { remain : json.bonus.remain, get : json.bonus.get, prize : haxe_Int64Helper.parseString(json.bonus.prize)};
				this.balance = { coin : haxe_Int64Helper.parseString(json.balance.coin), dia : json.balance.dia};
				this.bankrupt = json.bankrupt;
				if(json.event != null) {
					this.event = json.event;
				}
				this["double"] = json["double"];
				var ridx = json.stops;
				var _g = 0;
				while(_g < ridx.length) {
					var v = ridx[_g];
					++_g;
					this.stops.push(v);
				}
				this.setWinline(json.wins);
				this.setStatus(json.status,json.rookie);
				if(json.status != null) {
					this.bets = json.status.bets;
				}
				if(json.reward != null) {
					this.reward = { type : json.reward.type, grade : json.reward.grade, prize : json.reward.prize, which : json.reward.which};
				}
				if(json.ctree != null) {
					this.ctree = { cur : json.ctree.cur, max : json.ctree.max};
				}
				if(json.sales != null) {
					this.sales = { type : "", data : ""};
					if(json.sales.type != null) {
						this.sales.type = json.sales.type;
					}
					if(json.sales.data != null) {
						this.sales.data = json.sales.data;
					}
				}
				ret = true;
			} else {
				haxe_Log.trace("io error: " + this.res,{ fileName : "ResponseBase.hx", lineNumber : 91, className : "com.redpeakgames.cloud9.game.ResponseBase", methodName : "load"});
			}
		} catch( error ) {
			haxe_CallStack.lastException = error;
			if (error instanceof js__$Boot_HaxeError) error = error.val;
			if( js_Boot.__instanceof(error,String) ) {
				haxe_Log.trace(error,{ fileName : "ResponseBase.hx", lineNumber : 96, className : "com.redpeakgames.cloud9.game.ResponseBase", methodName : "load"});
			} else throw(error);
		}
		return ret;
	}
	,setWinline: function(wlines) {
		if(wlines.length != 0) {
			var _g = 0;
			while(_g < wlines.length) {
				var w = wlines[_g];
				++_g;
				this.wins.push({ id : w.line, prize : haxe_Int64Helper.parseString(w.prize), count : w.count});
			}
		}
		this.wins.sort($bind(this,this.wlSort));
	}
	,wlSort: function(lh,rh) {
		var a = lh.prize;
		var b = rh.prize;
		if(a.high == b.high && a.low == b.low) {
			if(lh.id > rh.id) {
				return 1;
			}
			return -1;
		}
		var a1 = lh.prize;
		var b1 = rh.prize;
		var v = a1.high - b1.high | 0;
		if(v != 0) {
			v = v;
		} else {
			v = haxe__$Int32_Int32_$Impl_$.ucompare(a1.low,b1.low);
		}
		if((a1.high < 0?b1.high < 0?v:-1:b1.high >= 0?v:1) < 0) {
			return 1;
		}
		return -1;
	}
	,setStatus: function(status,rookie) {
		this.status = { lev : status.lev, exp : status.exp, mexp : status.mexp, vlev : status.vlev, rcur : status.rpoint.cur, rtotal : status.rpoint.total, rcoin : status.rewards.coin, rdia : status.rewards.dia, rrp : status.rewards.rp, vcorder : rookie != null?rookie.order:0, vcprize : rookie != null?rookie.prize:0};
	}
	,hasWin: function(gs) {
		var tmp;
		var a = this.prize;
		var b = new haxe__$Int64__$_$_$Int64(0,0);
		if(!(a.high != b.high || a.low != b.low)) {
			tmp = this.winFreespin(gs);
		} else {
			tmp = true;
		}
		if(!tmp) {
			return this.winExtraspin(gs);
		} else {
			return true;
		}
	}
	,winFreespin: function(gs) {
		if(this.bonus.get != 0) {
			return gs == com_redpeakgames_cloud9_game_GameState.Base;
		} else {
			return false;
		}
	}
	,winExtraspin: function(gs) {
		if(this.bonus.get != 0) {
			return gs == com_redpeakgames_cloud9_game_GameState.Freespin;
		} else {
			return false;
		}
	}
	,hasNewReelStrip: function(json,slotVersion) {
		if(json.reelstrip != null) {
			if(slotVersion != json.reelstrip.version) {
				return true;
			}
		}
		return false;
	}
	,hasSales: function() {
		if(this.sales != null) {
			return true;
		}
		return false;
	}
	,__class__: com_redpeakgames_cloud9_game_ResponseBase
};
var com_redpeakgames_cloud9_dialog_Response = function() {
	com_redpeakgames_cloud9_game_ResponseBase.call(this);
};
$hxClasses["com.redpeakgames.cloud9.dialog.Response"] = com_redpeakgames_cloud9_dialog_Response;
com_redpeakgames_cloud9_dialog_Response.__name__ = ["com","redpeakgames","cloud9","dialog","Response"];
com_redpeakgames_cloud9_dialog_Response.__super__ = com_redpeakgames_cloud9_game_ResponseBase;
com_redpeakgames_cloud9_dialog_Response.prototype = $extend(com_redpeakgames_cloud9_game_ResponseBase.prototype,{
	load: function(json) {
		return com_redpeakgames_cloud9_game_ResponseBase.prototype.load.call(this,json);
	}
	,setStatus: function(status,rookie) {
	}
	,__class__: com_redpeakgames_cloud9_dialog_Response
});
var com_redpeakgames_cloud9_dialog_RichWheel = function(x,y,numValues,isSales) {
	com_redpeakgames_cloud9_WheelBase.call(this,x,y,numValues);
	this.buy = new haxe__$Int64__$_$_$Int64(0,0);
	this.multiple = 0;
	this.seManager = new com_redpeakgames_cloud9_utils_SeManager(com_redpeakgames_cloud9_Global.mute);
	if(isSales) {
		this.showSales();
	} else {
		this.showEventSpin();
	}
};
$hxClasses["com.redpeakgames.cloud9.dialog.RichWheel"] = com_redpeakgames_cloud9_dialog_RichWheel;
com_redpeakgames_cloud9_dialog_RichWheel.__name__ = ["com","redpeakgames","cloud9","dialog","RichWheel"];
com_redpeakgames_cloud9_dialog_RichWheel.__super__ = com_redpeakgames_cloud9_WheelBase;
com_redpeakgames_cloud9_dialog_RichWheel.prototype = $extend(com_redpeakgames_cloud9_WheelBase.prototype,{
	onClickCollect: null
	,buy: null
	,multiple: null
	,bottom: null
	,seManager: null
	,onRemoved: function(e) {
		com_redpeakgames_cloud9_WheelBase.prototype.onRemoved.call(this,e);
		this.seManager.clear();
	}
	,showSales: function() {
		var _gthis = this;
		this.wheelLayer.addChild(com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/sales/sale.png",false,3,45));
		this.addChild(com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/sales/title.png",false,39,148));
		var btnBuyCoins = new com_redpeakgames_cloud9_ui_ImageButton("img/sales/btn_buy",null,null,"mouse_click");
		btnBuyCoins.set(178,546);
		btnBuyCoins.set_scaleX(0.883);
		btnBuyCoins.set_scaleY(0.883);
		btnBuyCoins.set_onClick(function(e) {
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.open.shop",true,false));
			_gthis.close();
		});
		this.addChild(btnBuyCoins);
		var btnClose = new com_redpeakgames_cloud9_ui_ImageButton("img/sales/btn_x_likeus",null,null,"mouse_click");
		btnClose.set(513,-2);
		this.addChild(btnClose);
		btnClose.set_onClick(function(e1) {
			btnClose.set_work(false);
			_gthis.close();
		});
		motion_Actuate.tween(this.wheelCanvas,60,{ rotation : 360}).ease(motion_easing_Linear.get_easeNone()).repeat();
	}
	,showEventSpin: function() {
		this.sePlay("sales/Wheel_Open_Popup_01",0,300);
	}
	,spin: function(index,runtime,prize,type) {
		com_redpeakgames_cloud9_WheelBase.prototype.spin.call(this,index,runtime,prize,type);
		this.sePlay("sales/Wheel_Spin_Click_01");
		this.sePlay("sales/Wheel_Start",0,600);
	}
	,setValues: function(buy,multiple) {
		this.buy = buy;
		this.multiple = multiple;
	}
	,onStop: function() {
		var _gthis = this;
		com_redpeakgames_cloud9_WheelBase.prototype.onStop.call(this);
		var bottom2 = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/sales/botton_2.png",false,-153,285,0);
		this.addChild(bottom2);
		motion_Actuate.tween(this.bottom,0.5,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_gthis.removeChild(_gthis.bottom);
		});
		motion_Actuate.tween(bottom2,0.5,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			var multipleValue = _gthis.multiple * 10 | 0;
			if(multipleValue % 10 == 0) {
				multipleValue = multipleValue / 10 | 0;
			}
			var buyCoin = new com_redpeakgames_cloud9_dialog_NumberBitmapRichWheel("img/sales/jackpot_price_font.png",500,40,60,12,1,-4,0);
			buyCoin.set_x(7);
			buyCoin.set_y(473);
			buyCoin.set_scaleX(0.4);
			buyCoin.set_scaleY(0.4);
			buyCoin.textAlign = 0;
			buyCoin.set_commaY(8);
			buyCoin.commaWidth = 16;
			_gthis.addChild(buyCoin);
			buyCoin.set_value(_gthis.buy);
			var multiplier = new com_redpeakgames_cloud9_dialog_NumberBitmapRichWheel("img/sales/font_rich.png",104,40,46,12,1,-8,0);
			multiplier.set_x(223);
			multiplier.set_y(465);
			multiplier.isFloat = true;
			multiplier.textAlign = 0;
			multiplier.set_commaY(3);
			multiplier.commaWidth = 18;
			multiplier.set_value(new haxe__$Int64__$_$_$Int64(multipleValue >> 31,multipleValue));
			_gthis.addChild(multiplier);
			var totalCoin = new com_redpeakgames_cloud9_dialog_NumberBitmapRichWheel("img/sales/jackpot_price_font.png",500,40,60,12,1,-4,0);
			totalCoin.set_x(344);
			totalCoin.set_y(473);
			totalCoin.set_scaleX(0.4);
			totalCoin.set_scaleY(0.4);
			totalCoin.textAlign = 0;
			totalCoin.set_commaY(8);
			totalCoin.commaWidth = 16;
			totalCoin.set_value(new haxe__$Int64__$_$_$Int64(0,0));
			_gthis.addChild(totalCoin);
			buyCoin.set_alpha(0);
			multiplier.set_alpha(0);
			totalCoin.set_alpha(0);
			motion_Actuate.tween(buyCoin,0.4,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).delay(0.4);
			_gthis.sePlay("sales/Wheel_Report",0,400);
			var tx = multiplier.get_x();
			var ty = multiplier.get_y();
			var _g = multiplier;
			_g.set_x(_g.get_x() - 104.);
			var _g1 = multiplier;
			_g1.set_y(_g1.get_y() - 46.);
			multiplier.set_scaleX(3);
			multiplier.set_scaleY(3);
			motion_Actuate.tween(multiplier,0.4,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone()).delay(0.8);
			motion_Actuate.tween(multiplier,0.4,{ x : tx, y : ty, scaleX : 1, scaleY : 1},false).ease(motion_easing_Quad.get_easeIn()).delay(0.8);
			_gthis.sePlay("stamp_01",0,1200);
			var ss = spritesheet_importers_SparrowImporter.parse(openfl_Assets.getText("img/sales/multiply_e.xml"),"img/sales");
			var frames = [];
			var _g2 = 0;
			while(_g2 < 30) frames.push(_g2++);
			ss.addBehavior(new spritesheet_data_BehaviorData("_e",frames,false,30));
			haxe_Timer.delay(function() {
				var ani = new spritesheet_AnimatedSprite(ss);
				ani.showBehavior("_e");
				ani.set_x(156);
				ani.set_y(439);
				_gthis.addChildAt(ani,_gthis.getChildIndex(multiplier));
				_gthis.animations.push(ani);
				haxe_Timer.delay(function() {
					if(ani.parent != null) {
						_gthis.removeChild(ani);
					}
					HxOverrides.remove(_gthis.animations,ani);
					ani.clear();
					ani = null;
				},1000);
			},1200);
			motion_Actuate.tween(totalCoin,0.4,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).delay(1.5);
			haxe_Timer.delay(function() {
				totalCoin.draw(_gthis.prize,true,2000);
			},1500);
			_gthis.sePlay("sales/Wheel_Collect_Loop",99999,1500);
			totalCoin.onEnd = function() {
				totalCoin.onEnd = null;
				_gthis.seStop("sales/Wheel_Collect_Loop");
				_gthis.sePlay("sales/Wheel_Count_Loop_01");
			};
			var btnGetCoins = new com_redpeakgames_cloud9_ui_ImageButton("img/sales/btn_get",null,null,"mouse_click");
			btnGetCoins.set(178,546,0,false);
			btnGetCoins.set_scaleX(0.883);
			btnGetCoins.set_scaleY(0.883);
			btnGetCoins.set_onClick(function(e) {
				if(_gthis.onClickCollect != null) {
					_gthis.onClickCollect();
				}
				_gthis.close();
			});
			_gthis.addChild(btnGetCoins);
			motion_Actuate.tween(btnGetCoins,1,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).delay(2.9).onComplete(function() {
				btnGetCoins.set_work(true);
			});
		});
	}
	,placeUI: function() {
		var _gthis = this;
		com_redpeakgames_cloud9_WheelBase.prototype.placeUI.call(this);
		this.set_alpha(0);
		this.canvas.set_alpha(0);
		motion_Actuate.tween(this,0.3,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			var ty = _gthis.canvas.get_y();
			var _g = _gthis.canvas;
			_g.set_y(_g.get_y() - 150);
			motion_Actuate.tween(_gthis.canvas,0.5,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(_gthis.canvas,1.5,{ y : ty},false).ease(motion_easing_Elastic.get_easeOut());
		});
		var wheelImg = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/sales/pan.png",false);
		wheelImg.smoothing = true;
		wheelImg.set_x(-279);
		wheelImg.set_y(-277);
		this.wheelCanvas.set_x(285);
		this.wheelCanvas.set_y(285);
		this.wheelCanvas.addChild(wheelImg);
		var light1 = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/sales/light_1.png",false,-285,-285,1,true);
		var light2 = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/sales/light_2.png",false,-285,-285,1,true);
		this.wheelCanvas.addChild(light1);
		this.wheelCanvas.addChild(light2);
		motion_Actuate.tween(light1,1,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat().onUpdate(function() {
			light2.set_alpha(1 - light1.get_alpha());
		});
		this.wheelLayer.addChild(com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/sales/crown.png",false,231,231));
		this.tip.set_x(280);
		this.tip.set_y(26);
		this.tip.addChild(com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/sales/arrow.png",false,-44,-30,1,true));
		this.bottom = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/sales/botton_1.png",false,-153,285);
		this.addChild(this.bottom);
	}
	,onIndexChangedDuringSpin: function() {
		this.tip.set_rotation(0);
		motion_Actuate.tween(this.tip,0.1,{ rotation : -30}).ease(motion_easing_Quad.get_easeOut()).reflect().repeat(1);
		this.sePlay("sales/Wheel_Loop_01",0);
	}
	,close: function() {
		var _gthis = this;
		this.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true,false));
		motion_Actuate.tween(this,0.2,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			if(_gthis.parent != null) {
				_gthis.parent.removeChild(_gthis);
			}
		});
	}
	,sePlay: function(id,loop,delay) {
		if(delay == null) {
			delay = 0;
		}
		if(loop == null) {
			loop = 0;
		}
		var _gthis = this;
		if(com_redpeakgames_cloud9_Global.mute) {
			return;
		}
		if(delay == 0) {
			this.seManager.play(id,loop,0);
		} else {
			haxe_Timer.delay(function() {
				_gthis.seManager.play(id,loop,0);
			},delay);
		}
	}
	,seStop: function(id) {
		this.seManager.stop(id);
	}
	,__class__: com_redpeakgames_cloud9_dialog_RichWheel
});
var com_redpeakgames_cloud9_ui_NumberField = function() {
	this.shortExpNum = 0;
	this.minStep = 1.0;
	this.step = 0;
	this.cur = 0;
	this.goal = new haxe__$Int64__$_$_$Int64(0,0);
	openfl_display_Sprite.call(this);
};
$hxClasses["com.redpeakgames.cloud9.ui.NumberField"] = com_redpeakgames_cloud9_ui_NumberField;
com_redpeakgames_cloud9_ui_NumberField.__name__ = ["com","redpeakgames","cloud9","ui","NumberField"];
com_redpeakgames_cloud9_ui_NumberField.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_ui_NumberField.prototype = $extend(openfl_display_Sprite.prototype,{
	goal: null
	,cur: null
	,step: null
	,onEnd: null
	,minStep: null
	,valueInt: null
	,shortExpNum: null
	,lastTick: null
	,tickPerFrame: null
	,draw: function(number,useCounter,time) {
		if(time == null) {
			time = 2000;
		}
		if(useCounter == null) {
			useCounter = false;
		}
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override this method"));
	}
	,clear: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override this method"));
	}
	,add: function(added) {
		var a = this.goal;
		var b = new haxe__$Int64__$_$_$Int64(added >> 31,added);
		var high = a.high + b.high | 0;
		var low = a.low + b.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,a.low) < 0) {
			++high;
			high = high | 0;
		}
		var newGoal = new haxe__$Int64__$_$_$Int64(high,low);
		var b1 = new haxe__$Int64__$_$_$Int64(0,0);
		var v = newGoal.high - b1.high | 0;
		if(v != 0) {
			v = v;
		} else {
			v = haxe__$Int32_Int32_$Impl_$.ucompare(newGoal.low,b1.low);
		}
		if((newGoal.high < 0?b1.high < 0?v:-1:b1.high >= 0?v:1) >= 0) {
			this.draw(newGoal);
		}
	}
	,get_value: function() {
		return this.goal;
	}
	,set_value: function(value) {
		this.draw(value);
		return value;
	}
	,get_valueInt: function() {
		var x = this.goal;
		if(x.high != x.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		return x.low;
	}
	,get_cv: function() {
		return haxe_Int64Helper.fromFloat(this.cur);
	}
	,set_cv: function(v) {
		this.cur = haxe_Int64Helper.toFloat(v);
		return v;
	}
	,isEnd: function() {
		var a = this.goal;
		var b = haxe_Int64Helper.fromFloat(this.cur);
		if(a.high == b.high) {
			return a.low == b.low;
		} else {
			return false;
		}
	}
	,__class__: com_redpeakgames_cloud9_ui_NumberField
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_cv:"set_cv",get_cv:"get_cv",get_valueInt:"get_valueInt",set_value:"set_value",get_value:"get_value"})
});
var com_redpeakgames_cloud9_ui_NumberBitmap = function(path,len,width,height,col,row,offset,doffset) {
	if(doffset == null) {
		doffset = 6;
	}
	if(offset == null) {
		offset = 3;
	}
	if(row == null) {
		row = 1;
	}
	if(col == null) {
		col = 10;
	}
	if(height == null) {
		height = 75;
	}
	if(width == null) {
		width = 50;
	}
	com_redpeakgames_cloud9_ui_NumberField.call(this);
	this.tile = { width : width, height : height};
	this.offset = offset;
	this.set_len(len);
	this.commaWidth = 9;
	this.set_commaY(2);
	this.useDollar = false;
	this.dollarWidth = 14;
	this.set_dollarY(-3);
	this.textAlign = 0;
	this.cur = 0;
	this.tickPerFrame = 1000 / openfl_Lib.current.stage.get_frameRate();
	this.addedShortExp = false;
	this.useComma = true;
	var ts = new openfl_display_Tileset(openfl_Assets.getBitmapData(path));
	this.tm = new openfl_display_Tilemap(this.len + width,height * 2,ts);
	this.addChild(this.tm);
	this.tm.set_y(-(height / 2));
	var _g1 = 0;
	while(_g1 < row) {
		var i = _g1++;
		var _g3 = 0;
		while(_g3 < col) {
			var j = _g3++;
			if(j != 12) {
				ts.addRect(new openfl_geom_Rectangle(j * width,i * height,width,height));
			} else {
				ts.addRect(new openfl_geom_Rectangle(j * width,i * height,width,height + doffset));
			}
		}
	}
};
$hxClasses["com.redpeakgames.cloud9.ui.NumberBitmap"] = com_redpeakgames_cloud9_ui_NumberBitmap;
com_redpeakgames_cloud9_ui_NumberBitmap.__name__ = ["com","redpeakgames","cloud9","ui","NumberBitmap"];
com_redpeakgames_cloud9_ui_NumberBitmap.__super__ = com_redpeakgames_cloud9_ui_NumberField;
com_redpeakgames_cloud9_ui_NumberBitmap.prototype = $extend(com_redpeakgames_cloud9_ui_NumberField.prototype,{
	tile: null
	,offset: null
	,tm: null
	,addedShortExp: null
	,len: null
	,variables: null
	,commaWidth: null
	,commaY: null
	,useComma: null
	,dollarWidth: null
	,dollarY: null
	,useDollar: null
	,textAlign: null
	,clear: function() {
		this.cur = 0;
		this.tm.removeTiles();
	}
	,draw: function(number,useCounter,time) {
		if(time == null) {
			time = 2000;
		}
		if(useCounter == null) {
			useCounter = false;
		}
		this.cur = haxe_Int64Helper.toFloat(this.get_value());
		this.goal = number;
		var tmp;
		if(useCounter) {
			var a = this.goal;
			var b = haxe_Int64Helper.fromFloat(this.cur);
			var v = a.high - b.high | 0;
			if(v != 0) {
				v = v;
			} else {
				v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
			}
			tmp = (a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) <= 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			useCounter = false;
		}
		if(useCounter) {
			this.step = (haxe_Int64Helper.toFloat(this.goal) - this.cur) / (time / (1000 / openfl_Lib.current.stage.get_frameRate()));
			this.step = Math.max(this.step,this.minStep);
			this.removeEventListener("enterFrame",$bind(this,this.onUpdate));
			this.lastTick = openfl_Lib.getTimer();
			this.addEventListener("enterFrame",$bind(this,this.onUpdate));
		} else {
			this.paint(number);
			if(this.onEnd != null) {
				this.onEnd();
			}
		}
	}
	,getNumLength: function(number) {
		var len = 1;
		var b = new haxe__$Int64__$_$_$Int64(0,0);
		var v = number.high - b.high | 0;
		if(v != 0) {
			v = v;
		} else {
			v = haxe__$Int32_Int32_$Impl_$.ucompare(number.low,b.low);
		}
		if((number.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) < 0) {
			var b1 = new haxe__$Int64__$_$_$Int64(-1,-1);
			var al = number.low & 65535;
			var ah = number.low >>> 16;
			var bl = b1.low & 65535;
			var bh = b1.low >>> 16;
			var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
			var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
			var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
			var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
			var low = p00;
			var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
			p01 = p01 << 16;
			low = p00 + p01 | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
				++high;
				high = high | 0;
			}
			p10 = p10 << 16;
			low = low + p10 | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
				++high;
				high = high | 0;
			}
			high = high + (haxe__$Int32_Int32_$Impl_$.mul(number.low,b1.high) + haxe__$Int32_Int32_$Impl_$.mul(number.high,b1.low) | 0) | 0;
			number = new haxe__$Int64__$_$_$Int64(high,low);
		}
		while(true) {
			var tmp = haxe__$Int64_Int64_$Impl_$.divMod(number,new haxe__$Int64__$_$_$Int64(0,10)).quotient;
			number = tmp;
			var b2 = new haxe__$Int64__$_$_$Int64(0,0);
			if(tmp.high == b2.high && tmp.low == b2.low) {
				return len;
			} else {
				++len;
			}
		}
	}
	,onUpdate: function(e) {
		var curTick = openfl_Lib.getTimer();
		this.cur += this.step * ((curTick - this.lastTick) / this.tickPerFrame);
		var a = haxe_Int64Helper.fromFloat(this.cur);
		var b = this.goal;
		var v = a.high - b.high | 0;
		if(v != 0) {
			v = v;
		} else {
			v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
		}
		if((a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) >= 0) {
			this.cur = haxe_Int64Helper.toFloat(this.goal);
			this.removeEventListener("enterFrame",$bind(this,this.onUpdate));
			if(this.onEnd != null) {
				this.onEnd();
			}
		}
		this.paint(haxe_Int64Helper.fromFloat(this.cur));
		this.lastTick = curTick;
	}
	,paint: function(number) {
		var _number = new haxe__$Int64__$_$_$Int64(number.high,number.low);
		var $short = false;
		if(this.shortExpNum > 0) {
			if(haxe__$Int64_Int64_$Impl_$.toString(_number).length > this.shortExpNum) {
				_number = haxe__$Int64_Int64_$Impl_$.divMod(_number,new haxe__$Int64__$_$_$Int64(0,1000)).quotient;
				$short = true;
			}
		}
		var numDigit = this.getNumLength(_number);
		var dw = this.useDollar?this.dollarWidth + (this.dollarWidth / 2 | 0):0;
		var cx = (numDigit - 1) * this.tile.width + (numDigit - 1) * this.offset + (this.useComma?((numDigit - 1) / 3 | 0) * this.commaWidth:0) + dw;
		cx = this.calcStartPoint(cx);
		if($short) {
			if(this.textAlign == 0) {
				cx += (this.tile.width + this.offset) / 2 | 0;
			} else if(this.textAlign == 4) {
				cx += this.tile.width + this.offset;
			}
		}
		var cur = new haxe__$Int64__$_$_$Int64(_number.high,_number.low);
		this.tm.removeTiles();
		if($short) {
			this.tm.addTile(new openfl_display_Tile(14,cx,this.tile.height / 2 | 0));
			cx -= this.tile.width + this.offset;
		}
		var _g1 = 0;
		var _g = this.getNumLength(_number);
		while(_g1 < _g) {
			var i = _g1++;
			var x = haxe__$Int64_Int64_$Impl_$.divMod(cur,new haxe__$Int64__$_$_$Int64(0,10)).modulus;
			if(x.high != x.low >> 31) {
				throw new js__$Boot_HaxeError("Overflow");
			}
			var digit = x.low;
			cur = haxe__$Int64_Int64_$Impl_$.divMod(cur,new haxe__$Int64__$_$_$Int64(0,10)).quotient;
			if(this.useComma && i != 0 && i % 3 == 0) {
				this.tm.addTile(new openfl_display_Tile(10,cx + (this.tile.width - this.commaWidth),this.commaY + (this.tile.height / 2 | 0)));
				cx -= this.commaWidth + this.offset;
			}
			this.tm.addTile(new openfl_display_Tile(digit,cx,this.tile.height / 2 | 0));
			cx -= this.tile.width + this.offset;
		}
		if(this.useDollar) {
			cx -= dw - (this.tile.width + this.offset);
			this.tm.addTile(new openfl_display_Tile(12,cx,this.dollarY + (this.tile.height / 2 | 0)));
		}
	}
	,calcStartPoint: function(cx) {
		if(this.textAlign == 0) {
			cx = (this.len / 2 | 0) + ((cx - this.tile.width) / 2 | 0);
		} else if(this.textAlign == 4) {
			cx = this.len;
		}
		return cx;
	}
	,forceEnd: function() {
		this.cur = haxe_Int64Helper.toFloat(this.goal);
	}
	,set_dollarY: function(value) {
		if(this.tm != null) {
			this.tm.set_height(Math.max(this.tm.get_height() + value,this.tm.get_height()) | 0);
		}
		return this.dollarY = value;
	}
	,set_commaY: function(value) {
		if(this.tm != null) {
			this.tm.set_height(Math.max(this.tm.get_height() + value,this.tm.get_height()) | 0);
		}
		return this.commaY = value;
	}
	,set_len: function(value) {
		if(this.tm != null) {
			this.tm.set_width(this.len);
		}
		return this.len = value;
	}
	,__class__: com_redpeakgames_cloud9_ui_NumberBitmap
	,__properties__: $extend(com_redpeakgames_cloud9_ui_NumberField.prototype.__properties__,{set_dollarY:"set_dollarY",set_commaY:"set_commaY",set_len:"set_len"})
});
var com_redpeakgames_cloud9_dialog_NumberBitmapRichWheel = function(path,len,width,height,col,row,offset,doffset) {
	if(doffset == null) {
		doffset = 6;
	}
	if(offset == null) {
		offset = 3;
	}
	if(row == null) {
		row = 1;
	}
	if(col == null) {
		col = 10;
	}
	if(height == null) {
		height = 75;
	}
	if(width == null) {
		width = 50;
	}
	com_redpeakgames_cloud9_ui_NumberBitmap.call(this,path,len,width,height,col,row,offset,doffset);
	this.isFloat = false;
};
$hxClasses["com.redpeakgames.cloud9.dialog.NumberBitmapRichWheel"] = com_redpeakgames_cloud9_dialog_NumberBitmapRichWheel;
com_redpeakgames_cloud9_dialog_NumberBitmapRichWheel.__name__ = ["com","redpeakgames","cloud9","dialog","NumberBitmapRichWheel"];
com_redpeakgames_cloud9_dialog_NumberBitmapRichWheel.__super__ = com_redpeakgames_cloud9_ui_NumberBitmap;
com_redpeakgames_cloud9_dialog_NumberBitmapRichWheel.prototype = $extend(com_redpeakgames_cloud9_ui_NumberBitmap.prototype,{
	isFloat: null
	,paint: function(number) {
		var numDigit = this.getNumLength(number);
		var dw = this.useDollar?this.dollarWidth + (this.dollarWidth / 2 | 0):0;
		var cx = (numDigit - 1) * this.tile.width + (numDigit - 1) * this.offset + ((numDigit - 1) / 3 | 0) * this.commaWidth + dw;
		cx = this.calcStartPoint(cx) - ((this.isFloat?this.offset / 2:0) | 0);
		var cur = number;
		this.tm.removeTiles();
		var _g1 = 0;
		while(_g1 < numDigit) {
			var i = _g1++;
			var x = haxe__$Int64_Int64_$Impl_$.divMod(cur,new haxe__$Int64__$_$_$Int64(0,10)).modulus;
			if(x.high != x.low >> 31) {
				throw new js__$Boot_HaxeError("Overflow");
			}
			var digit = x.low;
			cur = haxe__$Int64_Int64_$Impl_$.divMod(cur,new haxe__$Int64__$_$_$Int64(0,10)).quotient;
			if(i != 0 && i % (this.isFloat?1:3) == 0) {
				this.tm.addTile(new openfl_display_Tile(10,cx + (this.tile.width - this.commaWidth),this.commaY + (this.tile.height / 2 | 0)));
				cx -= this.commaWidth + this.offset;
			}
			this.tm.addTile(new openfl_display_Tile(digit,cx,this.tile.height / 2 | 0));
			cx -= this.tile.width + this.offset;
		}
		if(this.useDollar) {
			cx -= dw - (this.tile.width + this.offset);
			this.tm.addTile(new openfl_display_Tile(12,cx,this.dollarY + (this.tile.height / 2 | 0)));
		}
	}
	,__class__: com_redpeakgames_cloud9_dialog_NumberBitmapRichWheel
});
var com_redpeakgames_cloud9_dialog_SReward7 = function() {
	openfl_display_Sprite.call(this);
	var bg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/minigame/7day_bg.jpg"));
	bg.set_x(64);
	bg.set_y(60);
	this.addChild(bg);
	this.loadFrames();
	var title = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/minigame/title.png"));
	title.set_x(128);
	title.set_y(16);
	this.addChild(title);
	this.btnClose = new com_redpeakgames_cloud9_ui_ImageButton("img/minigame/btn_x",null,null,"mouse_click");
	this.btnClose.set_x(616);
	this.btnClose.set_y(10);
	this.btnClose.set_onClick($bind(this,this.onClickClose));
	this.addChild(this.btnClose);
	this.pos = [{ x : 76, y : 99, width : 103},{ x : 179, y : 99, width : 103},{ x : 282, y : 99, width : 103},{ x : 385, y : 99, width : 103},{ x : 488, y : 99, width : 103},{ x : 76, y : 202, width : 206},{ x : 283, y : 202, width : 312}];
	this.coinPos = [{ x : 76, y : 89, width : 0},{ x : 179, y : 89, width : 0},{ x : 282, y : 89, width : 0},{ x : 385, y : 89, width : 0},{ x : 488, y : 89, width : 0},{ x : 129, y : 192, width : 0},{ x : 387, y : 192, width : 0}];
	this.recved = [];
	this.loadRects();
};
$hxClasses["com.redpeakgames.cloud9.dialog.SReward7"] = com_redpeakgames_cloud9_dialog_SReward7;
com_redpeakgames_cloud9_dialog_SReward7.__name__ = ["com","redpeakgames","cloud9","dialog","SReward7"];
com_redpeakgames_cloud9_dialog_SReward7.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_SReward7.prototype = $extend(openfl_display_Sprite.prototype,{
	btnClose: null
	,lastTick: null
	,topf: null
	,lf: null
	,rf: null
	,bttmf: null
	,check: null
	,rect: null
	,ra: null
	,recved: null
	,pos: null
	,coinPos: null
	,loadRects: function() {
		this.rect = spritesheet_importers_SparrowImporter.parse(openfl_Assets.getText("img/minigame/rects.xml"),"img/minigame");
		this.rect.addBehavior(new spritesheet_data_BehaviorData("1",[0,1],true,2));
		this.rect.addBehavior(new spritesheet_data_BehaviorData("2",[0,1],true,2));
		this.rect.addBehavior(new spritesheet_data_BehaviorData("3",[0,1],true,2));
		this.rect.addBehavior(new spritesheet_data_BehaviorData("4",[0,1],true,2));
		this.rect.addBehavior(new spritesheet_data_BehaviorData("5",[0,1],true,2));
		this.rect.addBehavior(new spritesheet_data_BehaviorData("6",[2,3],true,2));
		this.rect.addBehavior(new spritesheet_data_BehaviorData("7",[4,5],true,2));
	}
	,loadFrames: function() {
		var ss = spritesheet_importers_SparrowImporter.parse(openfl_Assets.getText("img/minigame/frames.xml"),"img/minigame");
		ss.addBehavior(new spritesheet_data_BehaviorData("top",[6,7],true,2));
		ss.addBehavior(new spritesheet_data_BehaviorData("left",[2,3],true,2));
		ss.addBehavior(new spritesheet_data_BehaviorData("right",[4,5],true,2));
		ss.addBehavior(new spritesheet_data_BehaviorData("bottom",[0,1],true,2));
		this.topf = new spritesheet_AnimatedSprite(ss);
		this.topf.showBehavior("top");
		this.addChild(this.topf);
		this.lf = new spritesheet_AnimatedSprite(ss);
		this.lf.set_y(60);
		this.lf.showBehavior("left");
		this.addChild(this.lf);
		this.rf = new spritesheet_AnimatedSprite(ss);
		this.rf.set_x(604);
		this.rf.set_y(60);
		this.rf.showBehavior("right");
		this.addChild(this.rf);
		this.bttmf = new spritesheet_AnimatedSprite(ss);
		this.bttmf.set_y(408);
		this.bttmf.showBehavior("bottom");
		this.addChild(this.bttmf);
	}
	,start: function(day,first,balance) {
		var json = JSON.parse(openfl_Assets.getText("data/sr7.json"));
		this.drawRewards(json.rewards);
		this.drawReceived(day,first,balance);
		this.lastTick = openfl_Lib.getTimer();
		this.addEventListener("enterFrame",$bind(this,this.onLoop));
	}
	,drawReceived: function(day,first,balance) {
		var _gthis = this;
		var gap = first?0.1:0;
		var _g1 = 0;
		var _g = day - 1;
		while(_g1 < _g) {
			var i = _g1++;
			var pcheck = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/minigame/" + (i < 5?"box_recivedreward.png":"box_recivedreward2.png")));
			pcheck.set_x(this.pos[i].x - 1);
			pcheck.set_y(this.pos[i].y - 2);
			pcheck.set_alpha(0);
			this.addChild(pcheck);
			motion_Actuate.tween(pcheck,0.2,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).delay(gap * i);
		}
		var check = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/minigame/todayreward_check.png"));
		check.set_x(this.coinPos[day - 1].x + 7 - 132);
		check.set_y(this.coinPos[day - 1].y + 14 - 112);
		check.set_alpha(0);
		check.set_scaleX(3);
		check.set_scaleY(3);
		this.addChild(check);
		motion_Actuate.tween(check,0.3,{ alpha : 1, x : this.coinPos[day - 1].x + 7, y : this.coinPos[day - 1].y + 14, scaleX : 1, scaleY : 1}).ease(motion_easing_Back.get_easeOut()).delay(gap * day);
		this.ra = new spritesheet_AnimatedSprite(this.rect);
		this.ra.set_x(this.pos[day - 1].x - 1);
		this.ra.set_y(this.pos[day - 1].y - 1);
		this.ra.set_alpha(0);
		this.ra.showBehavior(day == null?"null":"" + day);
		this.addChild(this.ra);
		motion_Actuate.tween(this.ra,0.2,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).delay(gap * day + 0.3);
		if(first) {
			haxe_Timer.delay(function() {
				var tmp = day - 1;
				var tmp1 = _gthis.get_x() | 0;
				var tmp2 = _gthis.coinPos[tmp].x + tmp1 + 30;
				var tmp3 = day - 1;
				var tmp4 = _gthis.get_y() | 0;
				_gthis.parent.addChild(new com_redpeakgames_cloud9_ui_DrawCoins(tmp2,_gthis.coinPos[tmp3].y + tmp4 + 30,698,80,1500,10,balance,Reflect.field(_gthis.parent,"txCoin")));
			},gap * day * 1000 | 0);
		}
	}
	,drawRewards: function(rs) {
		var txFormat = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",20,7669662);
		txFormat.align = 0;
		var _g1 = 0;
		var _g = rs.length;
		while(_g1 < _g) {
			var i = _g1++;
			var bitmap = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/minigame/" + (rs[i].count < 10000?"coin_1":"coin_2") + ".png"));
			bitmap.set_x(this.coinPos[i].x);
			bitmap.set_y(this.coinPos[i].y);
			this.addChild(bitmap);
			var txCount = com_redpeakgames_cloud9_ui_TxField.make(this.pos[i].x,this.pos[i].y + 69,this.pos[i].width,txFormat);
			txCount.set_text("+" + com_redpeakgames_cloud9_utils_Number.addCommaStr(rs[i].count));
			this.addChild(txCount);
		}
	}
	,onClickClose: function(e) {
		this.removeEventListener("enterFrame",$bind(this,this.onLoop));
		this.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
		this.parent.removeChild(this);
	}
	,onLoop: function(e) {
		var cur = openfl_Lib.getTimer();
		var delta = cur - this.lastTick;
		this.topf.update(delta);
		this.lf.update(delta);
		this.rf.update(delta);
		this.bttmf.update(delta);
		if(this.ra != null) {
			this.ra.update(delta);
		}
		this.lastTick = cur;
	}
	,__class__: com_redpeakgames_cloud9_dialog_SReward7
});
var com_redpeakgames_cloud9_dialog_Sales = function(saa) {
	var _gthis = this;
	openfl_display_Sprite.call(this);
	if(saa.bg.path != null && saa.bg.path.length != 0) {
		this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/" + saa.bg.path,false)));
	}
	this.set_x(saa.bg.x);
	this.set_y(saa.bg.y);
	this.shinny00 = com_redpeakgames_cloud9_utils_BitmapMaker.create("img/sales/shinny_01.png");
	this.shinny01 = com_redpeakgames_cloud9_utils_BitmapMaker.create("img/sales/shinny_02.png",null,0,0,0);
	this.addChild(this.shinny00);
	this.addChild(this.shinny01);
	motion_Actuate.tween(this.shinny00,0.233,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat();
	motion_Actuate.tween(this.shinny01,0.233,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat();
	if(saa.exit.path != null && saa.exit.path.length != 0) {
		this.exit = new com_redpeakgames_cloud9_ui_ImageButton("img/" + saa.exit.path,null,null,"mouse_click");
		this.exit.set_x(saa.exit.x);
		this.exit.set_y(saa.exit.y);
		this.exit.set_onClick($bind(this,this.onClickClose));
		this.addChild(this.exit);
	}
	if(saa.buybtn.path != null && saa.buybtn.path.length != 0 && saa.buybtnAni.info != null && saa.buybtnAni.info.length != 0) {
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/" + saa.buybtn.path + "_e.png",false),saa.buybtnAni.info[0],saa.buybtnAni.info[1],saa.buybtnAni.info[2],saa.buybtnAni.info[3]);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",saa.buybtnAni.ani,false,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",saa.buybtnAni.stop,false,1));
		this.buybtn_e = new com_redpeakgames_cloud9_ui_AnimatedButton("img/" + saa.buybtn.path,"mouse_click","png",new spritesheet_AnimatedSprite(ss),4);
		this.buybtn_e.set_name("buybtn");
		this.buybtn_e.set_x(saa.buybtn.x);
		this.buybtn_e.set_y(saa.buybtn.y);
		this.buybtn_e.set_onClick(function(e) {
			if(saa.value.value != null) {
				_gthis.onClickBuy(e);
				try {
					openfl_external_ExternalInterface.call("buyCoins",saa.value.value,"sales");
				} catch( e1 ) {
					haxe_CallStack.lastException = e1;
					if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
					if( js_Boot.__instanceof(e1,openfl_errors_Error) ) {
						haxe_Log.trace(e1.toString(),{ fileName : "Sales.hx", lineNumber : 86, className : "com.redpeakgames.cloud9.dialog.Sales", methodName : "new"});
					} else throw(e1);
				}
			}
		});
		this.addChild(this.buybtn_e);
	} else {
		this.buybtn_noe = new com_redpeakgames_cloud9_ui_ImageButton("img/" + saa.buybtn.path,null,null,"mouse_click");
		this.buybtn_noe.set_x(saa.buybtn.x);
		this.buybtn_noe.set_y(saa.buybtn.y);
		this.buybtn_noe.set_onClick(function(e2) {
			if(saa.value.value != null) {
				_gthis.onClickBuy(e2);
				try {
					openfl_external_ExternalInterface.call("buyCoins",saa.value.value,"sales");
				} catch( e3 ) {
					haxe_CallStack.lastException = e3;
					if (e3 instanceof js__$Boot_HaxeError) e3 = e3.val;
					if( js_Boot.__instanceof(e3,openfl_errors_Error) ) {
						haxe_Log.trace(e3.toString(),{ fileName : "Sales.hx", lineNumber : 105, className : "com.redpeakgames.cloud9.dialog.Sales", methodName : "new"});
					} else throw(e3);
				}
			} else {
				com_redpeakgames_cloud9_utils_DynamicCall.method(_gthis.parent,"onClickBuyCoins",[null]);
				if(_gthis.buybtn_e != null) {
					_gthis.buybtn_e.set_work(false);
				}
				if(_gthis.buybtn_noe != null) {
					_gthis.buybtn_noe.set_work(false);
				}
				if(_gthis.exit != null) {
					_gthis.exit.set_work(false);
				}
				com_redpeakgames_cloud9_utils_DynamicCall.method(_gthis.parent,"removeScreenOnly",[]);
				var tx = e2 == null?_gthis.get_x() + 180:_gthis.get_x() + 530;
				var ty = e2 == null?_gthis.get_y() + 443:_gthis.get_y() + 24;
				motion_Actuate.stop(_gthis.shinny00);
				motion_Actuate.stop(_gthis.shinny01);
				_gthis.act = motion_Actuate.tween(_gthis,0.2,{ alpha : 0, x : tx, y : ty, scaleX : 0, scaleY : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
					if(_gthis.parent != null) {
						_gthis.parent.removeChild(_gthis);
					}
					motion_Actuate.unload(_gthis.act);
					_gthis.act = null;
					_gthis.removeChildren();
				});
			}
		});
		this.addChild(this.buybtn_noe);
	}
};
$hxClasses["com.redpeakgames.cloud9.dialog.Sales"] = com_redpeakgames_cloud9_dialog_Sales;
com_redpeakgames_cloud9_dialog_Sales.__name__ = ["com","redpeakgames","cloud9","dialog","Sales"];
com_redpeakgames_cloud9_dialog_Sales.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_Sales.prototype = $extend(openfl_display_Sprite.prototype,{
	exit: null
	,buybtn_noe: null
	,buybtn_e: null
	,remainTime: null
	,act: null
	,shinny00: null
	,shinny01: null
	,onClickClose: function(e) {
		var _gthis = this;
		if(this.buybtn_e != null) {
			this.buybtn_e.set_work(false);
		}
		if(this.buybtn_noe != null) {
			this.buybtn_noe.set_work(false);
		}
		if(this.exit != null) {
			this.exit.set_work(false);
		}
		motion_Actuate.stop(this.shinny00);
		motion_Actuate.stop(this.shinny01);
		this.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
		this.act = motion_Actuate.tween(this,0.2,{ alpha : 0, x : e == null?this.get_x() + 330:this.get_x() + 536, y : e == null?this.get_y() + 557:this.get_y() + 141, scaleX : 0, scaleY : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			if(_gthis.parent != null) {
				_gthis.parent.removeChild(_gthis);
			}
			motion_Actuate.unload(_gthis.act);
			_gthis.act = null;
			_gthis.removeChildren();
		});
	}
	,onClickBuy: function(e) {
		this.dispatchEvent(new openfl_events_DataEvent("ge.to.normalscreen",true,false));
		this.onClickClose(null);
	}
	,onLoop: function(e) {
		var cur = openfl_Lib.getTimer();
		if(cur > 1800000) {
			this.onClickClose(null);
		}
		var secs = 1800 - (cur / 1000 | 0);
		this.remainTime.set_text(((secs / 60 | 0) < 10?"0" + (secs / 60 | 0):Std.string(secs / 60 | 0)) + ":" + (secs % 60 < 10?"0" + secs % 60:Std.string(secs % 60)));
	}
	,__class__: com_redpeakgames_cloud9_dialog_Sales
});
var com_redpeakgames_cloud9_dialog_SalesAsset = function() {
};
$hxClasses["com.redpeakgames.cloud9.dialog.SalesAsset"] = com_redpeakgames_cloud9_dialog_SalesAsset;
com_redpeakgames_cloud9_dialog_SalesAsset.__name__ = ["com","redpeakgames","cloud9","dialog","SalesAsset"];
com_redpeakgames_cloud9_dialog_SalesAsset.prototype = {
	bg: null
	,value: null
	,exit: null
	,buybtn: null
	,buybtnAni: null
	,__class__: com_redpeakgames_cloud9_dialog_SalesAsset
};
var com_redpeakgames_cloud9_dialog_SalesRandomBox = function() {
	com_redpeakgames_cloud9_dialog_PopupBase.call(this);
	com_redpeakgames_cloud9_dialog_SalesRandomBox.isOpenned = true;
	this.bcoin = new haxe__$Int64__$_$_$Int64(0,0);
};
$hxClasses["com.redpeakgames.cloud9.dialog.SalesRandomBox"] = com_redpeakgames_cloud9_dialog_SalesRandomBox;
com_redpeakgames_cloud9_dialog_SalesRandomBox.__name__ = ["com","redpeakgames","cloud9","dialog","SalesRandomBox"];
com_redpeakgames_cloud9_dialog_SalesRandomBox.__super__ = com_redpeakgames_cloud9_dialog_PopupBase;
com_redpeakgames_cloud9_dialog_SalesRandomBox.prototype = $extend(com_redpeakgames_cloud9_dialog_PopupBase.prototype,{
	box: null
	,boxAni: null
	,btnBuy: null
	,bcoin: null
	,additionalPercent: null
	,placeUI: function() {
		var _gthis = this;
		this.set_x(429);
		if(openfl_Lib.current.stage.get_displayState() != 2) {
			this.set_y(142);
		} else {
			this.set_y(22);
		}
		this.addChild(com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/sales/christmas_in_july.png",false));
		this.addChild(com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/sales/up_to_coins.png",false,280,207));
		this.addChild(com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/sales/900.png",false,649,211));
		this.box = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/sales/christmas_box.png",false,274,86);
		this.addChild(this.box);
		var btnClose = new com_redpeakgames_cloud9_ui_ImageButton("img/shop/btn_x",null,null,"mouse_click");
		btnClose.set(837,83);
		this.addChild(btnClose);
		btnClose.set_onClick(function(e) {
			_gthis._close();
		});
		this.btnBuy = new com_redpeakgames_cloud9_ui_ImageButton("img/sales/btn_0.99",null,null,"mouse_click");
		this.btnBuy.set(432,624);
		this.addChild(this.btnBuy);
		this.btnBuy.set_onClick($bind(this,this.onClickBuy));
	}
	,onRemoved: function(e) {
		com_redpeakgames_cloud9_dialog_PopupBase.prototype.onRemoved.call(this,e);
		com_redpeakgames_cloud9_dialog_SalesRandomBox.isOpenned = false;
	}
	,onClickBuy: function(e) {
		openfl_external_ExternalInterface.call("buyCoins","0.99","sales");
	}
	,showPrize: function(bcoin,prize) {
		var _gthis = this;
		this.bcoin = bcoin;
		this.additionalPercent = (haxe_Int64Helper.toFloat(prize) / 130000 - 1.0) * 100 | 0;
		this.removeChild(this.btnBuy);
		var btnOk = new com_redpeakgames_cloud9_ui_ImageButton("img/sales/btn_ok",null,null,"mouse_click");
		btnOk.set(432,624);
		this.addChild(btnOk);
		btnOk.set_onClick(function(e) {
			btnOk.set_work(false);
			_gthis._close();
		});
		var ss = spritesheet_importers_SparrowImporter.parse(openfl_Assets.getText("img/sales/resized_christmas_box_e.xml"),"img/sales");
		ss.addBehavior(new spritesheet_data_BehaviorData("open",[0,1,2,3,4,5],false,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("loop",[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],true,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("disappear",[25,26,27,28,29,30],false,15));
		this.boxAni = new spritesheet_AnimatedSprite(ss,true);
		this.boxAni.set_x(274);
		this.boxAni.set_y(86);
		this.boxAni.set_scaleX(1.418);
		this.boxAni.set_scaleY(1.418);
		this.addChild(this.boxAni);
		this.animations.push(this.boxAni);
		this.boxAni.showBehaviors(["open","loop"]);
		this.boxAni.mouseEnabled = false;
		if(this.box != null) {
			this.removeChild(this.box);
			this.box = null;
		}
		var numPrize = new com_redpeakgames_cloud9_ui_NumberBitmap("font/font_herald_2.png",1087,28,38,14,1,0,9);
		numPrize.set_commaY(10);
		numPrize.commaWidth = 14;
		numPrize.useDollar = true;
		numPrize.dollarWidth = 28;
		numPrize.set_dollarY(-3);
		numPrize.set_alpha(0);
		numPrize.set_value(new haxe__$Int64__$_$_$Int64(0,0));
		numPrize.draw(prize,true,1000);
		this.addChild(numPrize);
		numPrize.set_y(408);
		motion_Actuate.tween(numPrize,0.5,{ y : 347, alpha : 1}).ease(motion_easing_Quad.get_easeOut());
		numPrize.onEnd = $bind(this,this.onEndNumPrizeDraw);
	}
	,onEndNumPrizeDraw: function() {
		var wow1 = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/sales/wow.png",false,280,207);
		var wow2 = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/sales/great.png",false,649,211);
		this.addChildAt(wow1,3);
		this.addChildAt(wow2,3);
		wow1.set_alpha(0);
		wow2.set_alpha(0);
		motion_Actuate.tween(wow1,0.5,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
		motion_Actuate.tween(wow2,0.5,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
		var congrat = new openfl_display_Sprite();
		congrat.set_x(327);
		congrat.set_y(563);
		this.addChild(congrat);
		congrat.addChild(com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/sales/wow_you_got.png",false));
		var tf = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",16,16777215);
		tf.align = 0;
		var txCong = com_redpeakgames_cloud9_ui_TxField.make(0,2,456,tf);
		txCong.set_text("Wow! You got " + this.additionalPercent + "% more coins! Congrats!");
		congrat.addChild(txCong);
		congrat.set_alpha(0);
		congrat.set_y(congrat.get_y() + 15);
		motion_Actuate.tween(congrat,0.5,{ y : congrat.get_y() - 15, alpha : 1}).ease(motion_easing_Quad.get_easeOut());
	}
	,_close: function() {
		var _gthis = this;
		if(this.boxAni != null) {
			this.boxAni.showBehavior("disappear");
			var onComplete = null;
			onComplete = function(e) {
				_gthis.boxAni.removeEventListener("complete",onComplete);
				_gthis.close();
			};
			this.boxAni.addEventListener("complete",onComplete);
		} else {
			this.close();
		}
	}
	,close: function() {
		var a = this.bcoin;
		var b = new haxe__$Int64__$_$_$Int64(0,0);
		if(a.high != b.high || a.low != b.low) {
			this.dispatchEvent(new openfl_events_DataEvent("ge.balance.changed",true,false,JSON.stringify({ coin : haxe__$Int64_Int64_$Impl_$.toString(this.bcoin), showAddedCoin : true})));
		}
		com_redpeakgames_cloud9_dialog_PopupBase.prototype.close.call(this);
	}
	,__class__: com_redpeakgames_cloud9_dialog_SalesRandomBox
});
var com_redpeakgames_cloud9_dialog_SalesTimeLimit = function(x,y,salesTrackingId,udt) {
	var _gthis = this;
	openfl_display_Sprite.call(this);
	this.set_x(x);
	this.set_y(y);
	this.collectable = false;
	this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/sales/pop_ota_back.png")));
	var btn499 = new com_redpeakgames_cloud9_ui_ImageButton("img/sales/btn_sale_499",null,null,"mouse_click");
	btn499.set(98,610);
	btn499.set_onClick(function(e) {
		_gthis.onClose(null);
		openfl_external_ExternalInterface.call("buyCoins","4.99","sales");
	});
	this.addChild(btn499);
	var btn3499 = new com_redpeakgames_cloud9_ui_ImageButton("img/sales/btn_sale_3499",null,null,"mouse_click");
	btn3499.set(566,610);
	btn3499.set_onClick(function(e1) {
		_gthis.onClose(null);
		openfl_external_ExternalInterface.call("buyCoins","34.99","sales");
	});
	this.addChild(btn3499);
	this.btnCollect = new com_redpeakgames_cloud9_ui_ImageButton("img/sales/btn_ota_collect",null,null,"mouse_click");
	this.btnCollect.set(327,607);
	this.btnCollect.set_visible(false);
	this.btnCollect.set_onClick(function(e2) {
		_gthis.btnCollect.set_work(false);
		var httpOpenToAll = new com_redpeakgames_cloud9_utils_Http(udt.url + "event.ota.php",function(e3) {
			var json = JSON.parse(e3.target.data);
			if(Std.parseInt(json.prize) != 0) {
				var drawCoins = new com_redpeakgames_cloud9_ui_DrawCoins(_gthis.get_x() + _gthis.btnCollect.get_x() + 83 | 0,_gthis.get_y() + _gthis.btnCollect.get_y() + 17 | 0,737,80,1500,1,null,null,true);
				if(_gthis.parent != null) {
					_gthis.parent.addChild(drawCoins);
				}
				drawCoins.set_onCoinArrive(function() {
					_gthis.dispatchEvent(new openfl_events_DataEvent("ge.balance.changed",true,false,JSON.stringify({ coin : json.coin, dia : 0, showAddedCoin : true})));
				});
			}
			_gthis.bgTxt.set_visible(true);
			_gthis.txTime.set_visible(true);
			_gthis.collectable = false;
			_gthis.btnCollect.set_visible(false);
			com_redpeakgames_cloud9_TopMenu.remainOpenToAll = (openfl_Lib.getTimer() / 1000 | 0) + 7200;
		},function(e4) {
			haxe_Log.trace(e4.toString(),{ fileName : "SalesTimeLimit.hx", lineNumber : 122, className : "com.redpeakgames.cloud9.dialog.SalesTimeLimit", methodName : "new"});
		});
		var urlVariable = new openfl_net_URLVariables();
		urlVariable.uid = udt.uid;
		urlVariable.sig = udt.sig;
		httpOpenToAll.request(urlVariable);
	});
	this.addChild(this.btnCollect);
	var btnClose = new com_redpeakgames_cloud9_ui_ImageButton("img/bankrupt/btn_sales_x",null,null,"mouse_click");
	btnClose.set(765,90);
	this.addChild(btnClose);
	btnClose.set_onClick($bind(this,this.onClose));
	this.bgTxt = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/sales/btn_ota_collect_time.png"));
	this.bgTxt.set_x(327);
	this.bgTxt.set_y(607);
	this.addChild(this.bgTxt);
	var tf = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",28,65280);
	tf.align = 0;
	this.txTime = com_redpeakgames_cloud9_ui_TxField.make(359,618,137,tf);
	this.txTime.set_height(40);
	this.addChild(this.txTime);
	this.lastTick = openfl_Lib.getTimer();
	this.addEventListener("enterFrame",$bind(this,this.onUpdate));
};
$hxClasses["com.redpeakgames.cloud9.dialog.SalesTimeLimit"] = com_redpeakgames_cloud9_dialog_SalesTimeLimit;
com_redpeakgames_cloud9_dialog_SalesTimeLimit.__name__ = ["com","redpeakgames","cloud9","dialog","SalesTimeLimit"];
com_redpeakgames_cloud9_dialog_SalesTimeLimit.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_SalesTimeLimit.prototype = $extend(openfl_display_Sprite.prototype,{
	collectable: null
	,btnCollect: null
	,bgTxt: null
	,txDay: null
	,txTime: null
	,lastTick: null
	,makeBuyButton: function(path,externalFuncName,p1,p2,x,y) {
		var _gthis = this;
		var btn = new com_redpeakgames_cloud9_ui_ImageButton(path,null,null,"mouse_click");
		btn.set(x,y);
		btn.set_onClick(function(e) {
			_gthis.onClose(null);
			try {
				openfl_external_ExternalInterface.call(externalFuncName,p1,p2);
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
				if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
				if( js_Boot.__instanceof(e1,openfl_errors_Error) ) {
					haxe_Log.trace(e1.toString(),{ fileName : "SalesTimeLimit.hx", lineNumber : 161, className : "com.redpeakgames.cloud9.dialog.SalesTimeLimit", methodName : "makeBuyButton"});
				} else throw(e1);
			}
		});
		return btn;
	}
	,onUpdate: function(e) {
		var cur = openfl_Lib.getTimer();
		var delta = cur - this.lastTick;
		if(this.collectable) {
			this.lastTick = cur;
			return;
		}
		var date = new Date();
		var remain = com_redpeakgames_cloud9_TopMenu.remainOpenToAll - openfl_Lib.getTimer() / 1000 | 0;
		var h = (remain | 0) % 86400 / 3600 | 0;
		var m = (remain | 0) % 86400 % 3600 / 60 | 0;
		var s = (remain | 0) % 86400 % 3600 % 60 | 0;
		if(h < 0) {
			h = 0;
		}
		if(m < 0) {
			m = 0;
		}
		if(s < 0) {
			s = 0;
		}
		if(this.txTime != null) {
			this.txTime.set_text((h < 10?"0" + h:"" + h) + ":" + (m < 10?"0" + m:"" + m) + ":" + (s < 10?"0" + s:"" + s));
		}
		if(remain <= 0) {
			this.collectable = true;
			this.txTime.set_visible(false);
			this.bgTxt.set_visible(false);
			this.btnCollect.set_work(true);
			this.btnCollect.set_visible(true);
		}
		this.lastTick = cur;
	}
	,onClose: function(e) {
		this.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true,false));
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
		this.removeEventListener("enterFrame",$bind(this,this.onUpdate));
	}
	,__class__: com_redpeakgames_cloud9_dialog_SalesTimeLimit
});
var com_redpeakgames_cloud9_dialog_Shop = function(buyCount,udt,from,isDiaShop) {
	openfl_display_Sprite.call(this);
	this.set_x(594);
	this.udt = udt;
	this.from = from != null?from:"";
	this.buyCount = buyCount;
	this.isDiaShop = isDiaShop != null && isDiaShop == true;
	this.allTimer = [];
	this.animations = [];
	this.addEventListener("addedToStage",$bind(this,this.onAddedStage));
};
$hxClasses["com.redpeakgames.cloud9.dialog.Shop"] = com_redpeakgames_cloud9_dialog_Shop;
com_redpeakgames_cloud9_dialog_Shop.__name__ = ["com","redpeakgames","cloud9","dialog","Shop"];
com_redpeakgames_cloud9_dialog_Shop.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_Shop.prototype = $extend(openfl_display_Sprite.prototype,{
	udt: null
	,from: null
	,lastTick: null
	,animations: null
	,canvas: null
	,canvasRmember: null
	,beginner: null
	,highroller: null
	,buyCount: null
	,curSelect: null
	,back: null
	,isDiaShop: null
	,rmembers: null
	,barMask: null
	,btnRmember: null
	,btnClose: null
	,btnFreeCoin: null
	,allTimer: null
	,bonusLayer: null
	,loopTmr: null
	,remainTxt: null
	,onAddedStage: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.onAddedStage));
		this.back = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/shop/bg_coin_back.png",false));
		this.addChild(this.back);
		this.canvas = new openfl_display_Sprite();
		this.canvas.set_x(33);
		this.canvas.set_y(161);
		this.addChild(this.canvas);
		this.canvasRmember = this.makeRmembers();
		this.addChild(this.canvasRmember);
		this.btnClose = new com_redpeakgames_cloud9_ui_ImageButton("img/shop/btn_x",null,null,"mouse_click");
		this.btnClose.set(666,57);
		this.btnClose.set_onClick($bind(this,this.onClose));
		this.addChild(this.btnClose);
		if(this.isDiaShop == true) {
			this.tabDiaCanvas();
		} else {
			this.tabCoinCanvas();
		}
		var http = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "rmembers.php",$bind(this,this.onRecvRmembers));
		var data = new openfl_net_URLVariables();
		data.uid = this.udt.uid;
		data.sig = this.udt.sig;
		http.request(data);
		this.bonusLayer = new openfl_display_Sprite();
		this.addChild(this.bonusLayer);
		this.makeBtnFreeCoin(Reflect.field(this.parent,"shopRemainTime"));
		this.lastTick = openfl_Lib.getTimer();
		this.addEventListener("enterFrame",$bind(this,this.onUpdate));
		this.addEventListener("removedFromStage",$bind(this,this.onRemoved));
	}
	,onRemoved: function(e) {
		this.removeEventListener("removedFromStage",$bind(this,this.onRemoved));
		this.removeEventListener("enterFrame",$bind(this,this.onUpdate));
		if(this.loopTmr != null) {
			this.loopTmr.stop();
		}
		if(this.allTimer.length > 0) {
			var _g = 0;
			var _g1 = this.allTimer;
			while(_g < _g1.length) {
				var time = _g1[_g];
				++_g;
				if(time != null) {
					time.stop();
				}
			}
		}
		try {
			var lightLayer = this.btnRmember.getChildByName("spr.light");
			var _g11 = 0;
			var _g2 = lightLayer.get_numChildren();
			while(_g11 < _g2) motion_Actuate.stop(lightLayer.getChildAt(_g11++));
		} catch( err ) {
			haxe_CallStack.lastException = err;
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace(err,{ fileName : "Shop.hx", lineNumber : 151, className : "com.redpeakgames.cloud9.dialog.Shop", methodName : "onRemoved"});
		}
		if(this.animations != null) {
			var _g3 = 0;
			var _g12 = this.animations;
			while(_g3 < _g12.length) {
				var ani = _g12[_g3];
				++_g3;
				ani.clear();
				ani = null;
			}
			this.animations = null;
		}
		this.removeChildren();
	}
	,makeRButton: function(vlev) {
		var _gthis = this;
		var rIcon = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/shop/shop_r_status_" + this.getRmemberName(vlev) + "_1.png",false));
		rIcon.set_x(550);
		rIcon.set_y(48);
		this.canvasRmember.addChild(rIcon);
		this.btnRmember = new com_redpeakgames_cloud9_ui_ImageButton("img/shop/shop_r_status",null,null,"mouse_etcOver");
		this.btnRmember.set_x(550);
		this.btnRmember.set_y(48);
		this.btnRmember.set_onOver(function(e) {
			_gthis.btnRmember.getChildByName("ani.idle").set_visible(false);
			_gthis.btnRmember.getChildByName("spr.light").set_visible(true);
			motion_Actuate.tween(_gthis.canvasRmember.getChildByName("bmp.ribbon"),0.266,{ x : 396}).ease(motion_easing_Quad.get_easeOut());
		});
		this.btnRmember.set_onOut(function(e1) {
			_gthis.btnRmember.getChildByName("ani.idle").set_visible(true);
			_gthis.btnRmember.getChildByName("spr.light").set_visible(false);
			motion_Actuate.tween(_gthis.canvasRmember.getChildByName("bmp.ribbon"),0.266,{ x : 578}).ease(motion_easing_Quad.get_easeOut());
		});
		this.canvasRmember.addChild(this.btnRmember);
		this.btnRmember.set_onClick(function(e2) {
			if(_gthis.from == "rmembers") {
				_gthis.onClose(null);
			} else if(_gthis.from == "rshop") {
				_gthis.dispatchEvent(new openfl_events_DataEvent("ge.open.rmembers",true,false,_gthis.from));
				_gthis.onClose(null);
			} else {
				_gthis.dispatchEvent(new openfl_events_DataEvent("ge.open.rmembers",true,false,"shop"));
			}
		});
		var lightLayer = new openfl_display_Sprite();
		lightLayer.set_x(-8);
		lightLayer.set_y(-7);
		lightLayer.set_visible(false);
		lightLayer.set_name("spr.light");
		this.btnRmember.addChild(lightLayer);
		var light1 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/shop/shop_r_status_light_1.png",false));
		var light2 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/shop/shop_r_status_light_2.png",false));
		light2.set_alpha(0);
		lightLayer.addChild(light1);
		lightLayer.addChild(light2);
		motion_Actuate.tween(light1,0.2,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat();
		motion_Actuate.tween(light2,0.2,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).reflect().repeat();
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/shop/shop_r_status_e.png",false),9,2,108,108);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13],false,15));
		ss.addBehavior(new spritesheet_data_BehaviorData("stop",[13],false,1));
		var aniIdle = new spritesheet_AnimatedSprite(ss);
		aniIdle.showBehaviors(["_e","stop","stop","stop"]);
		aniIdle.set_name("ani.idle");
		aniIdle.mouseEnabled = false;
		if(this.animations != null) {
			this.animations.push(aniIdle);
		}
		var onAniComplete = function(e3) {
			aniIdle.showBehaviors(["_e","stop","stop","stop"]);
		};
		aniIdle.addEventListener("complete",onAniComplete);
		var onAniRemoved = null;
		onAniRemoved = function(e4) {
			aniIdle.removeEventListener("removedFromStage",onAniRemoved);
			aniIdle.removeEventListener("complete",onAniComplete);
		};
		aniIdle.addEventListener("removedFromStage",onAniRemoved);
		this.btnRmember.addChild(aniIdle);
	}
	,makeRmembers: function() {
		var spr = new openfl_display_Sprite();
		var bg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/shop/shop_mystatus_back_1.png",false));
		bg.set_x(382);
		bg.set_y(74);
		spr.addChild(bg);
		this.barMask = new openfl_display_Shape();
		this.barMask.get_graphics().beginFill(0,1);
		this.barMask.get_graphics().drawRect(0,0,128,16);
		this.barMask.get_graphics().endFill();
		this.barMask.set_x(287);
		this.barMask.set_y(126);
		this.barMask.set_cacheAsBitmap(true);
		spr.addChild(this.barMask);
		var pbar = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/shop/r_members_bar.png",false));
		pbar.set_x(415);
		pbar.set_y(126);
		pbar.set_mask(this.barMask);
		pbar.set_cacheAsBitmap(true);
		spr.addChild(pbar);
		var ribbonMask = new openfl_display_Shape();
		ribbonMask.get_graphics().beginFill(0,1);
		ribbonMask.get_graphics().drawRect(0,0,182,46);
		ribbonMask.get_graphics().endFill();
		ribbonMask.set_x(396);
		ribbonMask.set_y(62);
		ribbonMask.set_cacheAsBitmap(true);
		spr.addChild(ribbonMask);
		var ribbon = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/shop/shop_r_status_rebon_1.png",false));
		ribbon.set_x(578);
		ribbon.set_y(62);
		ribbon.set_cacheAsBitmap(true);
		ribbon.set_mask(ribbonMask);
		ribbon.set_name("bmp.ribbon");
		spr.addChild(ribbon);
		return spr;
	}
	,tabCoinCanvas: function() {
		this.curSelect = "coin";
		this.removeChildren(4);
		this.back.set_bitmapData(openfl_Assets.getBitmapData("img/shop/bg_coin_back.png",false));
		this.back.set_x(-109);
		this.back.set_y(-8);
		var creditInfo = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/shop/shop_credit_card.png",false));
		creditInfo.set_x(41);
		creditInfo.set_y(616);
		this.addChild(creditInfo);
		var btnDia = new com_redpeakgames_cloud9_ui_ImageButton("img/shop/btn_dia",null,null,"mouse_click");
		btnDia.set_x(190);
		btnDia.set_y(5);
		btnDia.set_name("dia");
		btnDia.set_onClick($bind(this,this.onChangeTab));
		this.addChild(btnDia);
		this.beginner = new com_redpeakgames_cloud9_ui_ImageCheck("img/shop/btn_beginner");
		this.beginner.set_name("beginner");
		this.beginner.set_x(33);
		this.beginner.set_y(120);
		this.beginner.set_onClick($bind(this,this.onChangeCoinTab));
		this.addChild(this.beginner);
		this.highroller = new com_redpeakgames_cloud9_ui_ImageCheck("img/shop/btn_high");
		this.highroller.set_name("highroller");
		this.highroller.set_x(160);
		this.highroller.set_y(120);
		this.highroller.set_onClick($bind(this,this.onChangeCoinTab));
		this.addChild(this.highroller);
		if(this.buyCount == 0) {
			this.beginner.set_checked(true);
			this.tabBeginner();
		} else {
			this.highroller.set_checked(true);
			this.tabHighroller();
		}
	}
	,tabDiaCanvas: function() {
		this.curSelect = "dia";
		this.removeChildren(4);
		this.back.set_bitmapData(openfl_Assets.getBitmapData("img/shop/bg_dia_back.png",false));
		this.back.set_x(-109);
		this.back.set_y(-8);
		this.canvas.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/shop/bg_inner_buydia.jpg",false)));
		var creditInfo = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/shop/shop_credit_card.png",false));
		creditInfo.set_x(41);
		creditInfo.set_y(616);
		this.addChild(creditInfo);
		var btnCoin = new com_redpeakgames_cloud9_ui_ImageButton("img/shop/btn_coin",null,null,"mouse_click");
		btnCoin.set_x(5);
		btnCoin.set_y(5);
		btnCoin.set_name("coin");
		btnCoin.set_onClick($bind(this,this.onChangeTab));
		this.addChild(btnCoin);
		var diamonds = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/shop/btn_diamonds_d.png",false));
		diamonds.set_name("diamonds");
		diamonds.set_x(33);
		diamonds.set_y(120);
		this.addChild(diamonds);
		this.addBestValue(0);
		this.addMostPopular(0);
		this.canvas.addChild(this.makeItem(0,new haxe__$Int64__$_$_$Int64(0,3500),6,1200,99,1.0,true,2500));
		this.canvas.addChild(this.makeItem(1,new haxe__$Int64__$_$_$Int64(0,1250),5,500,49,1.0,true,750));
		this.canvas.addChild(this.makeItem(2,new haxe__$Int64__$_$_$Int64(0,540),4,300,29,1.0,true,240));
		this.canvas.addChild(this.makeItem(3,new haxe__$Int64__$_$_$Int64(0,150),3,100,10,1.0,true,50));
		this.canvas.addChild(this.makeItem(4,new haxe__$Int64__$_$_$Int64(0,70),2,50,5,1.0,true,20));
		this.canvas.addChild(this.makeItem(5,new haxe__$Int64__$_$_$Int64(0,39),1,30,3,1.0,true,9));
		this.addBuy("99.00",9,true);
		this.addBuy("49.00",73);
		this.addBuy("29.00",137,true);
		this.addBuy("10.00",201);
		this.addBuy("5.00",265);
		this.addBuy("3.00",329);
	}
	,makeBtnFreeCoin: function(index,inited) {
		if(inited == null) {
			inited = true;
		}
		if(index == null) {
			index = 0;
		}
		var _gthis = this;
		if(this.loopTmr != null) {
			this.loopTmr.stop();
		}
		this.bonusLayer.removeChildren();
		this.bonusLayer.addChild(com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/shop/freecoin_back.png",false,7,550));
		if(index != 0) {
			this.bonusLayer.addChild(com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/shop/btn_time_back_u.png",false,451,561));
			var format = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",20,16751614);
			format.align = 0;
			this.remainTxt = com_redpeakgames_cloud9_ui_TxField.make(506,569,120,format,null,true);
			this.remainTxt.set_height(25);
			this.remainTxt.set_text("00:00:00");
			this.bonusLayer.addChild(this.remainTxt);
		} else {
			this.btnFreeCoin = new com_redpeakgames_cloud9_ui_ImageButton("img/shop/btn_freecoin_back",null,null,"mouse_click");
			this.btnFreeCoin.set(451,561);
			this.btnFreeCoin.set_onClick($bind(this,this.onClickFreeCoin));
			this.bonusLayer.addChild(this.btnFreeCoin);
			this.btnFreeCoinEnabled(true);
			var format1 = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",20,16777215);
			format1.align = 3;
			var text = com_redpeakgames_cloud9_ui_TxField.make(540,575,75,format1,null,true);
			text.set_height(25);
			text.set_text("10,000");
			text.set_name("text.coin");
			this.bonusLayer.addChild(text);
		}
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/shop/box_idle_e.png",false),10,1,117,117);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,0],false,16));
		var boxIdle = new spritesheet_AnimatedSprite(ss);
		boxIdle.set_x(427);
		boxIdle.set_y(505);
		boxIdle.set_alpha(inited == true?1:0);
		boxIdle.set_name("box.Idle");
		boxIdle.mouseEnabled = false;
		boxIdle.mouseChildren = false;
		boxIdle.showBehavior("_e");
		this.bonusLayer.addChild(boxIdle);
		if(this.animations != null) {
			this.animations.push(boxIdle);
		}
		if(inited == false) {
			motion_Actuate.tween(boxIdle,0.2,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone());
		}
		this.loopTmr = new haxe_Timer(7000);
		this.loopTmr.run = function() {
			if(_gthis.animations == null || boxIdle == null) {
				_gthis.loopTmr.stop();
				return;
			}
			boxIdle.showBehavior("_e");
		};
	}
	,onClickFreeCoin: function(e) {
		this.btnClose.set_work(false);
		this.btnFreeCoin.set_work(false);
		var http = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "get.timebonus.php",$bind(this,this.onRecvTimeBonus));
		var data = new openfl_net_URLVariables();
		data.uid = this.udt.uid;
		data.sig = this.udt.sig;
		http.request(data);
	}
	,onRecvTimeBonus: function(e) {
		var _gthis = this;
		var json = JSON.parse(e.target.data);
		var obj = this;
		while(obj != null) {
			if(obj.get_name() == "cloud9.Main") {
				break;
			}
			obj = obj.parent;
		}
		var topMenu = Reflect.field(obj,"topMenu");
		var drawCoin = new com_redpeakgames_cloud9_ui_DrawCoins(this.get_x() + this.btnFreeCoin.get_x() + 48 | 0,this.get_y() + this.btnFreeCoin.get_y() + 3 | 0,714,76,1000,1,null,null,true);
		drawCoin.set_onCoinArrive(function() {
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.balance.changed",true,false,JSON.stringify({ coin : json.coin, showAddedCoin : true})));
			_gthis.btnClose.set_work(true);
		});
		topMenu.addChild(drawCoin);
		com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"setShopRemainTime",[7200 + (openfl_Lib.getTimer() / 1000 | 0)]);
		this.btnFreeCoinEnabled(false);
	}
	,setTimeFormat: function(start,now) {
		var ret = "";
		var value = start - (now / 1000 | 0);
		if(value < 0) {
			return "00:00:00";
		}
		var hours = value / 3600 | 0;
		ret = "" + (hours < 10?"0" + hours:"" + hours);
		var mins = value % 3600 / 60 | 0;
		ret += mins < 10?":0" + mins:":" + mins;
		var secs = value % 60;
		ret += secs < 10?":0" + secs:":" + secs;
		return ret;
	}
	,btnFreeCoinEnabled: function(value) {
		var _gthis = this;
		if(value) {
			var imgTxtFreeCoin = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/shop/txt_freecoin.png",false,517,567);
			imgTxtFreeCoin.set_name("text.free");
			var imgCoin = com_redpeakgames_cloud9_utils_BitmapMaker.byPath("img/shop/icon_freecoin.png",false,514,582);
			imgCoin.set_name("icon.coin");
			this.bonusLayer.addChild(imgTxtFreeCoin);
			this.bonusLayer.addChild(imgCoin);
			this.btnFreeCoin.set_work(true);
		} else {
			try {
				this.btnFreeCoin.set_alpha(0.5);
				this.bonusLayer.getChildByName("text.free").set_alpha(0.5);
				this.bonusLayer.getChildByName("icon.coin").set_alpha(0.5);
				this.bonusLayer.getChildByName("text.coin").set_alpha(0.5);
				var boxIdle = this.bonusLayer.getChildByName("box.Idle");
				if(boxIdle != null) {
					this.bonusLayer.removeChild(boxIdle);
					if(this.animations != null) {
						boxIdle.spritesheet.clear();
						HxOverrides.remove(this.animations,boxIdle);
					}
				}
				var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/shop/box_bomb_e.png",false),17,2,117,117);
				ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],false,16));
				var boxBomb = new spritesheet_AnimatedSprite(ss);
				boxBomb.set_x(427);
				boxBomb.set_y(505);
				boxBomb.showBehavior("_e");
				boxBomb.addEventListener("complete",$bind(this,this.onCompleteAni));
				this.bonusLayer.addChild(boxBomb);
				if(this.animations != null) {
					this.animations.push(boxBomb);
				}
				this.allTimer.push(haxe_Timer.delay(function() {
					ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/shop/coin_ani_e.png",false),5,3,346,259);
					ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12],false,16));
					var coinAni = new spritesheet_AnimatedSprite(ss);
					coinAni.set_x(313);
					coinAni.set_y(455);
					coinAni.set_name("ani.coin");
					coinAni.showBehavior("_e");
					coinAni.addEventListener("complete",$bind(_gthis,_gthis.onCompleteAni));
					_gthis.bonusLayer.addChild(coinAni);
					if(_gthis.animations != null) {
						_gthis.animations.push(coinAni);
					}
				},300));
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				haxe_Log.trace(err,{ fileName : "Shop.hx", lineNumber : 582, className : "com.redpeakgames.cloud9.dialog.Shop", methodName : "btnFreeCoinEnabled"});
			}
		}
	}
	,onCompleteAni: function(e) {
		var ani = e.target;
		ani.removeEventListener("complete",$bind(this,this.onCompleteAni));
		if(this.animations == null || this.bonusLayer == null) {
			return;
		}
		if(ani != null) {
			if(ani.get_name() == "ani.coin") {
				this.makeBtnFreeCoin(1,false);
			}
			HxOverrides.remove(this.animations,ani);
			ani.spritesheet.clear();
		}
	}
	,onClose: function(e) {
		if(this.parent != null) {
			if(this.from == "rshop") {
				com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"removeScreen",[]);
			} else {
				this.dispatchEvent(new openfl_events_DataEvent("ge.general.close",true));
			}
			var o = this.parent;
			var tmp;
			var tmp1;
			if(o == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(o.__properties__) {
					tmp = o.__properties__["get_" + "myClassUp"];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = o[tmp]();
				} else {
					tmp1 = o.myClassUp;
				}
			}
			if(tmp1) {
				this.dispatchEvent(new openfl_events_DataEvent("ge.close.levelup",true,true));
				var o1 = this.parent;
				var tmp3;
				var tmp4;
				if(o1.__properties__) {
					tmp3 = o1.__properties__["set_" + "myClassUp"];
					tmp4 = tmp3;
				} else {
					tmp4 = false;
				}
				if(tmp4) {
					o1[tmp3](false);
				} else {
					o1.myClassUp = false;
				}
			}
			this.parent.removeChild(this);
		}
	}
	,onChangeTab: function(e) {
		var tab = e.target;
		this.canvas.removeChildren();
		if(tab.get_name() == "coin") {
			this.tabCoinCanvas();
		}
		if(tab.get_name() == "dia") {
			this.tabDiaCanvas();
		}
	}
	,onChangeCoinTab: function(e) {
		var tab = e.target;
		if(tab.get_checked() == false) {
			tab.set_checked(true);
			return;
		}
		this.beginner.set_checked(false);
		this.highroller.set_checked(false);
		tab.set_checked(true);
		this.canvas.removeChildren();
		if(tab.get_name() == "beginner") {
			this.tabBeginner();
		}
		if(tab.get_name() == "highroller") {
			this.tabHighroller();
		}
	}
	,tabBeginner: function() {
		this.canvas.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/shop/bg_inner_basicbegin.jpg",false)));
		this.addBestValue(0.1);
		this.addMostPopular(0);
		this.canvas.addChild(this.makeItem(0,new haxe__$Int64__$_$_$Int64(0,35000000),6,1200,99,1.0,false));
		this.canvas.addChild(this.makeItem(1,new haxe__$Int64__$_$_$Int64(0,12500000),5,500,49,1.0,false));
		this.canvas.addChild(this.makeItem(2,new haxe__$Int64__$_$_$Int64(0,5400000),4,300,29,1.0,false));
		this.canvas.addChild(this.makeItem(3,new haxe__$Int64__$_$_$Int64(0,1500000),3,100,10,1.0,false));
		this.canvas.addChild(this.makeItem(4,new haxe__$Int64__$_$_$Int64(0,700000),2,50,5,1.0,false));
		this.canvas.addChild(this.makeItem(5,new haxe__$Int64__$_$_$Int64(0,390000),1,30,3,1.0,false));
		this.addBuy("99.00",9,true);
		this.addBuy("49.00",73);
		this.addBuy("29.00",137,true);
		this.addBuy("10.00",201);
		this.addBuy("5.00",265);
		this.addBuy("3.00",329);
	}
	,tabHighroller: function() {
		this.canvas.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/shop/bg_inner_basicbegin.jpg",false)));
		this.canvas.addChild(this.makeItem(0,new haxe__$Int64__$_$_$Int64(0,330000000),9,5000,299,1.0,false));
		this.canvas.addChild(this.makeItem(1,new haxe__$Int64__$_$_$Int64(0,120000000),8,3000,199,1.0,false));
		this.canvas.addChild(this.makeItem(2,new haxe__$Int64__$_$_$Int64(0,35000000),7,1200,99,1.0,false));
		this.canvas.addChild(this.makeItem(3,new haxe__$Int64__$_$_$Int64(0,12500000),6,500,49,1.0,false));
		this.canvas.addChild(this.makeItem(4,new haxe__$Int64__$_$_$Int64(0,5400000),5,300,29,1.0,false));
		this.canvas.addChild(this.makeItem(5,new haxe__$Int64__$_$_$Int64(0,3200000),4,200,19,1.0,false));
		this.addBestValue(0.1);
		this.addMostPopular(0);
		this.addBuy("299.00",9,true);
		this.addBuy("199.00",73);
		this.addBuy("99.00",137,true);
		this.addBuy("49.00",201);
		this.addBuy("29.00",265);
		this.addBuy("19.00",329);
	}
	,makeTags: function() {
		var _gthis = this;
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var tag = [new openfl_display_Sprite()];
			this.canvas.addChild(tag[0]);
			var tagBg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/sales/tag.png",false));
			tagBg.smoothing = true;
			tag[0].addChild(tagBg);
			tag[0].set_alpha(0);
			tag[0].set_x(830);
			tag[0].set_y(-22 + i * 64);
			var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/sales/tag_typo_e.png"),7,2,132,42);
			ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13],false,15));
			ss.addBehavior(new spritesheet_data_BehaviorData("stop",[0],false,1));
			var aniTagTxt = [new spritesheet_AnimatedSprite(ss)];
			aniTagTxt[0].set_x(58);
			aniTagTxt[0].set_y(29);
			aniTagTxt[0].showBehaviors(["stop","_e","stop","stop","stop"]);
			this.animations.push(aniTagTxt[0]);
			tag[0].addChild(aniTagTxt[0]);
			var _onComplete = [];
			var tmp = _onComplete[0] = (function(aniTagTxt1) {
				return function(e) {
					aniTagTxt1[0].showBehaviors(["stop","_e","stop","stop","stop"]);
				};
			})(aniTagTxt);
			aniTagTxt[0].addEventListener("complete",tmp);
			var _onRemovedTxt = [null];
			_onRemovedTxt[0] = (function(_onRemovedTxt1,_onComplete1,aniTagTxt2) {
				return function(e1) {
					aniTagTxt2[0].removeEventListener("removedFromStage",_onRemovedTxt1[0]);
					aniTagTxt2[0].removeEventListener("complete",_onComplete1[0]);
				};
			})(_onRemovedTxt,_onComplete,aniTagTxt);
			aniTagTxt[0].addEventListener("removedFromStage",_onRemovedTxt[0]);
			var _onRemoved = [null];
			_onRemoved[0] = (function(_onRemoved1) {
				return function(e2) {
					_gthis.removeEventListener("removedFromStage",_onRemoved1[0]);
					openfl_Assets.cache.removeBitmapData("img/sales/tag_typo_e.png");
				};
			})(_onRemoved);
			this.addEventListener("removedFromStage",_onRemoved[0]);
			motion_Actuate.tween(tag[0],0.267,{ x : 630, alpha : 1}).ease(motion_easing_Quad.get_easeIn()).delay(i * 0.067).onComplete((function(tag1) {
				return function() {
					motion_Actuate.tween(tag1[0],0.134,{ scaleX : 0.9}).ease(motion_easing_Quad.get_easeOut()).reflect().repeat(1);
				};
			})(tag));
		}
	}
	,makeItem: function(row,coin,imgNum,rp,price,saleValue,isDia,rpBonus) {
		if(saleValue == null) {
			saleValue = 1.0;
		}
		coin = haxe_Int64Helper.fromFloat(haxe_Int64Helper.toFloat(coin) * saleValue);
		var highlight = row == 0 || row == 2;
		var spr = new openfl_display_Sprite();
		spr.set_y(row * 64);
		spr.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/shop/sale_icon_" + (isDia?"dia":"coin") + "_" + imgNum + ".png",false)));
		var fontName = "shop_font_white_28";
		var fWidth = 17;
		var fHeight = 22;
		var rpColor = 0;
		var nbCoinOffsetY = 2;
		if(highlight) {
			fontName = "shop_font_black_32";
			fWidth = 18;
			fHeight = 24;
			rpColor = 10289204;
			nbCoinOffsetY = 0;
		}
		var nbCoin = null;
		if(saleValue != 1.0) {
			var fontName1 = highlight?"shop_font_black_24":"shop_font_white_24";
			nbCoin = new com_redpeakgames_cloud9_ui_NumberBitmap("font/" + fontName1 + ".png",190,15,20,12,1,-1,6);
			nbCoin.textAlign = 3;
			nbCoin.commaWidth = 9;
			nbCoin.set_commaY(3);
			nbCoin.set_x(isDia?145:112);
			nbCoin.set_y(6);
			nbCoin.set_value(haxe_Int64Helper.fromFloat(haxe_Int64Helper.toFloat(coin) / saleValue));
			haxe_Timer.delay(function() {
				nbCoin.draw(coin,true,335);
			},267);
			var disCoin = new com_redpeakgames_cloud9_ui_NumberBitmap("font/" + fontName1 + ".png",190,15,20,12,1,0,6);
			disCoin.textAlign = 4;
			disCoin.commaWidth = 9;
			disCoin.set_commaY(3);
			disCoin.set_x(77);
			disCoin.set_y(37);
			disCoin.set_value(haxe_Int64Helper.fromFloat(haxe_Int64Helper.toFloat(coin) / saleValue));
			disCoin.set_scaleX(0.75);
			disCoin.set_scaleY(0.75);
			spr.addChild(disCoin);
			var digitNum = haxe__$Int64_Int64_$Impl_$.toString(haxe_Int64Helper.fromFloat(haxe_Int64Helper.toFloat(coin) / saleValue)).length;
			var tLen = digitNum * 11.25 + ((digitNum - 1) / 3 | 0) * 6.75 + 4;
			var redLine = new openfl_display_Shape();
			redLine.get_graphics().beginFill(16711680,1);
			redLine.get_graphics().lineStyle(2,16711680,1);
			redLine.get_graphics().moveTo(233,44);
			redLine.get_graphics().lineTo(233 - tLen,44);
			redLine.get_graphics().endFill();
			redLine.set_alpha(0.6);
			spr.addChild(redLine);
		} else {
			nbCoin = new com_redpeakgames_cloud9_ui_NumberBitmap("font/" + fontName + ".png",190,fWidth,fHeight,12,1,0,6);
			nbCoin.textAlign = 4;
			nbCoin.commaWidth = 10;
			nbCoin.set_commaY(3);
			nbCoin.set_x(isDia?2:49);
			nbCoin.set_y(18 + nbCoinOffsetY);
			nbCoin.set_value(coin);
		}
		spr.addChild(nbCoin);
		var tf = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",14,rpColor);
		var rpText = com_redpeakgames_cloud9_ui_TxField.make(247,4,160,tf);
		rpText.set_text("+ " + com_redpeakgames_cloud9_utils_Number.addCommaInt(new haxe__$Int64__$_$_$Int64(rp >> 31,rp)) + " R points");
		spr.addChild(rpText);
		if(!isDia) {
			var perPrice = haxe_Int64Helper.toFloat(coin) / price | 0;
			tf = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",16,rpColor);
			var perText = com_redpeakgames_cloud9_ui_TxField.make(247,30,160,tf,new openfl_filters_GlowFilter(0,0.8,1.2,1.2,10,1));
			perText.set_htmlText("<font color='#FFFFFF'>" + com_redpeakgames_cloud9_utils_Number.addCommaInt(new haxe__$Int64__$_$_$Int64(perPrice >> 31,perPrice)) + "</font>  <font color='#FFFF00'>per $1<font>");
			spr.addChild(perText);
		} else if(rpBonus != null) {
			var bonus = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/shop/txt_shop_bonus.png",false));
			bonus.set_x(351);
			bonus.set_y(31);
			spr.addChild(bonus);
			tf = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",18,16777215);
			var ocText = com_redpeakgames_cloud9_ui_TxField.make(209,28,131,tf,new openfl_filters_GlowFilter(0,0.8,1.2,1.2,10,1));
			var b = new haxe__$Int64__$_$_$Int64(rpBonus >> 31,rpBonus);
			var high = coin.high - b.high | 0;
			var low = coin.low - b.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(coin.low,b.low) < 0) {
				--high;
				high = high | 0;
			}
			ocText.set_text(com_redpeakgames_cloud9_utils_Number.addCommaInt(new haxe__$Int64__$_$_$Int64(high,low)));
			spr.addChild(ocText);
			tf = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",14,13303685);
			var bnText = com_redpeakgames_cloud9_ui_TxField.make(341,38,65,tf,new openfl_filters_GlowFilter(0,0.8,1.2,1.2,10,1));
			bnText.set_text("+ " + com_redpeakgames_cloud9_utils_Number.addCommaInt(new haxe__$Int64__$_$_$Int64(rpBonus >> 31,rpBonus)));
			spr.addChild(bnText);
		}
		var nbPrice = new com_redpeakgames_cloud9_ui_NumberBitmap("font/shop_font_white_24.png",63,15,20,13,1,-2,6);
		nbPrice.textAlign = 4;
		nbPrice.useDollar = true;
		nbPrice.set_dollarY(-2);
		nbPrice.dollarWidth = 11;
		nbPrice.commaWidth = 9;
		nbPrice.set_commaY(3);
		nbPrice.set_value(new haxe__$Int64__$_$_$Int64(price >> 31,price));
		nbPrice.set_x(408);
		nbPrice.set_y(19);
		spr.addChild(nbPrice);
		return spr;
	}
	,addBestValue: function(delay) {
		var bv = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/shop/tag_best.png",false));
		bv.set_x(-191);
		bv.set_y(30);
		bv.set_alpha(0);
		bv.set_scaleX(0);
		bv.set_scaleY(0);
		this.canvas.addChild(bv);
		motion_Actuate.tween(bv,0.5,{ x : -116, y : -9, alpha : 1, scaleX : 1, scaleY : 1}).ease(motion_easing_Back.get_easeOut()).delay(delay);
	}
	,addMostPopular: function(delay) {
		var mp = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/shop/tag_most.png",false));
		mp.set_x(-191);
		mp.set_y(158);
		mp.set_alpha(0);
		mp.set_scaleX(0);
		mp.set_scaleY(0);
		this.canvas.addChild(mp);
		motion_Actuate.tween(mp,0.5,{ x : -116, y : 119, alpha : 1, scaleX : 1, scaleY : 1}).ease(motion_easing_Back.get_easeOut()).delay(delay);
	}
	,addBuy: function(name,inY,ani) {
		if(ani == null) {
			ani = false;
		}
		var btn0 = new com_redpeakgames_cloud9_ui_ImageButton("img/shop/btn_buy",null,null,"mouse_click");
		btn0.set_name(name);
		btn0.set_x(507);
		btn0.set_y(inY);
		btn0.set_onClick($bind(this,this.onClickBuy));
		this.canvas.addChild(btn0);
	}
	,getRmemberName: function(value) {
		--value;
		if(value < 0 || value > 6) {
			return "";
		}
		return ["bronze","silver","gold","emerald","sapphire","ruby","diamond"][value];
	}
	,onClickBuy: function(e) {
		this.dispatchEvent(new openfl_events_DataEvent("ge.to.normalscreen",true,false));
		var o = e.target;
		var tmp;
		var usd;
		if(o == null) {
			usd = null;
		} else {
			var tmp1;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + "name"];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				usd = o[tmp]();
			} else {
				usd = o.name;
			}
		}
		try {
			openfl_external_ExternalInterface.call("buyCoins",usd,this.curSelect);
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,openfl_errors_Error) ) {
				haxe_Log.trace(e1.toString(),{ fileName : "Shop.hx", lineNumber : 1010, className : "com.redpeakgames.cloud9.dialog.Shop", methodName : "onClickBuy"});
			} else throw(e1);
		}
		this.onClose(null);
	}
	,onUpdate: function(e) {
		var cur = openfl_Lib.getTimer();
		var delta = cur - this.lastTick;
		if(this.animations != null) {
			var _g = 0;
			var _g1 = this.animations;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				a.update(delta);
			}
		}
		if(this.remainTxt != null) {
			this.remainTxt.set_text(this.setTimeFormat(Reflect.field(this.parent,"shopRemainTime"),cur));
			if(this.remainTxt.get_text() == "00:00:00") {
				this.remainTxt = null;
				this.makeBtnFreeCoin(0,false);
				com_redpeakgames_cloud9_utils_DynamicCall.method(this.parent,"setShopRemainTime",[0]);
			}
		}
		this.lastTick = cur;
	}
	,onRecvRmembers: function(e) {
		this.rmembers = JSON.parse(e.target.data);
		var barPosX = Std.parseInt(this.rmembers.point.cur) / (Std.parseInt(this.rmembers.point.next) + Std.parseInt(this.rmembers.point.cur)) * 128;
		this.barMask.set_x(415 + (barPosX - 128));
		var tf = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",14,16777215);
		tf.align = 0;
		var gaugeNumber = com_redpeakgames_cloud9_ui_TxField.make(415,123,128,tf,null,true);
		gaugeNumber.set_text((barPosX / 128 * 100 | 0) + "%");
		gaugeNumber.set_alpha(0.5);
		this.canvasRmember.addChild(gaugeNumber);
		this.makeRButton(Std.parseInt(this.rmembers.vlev));
	}
	,__class__: com_redpeakgames_cloud9_dialog_Shop
});
var com_redpeakgames_cloud9_dialog_ToolTip = function(x,y,width,arrowPos,align,isBig) {
	if(isBig == null) {
		isBig = true;
	}
	if(align == null) {
		align = 0;
	}
	openfl_display_Sprite.call(this);
	this.set_x(x);
	this.set_y(y);
	var fpath = "big";
	if(isBig) {
		this.tipHeight = 79;
	} else {
		this.tipHeight = 39;
		fpath = "small";
	}
	var bmd = openfl_Assets.getBitmapData("img/tip/tip_" + fpath + "_side.png");
	this.addChild(new openfl_display_Bitmap(bmd));
	var sideRight = new openfl_display_Bitmap(bmd);
	sideRight.set_scaleX(-1);
	sideRight.set_x(width);
	this.addChild(sideRight);
	bmd = openfl_Assets.getBitmapData("img/tip/tip_" + fpath + "_bar.png");
	var bar = new openfl_display_Bitmap(bmd,2,false);
	bar.set_x(20);
	bar.set_scaleX(width - 40 | 0);
	this.addChild(bar);
	var arrow = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/tip/tip_arrow.png"));
	arrow.set_x(arrowPos);
	arrow.set_y(-11);
	this.addChild(arrow);
	var format = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",12,16761830);
	format.align = align;
	format.letterSpacing = -0.45;
	this.txt = new openfl_text_TextField();
	this.txt.set_defaultTextFormat(format);
	this.txt.set_x(14);
	this.txt.set_width(width - 28);
	this.txt.set_height(this.tipHeight);
	this.txt.set_defaultTextFormat(format);
	this.txt.set_multiline(true);
	this.txt.set_wordWrap(false);
	this.txt.set_embedFonts(true);
	this.txt.mouseEnabled = false;
	this.txt.set_htmlText("A Quick brown fox jumps over the lazy dog");
	this.txt.set_y(Math.round((this.txt.get_height() - this.txt.get_textHeight()) / 2) - 2);
	this.addChild(this.txt);
};
$hxClasses["com.redpeakgames.cloud9.dialog.ToolTip"] = com_redpeakgames_cloud9_dialog_ToolTip;
com_redpeakgames_cloud9_dialog_ToolTip.__name__ = ["com","redpeakgames","cloud9","dialog","ToolTip"];
com_redpeakgames_cloud9_dialog_ToolTip.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_ToolTip.prototype = $extend(openfl_display_Sprite.prototype,{
	txt: null
	,tipHeight: null
	,text: null
	,set_text: function(value) {
		this.txt.set_htmlText(value);
		this.txt.set_y(Math.round((this.txt.get_height() - this.txt.get_textHeight()) / 2) - 2);
		return this.text = value;
	}
	,__class__: com_redpeakgames_cloud9_dialog_ToolTip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_text:"set_text"})
});
var com_redpeakgames_cloud9_dialog_Voucher = function(x,y,prize,udt,slotList,seManager) {
	var _gthis = this;
	openfl_display_Sprite.call(this);
	this.set_x(x + 300);
	this.set_y(y);
	this.prize = prize;
	this.udt = udt;
	this.slotList = slotList;
	this.seManager = seManager;
	this.collectTime = -1;
	if(!com_redpeakgames_cloud9_Global.mute) {
		seManager.play("herald00",0,0);
	}
	if(openfl_Lib.current.stage.get_displayState() != 2) {
		var _g = this;
		_g.set_y(_g.get_y() + 69);
	}
	this.addChild(this.makeBitmap("img/voucher/bonus_back.png"));
	this.btnClose = new com_redpeakgames_cloud9_ui_ImageButton("img/bonusstreak/btn_x",null,null,"mouse_click");
	this.btnClose.set_x(688);
	this.btnClose.set_y(-2);
	this.btnClose.set_enable(false);
	this.btnClose.set_onClick($bind(this,this.onClickClose));
	this.addChild(this.btnClose);
	this.placeCollectUI();
	this.set_alpha(0);
	motion_Actuate.timer(1.5).onComplete(function() {
		motion_Actuate.tween(_gthis,0.033,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone());
		motion_Actuate.tween(_gthis,0.233,{ x : x},false).ease(motion_easing_Back.get_easeOut());
	});
};
$hxClasses["com.redpeakgames.cloud9.dialog.Voucher"] = com_redpeakgames_cloud9_dialog_Voucher;
com_redpeakgames_cloud9_dialog_Voucher.__name__ = ["com","redpeakgames","cloud9","dialog","Voucher"];
com_redpeakgames_cloud9_dialog_Voucher.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_Voucher.prototype = $extend(openfl_display_Sprite.prototype,{
	slotList: null
	,canvasCollect: null
	,canvasSlotSelect: null
	,btnCollect: null
	,btnClose: null
	,coin: null
	,prize: null
	,udt: null
	,seManager: null
	,collectTime: null
	,placeCollectUI: function() {
		var _gthis = this;
		this.canvasCollect = new openfl_display_Sprite();
		this.addChildAt(this.canvasCollect,1);
		this.canvasCollect.addChild(this.makeBitmap("img/voucher/bonus_voucher_title.png",165,-15));
		this.canvasCollect.addChild(this.makeBitmap("img/voucher/bonus_voucher_character.png",-27,-40));
		this.canvasCollect.addChild(this.makeBitmap("img/voucher/bonus_voucher.jpg",205,91));
		this.canvasCollect.addChild(this.makeBitmap("img/voucher/bar_gold_1.png",309,228));
		this.btnCollect = new com_redpeakgames_cloud9_ui_ImageButton("img/bonusstreak/btn_collect",null,null,"mouse_click");
		this.btnCollect.set_x(361);
		this.btnCollect.set_y(291);
		this.btnCollect.set_enable(false);
		this.btnCollect.set_onClick($bind(this,this.onClickCollect));
		this.canvasCollect.addChild(this.btnCollect);
		var tf = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",28,0);
		tf.align = 0;
		var numberPrize = new com_redpeakgames_cloud9_ui_NumberText(tf,null,199,350,225);
		numberPrize.set_value(new haxe__$Int64__$_$_$Int64(0,0));
		haxe_Timer.delay(function() {
			var x = _gthis.prize;
			numberPrize.draw(new haxe__$Int64__$_$_$Int64(x >> 31,x),true,1000);
		},1750);
		numberPrize.onEnd = function() {
			_gthis.btnClose.set_enable(true);
			_gthis.btnCollect.set_enable(true);
		};
		this.canvasCollect.addChild(numberPrize);
	}
	,placeSlotSelectUI: function() {
		if(this.canvasCollect.parent != null) {
			this.removeChild(this.canvasCollect);
			this.canvasCollect = null;
		}
		this.canvasSlotSelect = new openfl_display_Sprite();
		this.canvasSlotSelect.set_alpha(0);
		this.addChildAt(this.canvasSlotSelect,1);
		this.canvasSlotSelect.addChild(this.makeBitmap("img/voucher/bonus_slot_title.png",16,6));
		motion_Actuate.tween(this.canvasSlotSelect,0.166,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			if(i >= this.slotList.length) {
				break;
			}
			this.makeSlot(39 + i * 222,this.slotList[i],i * 0.066);
		}
	}
	,makeSlot: function(x,sid,delay) {
		var ty = 85;
		var slot = new openfl_display_Sprite();
		slot.set_x(x);
		slot.set_y(0);
		this.canvasSlotSelect.addChild(slot);
		slot.addChild(this.makeBitmap("img/voucher/bonus_slot.png"));
		var bd = new openfl_display_BitmapData(186,168);
		bd.copyPixels(openfl_Assets.getBitmapData("img/icons/" + sid + ".png"),new openfl_geom_Rectangle(0,0,186,168),new openfl_geom_Point());
		var icon = new openfl_display_Bitmap(bd);
		icon.set_x(8);
		icon.set_y(20);
		slot.addChild(icon);
		var btnPlay = new com_redpeakgames_cloud9_ui_ImageButton("img/voucher/btn_bonus_slot",null,null,"mouse_click");
		btnPlay.set_x(27);
		btnPlay.set_y(209);
		btnPlay.set_name(sid == null?"null":"" + sid);
		btnPlay.set_onClick($bind(this,this.onClickPlay));
		slot.addChild(btnPlay);
		slot.set_alpha(0);
		motion_Actuate.timer(delay).onComplete(function() {
			motion_Actuate.tween(slot,0.133,{ y : ty, alpha : 1}).ease(motion_easing_Quad.get_easeIn()).onComplete(function() {
				motion_Actuate.tween(slot,0.066,{ y : ty + 27, scaleY : 0.9}).ease(motion_easing_Quad.get_easeOut()).reflect().repeat(1);
			});
		});
	}
	,close: function() {
		var _gthis = this;
		if(this.btnCollect.get_enable() == true) {
			this.collect();
		}
		var delay = 2000;
		if(this.collectTime >= 0) {
			delay = openfl_Lib.getTimer() - this.collectTime;
			if(delay >= 2000) {
				delay = 2000;
			}
		}
		motion_Actuate.tween(this,0.233,{ x : this.get_x() - 600, alpha : 0},false).ease(motion_easing_Back.get_easeIn()).onComplete(function() {
			if(_gthis.parent != null) {
				_gthis.dispatchEvent(new openfl_events_DataEvent("ge.close.voucher",true,false,delay == null?"null":"" + delay));
				_gthis.parent.removeChild(_gthis);
			}
		});
	}
	,onClickCollect: function(e) {
		this.collectTime = openfl_Lib.getTimer();
		this.collect();
		if(this.slotList.length > 0) {
			motion_Actuate.tween(this.canvasCollect,0.166,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete($bind(this,this.placeSlotSelectUI));
		} else {
			this.close();
		}
	}
	,collect: function() {
		if(!this.btnCollect.get_enable()) {
			return;
		}
		var obj = this;
		while(obj != null) {
			if(obj.get_name() == "cloud9.Main") {
				break;
			}
			obj = obj.parent;
		}
		var topMenu = Reflect.field(obj,"topMenu");
		var this1 = topMenu.get_coin();
		var tCoin = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		var x = this.prize;
		var b = new haxe__$Int64__$_$_$Int64(x >> 31,x);
		var high = tCoin.high + b.high | 0;
		var low = tCoin.low + b.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,tCoin.low) < 0) {
			++high;
			high = high | 0;
		}
		var data = { coin : new haxe__$Int64__$_$_$Int64(high,low), dia : this.udt.dia, showAddedCoin : true};
		this.btnCollect.set_enable(false);
		var drawCoin = new com_redpeakgames_cloud9_ui_DrawCoins(this.get_x() + 418 | 0,this.get_y() + 302 | 0,713,85,1000,5);
		drawCoin.set_onCoinArrive(function() {
			topMenu.dispatchEvent(new openfl_events_DataEvent("ge.balance.changed",true,false,JSON.stringify(data)));
		});
		topMenu.addChild(drawCoin);
	}
	,onClickPlay: function(e) {
		this.dispatchEvent(new openfl_events_DataEvent("ge.change.slot",true,false,e.target.get_name()));
		this.close();
	}
	,onClickClose: function(e) {
		this.close();
	}
	,makeBitmap: function(path,x,y,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var bitmap = new openfl_display_Bitmap(openfl_Assets.getBitmapData(path));
		bitmap.smoothing = smoothing;
		bitmap.set_x(x);
		bitmap.set_y(y);
		return bitmap;
	}
	,__class__: com_redpeakgames_cloud9_dialog_Voucher
});
var com_redpeakgames_cloud9_dialog_Welcome = function(x,y,day,udt) {
	openfl_display_Sprite.call(this);
	this.set_x(x);
	this.set_y(y);
	this.day = day;
	this.udt = udt;
	this.animations = [];
	this.start();
	this.lastTick = openfl_Lib.getTimer();
	this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
};
$hxClasses["com.redpeakgames.cloud9.dialog.Welcome"] = com_redpeakgames_cloud9_dialog_Welcome;
com_redpeakgames_cloud9_dialog_Welcome.__name__ = ["com","redpeakgames","cloud9","dialog","Welcome"];
com_redpeakgames_cloud9_dialog_Welcome.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_dialog_Welcome.prototype = $extend(openfl_display_Sprite.prototype,{
	udt: null
	,lastTick: null
	,animations: null
	,tmr: null
	,day: null
	,btnCollect: null
	,coinEffect: null
	,onEnterFrame: function(e) {
		var cur = openfl_Lib.getTimer();
		var delta = cur - this.lastTick;
		var _g = 0;
		var _g1 = this.animations;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a.update(delta);
		}
		this.lastTick = cur;
	}
	,start: function() {
		var _gthis = this;
		var star01 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/welcome_star_1.png",false),2,true);
		star01.set_x(142);
		star01.set_y(-84);
		star01.set_alpha(0);
		this.addChild(star01);
		var star02 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/welcome_star_2.png",false),2,true);
		star02.set_x(73);
		star02.set_y(-36);
		star02.set_alpha(0);
		this.addChild(star02);
		var star03 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/welcome_star_3.png",false),2,true);
		star03.set_x(36);
		star03.set_y(25);
		star03.set_alpha(0);
		this.addChild(star03);
		var back = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/welcome_back.png",false));
		back.set_x(0);
		back.set_y(-600);
		back.set_alpha(0);
		this.addChild(back);
		var light1 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/welcome_light_1.png",false));
		light1.set_x(0);
		light1.set_y(0);
		light1.set_alpha(0);
		this.addChild(light1);
		var light2 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/welcome_light_2.png",false));
		light2.set_x(0);
		light2.set_y(0);
		light2.set_alpha(0);
		this.addChild(light2);
		var welcome = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/welcome_welcome.png",false));
		welcome.set_x(-316);
		welcome.set_y(79);
		welcome.set_alpha(0);
		this.addChild(welcome);
		var bonus = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/welcome_bonus.png",false));
		bonus.set_x(559);
		bonus.set_y(134);
		bonus.set_alpha(0);
		this.addChild(bonus);
		var dayback = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/welcome_day_back.png",false),2,true);
		dayback.set_x(-55);
		dayback.set_y(180);
		dayback.set_alpha(0);
		this.addChild(dayback);
		this.btnCollect = new com_redpeakgames_cloud9_ui_ImageButton("img/welcome/btn_collect",null,null,"mouse_click");
		this.btnCollect.set(123,425,0,false);
		this.btnCollect.set_onClick($bind(this,this.onClickCollect));
		this.addChild(this.btnCollect);
		var ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/welcome/btn_collect_e.png",false),6,2,156,58);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11],false,15));
		var btnCollectE = new spritesheet_AnimatedSprite(ss);
		btnCollectE.showBehavior("_e");
		btnCollectE.mouseEnabled = false;
		btnCollectE.set_x(123);
		btnCollectE.set_y(425);
		btnCollectE.set_alpha(0);
		this.animations.push(btnCollectE);
		this.addChild(btnCollectE);
		ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/welcome/welcome_e.png",false),3,4,301,59);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11],false,15));
		var welcomeE = new spritesheet_AnimatedSprite(ss);
		welcomeE.set_x(52);
		welcomeE.set_y(79);
		welcomeE.set_visible(false);
		welcomeE.showBehavior("_e");
		this.animations.push(welcomeE);
		this.addChild(welcomeE);
		ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/welcome/bonus_e.png"),5,3,189,53);
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11],false,15));
		var bonusE = new spritesheet_AnimatedSprite(ss);
		bonusE.set_x(107);
		bonusE.set_y(134);
		bonusE.set_visible(false);
		bonusE.showBehavior("_e");
		this.animations.push(bonusE);
		this.addChild(bonusE);
		motion_Actuate.tween(back,0.466,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone());
		motion_Actuate.tween(back,0.333,{ y : 0},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			motion_Actuate.tween(back,0.066,{ y : -20},false).ease(motion_easing_Quad.get_easeOut()).reflect().repeat(1);
		});
		motion_Actuate.timer(0.266).onComplete(function() {
			star01.set_x(201.5);
			star01.set_y(80);
			star01.set_scaleX(0);
			star01.set_scaleY(0);
			star02.set_x(201.5);
			star02.set_y(98);
			star02.set_scaleX(0);
			star02.set_scaleY(0);
			star03.set_x(201);
			star03.set_y(101);
			star03.set_scaleX(0);
			star03.set_scaleY(0);
			motion_Actuate.tween(star01,0.466,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(star01,0.266,{ x : 130, y : -117, scaleX : 1.2, scaleY : 1.2},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				motion_Actuate.tween(star01,0.2,{ x : 142, y : -84, scaleX : 1, scaleY : 1},false).ease(motion_easing_Linear.get_easeNone()).reflect().repeat();
			});
			motion_Actuate.timer(0.133).onComplete(function() {
				motion_Actuate.tween(star02,0.466,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone());
				motion_Actuate.tween(star02,0.266,{ x : 47, y : -62, scaleX : 1.2, scaleY : 1.2},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
					motion_Actuate.tween(star02,0.2,{ x : 73, y : -36, scaleX : 1, scaleY : 1},false).ease(motion_easing_Linear.get_easeNone()).reflect().repeat();
				});
			});
			motion_Actuate.timer(0.266).onComplete(function() {
				motion_Actuate.tween(star03,0.466,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone());
				motion_Actuate.tween(star03,0.266,{ x : 3, y : 10, scaleX : 1.2, scaleY : 1.2},false).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
					motion_Actuate.tween(star03,0.2,{ x : 36, y : 25, scaleX : 1, scaleY : 1},false).ease(motion_easing_Linear.get_easeNone()).reflect().repeat();
				});
			});
			motion_Actuate.tween(welcome,0.2,{ x : 52, alpha : 1}).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(bonus,0.2,{ x : 107, alpha : 1}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				welcomeE.set_visible(true);
				welcomeE.showBehavior("_e");
				bonusE.set_visible(true);
				bonusE.showBehavior("_e");
				haxe_Timer.delay(function() {
					HxOverrides.remove(_gthis.animations,welcomeE);
					HxOverrides.remove(_gthis.animations,bonusE);
					_gthis.removeChild(welcomeE);
					_gthis.removeChild(bonusE);
				},800);
			});
			motion_Actuate.tween(_gthis.btnCollect,0.2,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				_gthis.btnCollect.set_work(true);
			});
		});
		motion_Actuate.timer(0.333).onComplete(function() {
			var ox = (dayback.get_width() * 2 - dayback.get_width()) / 2;
			var oy = (dayback.get_height() * 2 - dayback.get_height()) / 2;
			dayback.set_x(dayback.get_x() - ox);
			dayback.set_y(dayback.get_y() - oy);
			dayback.set_scaleX(2);
			dayback.set_scaleY(2);
			motion_Actuate.tween(dayback,0.333,{ alpha : 1, x : dayback.get_x() + ox, y : dayback.get_y() + oy, scaleX : 1, scaleY : 1}).ease(motion_easing_Quad.get_easeIn()).onComplete(function() {
				_gthis.showDay();
			});
		});
		motion_Actuate.timer(1).onComplete(function() {
			btnCollectE.set_visible(true);
			btnCollectE.set_alpha(1);
			btnCollectE.showBehavior("_e");
			haxe_Timer.delay(function() {
				if(btnCollectE.parent != null) {
					_gthis.removeChild(btnCollectE);
				}
				HxOverrides.remove(_gthis.animations,btnCollectE);
			},800);
		});
		motion_Actuate.timer(0.466).onComplete(function() {
			motion_Actuate.tween(light1,0.133,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone()).reflect().repeat();
			motion_Actuate.timer(0.133).onComplete(function() {
				motion_Actuate.tween(light2,0.133,{ alpha : 1},false).ease(motion_easing_Linear.get_easeNone()).reflect().repeat();
			});
		});
	}
	,showDay: function() {
		var _gthis = this;
		var tomorrow = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/txt_tommorrow.png"));
		tomorrow.set_alpha(0);
		this.addChild(tomorrow);
		var today = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/txt_today.png"));
		today.set_alpha(0);
		this.addChild(today);
		var collected = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/txt_collected.png"));
		collected.set_alpha(0);
		this.addChild(collected);
		var comment = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/txt_help_comment.png"));
		comment.set_x(-38);
		comment.set_y(367);
		comment.set_alpha(0);
		this.addChild(comment);
		if(this.day > 1) {
			var day1 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/welcome_day_1_grey.png"));
			day1.set_x(-38);
			day1.set_y(198);
			day1.set_alpha(0);
			this.addChild(day1);
			var chk = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/welcome_check.png"));
			chk.set_x(17);
			chk.set_y(223);
			chk.set_alpha(0);
			this.addChild(chk);
			motion_Actuate.tween(day1,0.333,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(chk,0.333,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
		}
		if(this.day > 2) {
			var day2 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/welcome_day_2_grey.png"));
			day2.set_x(155);
			day2.set_y(198);
			day2.set_alpha(0);
			this.addChild(day2);
			var chk1 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/welcome_check.png"));
			chk1.set_x(271);
			chk1.set_y(223);
			chk1.set_alpha(0);
			this.addChild(chk1);
			motion_Actuate.tween(day2,0.333,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(chk1,0.333,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
		}
		var ss = null;
		var eff = null;
		if(this.day == 1) {
			ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/welcome/day1_e.png",false),9,1,215,134);
			ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8],false,15));
			eff = new spritesheet_AnimatedSprite(ss);
			eff.set_x(-38);
			eff.set_y(198);
			today.set_x(20);
			today.set_y(337);
			tomorrow.set_x(274);
			tomorrow.set_y(337);
			var chk2 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/welcome_check.png"));
			chk2.set_x(-22.5);
			chk2.set_y(184);
			chk2.set_scaleX(2);
			chk2.set_scaleY(2);
			chk2.smoothing = true;
			chk2.set_alpha(0);
			this.addChild(chk2);
			motion_Actuate.tween(chk2,0.333,{ scaleX : 1, scaleY : 1, x : 17, y : 223, alpha : 1}).ease(motion_easing_Quad.get_easeIn()).delay(0.8);
		} else if(this.day == 2) {
			ss = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/welcome/day2_e.png",false),5,2,284,134);
			ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8],false,15));
			eff = new spritesheet_AnimatedSprite(ss);
			eff.set_x(155);
			eff.set_y(198);
			collected.set_x(20);
			collected.set_y(337);
			today.set_x(274);
			today.set_y(337);
			var chk3 = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/welcome/welcome_check.png"));
			chk3.set_x(231.5);
			chk3.set_y(184);
			chk3.set_scaleX(2);
			chk3.set_scaleY(2);
			chk3.smoothing = true;
			chk3.set_alpha(0);
			this.addChild(chk3);
			motion_Actuate.tween(chk3,0.333,{ scaleX : 1, scaleY : 1, x : 271, y : 223, alpha : 1}).ease(motion_easing_Quad.get_easeIn()).delay(0.8);
		}
		motion_Actuate.tween(today,0.333,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
		motion_Actuate.tween(comment,0.333,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
		if(this.day == 1) {
			motion_Actuate.tween(tomorrow,0.333,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
		} else if(this.day == 2) {
			motion_Actuate.tween(collected,0.333,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone());
		}
		if(eff != null) {
			motion_Actuate.timer(0.333).onComplete(function() {
				eff.showBehavior("_e");
				_gthis.animations.push(eff);
				_gthis.addChild(eff);
				haxe_Timer.delay(function() {
					if(eff.parent != null) {
						_gthis.removeChild(eff);
					}
					HxOverrides.remove(_gthis.animations,eff);
				},600);
			});
		}
	}
	,onClickCollect: function(e) {
		var _gthis = this;
		this.btnCollect.set_work(false);
		haxe_Log.trace("btn collect click",{ fileName : "Welcome.hx", lineNumber : 400, className : "com.redpeakgames.cloud9.dialog.Welcome", methodName : "onClickCollect"});
		var ss = spritesheet_importers_SparrowImporter.parse(openfl_Assets.getText("img/welcome/coin_e.xml"),"img/welcome");
		ss.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11],false,15));
		this.coinEffect = new spritesheet_AnimatedSprite(ss);
		this.coinEffect.set_x(-54);
		this.coinEffect.set_y(137);
		this.coinEffect.showBehavior("_e");
		this.animations.push(this.coinEffect);
		this.addChild(this.coinEffect);
		haxe_Timer.delay(function() {
			_gthis.coinEffect.set_visible(false);
		},800);
		this.parent.addChild(new com_redpeakgames_cloud9_ui_DrawCoins(918,575,698,80,1500,10));
		motion_Actuate.tween(this,0.2,{ alpha : 0}).delay(0.8).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.close.welcome",true,false,_gthis.day == null?"null":"" + _gthis.day));
			com_redpeakgames_cloud9_TopMenu.coinAdjust.pop();
			com_redpeakgames_cloud9_TopMenu.diaAdjust.pop();
			_gthis.dispatchEvent(new openfl_events_DataEvent("ge.balance.changed",true,false,JSON.stringify({ coin : haxe__$Int64_Int64_$Impl_$.toString(_gthis.udt.coin), dia : _gthis.udt.dia, showAddedCoin : true, udtCoinChange : false})));
			_gthis.parent.removeChild(_gthis);
			_gthis.removeChildren();
			_gthis.removeEventListener("enterFrame",$bind(_gthis,_gthis.onEnterFrame));
		});
	}
	,__class__: com_redpeakgames_cloud9_dialog_Welcome
});
var com_redpeakgames_cloud9_game_AutoAsset = function() {
	this.nums = [];
	this.btns = [];
	this.txtNums = [];
};
$hxClasses["com.redpeakgames.cloud9.game.AutoAsset"] = com_redpeakgames_cloud9_game_AutoAsset;
com_redpeakgames_cloud9_game_AutoAsset.__name__ = ["com","redpeakgames","cloud9","game","AutoAsset"];
com_redpeakgames_cloud9_game_AutoAsset.prototype = {
	bg: null
	,nums: null
	,btns: null
	,txtNums: null
	,__class__: com_redpeakgames_cloud9_game_AutoAsset
};
var com_redpeakgames_cloud9_game_Betting = function(inBettingTable,index) {
	this.bettingTable = inBettingTable;
	this.bettingIndex = index;
};
$hxClasses["com.redpeakgames.cloud9.game.Betting"] = com_redpeakgames_cloud9_game_Betting;
com_redpeakgames_cloud9_game_Betting.__name__ = ["com","redpeakgames","cloud9","game","Betting"];
com_redpeakgames_cloud9_game_Betting.prototype = {
	bettingIndex: null
	,bettingTable: null
	,max: function() {
		this.bettingIndex = this.get_bettingTable().length - 1;
		return this.bettingIndex;
	}
	,get_index: function() {
		return this.bettingIndex;
	}
	,set_index: function(index) {
		this.bettingIndex = index;
		return index;
	}
	,get_value: function() {
		return this.get_bettingTable()[this.bettingIndex];
	}
	,set_value: function(v) {
		var _g1 = 0;
		var _g = this.get_bettingTable().length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.get_bettingTable()[i] == v) {
				this.set_index(i);
				return i;
			}
		}
		if(v < this.get_bettingTable()[0]) {
			this.get_bettingTable().splice(0,0,v);
			this.set_index(0);
			return this.get_index();
		}
		this.set_index(this.get_bettingTable().length - 1);
		return this.get_index();
	}
	,plus: function() {
		if(this.get_bettingTable().length > this.bettingIndex + 1) {
			++this.bettingIndex;
		}
		return this.bettingIndex;
	}
	,minus: function() {
		if(this.bettingIndex > 0) {
			--this.bettingIndex;
		}
		return this.bettingIndex;
	}
	,get_bettingTable: function() {
		return this.bettingTable;
	}
	,__class__: com_redpeakgames_cloud9_game_Betting
	,__properties__: {set_value:"set_value",get_value:"get_value",set_index:"set_index",get_index:"get_index",get_bettingTable:"get_bettingTable"}
};
var com_redpeakgames_cloud9_game_BitmapSource = function(bmp,ox,oy) {
	this.bmp = bmp;
	this.ox = ox;
	this.oy = oy;
};
$hxClasses["com.redpeakgames.cloud9.game.BitmapSource"] = com_redpeakgames_cloud9_game_BitmapSource;
com_redpeakgames_cloud9_game_BitmapSource.__name__ = ["com","redpeakgames","cloud9","game","BitmapSource"];
com_redpeakgames_cloud9_game_BitmapSource.prototype = {
	bmp: null
	,ox: null
	,oy: null
	,__class__: com_redpeakgames_cloud9_game_BitmapSource
};
var com_redpeakgames_cloud9_game_GameEvent = function() { };
$hxClasses["com.redpeakgames.cloud9.game.GameEvent"] = com_redpeakgames_cloud9_game_GameEvent;
com_redpeakgames_cloud9_game_GameEvent.__name__ = ["com","redpeakgames","cloud9","game","GameEvent"];
var com_redpeakgames_cloud9_game_GameState = $hxClasses["com.redpeakgames.cloud9.game.GameState"] = { __ename__ : ["com","redpeakgames","cloud9","game","GameState"], __constructs__ : ["Base","Freespin","Respin","None"] };
com_redpeakgames_cloud9_game_GameState.Base = ["Base",0];
com_redpeakgames_cloud9_game_GameState.Base.toString = $estr;
com_redpeakgames_cloud9_game_GameState.Base.__enum__ = com_redpeakgames_cloud9_game_GameState;
com_redpeakgames_cloud9_game_GameState.Freespin = ["Freespin",1];
com_redpeakgames_cloud9_game_GameState.Freespin.toString = $estr;
com_redpeakgames_cloud9_game_GameState.Freespin.__enum__ = com_redpeakgames_cloud9_game_GameState;
com_redpeakgames_cloud9_game_GameState.Respin = ["Respin",2];
com_redpeakgames_cloud9_game_GameState.Respin.toString = $estr;
com_redpeakgames_cloud9_game_GameState.Respin.__enum__ = com_redpeakgames_cloud9_game_GameState;
com_redpeakgames_cloud9_game_GameState.None = ["None",3];
com_redpeakgames_cloud9_game_GameState.None.toString = $estr;
com_redpeakgames_cloud9_game_GameState.None.__enum__ = com_redpeakgames_cloud9_game_GameState;
var com_redpeakgames_cloud9_game_IdleTiming = function(inTiming) {
	this.timing = inTiming;
};
$hxClasses["com.redpeakgames.cloud9.game.IdleTiming"] = com_redpeakgames_cloud9_game_IdleTiming;
com_redpeakgames_cloud9_game_IdleTiming.__name__ = ["com","redpeakgames","cloud9","game","IdleTiming"];
com_redpeakgames_cloud9_game_IdleTiming.prototype = {
	timing: null
	,sumTime: function(phase) {
		var sum = 0;
		var _g1 = 0;
		var _g = phase + 1;
		while(_g1 < _g) sum += this.timing[_g1++];
		return sum;
	}
	,time: function(phase) {
		if(this.timing.length < phase) {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("Wrong phase: " + phase));
		}
		return this.timing[phase];
	}
	,__class__: com_redpeakgames_cloud9_game_IdleTiming
};
var com_redpeakgames_cloud9_game_Item = function() {
};
$hxClasses["com.redpeakgames.cloud9.game.Item"] = com_redpeakgames_cloud9_game_Item;
com_redpeakgames_cloud9_game_Item.__name__ = ["com","redpeakgames","cloud9","game","Item"];
com_redpeakgames_cloud9_game_Item.getReward = function(iid) {
	if(iid == 70001) {
		return "200";
	}
	return "0";
};
com_redpeakgames_cloud9_game_Item.prototype = {
	__class__: com_redpeakgames_cloud9_game_Item
};
var com_redpeakgames_cloud9_game_NearWin = function(pSc,numColumn) {
	this.sc = pSc;
	this.numColumn = numColumn;
	this.stopped = [];
	var _g1 = 0;
	while(_g1 < numColumn) {
		++_g1;
		this.stopped.push(0);
	}
};
$hxClasses["com.redpeakgames.cloud9.game.NearWin"] = com_redpeakgames_cloud9_game_NearWin;
com_redpeakgames_cloud9_game_NearWin.__name__ = ["com","redpeakgames","cloud9","game","NearWin"];
com_redpeakgames_cloud9_game_NearWin.prototype = {
	numColumn: null
	,hope: null
	,sc: null
	,stopped: null
	,matched: null
	,matchCount: null
	,reset: function() {
		this.hope = true;
		this.matched = 0;
		var _g1 = 0;
		var _g = this.numColumn;
		while(_g1 < _g) this.stopped[_g1++] = 0;
	}
	,reelStopped: function(reels,index) {
		this.stopped[index] = 1;
		if(this.hope == false || this.sc[0] > index) {
			return;
		}
		var count = 0;
		this.matched = 0;
		var _g1 = 0;
		var _g = this.sc.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.hope == false || this.sc[i] > index) {
				break;
			}
			++count;
			if(reels[this.sc[i]].getSymbol("sc") == null) {
				if(this.sc.length - count + this.matched < 3) {
					this.hope = false;
				}
			} else {
				this.matched += 1;
			}
		}
	}
	,isFirst: function(index) {
		return this.stopped[index] == 0;
	}
	,set_hopeful: function(value) {
		this.hope = value;
		return value;
	}
	,get_hopeful: function() {
		return this.hope;
	}
	,get_matchCount: function() {
		return this.matched;
	}
	,__class__: com_redpeakgames_cloud9_game_NearWin
	,__properties__: {get_matchCount:"get_matchCount",set_hopeful:"set_hopeful",get_hopeful:"get_hopeful"}
};
var com_redpeakgames_cloud9_game_Payline = function(number,thickness,color,gcolor) {
	this.number = number;
	this.thickness = thickness;
	this.color = color;
	this.gcolor = gcolor;
};
$hxClasses["com.redpeakgames.cloud9.game.Payline"] = com_redpeakgames_cloud9_game_Payline;
com_redpeakgames_cloud9_game_Payline.__name__ = ["com","redpeakgames","cloud9","game","Payline"];
com_redpeakgames_cloud9_game_Payline.prototype = {
	number: null
	,thickness: null
	,color: null
	,gcolor: null
	,index: null
	,__class__: com_redpeakgames_cloud9_game_Payline
};
var com_redpeakgames_cloud9_game_PaytableAsset = function() {
	this.pages = [];
};
$hxClasses["com.redpeakgames.cloud9.game.PaytableAsset"] = com_redpeakgames_cloud9_game_PaytableAsset;
com_redpeakgames_cloud9_game_PaytableAsset.__name__ = ["com","redpeakgames","cloud9","game","PaytableAsset"];
com_redpeakgames_cloud9_game_PaytableAsset.prototype = {
	bg: null
	,prev: null
	,exit: null
	,next: null
	,offset: null
	,pages: null
	,__class__: com_redpeakgames_cloud9_game_PaytableAsset
};
var com_redpeakgames_cloud9_game_Progressbar = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(com_redpeakgames_cloud9_game_Progressbar.preload != null) {
		this.__fromImage(com_redpeakgames_cloud9_game_Progressbar.preload);
	} else {
		var base64 = haxe_Resource.getString(com_redpeakgames_cloud9_game_Progressbar.resourceName);
		var onload1 = function(b) {
			if(com_redpeakgames_cloud9_game_Progressbar.preload == null) {
				com_redpeakgames_cloud9_game_Progressbar.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(base64,com_redpeakgames_cloud9_game_Progressbar.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["com.redpeakgames.cloud9.game.Progressbar"] = com_redpeakgames_cloud9_game_Progressbar;
com_redpeakgames_cloud9_game_Progressbar.__name__ = ["com","redpeakgames","cloud9","game","Progressbar"];
com_redpeakgames_cloud9_game_Progressbar.__super__ = openfl_display_BitmapData;
com_redpeakgames_cloud9_game_Progressbar.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: com_redpeakgames_cloud9_game_Progressbar
});
var openfl_display_DefaultPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var perceivedLuminosity = 0.299 * (backgroundColor >> 16 & 255) + 0.587 * (backgroundColor >> 8 & 255) + 0.114 * (backgroundColor & 255);
	var color = 0;
	if(perceivedLuminosity < 70) {
		color = 16777215;
	}
	var y = this.getHeight() / 2 - 3.5;
	var width = this.getWidth() - 60;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,7);
	this.outline.set_x(30);
	this.outline.set_y(y);
	this.outline.set_alpha(0);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - 4,3);
	this.progress.set_x(32);
	this.progress.set_y(y + 2);
	this.progress.set_scaleX(0);
	this.progress.set_alpha(0);
	this.addChild(this.progress);
	this.startAnimation = openfl_Lib.getTimer() + 100;
	this.endAnimation = this.startAnimation + 1000;
	this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
};
$hxClasses["openfl.display.DefaultPreloader"] = openfl_display_DefaultPreloader;
openfl_display_DefaultPreloader.__name__ = ["openfl","display","DefaultPreloader"];
openfl_display_DefaultPreloader.__super__ = openfl_display_Sprite;
openfl_display_DefaultPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	endAnimation: null
	,outline: null
	,progress: null
	,startAnimation: null
	,getBackgroundColor: function() {
		return openfl_Lib.current.stage.window.config.background;
	}
	,getHeight: function() {
		var height = openfl_Lib.current.stage.window.config.height;
		if(height > 0) {
			return height;
		} else {
			return openfl_Lib.current.stage.stageHeight;
		}
	}
	,getWidth: function() {
		var width = openfl_Lib.current.stage.window.config.width;
		if(width > 0) {
			return width;
		} else {
			return openfl_Lib.current.stage.stageWidth;
		}
	}
	,onInit: function() {
		this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,onLoaded: function() {
		this.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = 0.0;
		if(bytesTotal > 0) {
			percentLoaded = bytesLoaded / bytesTotal;
			if(percentLoaded > 1) {
				percentLoaded = 1;
			}
		}
		this.progress.set_scaleX(percentLoaded);
	}
	,this_onAddedToStage: function(event) {
		this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
		this.onInit();
		this.onUpdate(this.get_loaderInfo().bytesLoaded,this.get_loaderInfo().bytesTotal);
		this.addEventListener("progress",$bind(this,this.this_onProgress));
		this.addEventListener("complete",$bind(this,this.this_onComplete));
	}
	,this_onComplete: function(event) {
		event.preventDefault();
		this.removeEventListener("progress",$bind(this,this.this_onProgress));
		this.removeEventListener("complete",$bind(this,this.this_onComplete));
		this.onLoaded();
	}
	,this_onEnterFrame: function(event) {
		var percent = (openfl_Lib.getTimer() - this.startAnimation) / (this.endAnimation - this.startAnimation);
		if(percent < 0) {
			percent = 0;
		}
		if(percent > 1) {
			percent = 1;
		}
		this.outline.set_alpha(percent);
		this.progress.set_alpha(percent);
	}
	,this_onProgress: function(event) {
		this.onUpdate(event.bytesLoaded | 0,event.bytesTotal | 0);
	}
	,__class__: openfl_display_DefaultPreloader
});
var com_redpeakgames_cloud9_game_Preloader = function() {
	openfl_display_DefaultPreloader.call(this);
	this.removeChild(this.outline);
	this.removeChild(this.progress);
	this.outline = null;
	this.progress = null;
	this.init();
};
$hxClasses["com.redpeakgames.cloud9.game.Preloader"] = com_redpeakgames_cloud9_game_Preloader;
com_redpeakgames_cloud9_game_Preloader.__name__ = ["com","redpeakgames","cloud9","game","Preloader"];
com_redpeakgames_cloud9_game_Preloader.__super__ = openfl_display_DefaultPreloader;
com_redpeakgames_cloud9_game_Preloader.prototype = $extend(openfl_display_DefaultPreloader.prototype,{
	bg: null
	,pb: null
	,clipping: null
	,tx: null
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var ratio = bytesLoaded / bytesTotal;
		if(this.clipping != null) {
			this.clipping.set_x(this.tx + 308 + (242 * ratio | 0));
		}
	}
	,onInit: function() {
	}
	,onComplete: function(event) {
	}
	,init: function() {
		var _gthis = this;
		this.tx = (openfl_Lib.current.stage.stageWidth - 1247) / 2 | 0;
		haxe_Log.trace(openfl_Lib.current.stage.stageWidth,{ fileName : "Preloader.hx", lineNumber : 62, className : "com.redpeakgames.cloud9.game.Preloader", methodName : "init"});
		var loadingUrl = "http://cdn.hit5casino.com/img/rnoti.jpg";
		if(openfl_Lib.current.stage.get_loaderInfo().parameters.loading != null) {
			var inName = openfl_Lib.current.stage.get_loaderInfo().url.split("swf/")[1].split(".");
			var s = openfl_Lib.current.stage.get_loaderInfo().parameters.loading + "_" + inName[0] + ".jpg";
			loadingUrl = decodeURIComponent(s.split("+").join(" "));
		}
		this.bg = new openfl_display_Loader();
		this.bg.load(new openfl_net_URLRequest(loadingUrl));
		this.bg.contentLoaderInfo.addEventListener("complete",function(e) {
			_gthis.bg.set_x(_gthis.tx);
			_gthis.bg.set_y(18);
			_gthis.addChild(_gthis.bg);
			_gthis.clipping = new openfl_display_Shape();
			_gthis.clipping.get_graphics().beginFill(0,0);
			_gthis.clipping.get_graphics().drawRect(0,0,259,34);
			_gthis.clipping.get_graphics().endFill();
			_gthis.clipping.set_x(_gthis.tx + 308);
			_gthis.clipping.set_y(667);
			_gthis.addChild(_gthis.clipping);
			_gthis.pb = new openfl_display_Bitmap(new com_redpeakgames_cloud9_game_Progressbar(0,0));
			_gthis.pb.set_x(_gthis.tx + 558);
			_gthis.pb.set_y(667);
			_gthis.pb.set_mask(_gthis.clipping);
			_gthis.addChild(_gthis.pb);
		});
	}
	,__class__: com_redpeakgames_cloud9_game_Preloader
});
var com_redpeakgames_cloud9_game_Reel = function(initX,initY,ofy,inRows,symbols,spi) {
	openfl_display_Sprite.call(this);
	this.spi = spi;
	this.over = Math.round(ofy * 0.4);
	this.symbols = symbols;
	this.di = { x : initX, y : initY, oy : ofy, rows : inRows};
	this.cur = { y : 0, index : 0};
	this.delay = { begin : 0, stop : 0};
	this.elapsedTick = 0;
	this.mute = false;
	this.set_blurStrength(8);
	this.window = [];
	this.seStop = com_redpeakgames_cloud9_utils_CSound.get("spinstop");
};
$hxClasses["com.redpeakgames.cloud9.game.Reel"] = com_redpeakgames_cloud9_game_Reel;
com_redpeakgames_cloud9_game_Reel.__name__ = ["com","redpeakgames","cloud9","game","Reel"];
com_redpeakgames_cloud9_game_Reel.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_game_Reel.prototype = $extend(openfl_display_Sprite.prototype,{
	di: null
	,stripLength: null
	,symbols: null
	,reelStrip: null
	,window: null
	,cur: null
	,elapsedTick: null
	,delay: null
	,runtime: null
	,spi: null
	,stopIndex: null
	,stopped: null
	,mySymbolCount: null
	,over: null
	,curSymbolCount: null
	,force: null
	,ridx: null
	,mute: null
	,blurStrength: null
	,seStop: null
	,timePerSymbol: null
	,strip: null
	,rIndex: null
	,set_stop: function(stop) {
		this.stopIndex = stop >= 0 && stop < this.reelStrip.length?stop:-1;
		this.calculateIndexForStop();
		return this.stopIndex;
	}
	,get_stop: function() {
		return this.stopIndex;
	}
	,calculateIndexForStop: function() {
		var _gthis = this;
		if(this.elapsedTick / 1000.0 + this.timePerSymbol * (this.di.rows + 3) < this.spi.runtime / 1000.0) {
			this.cur.index = (this.stopIndex + (this.mySymbolCount - this.curSymbolCount - 3) + this.stripLength) % this.stripLength;
			var remainTime = this.runtime - this.elapsedTick / 1000;
			var ty = this.mySymbolCount * this.di.oy;
			motion_Actuate.tween(this,remainTime,{ y : ty + this.over}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				motion_Actuate.effects(_gthis,0.25).filter(openfl_filters_BlurFilter,{ blurX : 0, blurY : 0, quality : 0}).ease(motion_easing_Quad.get_easeOut());
				motion_Actuate.tween(_gthis,0.25,{ y : ty}).ease(motion_easing_Back.get_easeOut()).onComplete(function() {
					_gthis.stopped = 1;
					_gthis.reset();
				});
				if(com_redpeakgames_cloud9_Global.mute == false && _gthis.mute == false) {
					if(_gthis.seStop != null) {
						_gthis.seStop.play();
					}
				}
			});
		} else {
			var numAdded = Math.round(this.delay.stop / (this.spi.runtime / this.spi.symbolCount));
			this.cur.index = (this.stopIndex + this.di.rows + numAdded) % this.stripLength;
			var totalSymbol = this.curSymbolCount + this.di.rows + 3 + numAdded;
			var remainTime1 = totalSymbol * this.timePerSymbol - this.elapsedTick / 1000;
			var ty1 = totalSymbol * this.di.oy;
			motion_Actuate.stop(this,null,false,false);
			motion_Actuate.tween(this,remainTime1,{ y : ty1 + this.over}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				motion_Actuate.effects(_gthis,0.25).filter(openfl_filters_BlurFilter,{ blurX : 0, blurY : 0, quality : 0}).ease(motion_easing_Quad.get_easeOut());
				motion_Actuate.tween(_gthis,0.25,{ y : ty1}).ease(motion_easing_Back.get_easeOut()).onComplete(function() {
					_gthis.stopped = 1;
					_gthis.reset();
				});
				if(com_redpeakgames_cloud9_Global.mute == false && _gthis.mute == false) {
					if(_gthis.seStop != null) {
						_gthis.seStop.play();
					}
				}
			});
		}
	}
	,set_strip: function(strip) {
		this.stripLength = strip.length;
		this.reelStrip = strip;
		this.calculateStartY();
		this.calculateStartIndex();
		this.removeChildren();
		this.window = [];
		var _g1 = 0;
		var _g = this.di.rows + 3;
		while(_g1 < _g) {
			++_g1;
			this.addNewSymbol();
		}
		return this.reelStrip;
	}
	,setStrip: function(strip,stop) {
		this.stripLength = strip.length;
		this.reelStrip = strip;
		this.calculateStartY();
		this.calculateStartIndex(stop);
		this.removeChildren();
		this.window = [];
		var _g1 = 0;
		var _g = this.di.rows + 3;
		while(_g1 < _g) {
			++_g1;
			this.addNewSymbol();
		}
		return this.reelStrip;
	}
	,set_rIndex: function(ridx) {
		this.ridx = ridx;
		if(this.seStop == null) {
			this.seStop = com_redpeakgames_cloud9_utils_CSound.get("spinstop0" + (this.ridx + 1));
		}
		return ridx;
	}
	,calculateStartIndex: function(index) {
		if(index == null) {
			this.cur.index = Math.random() * this.stripLength;
		} else {
			this.cur.index = (index + 3) % this.reelStrip.length;
		}
	}
	,calculateStartY: function() {
		this.cur.y = this.di.y + this.di.oy * this.di.rows;
	}
	,addNewSymbol: function() {
		var sn = this.reelStrip[this.cur.index];
		var _this = this.symbols;
		var nSymbol = __map_reserved[sn] != null?_this.getReserved(sn):_this.h[sn];
		var hSymbol;
		var _this1 = this.symbols;
		var key = sn + "_h";
		if(__map_reserved[key] != null?_this1.existsReserved(key):_this1.h.hasOwnProperty(key)) {
			var _this2 = this.symbols;
			var key1 = sn + "_h";
			hSymbol = (__map_reserved[key1] != null?_this2.getReserved(key1):_this2.h[key1]).bmp;
		} else {
			hSymbol = null;
		}
		var smbl = new com_redpeakgames_cloud9_game_Symbol(sn,this.cur.index,nSymbol.bmp,hSymbol,nSymbol.ox != 0 || nSymbol.oy != 0);
		smbl.set_x(this.di.x + nSymbol.ox);
		smbl.set_y(this.cur.y + nSymbol.oy);
		this.addChild(smbl);
		this.window.push(smbl);
		this.depthSorting();
		this.calculateNextY();
		this.calculateNextIndex();
		this.curSymbolCount += 1;
	}
	,removeOldestSymbol: function() {
		var sym = this.window.shift();
		this.removeChild(sym);
		sym.clear();
		sym = null;
	}
	,depthSorting: function() {
		var _g = 0;
		var _g1 = this.window;
		while(_g < _g1.length) {
			var sm = _g1[_g];
			++_g;
			if(sm.isBig() && this.get_numChildren() > 1) {
				this.setChildIndex(sm,this.get_numChildren() - 1);
			}
		}
	}
	,calculateNextY: function() {
		this.cur.y -= this.di.oy;
	}
	,calculateNextIndex: function() {
		this.cur.index = (this.cur.index + this.stripLength - 1) % this.stripLength;
	}
	,startSpin: function(beginDelay,stopDelay,fast) {
		this.delay.begin = beginDelay;
		this.delay.stop = stopDelay;
		this.stopIndex = -1;
		this.stopped = 0;
		this.elapsedTick = 0 - this.delay.begin;
		this.curSymbolCount = 0;
		this.runtime = (this.spi.runtime + this.delay.stop) / (1000 * (fast?2:1));
		this.mySymbolCount = this.spi.symbolCount + Math.round(this.delay.stop / (this.spi.runtime / this.spi.symbolCount));
		this.timePerSymbol = this.runtime / this.mySymbolCount;
		motion_Actuate.tween(this,6,{ y : Math.round(6 / this.timePerSymbol) * this.di.oy}).ease(motion_easing_Linear.get_easeNone());
		motion_Actuate.effects(this,0.2).filter(openfl_filters_BlurFilter,{ blurX : 0, blurY : this.blurStrength, quality : 3}).ease(motion_easing_Linear.get_easeNone());
	}
	,forceStop: function() {
		var _gthis = this;
		this.force = true;
		this.set_filters(null);
		if(this.stopped == 1) {
			return;
		}
		while(this.window.length != 0) this.removeOldestSymbol();
		this.cur.index = (this.stopIndex + this.di.rows) % this.stripLength;
		var _g1 = 0;
		var _g = this.di.rows + 3;
		while(_g1 < _g) {
			++_g1;
			this.addNewSymbol();
		}
		this.reset();
		if(this.stopped == 0) {
			this.set_y(this.di.oy * 0.5);
			motion_Actuate.tween(this,0.2,{ y : 0}).ease(motion_easing_Back.get_easeOut()).onComplete(function() {
				_gthis.stopped = 1;
			});
		}
	}
	,reset: function() {
		this.set_y(0);
		this.curSymbolCount = 0;
		this.mute = false;
		this.calculateStartY();
		var _g1 = 0;
		var _g = this.di.rows + 3;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.window[i].isBig()) {
				var tmp = this.cur.y;
				var _this = this.symbols;
				var key = this.window[i].symbolName;
				var tmp1 = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
				this.window[i].set_y(tmp + tmp1.oy);
			} else {
				this.window[i].set_y(this.cur.y);
			}
			this.calculateNextY();
		}
	}
	,update: function(delta) {
		this.elapsedTick += delta;
		while(this.get_y() + this.window[0].get_y() + this.window[0].get_height() >= this.di.y + this.di.oy * (this.di.rows + 2)) {
			this.removeOldestSymbol();
			this.addNewSymbol();
		}
		return this.stopped;
	}
	,findSymbol: function(sn) {
		var _g1 = 1;
		var _g = this.di.rows + 1;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.window[i].symbolName == sn) {
				var _this = this.symbols;
				var news = new com_redpeakgames_cloud9_game_Symbol(sn,0,(__map_reserved[sn] != null?_this.getReserved(sn):_this.h[sn]).bmp);
				news.set_x(this.window[i].get_x());
				news.set_y(this.window[i].get_y());
				return news;
			}
		}
		return null;
	}
	,getSymbol: function(sn,idx) {
		if(sn == null && idx == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("no argument"));
		}
		if(sn != null) {
			var idx1 = this.isThereSymbol(sn);
			if(idx1 != -1) {
				return this.getSymbol(null,idx1);
			} else {
				return null;
			}
		} else {
			if(idx >= this.window.length) {
				throw new js__$Boot_HaxeError(new openfl_errors_RangeError("Wrong index: " + idx));
			}
			return this.window[idx];
		}
	}
	,getSymbolByHumanReadable: function(idx) {
		if(idx < this.di.rows) {
			return this.window[this.di.rows - idx];
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("Wrong index: " + idx));
		}
	}
	,getStopSymbol: function(stop) {
		if(stop >= this.di.rows) {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("Wrong stop: " + stop));
		}
		return this.window[this.di.rows - stop];
	}
	,isThereSymbol: function(sn) {
		var _g1 = 1;
		var _g = this.di.rows + 1;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.window[i].symbolName == sn) {
				return i;
			}
		}
		return -1;
	}
	,findSymbolCount: function(sn) {
		if(sn == null) {
			sn = "sc";
		}
		var sum = 0;
		var _g1 = 1;
		var _g = this.di.rows + 1;
		while(_g1 < _g) if(this.window[_g1++].symbolName == sn) {
			++sum;
		}
		return sum;
	}
	,isSameThree: function(sn) {
		var _g1 = 1;
		var _g = this.di.rows + 1;
		while(_g1 < _g) if(this.window[_g1++].symbolName == sn) {
			return false;
		}
		return true;
	}
	,getSymbolPosition: function(sn) {
		var _g1 = 1;
		var _g = this.di.rows + 1;
		while(_g1 < _g) {
			var s = this.window[_g1++];
			if(s.symbolName == sn) {
				return { x : s.get_x() | 0, y : s.get_y() | 0};
			}
		}
		return null;
	}
	,shadowStripChange: function(strip) {
		this.stripLength = strip.length;
		this.reelStrip = strip;
		this.calculateStartIndex();
	}
	,accelate: function() {
		var _gthis = this;
		var numAdded = Math.round(2000 / (this.spi.runtime / this.spi.symbolCount));
		this.cur.index = (this.stopIndex + this.di.rows + numAdded) % this.stripLength;
		var totalSymbol = this.curSymbolCount + this.di.rows + 3 + numAdded;
		var remainTime = totalSymbol * this.timePerSymbol - this.elapsedTick / 1000 + 2.0;
		var ty = totalSymbol * this.di.oy;
		motion_Actuate.stop(this,null,false,false);
		motion_Actuate.tween(this,remainTime,{ y : ty + this.over}).ease(motion_easing_Quad.get_easeOut()).onComplete(function() {
			motion_Actuate.tween(_gthis,0.2,{ y : ty}).ease(motion_easing_Quad.get_easeOut()).onComplete(function() {
				_gthis.stopped = 1;
				_gthis.reset();
			});
			if(com_redpeakgames_cloud9_Global.mute == false && _gthis.mute == false) {
				if(_gthis.seStop != null) {
					_gthis.seStop.play();
				}
			}
		});
		motion_Actuate.effects(this,0.1).filter(openfl_filters_BlurFilter,{ blurX : 0, blurY : 0, quality : 0}).ease(motion_easing_Linear.get_easeNone());
	}
	,extend: function(delay) {
		var _gthis = this;
		var numAdded = Math.round((4000 + delay) / (this.spi.runtime / this.spi.symbolCount));
		this.cur.index = (this.stopIndex + this.di.rows + numAdded) % this.stripLength;
		var totalSymbol = this.curSymbolCount + this.di.rows + 3 + numAdded;
		var remainTime = totalSymbol * this.timePerSymbol - this.elapsedTick / 1000;
		var ty = totalSymbol * this.di.oy;
		motion_Actuate.stop(this,null,false,false);
		motion_Actuate.tween(this,remainTime,{ y : ty + this.over}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			motion_Actuate.effects(_gthis,0.1).filter(openfl_filters_BlurFilter,{ blurX : 0, blurY : 0, quality : 0}).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(_gthis,0.2,{ y : ty}).ease(motion_easing_Quad.get_easeOut()).onComplete(function() {
				_gthis.stopped = 1;
				_gthis.reset();
			});
			if(com_redpeakgames_cloud9_Global.mute == false && _gthis.mute == false) {
				if(_gthis.seStop != null) {
					_gthis.seStop.play();
				}
			}
		});
	}
	,set_blurStrength: function(value) {
		return this.blurStrength = value;
	}
	,clear: function() {
		while(this.window.length > 0) {
			var obj = this.window.pop();
			this.removeChild(obj);
			obj.clear();
			obj = null;
		}
	}
	,__class__: com_redpeakgames_cloud9_game_Reel
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_rIndex:"set_rIndex",set_stop:"set_stop",get_stop:"get_stop",set_strip:"set_strip",set_blurStrength:"set_blurStrength"})
});
var com_redpeakgames_cloud9_game_Roller = function() {
	openfl_display_Sprite.call(this);
};
$hxClasses["com.redpeakgames.cloud9.game.Roller"] = com_redpeakgames_cloud9_game_Roller;
com_redpeakgames_cloud9_game_Roller.__name__ = ["com","redpeakgames","cloud9","game","Roller"];
com_redpeakgames_cloud9_game_Roller.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_game_Roller.prototype = $extend(openfl_display_Sprite.prototype,{
	__class__: com_redpeakgames_cloud9_game_Roller
});
var com_redpeakgames_cloud9_game_Se = function() { };
$hxClasses["com.redpeakgames.cloud9.game.Se"] = com_redpeakgames_cloud9_game_Se;
com_redpeakgames_cloud9_game_Se.__name__ = ["com","redpeakgames","cloud9","game","Se"];
var com_redpeakgames_cloud9_game_SetBetUnit = function(udt,sid) {
	openfl_events_EventDispatcher.call(this);
	this.udt = udt;
	this.sid = sid;
};
$hxClasses["com.redpeakgames.cloud9.game.SetBetUnit"] = com_redpeakgames_cloud9_game_SetBetUnit;
com_redpeakgames_cloud9_game_SetBetUnit.__name__ = ["com","redpeakgames","cloud9","game","SetBetUnit"];
com_redpeakgames_cloud9_game_SetBetUnit.__super__ = openfl_events_EventDispatcher;
com_redpeakgames_cloud9_game_SetBetUnit.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	udt: null
	,http: null
	,timer: null
	,betUnit: null
	,sid: null
	,bet: null
	,set_bet: function(bunit) {
		if(this.timer != null) {
			this.timer.stop();
		}
		this.timer = haxe_Timer.delay($bind(this,this.setBetting),200);
		this.betUnit = bunit;
		this.dispatchEvent(new openfl_events_DataEvent("ge.disable.spin",false,false,"500"));
		return this.betUnit;
	}
	,setBetting: function() {
		this.http = new com_redpeakgames_cloud9_utils_Http(this.udt.url + "option2.php");
		var data = new openfl_net_URLVariables();
		data.uid = this.udt.uid;
		data.sig = this.udt.sig;
		data.sid = this.sid;
		data.what = "bet";
		data.data = this.betUnit;
		this.http.request(data);
	}
	,__class__: com_redpeakgames_cloud9_game_SetBetUnit
	,__properties__: {set_bet:"set_bet"}
});
var com_redpeakgames_cloud9_game_SlotData = function() {
	this.symbols = new haxe_ds_StringMap();
	this.strips = new haxe_ds_StringMap();
	this.spin = new com_redpeakgames_cloud9_game_SpinInfo();
	this.paylines = [];
	this.paylines.push(new com_redpeakgames_cloud9_game_Payline(0,0,0,0));
	this.inner = [];
	this.innert = [];
	this.paytable = new com_redpeakgames_cloud9_game_PaytableAsset();
	this.sc = [];
	this.auto = new com_redpeakgames_cloud9_game_AutoAsset();
};
$hxClasses["com.redpeakgames.cloud9.game.SlotData"] = com_redpeakgames_cloud9_game_SlotData;
com_redpeakgames_cloud9_game_SlotData.__name__ = ["com","redpeakgames","cloud9","game","SlotData"];
com_redpeakgames_cloud9_game_SlotData.prototype = {
	symbols: null
	,strips: null
	,paylines: null
	,spin: null
	,version: null
	,id: null
	,gname: null
	,matrix: null
	,cols: null
	,betlines: null
	,profile: null
	,sc: null
	,outer: null
	,inner: null
	,innert: null
	,balance: null
	,prize: null
	,stake: null
	,betting: null
	,autoCnt: null
	,plusBet: null
	,minusBet: null
	,btnSpin: null
	,btnAuto: null
	,btnAutoStop: null
	,btnOption: null
	,btnPaytable: null
	,paytable: null
	,auto: null
	,autoBg: null
	,load: function(data) {
		var job = JSON.parse(data);
		this.id = job.id;
		this.gname = job.name;
		this.matrix = this.setMatrix(job.matrix);
		this.cols = this.matrix.length;
		this.betlines = job.betlines;
		var sns = job.symbols;
		var _g = 0;
		while(_g < sns.length) {
			var sn = sns[_g];
			++_g;
			var bmp = openfl_Assets.exists("img/symbols/" + Std.string(sn.name) + ".png","IMAGE")?openfl_Assets.getBitmapData("img/symbols/" + Std.string(sn.name) + ".png",false):null;
			if(bmp == null) {
				bmp = openfl_Assets.getBitmapData("img/symbols/" + Std.string(sn.name) + ".jpg",false);
			}
			var k = sn.name;
			var v = new com_redpeakgames_cloud9_game_BitmapSource(bmp,sn.ox,sn.oy);
			var _this = this.symbols;
			if(__map_reserved[k] != null) {
				_this.setReserved(k,v);
			} else {
				_this.h[k] = v;
			}
		}
		this.setProfile(job.profile);
		this.spin.runtime = job.spin.runtime;
		this.spin.symbolCount = job.spin.symbols;
		this.spin.delay = { begin : job.spin.beginoffset, stop : job.spin.stopoffset};
		this.loadSC(job.sc);
		this.loadStartStrip(job.start);
		var plines = job.paylines;
		var _g1 = 0;
		while(_g1 < plines.length) {
			var p = plines[_g1];
			++_g1;
			var line = new com_redpeakgames_cloud9_game_Payline(p.line,p.thickness,p.color | 0,p.gcolor | 0);
			line.index = [p.idx[0]];
			var _g2 = 1;
			var _g11 = p.idx.length;
			while(_g2 < _g11) line.index.push(p.idx[_g2++]);
			this.paylines.push(line);
		}
		this.outer = { path : "img/" + job.assets.outer.path, x : job.assets.outer.x, y : job.assets.outer.y};
		var inns = job.assets.inner;
		var _g3 = 0;
		while(_g3 < inns.length) {
			var inn = inns[_g3];
			++_g3;
			this.inner.push({ path : "img/" + Std.string(inn.path), x : inn.x, y : inn.y});
		}
		inns = job.assets.innert;
		var _g4 = 0;
		while(_g4 < inns.length) {
			var inn1 = inns[_g4];
			++_g4;
			this.innert.push({ path : "img/" + Std.string(inn1.path), x : inn1.x, y : inn1.y});
		}
		this.balance = this.loadNumberText(job.assets.balance);
		this.prize = this.loadNumberText(job.assets.prize);
		this.stake = this.loadNumberText(job.assets.stake);
		this.betting = this.loadNumberText(job.assets.betting);
		this.plusBet = this.loadImageButton(job.assets.plusbet);
		this.minusBet = this.loadImageButton(job.assets.minusbet);
		this.btnSpin = this.loadImageButton(job.assets.btnspin);
		this.btnAuto = this.loadImageButton(job.assets.auto);
		this.btnOption = this.loadImageButton(job.assets.option);
		this.btnPaytable = this.loadImageButton(job.assets.paytable);
		this.loadPaytable(job.paytable);
		if(job.auto != null) {
			this.loadAuto(job.auto);
		}
		if(job.autocnt != null) {
			if(job.autocnt.bg.path != "") {
				this.autoBg = { path : job.autocnt.bg.path, x : job.autocnt.bg.x | 0, y : job.autocnt.bg.y | 0};
			}
			this.btnAutoStop = this.loadImageButton(job.autocnt.btnstop);
			this.autoCnt = this.loadNumberText(job.autocnt.txt);
		}
	}
	,loadStartStrip: function(rss) {
		var _this = this.strips;
		if(__map_reserved.start != null) {
			_this.setReserved("start",rss);
		} else {
			_this.h["start"] = rss;
		}
	}
	,setStrip: function(rsd) {
		var job = JSON.parse(rsd);
		var types = job.types;
		if(types != null) {
			var _g = 0;
			while(_g < types.length) {
				var tp = types[_g];
				++_g;
				if(tp == "base") {
					var _this = this.strips;
					var value = job.base;
					if(__map_reserved.base != null) {
						_this.setReserved("base",value);
					} else {
						_this.h["base"] = value;
					}
				}
				if(tp == "freespin") {
					var _this1 = this.strips;
					var value1 = job.freespin;
					if(__map_reserved.freespin != null) {
						_this1.setReserved("freespin",value1);
					} else {
						_this1.h["freespin"] = value1;
					}
				}
				if(tp == "respin") {
					var _this2 = this.strips;
					var value2 = job.respin;
					if(__map_reserved.respin != null) {
						_this2.setReserved("respin",value2);
					} else {
						_this2.h["respin"] = value2;
					}
				}
			}
		}
		return job;
	}
	,loadSC: function(values) {
		var _g = 0;
		while(_g < values.length) {
			var v = values[_g];
			++_g;
			this.sc.push(v);
		}
	}
	,loadPaytable: function(pt) {
		this.paytable.bg = { path : pt.bg.path, x : pt.bg.x, y : pt.bg.y};
		this.paytable.prev = { path : pt.prev.path, x : pt.prev.x, y : pt.prev.y};
		this.paytable.exit = { path : pt.exit.path, x : pt.exit.x, y : pt.exit.y};
		this.paytable.next = { path : pt.next.path, x : pt.next.x, y : pt.next.y};
		if(pt.offset == null) {
			this.paytable.offset = { x : 0, y : 0};
		} else {
			this.paytable.offset = { x : pt.offset.x, y : pt.offset.y};
		}
		var pages = pt.pages;
		var _g = 0;
		while(_g < pages.length) {
			var page = pages[_g];
			++_g;
			this.paytable.pages.push(page);
		}
		haxe_Log.trace(this.paytable,{ fileName : "SlotData.hx", lineNumber : 219, className : "com.redpeakgames.cloud9.game.SlotData", methodName : "loadPaytable"});
	}
	,loadAuto: function(at) {
		if(at.bg.path != "") {
			this.auto.bg = { path : at.bg.path, x : at.bg.x, y : at.bg.y};
		}
		this.auto.nums = at.nums;
		var _g1 = 0;
		var _g = at.btns.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.auto.btns.push(this.loadImageButton(at.btns[i]));
			if(at.numtxts != null) {
				this.auto.txtNums.push(this.loadNumberText(at.numtxts[i]));
			}
		}
	}
	,setProfile: function(profile) {
		var prfl = profile.high;
		this.profile = { width : prfl.width, height : prfl.height, oy : prfl.oy, initx : prfl.initx, inity : prfl.inity};
	}
	,loadImageButton: function(ib) {
		return { path : ib.path, x : ib.x, y : ib.y, sound : ib.sound, remove : ib.remove};
	}
	,loadNumberText: function(nt) {
		return { bg : { path : nt.bg.path == ""?null:"img/" + Std.string(nt.bg.path), x : nt.bg.x, y : nt.bg.y}, tf : { name : nt.tf.name, x : nt.tf.x, y : nt.tf.y, len : nt.tf.len, color : nt.tf.color, size : nt.tf.size, type : nt.tf.type, comma : nt.tf.comma}};
	}
	,getOuter: function() {
		var ret = new openfl_display_Sprite();
		var bg = new openfl_display_Bitmap(openfl_Assets.getBitmapData(this.outer.path,false));
		bg.set_name("outer.bg");
		bg.set_x(this.outer.x);
		bg.set_y(this.outer.y);
		ret.addChild(bg);
		return ret;
	}
	,setInnerBottom: function(layer) {
		var _g = 0;
		var _g1 = this.inner;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			var bm = new openfl_display_Bitmap(openfl_Assets.getBitmapData(item.path,false));
			bm.set_name(item.path);
			bm.set_x(item.x);
			bm.set_y(item.y);
			layer.addChild(bm);
		}
	}
	,setInnerTop: function(layer) {
		var _g = 0;
		var _g1 = this.innert;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			var bm = new openfl_display_Bitmap(openfl_Assets.getBitmapData(item.path,false));
			bm.set_name(item.path);
			bm.set_x(item.x);
			bm.set_y(item.y);
			layer.addChild(bm);
		}
	}
	,makeNumberText: function(nt,tfa) {
		var bf = new openfl_text_TextFormat(nt.tf.name == ""?null:openfl_Assets.getFont("font/" + nt.tf.name).name,nt.tf.size,nt.tf.color);
		bf.align = tfa;
		var ret = new com_redpeakgames_cloud9_ui_NumberText(bf,nt.bg.path == null?null:openfl_Assets.getBitmapData(nt.bg.path,false),nt.tf.len,nt.tf.x,nt.tf.y);
		ret.set_x(nt.bg.x);
		ret.set_y(nt.bg.y);
		return ret;
	}
	,makeNumberBitmap: function(nt,tfa) {
		var ret = new com_redpeakgames_cloud9_ui_NumberBitmap("font/" + nt.tf.name,nt.tf.len,nt.tf.color,nt.tf.size,15,1,0);
		ret.textAlign = tfa;
		ret.set_x(nt.tf.x);
		ret.set_y(nt.tf.y);
		ret.commaWidth = nt.tf.comma;
		return ret;
	}
	,makeBalance: function(align) {
		if(this.balance.tf.type == "bitmap") {
			return this.makeNumberBitmap(this.balance,align);
		}
		return this.makeNumberText(this.balance,align);
	}
	,makePrize: function(align) {
		if(this.prize.tf.type == "bitmap") {
			return this.makeNumberBitmap(this.prize,align);
		}
		return this.makeNumberText(this.prize,align);
	}
	,makeStake: function(align) {
		if(this.stake.tf.type == "bitmap") {
			return this.makeNumberBitmap(this.stake,align);
		}
		return this.makeNumberText(this.stake,align);
	}
	,makeBetting: function(align) {
		if(this.betting.tf.type == "bitmap") {
			return this.makeNumberBitmap(this.betting,align);
		}
		return this.makeNumberText(this.betting,align);
	}
	,makeAutoCounterBG: function() {
		if(this.autoBg != null) {
			var atbg = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/" + this.autoBg.path));
			atbg.set_x(this.autoBg.x);
			atbg.set_y(this.autoBg.y);
			return atbg;
		}
		return null;
	}
	,makeAutoCounter: function(align) {
		if(this.autoCnt == null) {
			return null;
		}
		if(this.autoCnt.tf.type == "bitmap") {
			return this.makeNumberBitmap(this.autoCnt,align);
		}
		return this.makeNumberText(this.autoCnt,align);
	}
	,makeImageButton: function(ib) {
		if(ib.path != null && ib.path.length != 0) {
			var pb = new com_redpeakgames_cloud9_ui_ImageButton("img/" + ib.path,null,null,ib.sound,ib.remove);
			pb.set_x(ib.x);
			pb.set_y(ib.y);
			return pb;
		}
		return null;
	}
	,makeImageCheck: function(ib) {
		if(ib.path != null && ib.path.length != 0) {
			var pb = new com_redpeakgames_cloud9_ui_ImageCheck("img/" + ib.path);
			pb.set_x(ib.x);
			pb.set_y(ib.y);
			return pb;
		}
		return null;
	}
	,makePlusBet: function() {
		return this.makeImageButton(this.plusBet);
	}
	,makeMinusBet: function() {
		return this.makeImageButton(this.minusBet);
	}
	,makeSpin: function() {
		return this.makeImageButton(this.btnSpin);
	}
	,makeAuto: function() {
		return this.makeImageCheck(this.btnAuto);
	}
	,makeAutoStop: function() {
		if(this.btnAutoStop != null) {
			return this.makeImageButton(this.btnAutoStop);
		}
		return null;
	}
	,makeOption: function() {
		return this.makeImageButton(this.btnOption);
	}
	,makePaytable: function() {
		return this.makeImageButton(this.btnPaytable);
	}
	,setMatrix: function(matrix) {
		var ret = [];
		var _g = 0;
		while(_g < matrix.length) {
			var mtrx = matrix[_g];
			++_g;
			ret.push({ row : mtrx.row, x : mtrx.x, y : mtrx.y});
		}
		return ret;
	}
	,showPaytable: function() {
		if(this.paytable == null) {
			return null;
		}
		return new com_redpeakgames_cloud9_ui_PayTable(this.paytable);
	}
	,showAutoPopup: function(tfa) {
		if(this.auto == null) {
			return null;
		}
		return new com_redpeakgames_cloud9_ui_AutoPopup(this.auto,tfa);
	}
	,isAutoPopup: function() {
		if(this.auto.nums.length == 0) {
			return false;
		}
		return true;
	}
	,clear: function() {
		var keys = [];
		var tmp = this.symbols.keys();
		while(tmp.hasNext()) keys.push(tmp.next());
		var _g = 0;
		while(_g < keys.length) {
			var key = keys[_g];
			++_g;
			var _this = this.symbols;
			var obj = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
			this.symbols.remove(key);
			obj.bmp = null;
		}
		this.symbols = null;
		this.strips = null;
		this.spin = null;
		this.paylines = null;
		this.inner = null;
		this.innert = null;
		this.paytable = null;
		this.sc = null;
		this.auto = null;
	}
	,__class__: com_redpeakgames_cloud9_game_SlotData
};
var com_redpeakgames_cloud9_game_SpinInfo = function() {
};
$hxClasses["com.redpeakgames.cloud9.game.SpinInfo"] = com_redpeakgames_cloud9_game_SpinInfo;
com_redpeakgames_cloud9_game_SpinInfo.__name__ = ["com","redpeakgames","cloud9","game","SpinInfo"];
com_redpeakgames_cloud9_game_SpinInfo.prototype = {
	runtime: null
	,delay: null
	,symbolCount: null
	,__class__: com_redpeakgames_cloud9_game_SpinInfo
};
var com_redpeakgames_cloud9_game_SpinState = $hxClasses["com.redpeakgames.cloud9.game.SpinState"] = { __ename__ : ["com","redpeakgames","cloud9","game","SpinState"], __constructs__ : ["Ready","Started","Response","Forced","Stopped"] };
com_redpeakgames_cloud9_game_SpinState.Ready = ["Ready",0];
com_redpeakgames_cloud9_game_SpinState.Ready.toString = $estr;
com_redpeakgames_cloud9_game_SpinState.Ready.__enum__ = com_redpeakgames_cloud9_game_SpinState;
com_redpeakgames_cloud9_game_SpinState.Started = ["Started",1];
com_redpeakgames_cloud9_game_SpinState.Started.toString = $estr;
com_redpeakgames_cloud9_game_SpinState.Started.__enum__ = com_redpeakgames_cloud9_game_SpinState;
com_redpeakgames_cloud9_game_SpinState.Response = ["Response",2];
com_redpeakgames_cloud9_game_SpinState.Response.toString = $estr;
com_redpeakgames_cloud9_game_SpinState.Response.__enum__ = com_redpeakgames_cloud9_game_SpinState;
com_redpeakgames_cloud9_game_SpinState.Forced = ["Forced",3];
com_redpeakgames_cloud9_game_SpinState.Forced.toString = $estr;
com_redpeakgames_cloud9_game_SpinState.Forced.__enum__ = com_redpeakgames_cloud9_game_SpinState;
com_redpeakgames_cloud9_game_SpinState.Stopped = ["Stopped",4];
com_redpeakgames_cloud9_game_SpinState.Stopped.toString = $estr;
com_redpeakgames_cloud9_game_SpinState.Stopped.__enum__ = com_redpeakgames_cloud9_game_SpinState;
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	openfl_display_DisplayObject.call(this);
	this.set_bitmapData(bitmapData);
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) {
		this.pixelSnapping = 1;
	}
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	bitmapData: null
	,pixelSnapping: null
	,smoothing: null
	,__image: null
	,__imageVersion: null
	,__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__temp;
			bounds.setTo(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.bitmapData == null) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0?-_this.tx:1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0?-_this1.ty:1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.bitmapData == null) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0?-_this.tx:1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0?-_this1.ty:1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(!(!this.__renderable || this.__worldAlpha <= 0)) {
			var cairo = renderSession.cairo;
			if(this.bitmapData != null && this.bitmapData.__isValid) {
				renderSession.maskManager.pushObject(this);
				var transform = this.__renderTransform;
				if(renderSession.roundPixels) {
					var matrix = transform.__toMatrix3();
					matrix.tx = Math.round(matrix.tx);
					matrix.ty = Math.round(matrix.ty);
					cairo.set_matrix(matrix);
				} else {
					cairo.set_matrix(transform.__toMatrix3());
				}
				var surface = this.bitmapData.getSurface();
				if(surface != null) {
					var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
					lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,renderSession.allowSmoothing && this.smoothing?1:3);
					cairo.set_source(pattern);
					if(this.__worldAlpha == 1) {
						cairo.paint();
					} else {
						cairo.paintWithAlpha(this.__worldAlpha);
					}
				}
				renderSession.maskManager.popObject(this);
			}
		}
	}
	,__renderCairoMask: function(renderSession) {
		renderSession.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderSession) {
		if(!(!this.__renderable || this.__worldAlpha <= 0)) {
			var context = renderSession.context;
			if(this.bitmapData != null && this.bitmapData.__isValid) {
				renderSession.maskManager.pushObject(this,false);
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.bitmapData.image);
				context.globalAlpha = this.__worldAlpha;
				var transform = this.__renderTransform;
				var scrollRect = this.__scrollRect;
				if(renderSession.roundPixels) {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
				} else {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				}
				if(!renderSession.allowSmoothing || !this.smoothing) {
					context.mozImageSmoothingEnabled = false;
					context.msImageSmoothingEnabled = false;
					context.imageSmoothingEnabled = false;
				}
				if(scrollRect == null) {
					context.drawImage(this.bitmapData.image.get_src(),0,0);
				} else {
					context.drawImage(this.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				}
				if(!renderSession.allowSmoothing || !this.smoothing) {
					context.mozImageSmoothingEnabled = true;
					context.msImageSmoothingEnabled = true;
					context.imageSmoothingEnabled = true;
				}
				renderSession.maskManager.popObject(this,false);
			}
		}
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
			renderSession.maskManager.pushObject(this);
			if(this.bitmapData.image.buffer.__srcImage != null) {
				openfl__$internal_renderer_dom_DOMBitmap.renderImage(this,renderSession);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this,renderSession);
			}
			renderSession.maskManager.popObject(this);
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(!(!this.__renderable || this.__worldAlpha <= 0)) {
			if(this.bitmapData != null && this.bitmapData.__isValid) {
				var renderer = renderSession.renderer;
				var gl = renderSession.gl;
				renderSession.blendModeManager.setBlendMode(this.get_blendMode());
				renderSession.maskManager.pushObject(this);
				var shader = renderSession.filterManager.pushObject(this);
				shader.get_data().uImage0.input = this.bitmapData;
				shader.get_data().uImage0.smoothing = renderSession.allowSmoothing && (this.smoothing || renderSession.upscaled);
				shader.get_data().uMatrix.value = renderer.getMatrix(this.__renderTransform);
				renderSession.shaderManager.setShader(shader);
				gl.bindBuffer(gl.ARRAY_BUFFER,this.bitmapData.getBuffer(gl,this.__worldAlpha));
				gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,24,0);
				gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,24,12);
				gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,24,20);
				gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
				renderSession.filterManager.popObject(this);
				renderSession.maskManager.popObject(this);
			}
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.bitmapData == null) {
			return;
		}
		maskGraphics.__commands.overrideMatrix(this.__worldTransform);
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) {
			maskGraphics.__bounds = new openfl_geom_Rectangle();
		}
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObject.prototype.__updateMask.call(this,maskGraphics);
	}
	,set_bitmapData: function(value) {
		this.bitmapData = value;
		this.smoothing = false;
		var tmp = this.__filters != null && this.__filters.length > 0;
		return this.bitmapData;
	}
	,get_height: function() {
		if(this.bitmapData != null) {
			return this.bitmapData.height * Math.abs(this.get_scaleY());
		}
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) {
				this.set_scaleY(value / this.bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) {
			return this.bitmapData.width * Math.abs(this.get_scaleX());
		}
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) {
				this.set_scaleX(value / this.bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_bitmapData:"set_bitmapData"})
});
var com_redpeakgames_cloud9_game_Symbol = function(sn,idx,normal,highlight,big) {
	if(big == null) {
		big = false;
	}
	openfl_display_Bitmap.call(this);
	this.set(sn,idx,normal,highlight,big);
};
$hxClasses["com.redpeakgames.cloud9.game.Symbol"] = com_redpeakgames_cloud9_game_Symbol;
com_redpeakgames_cloud9_game_Symbol.__name__ = ["com","redpeakgames","cloud9","game","Symbol"];
com_redpeakgames_cloud9_game_Symbol.__super__ = openfl_display_Bitmap;
com_redpeakgames_cloud9_game_Symbol.prototype = $extend(openfl_display_Bitmap.prototype,{
	symbolName: null
	,index: null
	,value: null
	,bmp: null
	,bmp_h: null
	,big: null
	,set: function(sn,idx,normal,highlight,big) {
		if(big == null) {
			big = false;
		}
		this.set_bitmapData(normal);
		this.bmp = normal;
		this.bmp_h = highlight;
		this.big = big;
		this.symbolName = sn;
		this.index = idx;
		this.value = 1;
	}
	,highlight: function() {
		if(this.bmp_h != null) {
			this.set_bitmapData(this.bmp_h);
		}
		com_redpeakgames_cloud9_utils_Effects.popup(this,0.5,1.2,3);
	}
	,normal: function() {
		this.set_bitmapData(this.bmp);
	}
	,isBig: function() {
		return this.big;
	}
	,clear: function() {
		this.set_bitmapData(null);
		this.symbolName = null;
		this.bmp = null;
		this.bmp_h = null;
	}
	,__class__: com_redpeakgames_cloud9_game_Symbol
});
var com_redpeakgames_cloud9_game_UserData = function() {
	this.scount = 0;
	this.prize = 0;
	this.buyCount = 0;
	this.bonus = 0;
	this.played = 1005;
	this.spin = 7200;
	this.wheel = 82800;
	this.gift = 0;
	this.serial = 1;
	this.newday = 1;
	this.vlev = 1;
	this.dia = 0;
	this.coin = new haxe__$Int64__$_$_$Int64(0,0);
	this.mexp = new haxe__$Int64__$_$_$Int64(0,0);
	this.exp = new haxe__$Int64__$_$_$Int64(0,0);
	this.lev = 0;
	this.uid = "";
	this.name = "";
	this.sig = "fake.signature";
};
$hxClasses["com.redpeakgames.cloud9.game.UserData"] = com_redpeakgames_cloud9_game_UserData;
com_redpeakgames_cloud9_game_UserData.__name__ = ["com","redpeakgames","cloud9","game","UserData"];
com_redpeakgames_cloud9_game_UserData.prototype = {
	sig: null
	,name: null
	,uid: null
	,lev: null
	,exp: null
	,mexp: null
	,coin: null
	,dia: null
	,vlev: null
	,url: null
	,picture: null
	,newday: null
	,serial: null
	,gift: null
	,wheel: null
	,spin: null
	,played: null
	,state: null
	,bonus: null
	,buyCount: null
	,prize: null
	,scount: null
	,__class__: com_redpeakgames_cloud9_game_UserData
};
var com_redpeakgames_cloud9_type_Banner = function() { };
$hxClasses["com.redpeakgames.cloud9.type.Banner"] = com_redpeakgames_cloud9_type_Banner;
com_redpeakgames_cloud9_type_Banner.__name__ = ["com","redpeakgames","cloud9","type","Banner"];
var com_redpeakgames_cloud9_type_NumberFieldFloat = function() {
	this.minStep = 1.0;
	this.digits = 0;
	this.step = 0;
	this.cur = 0;
	this.goal = 0;
	openfl_display_Sprite.call(this);
};
$hxClasses["com.redpeakgames.cloud9.type.NumberFieldFloat"] = com_redpeakgames_cloud9_type_NumberFieldFloat;
com_redpeakgames_cloud9_type_NumberFieldFloat.__name__ = ["com","redpeakgames","cloud9","type","NumberFieldFloat"];
com_redpeakgames_cloud9_type_NumberFieldFloat.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_type_NumberFieldFloat.prototype = $extend(openfl_display_Sprite.prototype,{
	goal: null
	,cur: null
	,step: null
	,digits: null
	,onEnd: null
	,minStep: null
	,lastTick: null
	,tickPerFrame: null
	,draw: function(number,useCounter,time) {
		if(time == null) {
			time = 2000;
		}
		if(useCounter == null) {
			useCounter = false;
		}
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override this method"));
	}
	,clear: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("You have to override this method"));
	}
	,add: function(added) {
		var newGoal = this.goal + added;
		if(newGoal >= 0) {
			this.draw(newGoal);
		}
	}
	,get_value: function() {
		return this.goal;
	}
	,set_value: function(value) {
		this.draw(value);
		return value;
	}
	,get_cv: function() {
		return this.cur;
	}
	,set_cv: function(v) {
		this.cur = v;
		return v;
	}
	,isEnd: function() {
		return this.goal == this.cur;
	}
	,__class__: com_redpeakgames_cloud9_type_NumberFieldFloat
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_cv:"set_cv",get_cv:"get_cv",set_value:"set_value",get_value:"get_value"})
});
var com_redpeakgames_cloud9_type_NumberBitmapFloat = function(path,len,width,height,col,row,offset,doffset) {
	if(doffset == null) {
		doffset = 6;
	}
	if(offset == null) {
		offset = 3;
	}
	if(row == null) {
		row = 1;
	}
	if(col == null) {
		col = 10;
	}
	if(height == null) {
		height = 75;
	}
	if(width == null) {
		width = 50;
	}
	com_redpeakgames_cloud9_type_NumberFieldFloat.call(this);
	this.tile = { width : width, height : height};
	this.offset = offset;
	this.set_len(len);
	this.commaWidth = 9;
	this.set_commaY(3);
	this.pointY = 2;
	this.useDollar = false;
	this.dollarWidth = 14;
	this.set_dollarY(-3);
	this.textAlign = 0;
	this.cur = 0;
	this.tickPerFrame = 1000 / openfl_Lib.current.stage.get_frameRate();
	var ts = new openfl_display_Tileset(openfl_Assets.getBitmapData(path));
	this.tm = new openfl_display_Tilemap(this.len + width,height * 2,ts);
	this.addChild(this.tm);
	this.tm.set_y(-(height / 2));
	var _g1 = 0;
	while(_g1 < row) {
		var i = _g1++;
		var _g3 = 0;
		while(_g3 < col) {
			var j = _g3++;
			if(col < 12) {
				ts.addRect(new openfl_geom_Rectangle(j * width,i * height,width,height));
			} else {
				ts.addRect(new openfl_geom_Rectangle(j * width,i * height,width,height + doffset));
			}
		}
	}
};
$hxClasses["com.redpeakgames.cloud9.type.NumberBitmapFloat"] = com_redpeakgames_cloud9_type_NumberBitmapFloat;
com_redpeakgames_cloud9_type_NumberBitmapFloat.__name__ = ["com","redpeakgames","cloud9","type","NumberBitmapFloat"];
com_redpeakgames_cloud9_type_NumberBitmapFloat.__super__ = com_redpeakgames_cloud9_type_NumberFieldFloat;
com_redpeakgames_cloud9_type_NumberBitmapFloat.prototype = $extend(com_redpeakgames_cloud9_type_NumberFieldFloat.prototype,{
	tile: null
	,offset: null
	,ts: null
	,tm: null
	,len: null
	,pointY: null
	,commaWidth: null
	,commaY: null
	,dollarWidth: null
	,dollarY: null
	,useDollar: null
	,textAlign: null
	,clear: function() {
		this.cur = 0;
		this.tm.removeTiles();
	}
	,draw: function(number,useCounter,time) {
		if(time == null) {
			time = 2000;
		}
		if(useCounter == null) {
			useCounter = false;
		}
		this.cur = this.get_value();
		this.goal = number;
		if(useCounter && this.goal <= this.cur) {
			useCounter = false;
		}
		if(useCounter) {
			this.step = (this.goal - this.cur) / (time / (1000 / openfl_Lib.current.stage.get_frameRate()));
			this.step = Math.max(this.step,this.minStep);
			this.removeEventListener("enterFrame",$bind(this,this.onUpdate));
			this.lastTick = openfl_Lib.getTimer();
			this.addEventListener("enterFrame",$bind(this,this.onUpdate));
		} else {
			this.paint(number,this.digits);
			if(this.onEnd != null) {
				this.onEnd();
			}
		}
	}
	,getNumLength: function(number) {
		var len = 1;
		if(number < 0) {
			number *= -1;
		}
		while(true) {
			number = (number | 0) / 10;
			if(number == 0) {
				return len;
			} else {
				++len;
			}
		}
	}
	,onUpdate: function(e) {
		var curTick = openfl_Lib.getTimer();
		this.cur += this.step * ((curTick - this.lastTick) / this.tickPerFrame);
		if(this.cur >= this.goal) {
			this.cur = this.goal;
			this.removeEventListener("enterFrame",$bind(this,this.onUpdate));
			if(this.onEnd != null) {
				this.onEnd();
			}
		}
		this.paint(this.cur,this.digits);
		this.lastTick = curTick;
	}
	,paint: function(number,digits) {
		var numDigit = this.getNumLength(number) + digits - 1;
		var dw = this.useDollar?this.dollarWidth + (this.dollarWidth / 2 | 0):0;
		var cx = (numDigit - 1) * this.tile.width + (numDigit - 1) * this.offset + ((numDigit - 1) / 3 | 0) * this.commaWidth - this.tile.width + dw;
		cx = this.calcStartPoint(cx);
		var cur = number;
		this.tm.removeTiles();
		var digitNumer = digits - 1;
		var _g1 = 0;
		while(_g1 < numDigit) {
			var i = _g1++;
			var digit = cur % 10;
			if(digits > 0 && i == digits) {
				this.tm.addTile(new openfl_display_Tile(11,cx + (this.tile.width - this.commaWidth),this.pointY));
				cx -= this.commaWidth;
			}
			if(i != 0 && i > digits && (i - digits) % 3 == 0) {
				this.tm.addTile(new openfl_display_Tile(10,cx + (this.tile.width - this.commaWidth),this.commaY));
				cx -= this.commaWidth;
			}
			if(digits > 0 && i < digits) {
				var count = 1;
				var _g3 = 0;
				var _g2 = digitNumer;
				while(_g3 < _g2) {
					++_g3;
					count *= 10;
				}
				digit *= count;
				digit -= digit | 0;
				digit *= 10;
				--digitNumer;
				this.tm.addTile(new openfl_display_Tile(digit | 0,cx,0));
				cx -= this.tile.width + this.offset;
			} else {
				cur = cur / 10;
				this.tm.addTile(new openfl_display_Tile(digit | 0,cx,0));
				cx -= this.tile.width + this.offset;
			}
		}
		if(this.useDollar) {
			cx -= dw - (this.tile.width + this.offset);
			this.tm.addTile(new openfl_display_Tile(12,cx,this.dollarY));
		}
	}
	,calcStartPoint: function(cx) {
		if(this.textAlign == 0) {
			cx = (this.len / 2 | 0) + (cx / 2 | 0);
		} else if(this.textAlign == 4) {
			cx = this.len;
		}
		return cx;
	}
	,forceEnd: function() {
		this.cur = this.goal;
	}
	,set_dollarY: function(value) {
		if(this.tm != null) {
			this.tm.set_height(Math.max(this.tm.get_height() + value,this.tm.get_height()) | 0);
		}
		return this.dollarY = value;
	}
	,set_commaY: function(value) {
		if(this.tm != null) {
			this.tm.set_height(Math.max(this.tm.get_height() + value,this.tm.get_height()) | 0);
		}
		return this.commaY = value;
	}
	,set_len: function(value) {
		if(this.tm != null) {
			this.tm.set_width(this.len);
		}
		return this.len = value;
	}
	,__class__: com_redpeakgames_cloud9_type_NumberBitmapFloat
	,__properties__: $extend(com_redpeakgames_cloud9_type_NumberFieldFloat.prototype.__properties__,{set_dollarY:"set_dollarY",set_commaY:"set_commaY",set_len:"set_len"})
});
var com_redpeakgames_cloud9_ui_ImageButton = function(path,up,mover,spath,remove,ext) {
	if(ext == null) {
		ext = "png";
	}
	if(remove == null) {
		remove = 0;
	}
	openfl_display_Sprite.call(this);
	this.useFilter = true;
	this.buttonMode = true;
	this.active = true;
	this.remove = remove;
	this.tmp = "";
	this.isOver = false;
	var ub = null;
	var db = null;
	var rb = null;
	var gb = null;
	var getBitmapDataEx = function(id) {
		if(openfl_Assets.exists(id,"IMAGE")) {
			return openfl_Assets.getBitmapData(id);
		}
		return null;
	};
	if(up != null) {
		ub = up;
	} else {
		ub = getBitmapDataEx(path + "_u." + ext);
	}
	db = getBitmapDataEx(path + "_d." + ext);
	if(mover != null) {
		rb = mover;
	} else {
		rb = getBitmapDataEx(path + "_r." + ext);
	}
	gb = getBitmapDataEx(path + "_g." + ext);
	if(ub != null) {
		this.up = new openfl_display_Bitmap(ub);
	} else {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Up button cannot be 'null'"));
	}
	this.up.smoothing = true;
	if(db != null) {
		this.down = new openfl_display_Bitmap(db);
	}
	if(rb != null) {
		this.over = new openfl_display_Bitmap(rb);
		this.over.smoothing = true;
	}
	if(gb != null) {
		this.disable = new openfl_display_Bitmap(gb);
	}
	if(spath != null && spath.length != 0) {
		this.clickSound = com_redpeakgames_cloud9_utils_CSound.get(spath + "_c");
		this.overSound = com_redpeakgames_cloud9_utils_CSound.get(spath + "_r");
	}
	this.addChildAt(this.up,0);
	this.addEventListener("mouseOver",$bind(this,this.onMouseOver),false,0,true);
	this.addEventListener("mouseOut",$bind(this,this.onMouseOut),false,0,true);
	this.addEventListener("click",$bind(this,this.onMouseClick),false,0,true);
};
$hxClasses["com.redpeakgames.cloud9.ui.ImageButton"] = com_redpeakgames_cloud9_ui_ImageButton;
com_redpeakgames_cloud9_ui_ImageButton.__name__ = ["com","redpeakgames","cloud9","ui","ImageButton"];
com_redpeakgames_cloud9_ui_ImageButton.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_ui_ImageButton.prototype = $extend(openfl_display_Sprite.prototype,{
	up: null
	,over: null
	,down: null
	,disable: null
	,active: null
	,isOver: null
	,clickSound: null
	,overSound: null
	,useFilter: null
	,directMethod: null
	,clickMethod: null
	,overMethod: null
	,outMethod: null
	,remove: null
	,clickMethodTimer: null
	,tmp: null
	,work: null
	,onClick: null
	,onDirect: null
	,onOver: null
	,onOut: null
	,set: function(x,y,alpha,work) {
		if(work == null) {
			work = true;
		}
		if(alpha == null) {
			alpha = 1;
		}
		this.set_x(x);
		this.set_y(y);
		this.set_alpha(alpha);
		this.set_work(work);
	}
	,onMouseClick: function(e) {
		var _gthis = this;
		if(this.active) {
			if(this.down == null) {
				var cur = this.getChildAt(0);
				cur.set_x(cur.get_width() * 0.1 / 2);
				cur.set_y(cur.get_height() * 0.1 / 2);
				cur.set_scaleX(0.9);
				cur.set_scaleY(0.9);
				if(this.clickMethodTimer == null) {
					this.clickMethodTimer = haxe_Timer.delay(function() {
						_gthis.reset(cur);
						if(_gthis.clickMethod != null && _gthis.active) {
							_gthis.clickMethod(e);
						}
						_gthis.clickMethodTimer = null;
					},100);
				}
			} else {
				this.removeChildAt(0);
				this.addChildAt(this.down,0);
				if(this.clickMethodTimer == null) {
					this.clickMethodTimer = haxe_Timer.delay(function() {
						_gthis.removeChildAt(0);
						if(_gthis.over != null && _gthis.isOver) {
							_gthis.addChildAt(_gthis.over,0);
						} else {
							_gthis.addChildAt(_gthis.up,0);
						}
						if(_gthis.clickMethod != null && _gthis.active) {
							_gthis.clickMethod(e);
						}
						_gthis.clickMethodTimer = null;
					},100);
				}
			}
			if(this.clickSound != null && com_redpeakgames_cloud9_Global.mute == false) {
				this.clickSound.play(0);
			}
		}
	}
	,set_onClick: function(method) {
		this.clickMethod = method;
		return this.clickMethod;
	}
	,changeImgDown: function() {
		var _gthis = this;
		if(this.down == null) {
			var cur = this.getChildAt(0);
			cur.set_x(cur.get_width() * 0.1 / 2);
			cur.set_y(cur.get_height() * 0.1 / 2);
			cur.set_scaleX(0.9);
			cur.set_scaleY(0.9);
			if(this.clickMethodTimer == null) {
				this.clickMethodTimer = haxe_Timer.delay(function() {
					_gthis.reset(cur);
					_gthis.clickMethodTimer = null;
				},100);
			}
		} else {
			this.removeChildAt(0);
			this.addChildAt(this.down,0);
			if(this.clickMethodTimer == null) {
				this.clickMethodTimer = haxe_Timer.delay(function() {
					_gthis.removeChildAt(0);
					if(_gthis.over != null && _gthis.isOver) {
						_gthis.addChildAt(_gthis.over,0);
					} else {
						_gthis.addChildAt(_gthis.up,0);
					}
					_gthis.clickMethodTimer = null;
				},100);
			}
		}
	}
	,set_onDirect: function(method) {
		this.addEventListener("click",method);
		return method;
	}
	,set_onOver: function(method) {
		this.overMethod = method;
		return this.overMethod;
	}
	,set_onOut: function(method) {
		this.outMethod = method;
		return this.outMethod;
	}
	,reset: function(btn) {
		btn.set_x(0);
		btn.set_y(0);
		btn.set_scaleX(1);
		btn.set_scaleY(1);
	}
	,onMouseOut: function(e) {
		this.isOver = false;
		if(this.active) {
			if(this.over != null) {
				this.removeChildAt(0);
				this.addChildAt(this.up,0);
			}
			if(this.outMethod != null) {
				this.outMethod(e);
			}
		}
	}
	,onMouseOver: function(e) {
		this.isOver = true;
		if(this.over != null && this.active) {
			this.removeChildAt(0);
			this.addChildAt(this.over,0);
			if(this.overMethod != null) {
				this.overMethod(e);
			}
		}
		if(this.overSound != null && com_redpeakgames_cloud9_Global.mute == false) {
			this.overSound.play(0);
		}
	}
	,get_enable: function() {
		return this.active;
	}
	,set_enable: function(value) {
		this.active = value;
		this.mouseEnabled = value;
		this.changeImgEnable(this.active);
		return this.active;
	}
	,setEnableImgOnly: function(value) {
		this.mouseEnabled = value;
		this.changeImgEnable(value);
	}
	,changeImgEnable: function(value) {
		if(value) {
			if(this.disable == null) {
				if(this.remove != 0) {
					this.addChildAt(this.up,0);
				} else {
					this.getChildAt(0).set_filters(null);
				}
			} else {
				if(this.remove == 0) {
					this.removeChildAt(0);
				}
				this.addChildAt(this.up,0);
			}
		} else if(this.disable == null) {
			this.removeChildAt(0);
			if(this.remove == 0) {
				this.addChildAt(this.up,0);
				if(this.useFilter) {
					this.up.set_filters([new openfl_filters_ColorMatrixFilter([.4,.4,.4,0,0,.4,.4,.4,0,0,.4,.4,.4,0,0,0,0,0,1,0])]);
				}
			}
		} else {
			this.removeChildAt(0);
			if(this.remove == 0) {
				this.addChildAt(this.disable,0);
			}
		}
	}
	,setNoFilter: function() {
		this.useFilter = false;
	}
	,set_work: function(v) {
		this.active = v;
		return this.active;
	}
	,show: function(v) {
		if(v == false) {
			this.getChildAt(0).set_alpha(0);
		} else {
			this.getChildAt(0).set_alpha(1);
		}
	}
	,__class__: com_redpeakgames_cloud9_ui_ImageButton
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_onOut:"set_onOut",set_onOver:"set_onOver",set_onDirect:"set_onDirect",set_onClick:"set_onClick",set_work:"set_work",set_enable:"set_enable",get_enable:"get_enable"})
});
var com_redpeakgames_cloud9_ui_AnimatedButton = function(path,spath,ext,ani,gap) {
	if(gap == null) {
		gap = 10;
	}
	if(ext == null) {
		ext = "png";
	}
	com_redpeakgames_cloud9_ui_ImageButton.call(this,path,null,null,spath,0,ext);
	this.ani_e = ani;
	this.ani_e.showBehavior("stop");
	this.gap = gap;
	this.addChild(this.ani_e);
	this.addEventListener("enterFrame",$bind(this,this.onLoop));
	this.lastTick = openfl_Lib.getTimer();
	this.play = this.lastTick / (gap * 1000) | 0;
};
$hxClasses["com.redpeakgames.cloud9.ui.AnimatedButton"] = com_redpeakgames_cloud9_ui_AnimatedButton;
com_redpeakgames_cloud9_ui_AnimatedButton.__name__ = ["com","redpeakgames","cloud9","ui","AnimatedButton"];
com_redpeakgames_cloud9_ui_AnimatedButton.__super__ = com_redpeakgames_cloud9_ui_ImageButton;
com_redpeakgames_cloud9_ui_AnimatedButton.prototype = $extend(com_redpeakgames_cloud9_ui_ImageButton.prototype,{
	ani_e: null
	,lastTick: null
	,gap: null
	,play: null
	,onMouseOver: function(e) {
		this.ani_e.showBehavior("stop");
		com_redpeakgames_cloud9_ui_ImageButton.prototype.onMouseOver.call(this,e);
	}
	,onLoop: function(e) {
		var cur = openfl_Lib.getTimer();
		if(this.play == (cur / (this.gap * 1000) | 0)) {
			this.ani_e.showBehavior("_e");
			++this.play;
		}
		this.ani_e.update(cur - this.lastTick);
		this.lastTick = cur;
	}
	,__class__: com_redpeakgames_cloud9_ui_AnimatedButton
});
var com_redpeakgames_cloud9_ui_AutoPopup = function(ata,tfa) {
	openfl_display_Sprite.call(this);
	this.bg = ata.bg;
	this.nums = ata.nums;
	if(this.bg != null) {
		var bgbmp = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/" + ata.bg.path));
		bgbmp.set_x(ata.bg.x);
		bgbmp.set_y(ata.bg.y);
		this.addChild(bgbmp);
	}
	if(ata.txtNums.length > 0) {
		var _g1 = 0;
		var _g = ata.txtNums.length;
		while(_g1 < _g) {
			var i = _g1++;
			var bf = new openfl_text_TextFormat(openfl_Assets.getFont("font/" + Std.string(ata.txtNums[i].tf.name)).name,ata.txtNums[i].tf.size,ata.txtNums[i].tf.color);
			bf.align = tfa;
			var ret = new com_redpeakgames_cloud9_ui_NumberText(bf,ata.txtNums[i].bg.path == null?null:openfl_Assets.getBitmapData(ata.txtNums[i].bg.path,false),ata.txtNums[i].tf.len,ata.txtNums[i].tf.x,ata.txtNums[i].tf.y);
			ret.set_x(ata.txtNums[i].bg.x);
			ret.set_y(ata.txtNums[i].bg.y);
			var x = this.nums[i];
			ret.set_value(new haxe__$Int64__$_$_$Int64(x >> 31,x));
			this.addChild(ret);
		}
	}
	var _g11 = 0;
	var _g2 = ata.btns.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var btn = new com_redpeakgames_cloud9_ui_ImageButton("img/" + Std.string(ata.btns[i1].path),null,null,"" + Std.string(ata.btns[i1].sound),ata.btns[i1].remove | 0);
		btn.set_x(ata.btns[i1].x);
		btn.set_y(ata.btns[i1].y);
		btn.set_onClick($bind(this,this.onClick));
		btn.set_name("" + this.nums[i1]);
		this.addChild(btn);
	}
};
$hxClasses["com.redpeakgames.cloud9.ui.AutoPopup"] = com_redpeakgames_cloud9_ui_AutoPopup;
com_redpeakgames_cloud9_ui_AutoPopup.__name__ = ["com","redpeakgames","cloud9","ui","AutoPopup"];
com_redpeakgames_cloud9_ui_AutoPopup.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_ui_AutoPopup.prototype = $extend(openfl_display_Sprite.prototype,{
	bg: null
	,nums: null
	,btns: null
	,txtNums: null
	,onClick: function(e) {
		var btn = e.target;
		var data = "";
		var _g1 = 0;
		var _g = this.nums.length;
		while(_g1 < _g) {
			var idx = _g1++;
			var tmp = "" + this.nums[idx];
			if(btn.get_name().indexOf(tmp) != -1) {
				data = JSON.stringify({ num : this.nums[idx]});
				break;
			}
		}
		this.dispatchEvent(new openfl_events_DataEvent("ge.choose.autonum",true,false,data));
	}
	,__class__: com_redpeakgames_cloud9_ui_AutoPopup
});
var com_redpeakgames_cloud9_ui_Dialog = function() {
	openfl_display_Sprite.call(this);
	this.bg = new openfl_display_Shape();
	this.bg.get_graphics().beginFill(0,0.7);
	this.bg.get_graphics().drawRect(0,0,1922,1082);
	this.bg.get_graphics().endFill();
	this.addChild(this.bg);
	this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
};
$hxClasses["com.redpeakgames.cloud9.ui.Dialog"] = com_redpeakgames_cloud9_ui_Dialog;
com_redpeakgames_cloud9_ui_Dialog.__name__ = ["com","redpeakgames","cloud9","ui","Dialog"];
com_redpeakgames_cloud9_ui_Dialog.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_ui_Dialog.prototype = $extend(openfl_display_Sprite.prototype,{
	bg: null
	,onAddedToStage: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.onAddedToStage));
		this.stage.addEventListener("resize",$bind(this,this.onCustomResize));
	}
	,onCustomResize: function(e) {
		var w = openfl_Lib.current.stage.stageWidth;
		var h = openfl_Lib.current.stage.stageHeight;
		this.bg.set_x(w > 1922?(w - 1922) / 2:0);
		this.bg.set_y(h > 1082?(h - 1082) / 2:0);
	}
	,__class__: com_redpeakgames_cloud9_ui_Dialog
});
var com_redpeakgames_cloud9_ui_DrawCoins = function(startX,startY,targetX,targetY,time,coinNum,value,txCoin,startWithParticle) {
	if(coinNum == null) {
		coinNum = 10;
	}
	openfl_display_Sprite.call(this);
	this.animations = [];
	this.ssCoin = spritesheet_importers_BitmapImporter.create(openfl_Assets.getBitmapData("img/coin/coin_e.png",false),12,1,64,64);
	this.ssCoin.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11],true,30));
	this.value = value;
	this.txCoin = txCoin;
	this.coinNum = coinNum;
	this.ssCoinPtcl = spritesheet_importers_SparrowImporter.parse(openfl_Assets.getText("img/coin/coin_particle_e.xml"),"img/coin");
	this.ssCoinPtcl.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],false,15));
	this.ssCoinPtclSmall = spritesheet_importers_SparrowImporter.parse(openfl_Assets.getText("img/coin/coin_particle_small_e.xml"),"img/coin");
	this.ssCoinPtclSmall.addBehavior(new spritesheet_data_BehaviorData("_e",[0,1,2,3,4,5,6,7,8,9,10],false,15));
	if(startWithParticle != null) {
		this.start(startX,startY,targetX,targetY,time,startWithParticle);
	} else {
		this.start(startX,startY,targetX,targetY,time);
	}
	this.lastTick = openfl_Lib.getTimer();
	this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
};
$hxClasses["com.redpeakgames.cloud9.ui.DrawCoins"] = com_redpeakgames_cloud9_ui_DrawCoins;
com_redpeakgames_cloud9_ui_DrawCoins.__name__ = ["com","redpeakgames","cloud9","ui","DrawCoins"];
com_redpeakgames_cloud9_ui_DrawCoins.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_ui_DrawCoins.prototype = $extend(openfl_display_Sprite.prototype,{
	animations: null
	,ssCoin: null
	,ssCoinPtcl: null
	,ssCoinPtclSmall: null
	,lastTick: null
	,txCoin: null
	,value: null
	,coinNum: null
	,coinArriveMethod: null
	,onCoinArrive: null
	,onEnterFrame: function(e) {
		var cur = openfl_Lib.getTimer();
		var delta = cur - this.lastTick;
		var _g = 0;
		var _g1 = this.animations;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a.update(delta);
		}
		this.lastTick = cur;
	}
	,start: function(startX,startY,targetX,targetY,time,startWithParticle) {
		var _gthis = this;
		var minTime = 999999;
		var maxTime = 0;
		var _g1 = 0;
		var _g = this.coinNum;
		while(_g1 < _g) {
			++_g1;
			var t = (time + (Std.random(2) == 0?1:-1) * Std.random(time / 3 | 0)) / 1000;
			minTime = Math.min(minTime,t);
			maxTime = Math.max(maxTime,t);
			var path = new motion_MotionPath();
			path.bezier(targetX,targetY,targetX,startY);
			var coin = [new spritesheet_AnimatedSprite(this.ssCoin)];
			coin[0].set_x(startX);
			coin[0].set_y(startY);
			coin[0].set_scaleX(0.5);
			coin[0].set_scaleY(0.5);
			coin[0].showBehavior("_e");
			this.animations.push(coin[0]);
			this.addChild(coin[0]);
			motion_Actuate.motionPath(coin[0],t,{ x : path.get_x(), y : path.get_y()}).ease(motion_easing_Quad.get_easeIn()).onComplete((function(coin1) {
				return function() {
					_gthis.removeChild(coin1[0]);
				};
			})(coin));
		}
		if(startWithParticle != null && startWithParticle == true) {
			var coinPtclSmall = new spritesheet_AnimatedSprite(this.ssCoinPtclSmall);
			coinPtclSmall.set_x(startX - 151);
			coinPtclSmall.set_y(startY - 127);
			coinPtclSmall.showBehavior("_e");
			this.animations.push(coinPtclSmall);
			this.addChild(coinPtclSmall);
			motion_Actuate.timer(0.74).onComplete(function() {
				HxOverrides.remove(_gthis.animations,coinPtclSmall);
				_gthis.removeChild(coinPtclSmall);
			});
		}
		motion_Actuate.timer(minTime).onComplete(function() {
			if(_gthis.txCoin != null) {
				_gthis.txCoin.draw(_gthis.value,true);
			}
			if(_gthis.coinArriveMethod != null) {
				_gthis.coinArriveMethod();
			}
			var coinSound = com_redpeakgames_cloud9_utils_CSound.get("coin_explosion");
			if(com_redpeakgames_cloud9_Global.mute == false) {
				coinSound.play();
			}
			if(startWithParticle == null || startWithParticle != null && startWithParticle == false) {
				var coinParticle = new spritesheet_AnimatedSprite(_gthis.ssCoinPtcl);
				coinParticle.set_visible(false);
				_gthis.addChild(coinParticle);
				coinParticle.set_x(targetX - 132);
				coinParticle.set_y(targetY - 27);
				coinParticle.set_visible(true);
				coinParticle.showBehavior("_e");
				_gthis.animations.push(coinParticle);
				motion_Actuate.timer(1.6).onComplete(function() {
					_gthis.removeChild(coinParticle);
				});
			}
		});
		haxe_Timer.delay(function() {
			_gthis.removeEventListener("enterFrame",$bind(_gthis,_gthis.onEnterFrame));
			try {
				_gthis.parent.removeChild(_gthis);
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				haxe_Log.trace("DrawCoins : " + Std.string(err),{ fileName : "DrawCoins.hx", lineNumber : 158, className : "com.redpeakgames.cloud9.ui.DrawCoins", methodName : "start"});
			}
		},(minTime * 1000 | 0) + 1800);
	}
	,set_onCoinArrive: function(method) {
		this.coinArriveMethod = method;
		return this.coinArriveMethod;
	}
	,__class__: com_redpeakgames_cloud9_ui_DrawCoins
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_onCoinArrive:"set_onCoinArrive"})
});
var com_redpeakgames_cloud9_ui_ImageCheck = function(path) {
	openfl_display_Sprite.call(this);
	this.buttonMode = true;
	this.isChecked = false;
	var ub = null;
	var db = null;
	var rb = null;
	var ob = null;
	var gb = null;
	var getBitmapDataEx = function(id) {
		if(openfl_Assets.exists(id,"IMAGE")) {
			return openfl_Assets.getBitmapData(id);
		}
		return null;
	};
	ub = getBitmapDataEx(path + "_u.png");
	db = getBitmapDataEx(path + "_d.png");
	rb = getBitmapDataEx(path + "_r.png");
	ob = getBitmapDataEx(path + "_o.png");
	gb = getBitmapDataEx(path + "_g.png");
	if(ub != null) {
		this.up = new openfl_display_Bitmap(ub);
	} else {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Up button cannot be 'null'"));
	}
	if(db != null) {
		this.down = new openfl_display_Bitmap(db);
	}
	if(rb != null) {
		this.uOver = new openfl_display_Bitmap(rb);
	}
	if(ob != null) {
		this.dOver = new openfl_display_Bitmap(ob);
	}
	if(gb != null) {
		this.disable = new openfl_display_Bitmap(gb);
	}
	this.addChildAt(this.up,0);
	this.cur = this.up;
	this.addEventListener("mouseOver",$bind(this,this.onMouseOver));
	this.addEventListener("mouseOut",$bind(this,this.onOut));
	this.addEventListener("click",$bind(this,this.onClickEvent));
};
$hxClasses["com.redpeakgames.cloud9.ui.ImageCheck"] = com_redpeakgames_cloud9_ui_ImageCheck;
com_redpeakgames_cloud9_ui_ImageCheck.__name__ = ["com","redpeakgames","cloud9","ui","ImageCheck"];
com_redpeakgames_cloud9_ui_ImageCheck.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_ui_ImageCheck.prototype = $extend(openfl_display_Sprite.prototype,{
	up: null
	,down: null
	,uOver: null
	,dOver: null
	,disable: null
	,cur: null
	,clickMethod: null
	,overMethod: null
	,isChecked: null
	,interactive: null
	,onOver: null
	,onClick: null
	,onDirect: null
	,applyState: function() {
		if(this.isChecked) {
			this.removeChild(this.cur);
			this.addChildAt(this.down,0);
			this.cur = this.down;
		} else {
			this.removeChild(this.cur);
			this.addChildAt(this.up,0);
			this.cur = this.up;
		}
	}
	,get_checked: function() {
		return this.isChecked;
	}
	,set_checked: function(value) {
		this.isChecked = value;
		this.applyState();
		return this.isChecked;
	}
	,set_interactive: function(value) {
		this.buttonMode = value;
		return value;
	}
	,set_onOver: function(method) {
		this.overMethod = method;
		return this.overMethod;
	}
	,set_onClick: function(method) {
		this.clickMethod = method;
		return this.clickMethod;
	}
	,set_onDirect: function(method) {
		this.addEventListener("click",method);
		return method;
	}
	,onClickEvent: function(e) {
		if(this.buttonMode) {
			this.isChecked = !this.isChecked;
			this.applyState();
			if(this.clickMethod != null) {
				this.clickMethod(e);
			}
		}
	}
	,onMouseOver: function(e) {
		if(this.buttonMode == false) {
			return;
		}
		if(this.isChecked) {
			if(this.dOver != null) {
				this.removeChild(this.cur);
				this.addChildAt(this.dOver,0);
				this.cur = this.dOver;
			}
		} else if(this.uOver != null) {
			this.removeChild(this.cur);
			this.addChildAt(this.uOver,0);
			this.cur = this.uOver;
		}
		if(this.overMethod != null) {
			this.overMethod(e);
		}
	}
	,onOut: function(e) {
		if(this.buttonMode == false) {
			return;
		}
		if(this.isChecked) {
			this.removeChild(this.cur);
			this.addChildAt(this.down,0);
			this.cur = this.down;
		} else {
			this.removeChild(this.cur);
			this.addChildAt(this.up,0);
			this.cur = this.up;
		}
	}
	,__class__: com_redpeakgames_cloud9_ui_ImageCheck
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_onDirect:"set_onDirect",set_onClick:"set_onClick",set_onOver:"set_onOver",set_interactive:"set_interactive",set_checked:"set_checked",get_checked:"get_checked"})
});
var com_redpeakgames_cloud9_ui_JackpotCounter = function() {
	openfl_display_Sprite.call(this);
	var format = new openfl_text_TextFormat(openfl_Assets.getFont("font/arcade.ttf").name,38,15259238);
	format.align = 4;
	this.tf = new openfl_text_TextField();
	this.tf.set_width(268);
	this.tf.set_height(37);
	this.tf.set_defaultTextFormat(format);
	this.tf.set_gridFitType(1);
	this.tf.mouseEnabled = false;
	this.tf.set_embedFonts(true);
	this.tf.set_antiAliasType(0);
	this.addChild(this.tf);
};
$hxClasses["com.redpeakgames.cloud9.ui.JackpotCounter"] = com_redpeakgames_cloud9_ui_JackpotCounter;
com_redpeakgames_cloud9_ui_JackpotCounter.__name__ = ["com","redpeakgames","cloud9","ui","JackpotCounter"];
com_redpeakgames_cloud9_ui_JackpotCounter.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_ui_JackpotCounter.prototype = $extend(openfl_display_Sprite.prototype,{
	tf: null
	,set: function(value) {
		this.tf.set_text(com_redpeakgames_cloud9_utils_Number.addCommaInt(new haxe__$Int64__$_$_$Int64(value >> 31,value)));
	}
	,__class__: com_redpeakgames_cloud9_ui_JackpotCounter
});
var com_redpeakgames_cloud9_ui_NumberNotification = function(num,x,y,isBig,useShape) {
	if(useShape == null) {
		useShape = false;
	}
	if(isBig == null) {
		isBig = true;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	openfl_display_Sprite.call(this);
	this.set_num(num);
	this.set_x(x);
	this.set_y(y);
	this.isBig = isBig;
	this.mouseEnabled = false;
	this.useShape = useShape;
	if(isBig) {
		this.dotHeight = 24;
	} else {
		this.dotHeight = 18;
	}
	var digitNum = 1;
	var numTemp = num;
	while((numTemp / 10 | 0) != 0) {
		numTemp = numTemp / 10 | 0;
		++digitNum;
	}
	if(useShape) {
		this.backShape = new openfl_display_Shape();
		this.backShape.get_graphics().beginFill(16711680,1);
		this.backShape.get_graphics().drawRoundRect(0,0,this.dotHeight + (digitNum - 1) * 8,this.dotHeight,this.dotHeight);
		this.backShape.get_graphics().endFill();
		this.addChild(this.backShape);
	} else {
		this.back = new openfl_display_Sprite();
		this.addChild(this.back);
		this.makeBackImg(digitNum);
	}
	var tf = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",this.dotHeight * 0.666 | 0,16777215);
	tf.align = 0;
	this.numTxt = com_redpeakgames_cloud9_ui_TxField.make(-1,-1,this.dotHeight + (digitNum - 1) * 8 | 0,tf,new openfl_filters_GlowFilter(0,0.5,1.5,1.5,10,2));
	this.numTxt.set_height(this.dotHeight);
	this.numTxt.set_text(num == null?"null":"" + num);
	this.addChild(this.numTxt);
};
$hxClasses["com.redpeakgames.cloud9.ui.NumberNotification"] = com_redpeakgames_cloud9_ui_NumberNotification;
com_redpeakgames_cloud9_ui_NumberNotification.__name__ = ["com","redpeakgames","cloud9","ui","NumberNotification"];
com_redpeakgames_cloud9_ui_NumberNotification.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_ui_NumberNotification.prototype = $extend(openfl_display_Sprite.prototype,{
	num: null
	,isLobby: null
	,useShape: null
	,back: null
	,backShape: null
	,isBig: null
	,numTxt: null
	,dotHeight: null
	,set_num: function(value) {
		if(value == 0) {
			this.set_visible(false);
			return this.num = value;
		}
		if(!this.isLobby) {
			this.set_visible(true);
		}
		var digitNum = 1;
		var numTemp = value;
		while((numTemp / 10 | 0) != 0) {
			numTemp = numTemp / 10 | 0;
			++digitNum;
		}
		if(this.useShape) {
			if(this.backShape != null) {
				this.backShape.get_graphics().clear();
				this.backShape.get_graphics().beginFill(16711680,1);
				this.backShape.get_graphics().drawRoundRect(0,0,this.dotHeight + (digitNum - 1) * 8,this.dotHeight,this.dotHeight);
				this.backShape.get_graphics().endFill();
			}
		} else if(this.back != null) {
			this.back.removeChildren();
			this.makeBackImg(digitNum);
		}
		if(this.numTxt != null) {
			this.numTxt.set_width(this.dotHeight + (digitNum - 1) * 8 | 0);
			this.numTxt.set_text(value == null?"null":"" + value);
		}
		return this.num = value;
	}
	,makeBackImg: function(digitNum) {
		var path = "red_dot";
		if(this.isBig) {
			path = "red_dot_l";
		}
		this.back.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/reddot/" + path + "_1.png")));
		var halfDotRight = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/reddot/" + path + "_1.png"));
		halfDotRight.set_scaleX(-1);
		halfDotRight.set_x(this.dotHeight);
		this.back.addChild(halfDotRight);
		if(digitNum > 1) {
			halfDotRight.set_x(halfDotRight.get_x() + (digitNum - 1) * 6);
			var bar = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/reddot/" + path + "_2.png"));
			bar.set_x(this.dotHeight / 2);
			bar.set_scaleX((digitNum - 1) * 6);
			this.back.addChild(bar);
		}
	}
	,__class__: com_redpeakgames_cloud9_ui_NumberNotification
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_num:"set_num"})
});
var com_redpeakgames_cloud9_ui_NumberText = function(format,bg,len,x,y,gf) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	com_redpeakgames_cloud9_ui_NumberField.call(this);
	this.tickPerFrame = 1000 / openfl_Lib.current.stage.get_frameRate();
	if(bg != null) {
		this.addChild(new openfl_display_Bitmap(bg));
	}
	this.tf = com_redpeakgames_cloud9_ui_TxField.make(x,y,len,format,gf);
	this.addChild(this.tf);
};
$hxClasses["com.redpeakgames.cloud9.ui.NumberText"] = com_redpeakgames_cloud9_ui_NumberText;
com_redpeakgames_cloud9_ui_NumberText.__name__ = ["com","redpeakgames","cloud9","ui","NumberText"];
com_redpeakgames_cloud9_ui_NumberText.__super__ = com_redpeakgames_cloud9_ui_NumberField;
com_redpeakgames_cloud9_ui_NumberText.prototype = $extend(com_redpeakgames_cloud9_ui_NumberField.prototype,{
	tf: null
	,clear: function() {
		this.cur = 0;
		this.tf.set_text("");
	}
	,draw: function(number,useCounter,time) {
		if(time == null) {
			time = 2000;
		}
		if(useCounter == null) {
			useCounter = false;
		}
		this.cur = haxe_Int64Helper.toFloat(this.goal);
		this.goal = number;
		var tmp;
		if(useCounter) {
			var a = this.goal;
			var b = haxe_Int64Helper.fromFloat(this.cur);
			var v = a.high - b.high | 0;
			if(v != 0) {
				v = v;
			} else {
				v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
			}
			tmp = (a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) <= 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			useCounter = false;
		}
		if(useCounter == false) {
			this.tf.set_text(this.int64ToString(number));
			if(this.onEnd != null) {
				this.onEnd();
			}
		} else {
			this.step = (haxe_Int64Helper.toFloat(this.goal) - this.cur) / (time / (1000 / openfl_Lib.current.stage.get_frameRate()));
			this.step = Math.max(this.step,this.minStep);
			this.tf.set_text(this.int64ToString(haxe_Int64Helper.fromFloat(this.cur)));
			this.lastTick = openfl_Lib.getTimer();
			this.addEventListener("enterFrame",$bind(this,this.onUpdate));
		}
		this.tf.set_height(this.tf.get_textHeight());
	}
	,onUpdate: function(e) {
		var curTick = openfl_Lib.getTimer();
		this.cur += this.step * ((curTick - this.lastTick) / this.tickPerFrame);
		var a = haxe_Int64Helper.fromFloat(this.cur);
		var b = this.goal;
		var v = a.high - b.high | 0;
		if(v != 0) {
			v = v;
		} else {
			v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
		}
		if((a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) >= 0) {
			this.cur = haxe_Int64Helper.toFloat(this.goal);
			this.removeEventListener("enterFrame",$bind(this,this.onUpdate));
			if(this.onEnd != null) {
				this.onEnd();
			}
		}
		this.tf.set_text(this.int64ToString(haxe_Int64Helper.fromFloat(this.cur)));
		this.lastTick = curTick;
	}
	,int64ToString: function(value) {
		var ret = haxe__$Int64_Int64_$Impl_$.toString(value);
		if(this.shortExpNum > 0) {
			return com_redpeakgames_cloud9_utils_Number.shortExpOnlyKStr(ret,this.shortExpNum);
		}
		return com_redpeakgames_cloud9_utils_Number.addCommaStr(ret);
	}
	,__class__: com_redpeakgames_cloud9_ui_NumberText
});
var com_redpeakgames_cloud9_ui_PayTable = function(pta) {
	openfl_display_Sprite.call(this);
	this.curPage = 0;
	this.maxPage = pta.pages.length - 1;
	this.pages = pta.pages;
	if(pta.bg.path != null && pta.bg.path.length != 0) {
		this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/paytable/" + pta.bg.path)));
	}
	this.set_x(pta.bg.x);
	this.set_y(pta.bg.y);
	this.prev = new com_redpeakgames_cloud9_ui_ImageButton("img/paytable/" + pta.prev.path,null,null,"");
	this.prev.set_name("prev");
	this.prev.set_x(pta.prev.x);
	this.prev.set_y(pta.prev.y);
	this.prev.set_onClick($bind(this,this.onChangePage));
	this.exit = new com_redpeakgames_cloud9_ui_ImageButton("img/paytable/" + pta.exit.path,null,null,"");
	this.exit.set_x(pta.exit.x);
	this.exit.set_y(pta.exit.y);
	this.exit.set_onClick($bind(this,this.onCloseThis));
	this.next = new com_redpeakgames_cloud9_ui_ImageButton("img/paytable/" + pta.next.path,null,null,"");
	this.next.set_name("next");
	this.next.set_x(pta.next.x);
	this.next.set_y(pta.next.y);
	this.next.set_onClick($bind(this,this.onChangePage));
	this.prev.set_enable(false);
	this.offset = { x : pta.offset.x, y : pta.offset.y};
	this.showPage();
};
$hxClasses["com.redpeakgames.cloud9.ui.PayTable"] = com_redpeakgames_cloud9_ui_PayTable;
com_redpeakgames_cloud9_ui_PayTable.__name__ = ["com","redpeakgames","cloud9","ui","PayTable"];
com_redpeakgames_cloud9_ui_PayTable.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_ui_PayTable.prototype = $extend(openfl_display_Sprite.prototype,{
	pages: null
	,curPage: null
	,maxPage: null
	,prev: null
	,exit: null
	,next: null
	,offset: null
	,onCloseThis: function(e) {
		if(com_redpeakgames_cloud9_Global.mute == false) {
			var clickSound = com_redpeakgames_cloud9_utils_CSound.get("paytable_c");
			if(clickSound != null) {
				clickSound.play(0);
			}
		}
		this.removeChildren();
		this.dispatchEvent(new openfl_events_DataEvent("ge.close.paytable",true,false,""));
	}
	,onChangePage: function(e) {
		if(com_redpeakgames_cloud9_Global.mute == false) {
			var clickSound = com_redpeakgames_cloud9_utils_CSound.get("click");
			if(clickSound != null) {
				clickSound.play(0);
			}
		}
		var btn = e.target;
		if(btn.get_name() == "prev") {
			this.curPage -= 1;
			this.curPage = this.curPage < 0?0:this.curPage;
		}
		if(btn.get_name() == "next") {
			this.curPage += 1;
			this.curPage = this.curPage > this.maxPage?this.maxPage:this.curPage;
		}
		if(this.curPage == 0) {
			this.prev.set_enable(false);
		} else {
			this.prev.set_enable(true);
		}
		if(this.curPage == this.maxPage) {
			this.next.set_enable(false);
		} else {
			this.next.set_enable(true);
		}
		this.showPage();
	}
	,showPage: function() {
		this.removeChildren(1);
		var page = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/paytable/" + this.pages[this.curPage]));
		page.set_x(this.offset.x);
		page.set_y(this.offset.y);
		this.addChild(page);
		this.addChild(this.prev);
		this.addChild(this.exit);
		this.addChild(this.next);
	}
	,__class__: com_redpeakgames_cloud9_ui_PayTable
});
var com_redpeakgames_cloud9_ui_ToolTip = function(x,y,width,arrowDirection,isBig,arrowPos,align) {
	if(align == null) {
		align = 0;
	}
	if(arrowPos == null) {
		arrowPos = 0;
	}
	if(isBig == null) {
		isBig = true;
	}
	if(arrowDirection == null) {
		arrowDirection = 0;
	}
	openfl_display_Sprite.call(this);
	this.set_x(x);
	this.set_y(y);
	this.mouseEnabled = false;
	var fpath = "big";
	if(isBig) {
		this.tipHeight = 79;
	} else {
		this.tipHeight = 39;
		fpath = "small";
	}
	var bmd = openfl_Assets.getBitmapData("img/tip/tip_" + fpath + "_side.png");
	var sideLeft = new openfl_display_Bitmap(bmd);
	this.addChild(sideLeft);
	var sideRight = new openfl_display_Bitmap(bmd);
	sideRight.set_scaleX(-1);
	sideRight.set_x(width);
	this.addChild(sideRight);
	bmd = openfl_Assets.getBitmapData("img/tip/tip_" + fpath + "_bar.png");
	var bar = new openfl_display_Bitmap(bmd,2,false);
	bar.set_x(20);
	bar.set_scaleX(width - 40 | 0);
	this.addChild(bar);
	var arrow = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/tip/tip_arrow.png"));
	if(arrowPos == 0) {
		arrow.set_x(width / 2 - 8);
	} else {
		arrow.set_x(arrowPos);
	}
	this.addChild(arrow);
	var format = com_redpeakgames_cloud9_ui_TxField.format("font/OpenSans-Bold.ttf",12,16761830);
	format.align = align;
	format.letterSpacing = -0.45;
	this.txt = new openfl_text_TextField();
	this.txt.set_defaultTextFormat(format);
	this.txt.set_x(14);
	this.txt.set_width(width - 28);
	this.txt.set_height(this.tipHeight);
	this.txt.set_defaultTextFormat(format);
	this.txt.set_multiline(true);
	this.txt.set_wordWrap(false);
	this.txt.set_embedFonts(true);
	this.txt.mouseEnabled = false;
	this.txt.set_htmlText("A Quick brown fox jumps over the lazy dog");
	this.txt.set_y(Math.round((this.txt.get_height() - this.txt.get_textHeight()) / 2) - 2);
	this.addChild(this.txt);
	if(arrowDirection == 0) {
		arrow.set_y(-11);
	} else if(arrowDirection == 1) {
		arrow.set_scaleY(-1);
		arrow.set_y(this.tipHeight + 14 - 3);
		bar.set_scaleY(-1);
		bar.set_y(bar.get_y() + this.tipHeight);
		sideLeft.set_scaleY(-1);
		sideLeft.set_y(sideLeft.get_y() + this.tipHeight);
		sideRight.set_scaleY(-1);
		sideRight.set_y(sideRight.get_y() + this.tipHeight);
	}
};
$hxClasses["com.redpeakgames.cloud9.ui.ToolTip"] = com_redpeakgames_cloud9_ui_ToolTip;
com_redpeakgames_cloud9_ui_ToolTip.__name__ = ["com","redpeakgames","cloud9","ui","ToolTip"];
com_redpeakgames_cloud9_ui_ToolTip.__super__ = openfl_display_Sprite;
com_redpeakgames_cloud9_ui_ToolTip.prototype = $extend(openfl_display_Sprite.prototype,{
	txt: null
	,tipHeight: null
	,textFormat: null
	,text: null
	,set_text: function(value) {
		this.txt.set_htmlText(value);
		this.txt.set_y(Math.round((this.txt.get_height() - this.txt.get_textHeight()) / 2) - 2);
		return this.text = value;
	}
	,set_textFormat: function(format) {
		this.txt.set_defaultTextFormat(format);
		return this.textFormat = format;
	}
	,__class__: com_redpeakgames_cloud9_ui_ToolTip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_text:"set_text",set_textFormat:"set_textFormat"})
});
var com_redpeakgames_cloud9_ui_TxField = function() {
};
$hxClasses["com.redpeakgames.cloud9.ui.TxField"] = com_redpeakgames_cloud9_ui_TxField;
com_redpeakgames_cloud9_ui_TxField.__name__ = ["com","redpeakgames","cloud9","ui","TxField"];
com_redpeakgames_cloud9_ui_TxField.make = function(x,y,width,format,gf,embbed) {
	if(embbed == null) {
		embbed = true;
	}
	var tx = new openfl_text_TextField();
	tx.set_x(x);
	tx.set_y(y);
	tx.set_width(width);
	tx.set_height(25);
	tx.set_defaultTextFormat(format);
	tx.mouseEnabled = false;
	tx.set_embedFonts(embbed);
	tx.set_antiAliasType(0);
	if(gf != null) {
		tx.set_filters([gf]);
	}
	return tx;
};
com_redpeakgames_cloud9_ui_TxField.format = function(fn,size,color,ls) {
	var format = new openfl_text_TextFormat(openfl_Assets.getFont(fn).name,size,color);
	format.align = 4;
	format.letterSpacing = ls;
	return format;
};
com_redpeakgames_cloud9_ui_TxField.prototype = {
	__class__: com_redpeakgames_cloud9_ui_TxField
};
var com_redpeakgames_cloud9_utils_BitmapMaker = function() { };
$hxClasses["com.redpeakgames.cloud9.utils.BitmapMaker"] = com_redpeakgames_cloud9_utils_BitmapMaker;
com_redpeakgames_cloud9_utils_BitmapMaker.__name__ = ["com","redpeakgames","cloud9","utils","BitmapMaker"];
com_redpeakgames_cloud9_utils_BitmapMaker.create = function(path,bitmapData,x,y,alpha,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	if(alpha == null) {
		alpha = 1.0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var bmd = null;
	if(path != null && openfl_Assets.exists(path,"IMAGE")) {
		bmd = openfl_Assets.getBitmapData(path);
	} else if(bitmapData != null) {
		bmd = bitmapData;
	}
	if(bmd == null) {
		return null;
	}
	var bitmap = new openfl_display_Bitmap(bmd);
	bitmap.set_x(x);
	bitmap.set_y(y);
	bitmap.set_alpha(alpha);
	bitmap.smoothing = smoothing;
	return bitmap;
};
com_redpeakgames_cloud9_utils_BitmapMaker.byPath = function(path,useCache,x,y,alpha,smothing) {
	if(smothing == null) {
		smothing = true;
	}
	if(alpha == null) {
		alpha = 1.0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(useCache == null) {
		useCache = true;
	}
	return com_redpeakgames_cloud9_utils_BitmapMaker.byData(path != null && openfl_Assets.exists(path,"IMAGE")?openfl_Assets.getBitmapData(path,useCache):null,x,y,alpha,smothing);
};
com_redpeakgames_cloud9_utils_BitmapMaker.byData = function(bitmapData,x,y,alpha,smothing) {
	if(smothing == null) {
		smothing = false;
	}
	if(alpha == null) {
		alpha = 1.0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var bitmap = null;
	if(bitmapData != null) {
		bitmap = new openfl_display_Bitmap(bitmapData);
		bitmap.set_x(x);
		bitmap.set_y(y);
		bitmap.smoothing = smothing;
		bitmap.set_alpha(alpha);
	}
	return bitmap;
};
var com_redpeakgames_cloud9_utils_CSound = function(sound,loop) {
	this.loop = loop;
	this.sound = sound;
	this.position = 0;
	this.paused = false;
};
$hxClasses["com.redpeakgames.cloud9.utils.CSound"] = com_redpeakgames_cloud9_utils_CSound;
com_redpeakgames_cloud9_utils_CSound.__name__ = ["com","redpeakgames","cloud9","utils","CSound"];
com_redpeakgames_cloud9_utils_CSound.get = function(sn,loop) {
	if(loop == null) {
		loop = 0;
	}
	var sound = null;
	if(openfl_Assets.exists("sound/" + sn + ".ogg","SOUND")) {
		sound = openfl_Assets.getSound("sound/" + sn + ".ogg");
	}
	if(sound != null) {
		return new com_redpeakgames_cloud9_utils_CSound(sound,loop);
	} else {
		return null;
	}
};
com_redpeakgames_cloud9_utils_CSound.prototype = {
	loop: null
	,sound: null
	,channel: null
	,position: null
	,playing: null
	,paused: null
	,currentLoop: null
	,play: function(fadeIn) {
		if(fadeIn == null) {
			fadeIn = 0;
		}
		this.stop();
		this.playing = true;
		if(fadeIn <= 0) {
			this.channel = this.sound.play(this.position,0);
		} else {
			this.channel = this.sound.play(this.position,0,new openfl_media_SoundTransform(0,0));
			motion_Actuate.transform(this.channel,fadeIn).sound(1,0);
		}
		this.channel.addEventListener("soundComplete",$bind(this,this.onSoundComplete));
	}
	,stop: function() {
		this.playing = false;
		motion_Actuate.stop(this.channel);
		if(this.channel != null) {
			this.position = 0;
			this.channel.removeEventListener("soundComplete",$bind(this,this.onSoundComplete));
			this.channel.stop();
			this.channel = null;
		}
	}
	,reset: function(loop) {
		if(loop == null) {
			loop = 0;
		}
		this.loop = loop;
		this.stop();
	}
	,pause: function(fadeOut) {
		if(fadeOut == null) {
			fadeOut = 1.2;
		}
		var _gthis = this;
		if(this.playing && !this.paused) {
			this.paused = true;
			this.playing = false;
			this.position = this.channel.get_position();
			motion_Actuate.transform(this.channel,fadeOut).sound(0,0).onComplete(function() {
				_gthis.channel.removeEventListener("soundComplete",$bind(_gthis,_gthis.onSoundComplete));
				_gthis.channel.stop();
				_gthis.channel = null;
			});
		}
	}
	,resume: function(fadeIn) {
		if(fadeIn == null) {
			fadeIn = 1.2;
		}
		if(!this.playing && this.paused) {
			this.paused = false;
			this.play(fadeIn);
		}
	}
	,onSoundComplete: function(e) {
		this.loop -= 1;
		this.stop();
		this.position = 0;
		if(this.loop > 0) {
			this.play();
		}
	}
	,clear: function() {
		this.reset();
		this.sound.close();
		this.sound = null;
	}
	,__class__: com_redpeakgames_cloud9_utils_CSound
};
var com_redpeakgames_cloud9_utils_Console = function() {
};
$hxClasses["com.redpeakgames.cloud9.utils.Console"] = com_redpeakgames_cloud9_utils_Console;
com_redpeakgames_cloud9_utils_Console.__name__ = ["com","redpeakgames","cloud9","utils","Console"];
com_redpeakgames_cloud9_utils_Console.log = function(msg) {
	try {
		openfl_external_ExternalInterface.call("console.log('" + Std.string(msg) + "')");
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
			haxe_Log.trace(e.toString(),{ fileName : "Console.hx", lineNumber : 22, className : "com.redpeakgames.cloud9.utils.Console", methodName : "log"});
		} else throw(e);
	}
	haxe_Log.trace(msg,{ fileName : "Console.hx", lineNumber : 24, className : "com.redpeakgames.cloud9.utils.Console", methodName : "log"});
};
com_redpeakgames_cloud9_utils_Console.prototype = {
	__class__: com_redpeakgames_cloud9_utils_Console
};
var com_redpeakgames_cloud9_utils_DynamicCall = function() { };
$hxClasses["com.redpeakgames.cloud9.utils.DynamicCall"] = com_redpeakgames_cloud9_utils_DynamicCall;
com_redpeakgames_cloud9_utils_DynamicCall.__name__ = ["com","redpeakgames","cloud9","utils","DynamicCall"];
com_redpeakgames_cloud9_utils_DynamicCall.method = function(obj,methodName,args) {
	if(obj != null && Object.prototype.hasOwnProperty.call(obj,methodName)) {
		return Reflect.field(obj,methodName).apply(obj,args);
	}
	return null;
};
var com_redpeakgames_cloud9_utils_Effects = function() {
};
$hxClasses["com.redpeakgames.cloud9.utils.Effects"] = com_redpeakgames_cloud9_utils_Effects;
com_redpeakgames_cloud9_utils_Effects.__name__ = ["com","redpeakgames","cloud9","utils","Effects"];
com_redpeakgames_cloud9_utils_Effects.popup = function(target,dur,scale,inRepeat) {
	if(inRepeat == null) {
		inRepeat = 1;
	}
	var ox = target.get_x();
	var oy = target.get_y();
	motion_Actuate.tween(target,dur,{ scaleX : scale, scaleY : scale, x : ox + (target.get_width() - target.get_width() * scale) / 2, y : oy + (target.get_height() - target.get_height() * scale) / 2}).repeat(inRepeat).reflect().ease(motion_easing_Linear.get_easeNone());
};
com_redpeakgames_cloud9_utils_Effects.popuptf = function(target,dur,scale,inRepeat) {
	if(inRepeat == null) {
		inRepeat = 1;
	}
	var ox = target.get_x();
	var oy = target.get_y();
	motion_Actuate.tween(target,dur,{ scaleX : scale, scaleY : scale, x : ox + (target.get_textWidth() - target.get_textWidth() * scale) / 2, y : oy + (target.get_textHeight() - target.get_textHeight() * scale) / 2}).repeat(inRepeat).reflect().ease(motion_easing_Linear.get_easeNone());
};
com_redpeakgames_cloud9_utils_Effects.popout = function(target,dur,delay,complete) {
	var dx = target.get_x() + (target.get_width() - target.get_width() * 0.4) / 2;
	var dy = target.get_y() + (target.get_height() - target.get_height() * 0.4) / 2;
	haxe_Log.trace(target.get_x(),{ fileName : "Effects.hx", lineNumber : 46, className : "com.redpeakgames.cloud9.utils.Effects", methodName : "popout", customParams : [target.get_y(),dx,dy]});
	motion_Actuate.tween(target,dur,{ alpha : 0, scaleX : 0.4, scaleY : 0.4, x : dx, y : dy}).delay(delay).onComplete(complete).ease(motion_easing_Back.get_easeIn());
};
com_redpeakgames_cloud9_utils_Effects.prototype = {
	__class__: com_redpeakgames_cloud9_utils_Effects
};
var openfl_text_TextField = function() {
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__displayAsPassword = false;
	this.__graphics = new openfl_display_Graphics(this);
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__tabEnabled = true;
	this.__mouseWheelEnabled = true;
	this.__text = "";
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0));
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	__bounds: null
	,__caretIndex: null
	,__cursorTimer: null
	,__dirty: null
	,__displayAsPassword: null
	,__inputEnabled: null
	,__isHTML: null
	,__layoutDirty: null
	,__mouseWheelEnabled: null
	,__offsetX: null
	,__offsetY: null
	,__selectionIndex: null
	,__showCursor: null
	,__symbol: null
	,__text: null
	,__textEngine: null
	,__textFormat: null
	,__div: null
	,appendText: function(text) {
		this.__text += text;
		var tmp = this.__textEngine.textFormatRanges.get(this.__textEngine.textFormatRanges.get_length() - 1);
		tmp.end = this.__text.length;
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return null;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				var x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) x += group.advances[_g3++];
				return new openfl_geom_Rectangle(x,group.offsetY,group.advances[charIndex - group.startIndex],group.ascent + group.descent);
			}
		}
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) y += this.__textEngine.lineHeights.get(_g1++);
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.get_length()) {
			var group = _g11.get(_g2);
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				if(x >= group.offsetX && x <= group.offsetX + group.width) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i = _g3++;
						advance += group.advances[i];
						if(x <= group.offsetX + advance) {
							return group.startIndex + i;
						}
					}
					return group.endIndex;
				}
			}
		}
		return -1;
	}
	,getFirstCharInParagraph: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return 0;
		}
		var index = this.__textEngine.getLineBreakIndex();
		var startIndex = 0;
		while(index > -1) {
			if(index <= charIndex) {
				startIndex = index + 1;
			} else if(index > charIndex) {
				break;
			}
			index = this.__textEngine.getLineBreakIndex(index + 1);
		}
		return startIndex;
	}
	,getLineIndexAtPoint: function(x,y) {
		this.__updateLayout();
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) y += this.__textEngine.lineHeights.get(_g1++);
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.get_length()) {
			var group = _g11.get(_g2);
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				return group.lineIndex;
			}
		}
		return -1;
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return -1;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.startIndex <= charIndex && group.endIndex >= charIndex) {
				return group.lineIndex;
			}
		}
		return -1;
	}
	,getLineLength: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return 0;
		}
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group.startIndex;
				}
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = this.__text.length;
		}
		return endIndex - startIndex;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents.get(lineIndex);
		var descender = this.__textEngine.lineDescents.get(lineIndex);
		var leading = this.__textEngine.lineLeadings.get(lineIndex);
		var lineHeight = this.__textEngine.lineHeights.get(lineIndex);
		var lineWidth = this.__textEngine.lineWidths.get(lineIndex);
		var margin;
		switch(this.__textFormat.align) {
		case 0:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		case 1:case 4:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 2:case 3:case 5:
			margin = 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				return group.startIndex;
			}
		}
		return 0;
	}
	,getLineText: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return null;
		}
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group.startIndex;
				}
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = this.__text.length;
		}
		return this.__textEngine.text.substring(startIndex,endIndex);
	}
	,getParagraphLength: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return 0;
		}
		var startIndex = this.getFirstCharInParagraph(charIndex);
		var endIndex = this.__textEngine.getLineBreakIndex(charIndex) + 1;
		if(endIndex == 0) {
			endIndex = this.__text.length;
		}
		return endIndex - startIndex;
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 0;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		var format = null;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.start <= beginIndex && group.end >= beginIndex || group.start <= endIndex && group.end >= endIndex) {
				if(format == null) {
					format = group.format.clone();
				} else {
					if(group.format.font != format.font) {
						format.font = null;
					}
					if(group.format.size != format.size) {
						format.size = null;
					}
					if(group.format.color != format.color) {
						format.color = null;
					}
					if(group.format.bold != format.bold) {
						format.bold = null;
					}
					if(group.format.italic != format.italic) {
						format.italic = null;
					}
					if(group.format.underline != format.underline) {
						format.underline = null;
					}
					if(group.format.url != format.url) {
						format.url = null;
					}
					if(group.format.target != format.target) {
						format.target = null;
					}
					if(group.format.align != format.align) {
						format.align = null;
					}
					if(group.format.leftMargin != format.leftMargin) {
						format.leftMargin = null;
					}
					if(group.format.rightMargin != format.rightMargin) {
						format.rightMargin = null;
					}
					if(group.format.indent != format.indent) {
						format.indent = null;
					}
					if(group.format.leading != format.leading) {
						format.leading = null;
					}
					if(group.format.blockIndent != format.blockIndent) {
						format.blockIndent = null;
					}
					if(group.format.bullet != format.bullet) {
						format.bullet = null;
					}
					if(group.format.kerning != format.kerning) {
						format.kerning = null;
					}
					if(group.format.letterSpacing != format.letterSpacing) {
						format.letterSpacing = null;
					}
					if(group.format.tabStops != format.tabStops) {
						format.tabStops = null;
					}
				}
			}
		}
		return format;
	}
	,replaceSelectedText: function(value) {
		if(value == "" && this.__selectionIndex == this.__caretIndex) {
			return;
		}
		var startIndex = this.__caretIndex < this.__selectionIndex?this.__caretIndex:this.__selectionIndex;
		this.replaceText(startIndex,this.__caretIndex > this.__selectionIndex?this.__caretIndex:this.__selectionIndex,value);
		var i = startIndex + value.length;
		this.setSelection(i,i);
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__text.length || newText == null) {
			return;
		}
		this.__updateText(this.__text.substring(0,beginIndex) + newText + this.__text.substring(endIndex));
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.get_length()) {
			range = this.__textEngine.textFormatRanges.get(i);
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				++i;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				if(i > 0) {
					this.__textEngine.textFormatRanges.splice(i,1);
				} else {
					range.start = 0;
					range.end = 0;
				}
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				++i;
			} else {
				++i;
			}
		}
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 0;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(format.font != null) {
			this.__textFormat.font = format.font;
		}
		if(format.size != null) {
			this.__textFormat.size = format.size;
		}
		if(format.color != null) {
			this.__textFormat.color = format.color;
		}
		if(format.bold != null) {
			this.__textFormat.bold = format.bold;
		}
		if(format.italic != null) {
			this.__textFormat.italic = format.italic;
		}
		if(format.underline != null) {
			this.__textFormat.underline = format.underline;
		}
		if(format.url != null) {
			this.__textFormat.url = format.url;
		}
		if(format.target != null) {
			this.__textFormat.target = format.target;
		}
		if(format.align != null) {
			this.__textFormat.align = format.align;
		}
		if(format.leftMargin != null) {
			this.__textFormat.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.__textFormat.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.__textFormat.indent = format.indent;
		}
		if(format.leading != null) {
			this.__textFormat.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.__textFormat.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.__textFormat.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.__textFormat.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.__textFormat.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.__textFormat.tabStops = format.tabStops;
		}
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		var _this = this.__renderTransform;
		var px = this.__offsetX;
		var py = this.__offsetY;
		_this.tx = px * _this.a + py * _this.c + _this.tx;
		_this.ty = px * _this.b + py * _this.d + _this.ty;
	}
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		this.set_width(symbol.width);
		this.set_height(symbol.height);
		this.__offsetX = symbol.x;
		this.__offsetY = symbol.y;
		this.set_multiline(symbol.multiline);
		this.set_wordWrap(symbol.wordWrap);
		this.set_displayAsPassword(symbol.password);
		if(symbol.border) {
			this.set_border(true);
			this.set_background(true);
		}
		this.set_selectable(symbol.selectable);
		if(symbol.input) {
			this.set_type(1);
		}
		var format = new openfl_text_TextFormat();
		if(symbol.color != null) {
			format.color = symbol.color & 16777215;
		}
		format.size = Math.round(symbol.fontHeight / 20);
		var tmp = swf.symbols.h[symbol.fontID] != null;
		format.font = symbol.fontName;
		var found = false;
		var _g = format.font;
		if(_g == null) {
			found = true;
		} else {
			switch(_g) {
			case "":case "_sans":case "_serif":case "_typewriter":
				found = true;
				break;
			default:
				var _g1 = 0;
				var _g11 = openfl_text_Font.enumerateFonts();
				while(_g1 < _g11.length) {
					var font = _g11[_g1];
					++_g1;
					if(font.name == format.font) {
						found = true;
						break;
					}
				}
			}
		}
		if(found) {
			this.set_embedFonts(true);
		} else {
			lime_utils_Log.warn("Could not find required font \"" + format.font + "\", it has not been embedded",{ fileName : "TextField.hx", lineNumber : 666, className : "openfl.text.TextField", methodName : "__fromSymbol"});
		}
		if(symbol.align != null) {
			if(symbol.align == "center") {
				format.align = 0;
			} else if(symbol.align == "right") {
				format.align = 4;
			} else if(symbol.align == "justify") {
				format.align = 2;
			}
			format.leftMargin = symbol.leftMargin / 20 | 0;
			format.rightMargin = symbol.rightMargin / 20 | 0;
			format.indent = symbol.indent / 20 | 0;
			format.leading = symbol.leading / 20 | 0;
			if(this.get_embedFonts()) {
				format.leading += 4;
			}
		}
		this.set_defaultTextFormat(format);
		if(symbol.text != null) {
			if(symbol.html) {
				this.set_htmlText(symbol.text);
			} else {
				this.set_text(symbol.text);
			}
		}
	}
	,__getAttributeMatch: function(regex) {
		if(regex.matched(2) != null) {
			return regex.matched(2);
		} else {
			return regex.matched(3);
		}
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__temp;
		bounds.copyFrom(this.__textEngine.bounds);
		bounds.x += this.__offsetX;
		bounds.y += this.__offsetY;
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getCursor: function() {
		if(this.__textEngine.selectable) {
			return lime_ui_MouseCursor.TEXT;
		} else {
			return null;
		}
	}
	,__getPosition: function(x,y) {
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) y += this.__textEngine.lineHeights.get(_g1++);
		if(y > this.__textEngine.textHeight) {
			y = this.__textEngine.textHeight;
		}
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g11 = 0;
		var _g2 = this.__textEngine.layoutGroups.get_length();
		while(_g11 < _g2) {
			var i = _g11++;
			group = this.__textEngine.layoutGroups.get(i);
			if(i < this.__textEngine.layoutGroups.get_length() - 1) {
				nextGroup = this.__textEngine.layoutGroups.get(i + 1);
			} else {
				nextGroup = null;
			}
			if(firstGroup) {
				if(y < group.offsetY) {
					y = group.offsetY;
				}
				if(x < group.offsetX) {
					x = group.offsetX;
				}
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i1 = _g3++;
						advance += group.advances[i1];
						if(x <= group.offsetX + advance) {
							if(x <= group.offsetX + (advance - group.advances[i1]) + group.advances[i1] / 2) {
								return group.startIndex + i1;
							} else if(group.startIndex + i1 < group.endIndex) {
								return group.startIndex + i1 + 1;
							} else {
								return group.endIndex;
							}
						}
					}
					return group.endIndex;
				}
			}
		}
		return this.__text.length;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0?-_this.tx:1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		if(this.__textEngine.bounds.contains(px,norm1 == 0?-_this1.ty:1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x)))) {
			if(stack != null) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0?-_this.tx:1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		if(this.__textEngine.bounds.contains(px,norm1 == 0?-_this1.ty:1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x)))) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoTextField.render(this,renderSession,this.__worldTransform);
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		var textEngine = this.__textEngine;
		var bounds = textEngine.bounds;
		var graphics = this.__graphics;
		if(this.__dirty) {
			this.__updateLayout();
			if(graphics.__bounds == null) {
				graphics.__bounds = new openfl_geom_Rectangle();
			}
			graphics.__bounds.copyFrom(bounds);
		}
		graphics.__update();
		if(this.__dirty || graphics.__dirty) {
			var width = graphics.__width;
			var height = graphics.__height;
			if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.__bitmap = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				if(this.__graphics.__canvas == null) {
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				var transform = graphics.__renderTransform;
				if(renderSession.roundPixels) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
				} else {
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				}
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					} else {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g1 = 0;
					var _g = this.get_scrollV() - 1;
					while(_g1 < _g) {
						var i = _g1++;
						scrollY -= textEngine.lineHeights.get(i);
					}
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g2 = 0;
					var _g11 = textEngine.layoutGroups;
					while(_g2 < _g11.get_length()) {
						var group = _g11.get(_g2);
						++_g2;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(group.format.color,6);
						if(applyHack) {
							offsetY = group.format.size * 0.185;
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g3 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g3 < _g21) {
										var i1 = _g3++;
										if(group.advances.length <= i1) {
											break;
										}
										advance += group.advances[i1];
									}
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= textEngine.text.length) {
									end = this.getCharBoundaries(textEngine.text.length - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
						var scrollX1 = -this.get_scrollH();
						var scrollY1 = 0.0;
						var _g12 = 0;
						var _g4 = this.get_scrollV() - 1;
						while(_g12 < _g4) {
							var i2 = _g12++;
							scrollY1 -= textEngine.lineHeights.get(i2);
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(this.get_defaultTextFormat().color,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY1 + 2.5);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				graphics.__visible = true;
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		if(this.__textEngine.antiAliasType == 0 && this.__textEngine.gridFitType == 1) {
			var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = false;
				renderSession.context.msImageSmoothingEnabled = false;
				renderSession.context.imageSmoothingEnabled = false;
			}
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = true;
				renderSession.context.msImageSmoothingEnabled = true;
				renderSession.context.imageSmoothingEnabled = true;
			}
		} else {
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		}
	}
	,__renderDOM: function(renderSession) {
		var textField = this;
		var textEngine = textField.__textEngine;
		if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
			if(textField.__dirty || textField.__div == null) {
				if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
					if(textField.__div == null) {
						textField.__div = window.document.createElement("div");
						openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
						textField.__style.setProperty("outline","none",null);
						textField.__div.addEventListener("input",function(event) {
							event.preventDefault();
							if(textField.get_htmlText() != textField.__div.innerHTML) {
								textField.set_htmlText(textField.__div.innerHTML);
								textField.__dirty = false;
							}
						},true);
					}
					if(!textEngine.multiline) {
						textField.__style.setProperty("white-space","nowrap",null);
					} else {
						textField.__style.setProperty("word-wrap","break-word",null);
					}
					textField.__style.setProperty("overflow","hidden",null);
					if(textEngine.selectable) {
						textField.__style.setProperty("cursor","text",null);
					} else {
						textField.__style.setProperty("cursor","inherit",null);
					}
					textField.__div.contentEditable = textEngine.type == 1;
					var style = textField.__style;
					textField.__div.innerHTML = textEngine.text.replace(new RegExp("\n","g".split("u").join("")),"<br>");
					if(textEngine.background) {
						style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor,6),null);
					} else {
						style.removeProperty("background-color");
					}
					if(textEngine.border) {
						style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor,6),null);
					} else {
						style.removeProperty("border");
					}
					style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
					style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
					if(textEngine.autoSize != 2) {
						style.setProperty("width","auto",null);
					} else {
						style.setProperty("width",textEngine.width + "px",null);
					}
					style.setProperty("height",textEngine.height + "px",null);
					switch(textField.__textFormat.align) {
					case 0:
						style.setProperty("text-align","center",null);
						break;
					case 4:
						style.setProperty("text-align","right",null);
						break;
					default:
						style.setProperty("text-align","left",null);
					}
					textField.__dirty = false;
				} else if(textField.__div != null) {
					renderSession.element.removeChild(textField.__div);
					textField.__div = null;
				}
			}
			if(textField.__div != null) {
				openfl__$internal_renderer_dom_DOMRenderer.updateClip(textField,renderSession);
				openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,true);
			}
		} else if(textField.__div != null) {
			renderSession.element.removeChild(textField.__div);
			textField.__div = null;
			textField.__style = null;
		}
	}
	,__renderGL: function(renderSession) {
		var textEngine = this.__textEngine;
		var bounds = textEngine.bounds;
		var graphics = this.__graphics;
		if(this.__dirty) {
			this.__updateLayout();
			if(graphics.__bounds == null) {
				graphics.__bounds = new openfl_geom_Rectangle();
			}
			graphics.__bounds.copyFrom(bounds);
		}
		graphics.__update();
		if(this.__dirty || graphics.__dirty) {
			var width = graphics.__width;
			var height = graphics.__height;
			if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.__bitmap = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				if(this.__graphics.__canvas == null) {
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				var transform = graphics.__renderTransform;
				if(renderSession.roundPixels) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
				} else {
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				}
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					} else {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g1 = 0;
					var _g = this.get_scrollV() - 1;
					while(_g1 < _g) scrollY -= textEngine.lineHeights.get(_g1++);
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g2 = 0;
					var _g11 = textEngine.layoutGroups;
					while(_g2 < _g11.get_length()) {
						var group = _g11.get(_g2);
						++_g2;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(group.format.color,6);
						if(applyHack) {
							offsetY = group.format.size * 0.185;
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g3 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g3 < _g21) {
										var i = _g3++;
										if(group.advances.length <= i) {
											break;
										}
										advance += group.advances[i];
									}
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= textEngine.text.length) {
									end = this.getCharBoundaries(textEngine.text.length - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
						var scrollX1 = -this.get_scrollH();
						var scrollY1 = 0.0;
						var _g12 = 0;
						var _g4 = this.get_scrollV() - 1;
						while(_g12 < _g4) scrollY1 -= textEngine.lineHeights.get(_g12++);
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(this.get_defaultTextFormat().color,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY1 + 2.5);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				graphics.__visible = true;
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = this.__text.length;
			this.__selectionIndex = this.__caretIndex;
		}
		if(this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(true);
			if(!this.__inputEnabled) {
				this.stage.window.backend.setEnableTextEvents(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
		}
	}
	,__stopTextInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			var cacheWidth = this.__textEngine.width;
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				if(this.__textEngine.width != cacheWidth) {
					switch(this.__textEngine.autoSize) {
					case 0:
						var _g = this;
						_g.set_x(_g.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					case 3:
						var _g1 = this;
						_g1.set_x(_g1.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,__updateText: function(value) {
		this.__text = value;
		if(this.__text.length < this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex = this.__text.length;
		}
		if(!this.__displayAsPassword) {
			this.__textEngine.text = this.__text;
		} else {
			var length = this.get_text().length;
			var mask = "";
			var _g1 = 0;
			while(_g1 < length) {
				++_g1;
				mask += "*";
			}
			this.__textEngine.text = mask;
		}
	}
	,get_antiAliasType: function() {
		return this.__textEngine.antiAliasType;
	}
	,set_antiAliasType: function(value) {
		return this.__textEngine.antiAliasType = value;
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.autoSize = value;
	}
	,get_background: function() {
		return this.__textEngine.background;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) {
			this.__dirty = true;
		}
		return this.__textEngine.background = value;
	}
	,get_backgroundColor: function() {
		return this.__textEngine.backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this.__textEngine.backgroundColor) {
			this.__dirty = true;
		}
		return this.__textEngine.backgroundColor = value;
	}
	,get_border: function() {
		return this.__textEngine.border;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) {
			this.__dirty = true;
		}
		return this.__textEngine.border = value;
	}
	,get_borderColor: function() {
		return this.__textEngine.borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this.__textEngine.borderColor) {
			this.__dirty = true;
		}
		return this.__textEngine.borderColor = value;
	}
	,get_bottomScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.bottomScrollV;
	}
	,get_caretIndex: function() {
		return this.__caretIndex;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		return value;
	}
	,get_displayAsPassword: function() {
		return this.__displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__displayAsPassword = value;
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_embedFonts: function() {
		return this.__textEngine.embedFonts;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_gridFitType: function() {
		return this.__textEngine.gridFitType;
	}
	,set_gridFitType: function(value) {
		return this.__textEngine.gridFitType = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		if(value != this.__textEngine.height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__textEngine.height = value;
		}
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,get_htmlText: function() {
		return this.__text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.__isHTML = true;
		if(this.__div == null) {
			value = value.replace(openfl_text_TextField.__regexBreakTag.r,"\n");
			value = value.replace(openfl_text_TextField.__regexEntities[0].r,"\"");
			value = value.replace(openfl_text_TextField.__regexEntities[1].r,"'");
			value = value.replace(openfl_text_TextField.__regexEntities[2].r,"&");
			var segments = value.split("<");
			if(segments.length == 1) {
				value = value.replace(openfl_text_TextField.__regexHTMLTag.r,"");
				if(this.__textEngine.textFormatRanges.get_length() > 1) {
					this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.get_length() - 1);
				}
				value = value.replace(openfl_text_TextField.__regexEntities[3].r,"<");
				value = value.replace(openfl_text_TextField.__regexEntities[4].r,">");
				var range = this.__textEngine.textFormatRanges.get(0);
				range.format = this.__textFormat;
				range.start = 0;
				range.end = value.length;
				this.__updateText(value);
				return value;
			} else {
				this.__textEngine.textFormatRanges.splice(0,this.__textEngine.textFormatRanges.get_length());
				value = "";
				var segment;
				var _g1 = 0;
				var _g = segments.length;
				while(_g1 < _g) {
					var i = _g1++;
					segment = segments[i];
					segment = segment.replace(openfl_text_TextField.__regexEntities[3].r,"<");
					segment = segment.replace(openfl_text_TextField.__regexEntities[4].r,">");
					segments[i] = segment;
				}
				var formatStack = [this.__textFormat.clone()];
				var sub;
				var noLineBreak = false;
				var _g2 = 0;
				while(_g2 < segments.length) {
					var segment1 = segments[_g2];
					++_g2;
					if(segment1 == "") {
						continue;
					}
					var isClosingTag = HxOverrides.substr(segment1,0,1) == "/";
					var tagEndIndex = segment1.indexOf(">");
					var start = tagEndIndex + 1;
					var spaceIndex = segment1.indexOf(" ");
					var tagName = segment1.substring(isClosingTag?1:0,spaceIndex > -1 && spaceIndex < tagEndIndex?spaceIndex:tagEndIndex);
					var format;
					if(isClosingTag) {
						formatStack.pop();
						format = formatStack[formatStack.length - 1].clone();
						if(tagName.toLowerCase() == "p" && this.__textEngine.textFormatRanges.get_length() > 0) {
							value += "\n";
							noLineBreak = true;
						}
						if(start < segment1.length) {
							sub = HxOverrides.substr(segment1,start,null);
							this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
							value += sub;
							noLineBreak = false;
						}
					} else {
						format = formatStack[formatStack.length - 1].clone();
						if(tagEndIndex > -1) {
							switch(tagName.toLowerCase()) {
							case "b":
								format.bold = true;
								break;
							case "em":case "i":
								format.italic = true;
								break;
							case "font":
								if(openfl_text_TextField.__regexFace.match(segment1)) {
									format.font = this.__getAttributeMatch(openfl_text_TextField.__regexFace);
								}
								if(openfl_text_TextField.__regexColor.match(segment1)) {
									format.color = Std.parseInt("0x" + this.__getAttributeMatch(openfl_text_TextField.__regexColor));
								}
								if(openfl_text_TextField.__regexSize.match(segment1)) {
									var sizeAttr = this.__getAttributeMatch(openfl_text_TextField.__regexSize);
									var firstChar = HxOverrides.cca(sizeAttr,0);
									if(firstChar == 43 || firstChar == 45) {
										format.size = (formatStack.length >= 2?formatStack[formatStack.length - 2]:this.__textFormat).size + Std.parseInt(sizeAttr);
									} else {
										format.size = Std.parseInt(sizeAttr);
									}
								}
								break;
							case "p":
								if(this.__textEngine.textFormatRanges.get_length() > 0 && !noLineBreak) {
									value += "\n";
								}
								if(openfl_text_TextField.__regexAlign.match(segment1)) {
									format.align = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString(this.__getAttributeMatch(openfl_text_TextField.__regexAlign).toLowerCase());
								}
								break;
							case "textformat":
								if(openfl_text_TextField.__regexBlockIndent.match(segment1)) {
									format.blockIndent = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexBlockIndent));
								}
								if(openfl_text_TextField.__regexIndent.match(segment1)) {
									format.indent = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexIndent));
								}
								if(openfl_text_TextField.__regexLeading.match(segment1)) {
									format.leading = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexLeading));
								}
								if(openfl_text_TextField.__regexLeftMargin.match(segment1)) {
									format.leftMargin = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexLeftMargin));
								}
								if(openfl_text_TextField.__regexRightMargin.match(segment1)) {
									format.rightMargin = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexRightMargin));
								}
								if(openfl_text_TextField.__regexTabStops.match(segment1)) {
									var values = this.__getAttributeMatch(openfl_text_TextField.__regexTabStops).split(" ");
									var tabStops = [];
									var _g11 = 0;
									while(_g11 < values.length) {
										var stop = values[_g11];
										++_g11;
										tabStops.push(Std.parseInt(stop));
									}
									format.tabStops = tabStops;
								}
								break;
							case "u":
								format.underline = true;
								break;
							}
							formatStack.push(format);
							if(start < segment1.length) {
								sub = segment1.substring(start);
								this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
								value += sub;
								noLineBreak = false;
							}
						} else {
							this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + segment1.length));
							value += segment1;
							noLineBreak = false;
						}
					}
				}
				if(this.__textEngine.textFormatRanges.get_length() == 0) {
					this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(formatStack[0],0,0));
				}
			}
		}
		this.__updateText(value);
		return value;
	}
	,get_length: function() {
		if(this.__text != null) {
			return this.__text.length;
		}
		return 0;
	}
	,get_maxChars: function() {
		return this.__textEngine.maxChars;
	}
	,set_maxChars: function(value) {
		if(value != this.__textEngine.maxChars) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.maxChars = value;
	}
	,get_maxScrollH: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollH;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollV;
	}
	,get_mouseWheelEnabled: function() {
		return this.__mouseWheelEnabled;
	}
	,set_mouseWheelEnabled: function(value) {
		return this.__mouseWheelEnabled = value;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,get_restrict: function() {
		return this.__textEngine.restrict;
	}
	,set_restrict: function(value) {
		return this.__textEngine.restrict = value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollH) {
			value = this.__textEngine.maxScrollH;
		}
		if(value < 0) {
			value = 0;
		}
		if(value != this.__textEngine.scrollH) {
			this.__dirty = true;
		}
		return this.__textEngine.scrollH = value;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,set_scrollV: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollV) {
			value = this.__textEngine.maxScrollV;
		}
		if(value < 1) {
			value = 1;
		}
		if(value != this.__textEngine.scrollV) {
			this.__dirty = true;
		}
		return this.__textEngine.scrollV = value;
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) {
				this.__startTextInput();
			} else if(!value) {
				this.__stopTextInput();
			}
		}
		return this.__textEngine.selectable = value;
	}
	,get_selectionBeginIndex: function() {
		return Math.min(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_selectionEndIndex: function() {
		return Math.max(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_sharpness: function() {
		return this.__textEngine.sharpness;
	}
	,set_sharpness: function(value) {
		if(value != this.__textEngine.sharpness) {
			this.__dirty = true;
		}
		return this.__textEngine.sharpness = value;
	}
	,get_text: function() {
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		} else {
			return value;
		}
		if(this.__textEngine.textFormatRanges.get_length() > 1) {
			this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.get_length() - 1);
		}
		var range = this.__textEngine.textFormatRanges.get(0);
		range.format = this.__textFormat;
		range.start = 0;
		range.end = value.length;
		this.__isHTML = false;
		this.__updateText(value);
		return value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) {
			this.__dirty = true;
		}
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.get_length()) {
			var range = _g1.get(_g);
			++_g;
			range.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == 1) {
				this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
				this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
			} else {
				this.removeEventListener("focusIn",$bind(this,this.this_onFocusIn));
				this.removeEventListener("focusOut",$bind(this,this.this_onFocusOut));
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
			}
			this.__dirty = true;
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width * Math.abs(this.get_scaleX());
	}
	,set_width: function(value) {
		if(value != this.__textEngine.width) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__textEngine.width = value;
		}
		return this.__textEngine.width * Math.abs(this.get_scaleX());
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.wordWrap = value;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) {
			return;
		}
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				this.__dirty = true;
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) {
			return;
		}
		this.stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var _this = this.__worldTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			var _this1 = this.__worldTransform;
			var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
			var upPos = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			var leftPos;
			var rightPos;
			leftPos = Math.min(this.__selectionIndex,upPos) | 0;
			rightPos = Math.max(this.__selectionIndex,upPos) | 0;
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_selectable() && this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) {
			this.__startTextInput();
		}
	}
	,this_onFocusOut: function(event) {
		this.__stopTextInput();
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable()) {
			return;
		}
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		this.__dirty = true;
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) {
				this.__selectionIndex = this.__caretIndex - 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 97:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				this.__caretIndex = this.__text.length;
				this.__selectionIndex = 0;
			}
			break;
		case 99:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex,this.__selectionIndex));
			}
			break;
		case 120:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex,this.__selectionIndex));
				if(this.__caretIndex != this.__selectionIndex) {
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < this.__text.length) {
				this.__selectionIndex = this.__caretIndex + 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 1073741903:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex < this.__text.length) {
					this.__caretIndex++;
				}
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex < this.__text.length) {
						this.__caretIndex++;
					}
				} else {
					this.__caretIndex = Math.max(this.__caretIndex,this.__selectionIndex) | 0;
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741904:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex > 0) {
					this.__caretIndex--;
				}
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex > 0) {
						this.__caretIndex--;
					}
				} else {
					this.__caretIndex = Math.min(this.__caretIndex,this.__selectionIndex) | 0;
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 13:case 1073741912:
			if(this.__textEngine.multiline) {
				this.replaceSelectedText("\n");
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.replaceSelectedText(value);
		this.dispatchEvent(new openfl_events_Event("change",true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_sharpness:"set_sharpness",get_sharpness:"get_sharpness",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_selectable:"set_selectable",get_selectable:"get_selectable",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",set_restrict:"set_restrict",get_restrict:"get_restrict",get_numLines:"get_numLines",set_multiline:"set_multiline",get_multiline:"get_multiline",set_mouseWheelEnabled:"set_mouseWheelEnabled",get_mouseWheelEnabled:"get_mouseWheelEnabled",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",get_length:"get_length",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_gridFitType:"set_gridFitType",get_gridFitType:"get_gridFitType",set_embedFonts:"set_embedFonts",get_embedFonts:"get_embedFonts",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretIndex:"get_caretIndex",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_border:"set_border",get_border:"get_border",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_background:"set_background",get_background:"get_background",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_antiAliasType:"set_antiAliasType",get_antiAliasType:"get_antiAliasType"})
});
var com_redpeakgames_cloud9_utils_FPS_$Mem = function(inX,inY,inCol) {
	if(inCol == null) {
		inCol = 0;
	}
	if(inY == null) {
		inY = 10.0;
	}
	if(inX == null) {
		inX = 10.0;
	}
	this.memPeak = 0;
	openfl_text_TextField.call(this);
	this.set_x(inX);
	this.set_y(inY);
	this.set_selectable(false);
	this.set_defaultTextFormat(new openfl_text_TextFormat("_sans",12,inCol));
	this.set_text("FPS: ");
	this.times = [];
	this.addEventListener("enterFrame",$bind(this,this.onEnter));
	this.set_width(150);
	this.set_height(70);
};
$hxClasses["com.redpeakgames.cloud9.utils.FPS_Mem"] = com_redpeakgames_cloud9_utils_FPS_$Mem;
com_redpeakgames_cloud9_utils_FPS_$Mem.__name__ = ["com","redpeakgames","cloud9","utils","FPS_Mem"];
com_redpeakgames_cloud9_utils_FPS_$Mem.__super__ = openfl_text_TextField;
com_redpeakgames_cloud9_utils_FPS_$Mem.prototype = $extend(openfl_text_TextField.prototype,{
	times: null
	,memPeak: null
	,onEnter: function(_) {
		var now = new Date().getTime() / 1000;
		this.times.push(now);
		while(this.times[0] < now - 1) this.times.shift();
		var mem = Math.round(openfl_system_System.get_totalMemory() / 1024 / 1024 * 100) / 100;
		if(mem > this.memPeak) {
			this.memPeak = mem;
		}
		if(this.get_visible()) {
			this.set_text("FPS: " + this.times.length + "\nMEM: " + mem + " MB\nMEM peak: " + this.memPeak + " MB");
		}
	}
	,__class__: com_redpeakgames_cloud9_utils_FPS_$Mem
});
var com_redpeakgames_cloud9_utils_Http = function(url,onComplete,onError) {
	this.loader = new openfl_net_URLLoader();
	if(onComplete != null) {
		this.loader.addEventListener("complete",onComplete);
	}
	if(onError != null) {
		this.loader.addEventListener("ioError",onError);
		this.loader.addEventListener("securityError",onError);
	}
	this.urlrequest = new openfl_net_URLRequest();
	this.urlrequest.method = "POST";
	this.url = url;
};
$hxClasses["com.redpeakgames.cloud9.utils.Http"] = com_redpeakgames_cloud9_utils_Http;
com_redpeakgames_cloud9_utils_Http.__name__ = ["com","redpeakgames","cloud9","utils","Http"];
com_redpeakgames_cloud9_utils_Http.prototype = {
	loader: null
	,urlrequest: null
	,url: null
	,request: function(data) {
		this.urlrequest.url = this.url + "?t=" + openfl_Lib.getTimer();
		this.urlrequest.data = data;
		this.loader.load(this.urlrequest);
	}
	,__class__: com_redpeakgames_cloud9_utils_Http
};
var com_redpeakgames_cloud9_utils_Net = function(onComplete,onError) {
	this.onComplete = onComplete;
	this.onError = onError;
	this.loader = new openfl_net_URLLoader();
	this.loader.addEventListener("complete",onComplete);
	this.loader.addEventListener("ioError",onError);
	this.loader.addEventListener("securityError",onError);
	this.request = new openfl_net_URLRequest();
	this.request.method = "POST";
};
$hxClasses["com.redpeakgames.cloud9.utils.Net"] = com_redpeakgames_cloud9_utils_Net;
com_redpeakgames_cloud9_utils_Net.__name__ = ["com","redpeakgames","cloud9","utils","Net"];
com_redpeakgames_cloud9_utils_Net.prototype = {
	loader: null
	,request: null
	,key: null
	,gameId: null
	,uid: null
	,version: null
	,url: null
	,onComplete: null
	,onError: null
	,Key: null
	,GameId: null
	,Uid: null
	,Version: null
	,set_Key: function(key) {
		return this.key = key;
	}
	,set_GameId: function(gameId) {
		return this.gameId = gameId;
	}
	,set_Uid: function(uid) {
		return this.uid = uid;
	}
	,set_Version: function(version) {
		return this.version = version;
	}
	,spin: function(bet,lines,type) {
		if(this.gameId == 9999) {
			this.request.url = this.url + "mspin.php?t=" + openfl_Lib.getTimer();
		} else {
			this.request.url = this.url + "spin.php?t=" + openfl_Lib.getTimer();
		}
		var data = new openfl_net_URLVariables();
		data.uid = this.uid;
		data.sig = this.key;
		data.sid = this.gameId;
		data.unit = bet;
		data.lines = lines;
		data.version = this.version;
		if(this.gameId == 9999 && type != null) {
			data.type = type;
		}
		this.request.data = data;
		this.loader.load(this.request);
	}
	,jp: function() {
		this.request.url = this.url + "GetJackpotInfo";
		var data = new openfl_net_URLVariables();
		data.a_key = this.key;
		data.g_id = this.gameId;
		this.request.data = data;
		this.loader.load(this.request);
	}
	,clear: function() {
		this.loader.removeEventListener("complete",this.onComplete);
		this.loader.removeEventListener("ioError",this.onError);
		this.loader.removeEventListener("securityError",this.onError);
		this.onComplete = null;
		this.onComplete = null;
		this.loader = null;
		this.request = null;
	}
	,__class__: com_redpeakgames_cloud9_utils_Net
	,__properties__: {set_Version:"set_Version",set_Uid:"set_Uid",set_GameId:"set_GameId",set_Key:"set_Key"}
};
var com_redpeakgames_cloud9_utils_Number = function() {
};
$hxClasses["com.redpeakgames.cloud9.utils.Number"] = com_redpeakgames_cloud9_utils_Number;
com_redpeakgames_cloud9_utils_Number.__name__ = ["com","redpeakgames","cloud9","utils","Number"];
com_redpeakgames_cloud9_utils_Number.addCommaInt = function(num) {
	return com_redpeakgames_cloud9_utils_Number.addCommaStr(haxe__$Int64_Int64_$Impl_$.toString(num));
};
com_redpeakgames_cloud9_utils_Number.addCommaStr = function(numstr) {
	var result = "";
	while(numstr.length > 3) {
		result = "," + HxOverrides.substr(numstr,-3,null) + result;
		numstr = HxOverrides.substr(numstr,0,numstr.length - 3);
	}
	result = numstr + result;
	return result;
};
com_redpeakgames_cloud9_utils_Number.shortExpOnlyK = function(num,notAllowOrder) {
	return com_redpeakgames_cloud9_utils_Number.shortExpOnlyKStr(haxe__$Int64_Int64_$Impl_$.toString(num),notAllowOrder);
};
com_redpeakgames_cloud9_utils_Number.shortExpOnlyKStr = function(numstr,notAllowOrder) {
	var result = "";
	if(numstr.length > 3 && numstr.length > notAllowOrder) {
		numstr = HxOverrides.substr(numstr,0,numstr.length - 3);
		result = com_redpeakgames_cloud9_utils_Number.addCommaStr(numstr);
		result += "K";
	} else {
		result = com_redpeakgames_cloud9_utils_Number.addCommaStr(numstr);
	}
	return result;
};
com_redpeakgames_cloud9_utils_Number.shorten = function(num) {
	if(num < 1000) {
		return com_redpeakgames_cloud9_utils_Number.formatString(num == null?"null":"" + num);
	}
	if(num < 1000000) {
		return com_redpeakgames_cloud9_utils_Number.formatString(Std.string(num / 1000)) + "K";
	}
	return com_redpeakgames_cloud9_utils_Number.formatString(Std.string(num / 1000000)) + "M";
};
com_redpeakgames_cloud9_utils_Number.shortenString = function(num) {
	var fNum = parseFloat(num);
	if(fNum < 1000) {
		return com_redpeakgames_cloud9_utils_Number.formatString(num);
	}
	if(fNum < 1000000) {
		return com_redpeakgames_cloud9_utils_Number.formatString(Std.string(fNum / 1000)) + "K";
	}
	if(fNum < 1000000000) {
		return com_redpeakgames_cloud9_utils_Number.formatString(Std.string(fNum / 1000000)) + "M";
	}
	return com_redpeakgames_cloud9_utils_Number.formatString(Std.string(fNum / 1000000000)) + "B";
};
com_redpeakgames_cloud9_utils_Number.formatString = function(str) {
	if(str.indexOf(".") == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,str.indexOf(".") + 2);
	}
};
com_redpeakgames_cloud9_utils_Number.prototype = {
	__class__: com_redpeakgames_cloud9_utils_Number
};
var com_redpeakgames_cloud9_utils_SeManager = function(mute) {
	if(mute == null) {
		mute = false;
	}
	this.mute = mute;
	this.semap = new haxe_ds_StringMap();
};
$hxClasses["com.redpeakgames.cloud9.utils.SeManager"] = com_redpeakgames_cloud9_utils_SeManager;
com_redpeakgames_cloud9_utils_SeManager.__name__ = ["com","redpeakgames","cloud9","utils","SeManager"];
com_redpeakgames_cloud9_utils_SeManager.prototype = {
	mute: null
	,semap: null
	,load: function(sn,loop) {
		if(loop == null) {
			loop = 0;
		}
		var _this = this.semap;
		if((__map_reserved[sn] != null?_this.getReserved(sn):_this.h[sn]) == null) {
			var v = com_redpeakgames_cloud9_utils_CSound.get(sn,loop);
			var _this1 = this.semap;
			if(__map_reserved[sn] != null) {
				_this1.setReserved(sn,v);
			} else {
				_this1.h[sn] = v;
			}
		}
	}
	,play: function(sn,loop,fadeIn) {
		if(fadeIn == null) {
			fadeIn = 3;
		}
		if(loop == null) {
			loop = 0;
		}
		this.load(sn,loop);
		var tmp;
		var _this = this.semap;
		if((__map_reserved[sn] != null?_this.getReserved(sn):_this.h[sn]) != null) {
			tmp = this.mute == false;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = this.semap;
			(__map_reserved[sn] != null?_this1.getReserved(sn):_this1.h[sn]).play(fadeIn);
		}
	}
	,stop: function(sn) {
		var _this = this.semap;
		if((__map_reserved[sn] != null?_this.getReserved(sn):_this.h[sn]) != null) {
			var _this1 = this.semap;
			(__map_reserved[sn] != null?_this1.getReserved(sn):_this1.h[sn]).stop();
		}
	}
	,pause: function(sn) {
		var _this = this.semap;
		if((__map_reserved[sn] != null?_this.getReserved(sn):_this.h[sn]) != null) {
			var _this1 = this.semap;
			(__map_reserved[sn] != null?_this1.getReserved(sn):_this1.h[sn]).pause();
		}
	}
	,get_off: function() {
		return this.mute;
	}
	,set_off: function(value) {
		this.mute = value;
		return this.mute;
	}
	,clear: function() {
		if(this.semap != null) {
			var _this = this.semap;
			var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(tmp.hasNext()) tmp.next().clear();
			this.semap = null;
		}
	}
	,__class__: com_redpeakgames_cloud9_utils_SeManager
	,__properties__: {set_off:"set_off",get_off:"get_off"}
};
var com_redpeakgames_cloud9_utils_Trace = function() {
};
$hxClasses["com.redpeakgames.cloud9.utils.Trace"] = com_redpeakgames_cloud9_utils_Trace;
com_redpeakgames_cloud9_utils_Trace.__name__ = ["com","redpeakgames","cloud9","utils","Trace"];
com_redpeakgames_cloud9_utils_Trace.trace = function(url,uid,sig,at) {
	var http = new com_redpeakgames_cloud9_utils_Http(url + "trace.php");
	var data = new openfl_net_URLVariables();
	data.uid = uid;
	data.sig = sig;
	data.at = at;
	http.request(data);
};
com_redpeakgames_cloud9_utils_Trace.prototype = {
	__class__: com_redpeakgames_cloud9_utils_Trace
};
var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null?"null":"" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null?"null":"" + file;
		b.b += " line ";
		b.b += line == null?"null":"" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null?"null":"" + cname;
		b.b += ".";
		b.b += meth == null?"null":"" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null?"null":"" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function"?haxe_StackItem.LocalFunction():meth == "Global code"?null:haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,__class__: haxe_IMap
};
var haxe__$Int32_Int32_$Impl_$ = {};
$hxClasses["haxe._Int32.Int32_Impl_"] = haxe__$Int32_Int32_$Impl_$;
haxe__$Int32_Int32_$Impl_$.__name__ = ["haxe","_Int32","Int32_Impl_"];
haxe__$Int32_Int32_$Impl_$.mul = function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
haxe__$Int32_Int32_$Impl_$.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var haxe__$Int64_Int64_$Impl_$ = {};
$hxClasses["haxe._Int64.Int64_Impl_"] = haxe__$Int64_Int64_$Impl_$;
haxe__$Int64_Int64_$Impl_$.__name__ = ["haxe","_Int64","Int64_Impl_"];
haxe__$Int64_Int64_$Impl_$.toString = function(this1) {
	var i = this1;
	var b = new haxe__$Int64__$_$_$Int64(0,0);
	if(i.high == b.high && i.low == b.low) {
		return "0";
	}
	var str = "";
	var neg = false;
	if(i.high < 0) {
		neg = true;
	}
	var ten = new haxe__$Int64__$_$_$Int64(0,10);
	while(true) {
		var b1 = new haxe__$Int64__$_$_$Int64(0,0);
		if(!(i.high != b1.high || i.low != b1.low)) {
			break;
		}
		var r = haxe__$Int64_Int64_$Impl_$.divMod(i,ten);
		if(r.modulus.high < 0) {
			var x = r.modulus;
			var high = ~x.high;
			var low = -x.low;
			if(low == 0) {
				++high;
				high = high | 0;
			}
			str = new haxe__$Int64__$_$_$Int64(high,low).low + str;
			var x1 = r.quotient;
			var high1 = ~x1.high;
			var low1 = -x1.low;
			if(low1 == 0) {
				++high1;
				high1 = high1 | 0;
			}
			i = new haxe__$Int64__$_$_$Int64(high1,low1);
		} else {
			str = r.modulus.low + str;
			i = r.quotient;
		}
	}
	if(neg) {
		str = "-" + str;
	}
	return str;
};
haxe__$Int64_Int64_$Impl_$.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		switch(divisor.low) {
		case 0:
			throw new js__$Boot_HaxeError("divide by zero");
			break;
		case 1:
			return { quotient : new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low), modulus : new haxe__$Int64__$_$_$Int64(0,0)};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = -dividend.low;
		if(low == 0) {
			++high;
			high = high | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high,low);
	} else {
		modulus = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
	}
	if(divisor.high < 0) {
		var high1 = ~divisor.high;
		var low1 = -divisor.low;
		if(low1 == 0) {
			++high1;
			high1 = high1 | 0;
		}
		divisor = new haxe__$Int64__$_$_$Int64(high1,low1);
	} else {
		divisor = divisor;
	}
	var quotient = new haxe__$Int64__$_$_$Int64(0,0);
	var mask = new haxe__$Int64__$_$_$Int64(0,1);
	while(!(divisor.high < 0)) {
		var v = haxe__$Int32_Int32_$Impl_$.ucompare(divisor.high,modulus.high);
		var cmp = v != 0?v:haxe__$Int32_Int32_$Impl_$.ucompare(divisor.low,modulus.low);
		divisor = new haxe__$Int64__$_$_$Int64(divisor.high << 1 | divisor.low >>> 31,divisor.low << 1);
		mask = new haxe__$Int64__$_$_$Int64(mask.high << 1 | mask.low >>> 31,mask.low << 1);
		if(cmp >= 0) {
			break;
		}
	}
	while(true) {
		var b = new haxe__$Int64__$_$_$Int64(0,0);
		if(!(mask.high != b.high || mask.low != b.low)) {
			break;
		}
		var v1 = haxe__$Int32_Int32_$Impl_$.ucompare(modulus.high,divisor.high);
		if((v1 != 0?v1:haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low)) >= 0) {
			quotient = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
			var high2 = modulus.high - divisor.high | 0;
			var low2 = modulus.low - divisor.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low) < 0) {
				--high2;
				high2 = high2 | 0;
			}
			modulus = new haxe__$Int64__$_$_$Int64(high2,low2);
		}
		mask = new haxe__$Int64__$_$_$Int64(mask.high >>> 1,mask.high << 31 | mask.low >>> 1);
		divisor = new haxe__$Int64__$_$_$Int64(divisor.high >>> 1,divisor.high << 31 | divisor.low >>> 1);
	}
	if(divSign) {
		var high3 = ~quotient.high;
		var low3 = -quotient.low;
		if(low3 == 0) {
			++high3;
			high3 = high3 | 0;
		}
		quotient = new haxe__$Int64__$_$_$Int64(high3,low3);
	}
	if(dividend.high < 0) {
		var high4 = ~modulus.high;
		var low4 = -modulus.low;
		if(low4 == 0) {
			++high4;
			high4 = high4 | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high4,low4);
	}
	return { quotient : quotient, modulus : modulus};
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Int64Helper = function() { };
$hxClasses["haxe.Int64Helper"] = haxe_Int64Helper;
haxe_Int64Helper.__name__ = ["haxe","Int64Helper"];
haxe_Int64Helper.parseString = function(sParam) {
	var base = new haxe__$Int64__$_$_$Int64(0,10);
	var current = new haxe__$Int64__$_$_$Int64(0,0);
	var multiplier = new haxe__$Int64__$_$_$Int64(0,1);
	var sIsNegative = false;
	var s = StringTools.trim(sParam);
	if(s.charAt(0) == "-") {
		sIsNegative = true;
		s = s.substring(1,s.length);
	}
	var len = s.length;
	var _g1 = 0;
	while(_g1 < len) {
		var digitInt = HxOverrides.cca(s,len - 1 - _g1++) - 48;
		if(digitInt < 0 || digitInt > 9) {
			throw new js__$Boot_HaxeError("NumberFormatError");
		}
		var digit = new haxe__$Int64__$_$_$Int64(digitInt >> 31,digitInt);
		if(sIsNegative) {
			var al = multiplier.low & 65535;
			var ah = multiplier.low >>> 16;
			var bl = digit.low & 65535;
			var bh = digit.low >>> 16;
			var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
			var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
			var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
			var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
			var low = p00;
			var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
			p01 = p01 << 16;
			low = p00 + p01 | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
				++high;
				high = high | 0;
			}
			p10 = p10 << 16;
			low = low + p10 | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
				++high;
				high = high | 0;
			}
			high = high + (haxe__$Int32_Int32_$Impl_$.mul(multiplier.low,digit.high) + haxe__$Int32_Int32_$Impl_$.mul(multiplier.high,digit.low) | 0) | 0;
			var b = new haxe__$Int64__$_$_$Int64(high,low);
			var high1 = current.high - b.high | 0;
			var low1 = current.low - b.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(current.low,b.low) < 0) {
				--high1;
				high1 = high1 | 0;
			}
			current = new haxe__$Int64__$_$_$Int64(high1,low1);
			if(!(current.high < 0)) {
				throw new js__$Boot_HaxeError("NumberFormatError: Underflow");
			}
		} else {
			var al1 = multiplier.low & 65535;
			var ah1 = multiplier.low >>> 16;
			var bl1 = digit.low & 65535;
			var bh1 = digit.low >>> 16;
			var p001 = haxe__$Int32_Int32_$Impl_$.mul(al1,bl1);
			var p101 = haxe__$Int32_Int32_$Impl_$.mul(ah1,bl1);
			var p011 = haxe__$Int32_Int32_$Impl_$.mul(al1,bh1);
			var p111 = haxe__$Int32_Int32_$Impl_$.mul(ah1,bh1);
			var low2 = p001;
			var high2 = (p111 + (p011 >>> 16) | 0) + (p101 >>> 16) | 0;
			p011 = p011 << 16;
			low2 = p001 + p011 | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p011) < 0) {
				++high2;
				high2 = high2 | 0;
			}
			p101 = p101 << 16;
			low2 = low2 + p101 | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p101) < 0) {
				++high2;
				high2 = high2 | 0;
			}
			high2 = high2 + (haxe__$Int32_Int32_$Impl_$.mul(multiplier.low,digit.high) + haxe__$Int32_Int32_$Impl_$.mul(multiplier.high,digit.low) | 0) | 0;
			var b1 = new haxe__$Int64__$_$_$Int64(high2,low2);
			var high3 = current.high + b1.high | 0;
			var low3 = current.low + b1.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,current.low) < 0) {
				++high3;
				high3 = high3 | 0;
			}
			current = new haxe__$Int64__$_$_$Int64(high3,low3);
			if(current.high < 0) {
				throw new js__$Boot_HaxeError("NumberFormatError: Overflow");
			}
		}
		var al2 = multiplier.low & 65535;
		var ah2 = multiplier.low >>> 16;
		var bl2 = base.low & 65535;
		var bh2 = base.low >>> 16;
		var p002 = haxe__$Int32_Int32_$Impl_$.mul(al2,bl2);
		var p102 = haxe__$Int32_Int32_$Impl_$.mul(ah2,bl2);
		var p012 = haxe__$Int32_Int32_$Impl_$.mul(al2,bh2);
		var p112 = haxe__$Int32_Int32_$Impl_$.mul(ah2,bh2);
		var low4 = p002;
		var high4 = (p112 + (p012 >>> 16) | 0) + (p102 >>> 16) | 0;
		p012 = p012 << 16;
		low4 = p002 + p012 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,p012) < 0) {
			++high4;
			high4 = high4 | 0;
		}
		p102 = p102 << 16;
		low4 = low4 + p102 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,p102) < 0) {
			++high4;
			high4 = high4 | 0;
		}
		high4 = high4 + (haxe__$Int32_Int32_$Impl_$.mul(multiplier.low,base.high) + haxe__$Int32_Int32_$Impl_$.mul(multiplier.high,base.low) | 0) | 0;
		multiplier = new haxe__$Int64__$_$_$Int64(high4,low4);
	}
	return current;
};
haxe_Int64Helper.fromFloat = function(f) {
	if(isNaN(f) || !isFinite(f)) {
		throw new js__$Boot_HaxeError("Number is NaN or Infinite");
	}
	var noFractions = f - f % 1;
	if(noFractions > 9007199254740991) {
		throw new js__$Boot_HaxeError("Conversion overflow");
	}
	if(noFractions < -9007199254740991) {
		throw new js__$Boot_HaxeError("Conversion underflow");
	}
	var result = new haxe__$Int64__$_$_$Int64(0,0);
	var neg = noFractions < 0;
	var rest = neg?-noFractions:noFractions;
	var i = 0;
	while(rest >= 1) {
		var curr = rest % 2;
		rest /= 2;
		if(curr >= 1) {
			var a = new haxe__$Int64__$_$_$Int64(0,1);
			var b = i;
			b &= 63;
			var b1 = b == 0?new haxe__$Int64__$_$_$Int64(a.high,a.low):b < 32?new haxe__$Int64__$_$_$Int64(a.high << b | a.low >>> 32 - b,a.low << b):new haxe__$Int64__$_$_$Int64(a.low << b - 32,0);
			var high = result.high + b1.high | 0;
			var low = result.low + b1.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low,result.low) < 0) {
				++high;
				high = high | 0;
			}
			result = new haxe__$Int64__$_$_$Int64(high,low);
		}
		++i;
	}
	if(neg) {
		var high1 = ~result.high;
		var low1 = -result.low;
		if(low1 == 0) {
			++high1;
			high1 = high1 | 0;
		}
		result = new haxe__$Int64__$_$_$Int64(high1,low1);
	}
	return result;
};
haxe_Int64Helper.toFloat = function(i64) {
	var ret = 0;
	if(i64.low < 0) {
		ret += i64.low + 4294967296;
	} else {
		ret = i64.low + ret;
	}
	ret += i64.high * 4294967296;
	return ret;
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = ["haxe","Resource"];
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			return haxe_crypto_Base64.decode(x.data).toString();
		}
	}
	return null;
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null?_this.getReserved(s):_this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null?"null":"" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null?"null":"" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null?"null":"" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null?"null":"" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0?"m":"p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null?"null":"" + v2;
			}
			break;
		case 3:
			this.buf.b += v?"t":"f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = Type.getClassName(v);
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(Type.getEnumName(v));
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
			break;
		case 6:
			var c = _g[2];
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v.length;
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null?"null":"" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null?"null":"" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case List:
				this.buf.b += "l";
				var v3 = v;
				var _g_head = v3.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					this.serialize(val);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v4 = v;
				var tmp = v4.keys();
				while(tmp.hasNext()) {
					var k = tmp.next();
					this.buf.b += ":";
					this.buf.b += k == null?"null":"" + k;
					this.serialize(v4.h[k]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v5 = v;
				var tmp1 = v5.keys();
				while(tmp1.hasNext()) {
					var k1 = tmp1.next();
					var id = Reflect.field(k1,"__id__");
					Reflect.deleteField(k1,"__id__");
					this.serialize(k1);
					k1.__id__ = id;
					this.serialize(v5.h[k1.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v6 = v;
				var tmp2 = v6.keys();
				while(tmp2.hasNext()) {
					var k2 = tmp2.next();
					this.serializeString(k2);
					this.serialize(__map_reserved[k2] != null?v6.getReserved(k2):v6.h[k2]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v7 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v7.length * 8 / 6));
				this.buf.b += ":";
				var i1 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var length = haxe_Serializer.BASE64.length;
					b64 = new Array(length);
					var _g11 = 0;
					var _g3 = haxe_Serializer.BASE64.length;
					while(_g11 < _g3) {
						var i2 = _g11++;
						b64[i2] = HxOverrides.cca(haxe_Serializer.BASE64,i2);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i1 < max) {
					var b1 = v7.b[i1++];
					var b2 = v7.b[i1++];
					var b3 = v7.b[i1++];
					this.buf.b += String.fromCharCode(b64[b1 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCharCode(b64[b3 & 63]);
				}
				if(i1 == max) {
					var b11 = v7.b[i1++];
					var b21 = v7.b[i1++];
					this.buf.b += String.fromCharCode(b64[b11 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[b21 << 2 & 63]);
				} else if(i1 == max + 1) {
					var b12 = v7.b[i1++];
					this.buf.b += String.fromCharCode(b64[b12 >> 2]);
					this.buf.b += String.fromCharCode(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex?"j":"w");
			this.serializeString(Type.getEnumName(_g[2]));
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v[1]);
			} else {
				this.serializeString(v[0]);
			}
			this.buf.b += ":";
			var l1 = v.length;
			this.buf.b += Std.string(l1 - 2);
			var _g12 = 2;
			var _g4 = l1;
			while(_g12 < _g4) this.serialize(v[_g12++]);
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = new Date().getTime() / 1000;
	var r = f();
	haxe_Log.trace(new Date().getTime() / 1000 - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) {
			if(haxe__$Unserializer_NullResolver.instance == null) {
				haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
			}
			this.resolver = haxe__$Unserializer_NullResolver.instance;
		} else {
			this.resolver = r;
		}
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		var x = HxOverrides.substr(this.buf,p1,this.pos - p1);
		return parseFloat(x);
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			o[k] = this.unserialize();
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) h.set(this.unserialize(),this.unserialize());
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s] != null) {
					h1.setReserved(s,value);
				} else {
					h1.h[s] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2?rest - 1:0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s1 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s1 = decodeURIComponent(s1.split("+").join(" "));
			this.scache.push(s1);
			return s1;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe__$Unserializer_NullResolver = function() {
};
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = ["haxe","_Unserializer","NullResolver"];
haxe__$Unserializer_NullResolver.prototype = {
	resolveClass: function(name) {
		return null;
	}
	,resolveEnum: function(name) {
		return null;
	}
	,__class__: haxe__$Unserializer_NullResolver
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g1 = 0;
		while(_g1 < len) {
			++_g1;
			this.b[pos++] = value & 255;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var _g1 = 0;
		var _g = this.length < other.length?this.length:other.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	,initData: function() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		return new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				s += fcc((c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127);
			} else {
				var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,readString: function(pos,len) {
		return this.getString(pos,len);
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var _g1 = 0;
		var _g = "0123456789abcdef".length;
		while(_g1 < _g) chars.push(HxOverrides.cca("0123456789abcdef",_g1++));
		var _g11 = 0;
		var _g2 = this.length;
		while(_g11 < _g2) {
			var c = this.b[_g11++];
			s_b += String.fromCharCode(chars[c >> 4]);
			s_b += String.fromCharCode(chars[c & 15]);
		}
		return s_b;
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0?0:1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) tbl[_g++] = -1;
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i = _g1++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,String) ) {
				return false;
			} else throw(e);
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null?0:node._height);
		} else if(c < 0) {
			return this.balance(this.setLoop(k,v,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.setLoop(k,v,node.right));
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw new js__$Boot_HaxeError("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw new js__$Boot_HaxeError("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null?0:l._height;
		var hr = r == null?0:r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var tmp = _this == null?0:_this._height;
			var _this1 = l.right;
			if(tmp >= (_this1 == null?0:_this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var tmp1 = _this2 == null?0:_this2._height;
			var _this3 = r.left;
			if(tmp1 > (_this3 == null?0:_this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr?hl:hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var tmp1 = _this == null?0:_this._height;
		var _this1 = this.right;
		if(tmp1 > (_this1 == null?0:_this1._height)) {
			var _this2 = this.left;
			if(_this2 == null) {
				tmp = 0;
			} else {
				tmp = _this2._height;
			}
		} else {
			var _this3 = this.right;
			if(_this3 == null) {
				tmp = 0;
			} else {
				tmp = _this3._height;
			}
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) {
			return d;
		}
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,toString: function() {
		var s_b = "";
		s_b = "{";
		var keys = this.arrayKeys();
		var _g1 = 0;
		var _g = keys.length;
		while(_g1 < _g) {
			var i = _g1++;
			var k = keys[i];
			s_b += k == null?"null":"" + k;
			s_b += " => ";
			s_b += Std.string(Std.string(__map_reserved[k] != null?this.getReserved(k):this.h[k]));
			if(i < keys.length - 1) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0?-f:f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av = v < 0?-v:v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		i64.low = sig | 0;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | (sig / 4294967296.0 | 0);
	}
	return i64;
};
var haxe_xml__$Fast_NodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeAccess"] = haxe_xml__$Fast_NodeAccess;
haxe_xml__$Fast_NodeAccess.__name__ = ["haxe","xml","_Fast","NodeAccess"];
haxe_xml__$Fast_NodeAccess.prototype = {
	__x: null
	,__class__: haxe_xml__$Fast_NodeAccess
};
var haxe_xml__$Fast_AttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.AttribAccess"] = haxe_xml__$Fast_AttribAccess;
haxe_xml__$Fast_AttribAccess.__name__ = ["haxe","xml","_Fast","AttribAccess"];
haxe_xml__$Fast_AttribAccess.prototype = {
	__x: null
	,resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) {
			throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		}
		var v = this.__x.get(name);
		if(v == null) {
			var _this = this.__x;
			if(_this.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _this.nodeType);
			}
			throw new js__$Boot_HaxeError(_this.nodeName + " is missing attribute " + name);
		}
		return v;
	}
	,__class__: haxe_xml__$Fast_AttribAccess
};
var haxe_xml__$Fast_HasAttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasAttribAccess"] = haxe_xml__$Fast_HasAttribAccess;
haxe_xml__$Fast_HasAttribAccess.__name__ = ["haxe","xml","_Fast","HasAttribAccess"];
haxe_xml__$Fast_HasAttribAccess.prototype = {
	__x: null
	,__class__: haxe_xml__$Fast_HasAttribAccess
};
var haxe_xml__$Fast_HasNodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasNodeAccess"] = haxe_xml__$Fast_HasNodeAccess;
haxe_xml__$Fast_HasNodeAccess.__name__ = ["haxe","xml","_Fast","HasNodeAccess"];
haxe_xml__$Fast_HasNodeAccess.prototype = {
	__x: null
	,__class__: haxe_xml__$Fast_HasNodeAccess
};
var haxe_xml__$Fast_NodeListAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeListAccess"] = haxe_xml__$Fast_NodeListAccess;
haxe_xml__$Fast_NodeListAccess.__name__ = ["haxe","xml","_Fast","NodeListAccess"];
haxe_xml__$Fast_NodeListAccess.prototype = {
	__x: null
	,__class__: haxe_xml__$Fast_NodeListAccess
};
var haxe_xml_Fast = function(x) {
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Invalid nodeType " + x.nodeType);
	}
	this.x = x;
	this.node = new haxe_xml__$Fast_NodeAccess(x);
	this.nodes = new haxe_xml__$Fast_NodeListAccess(x);
	this.att = new haxe_xml__$Fast_AttribAccess(x);
	this.has = new haxe_xml__$Fast_HasAttribAccess(x);
	this.hasNode = new haxe_xml__$Fast_HasNodeAccess(x);
};
$hxClasses["haxe.xml.Fast"] = haxe_xml_Fast;
haxe_xml_Fast.__name__ = ["haxe","xml","Fast"];
haxe_xml_Fast.prototype = {
	x: null
	,node: null
	,nodes: null
	,att: null
	,has: null
	,hasNode: null
	,__class__: haxe_xml_Fast
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	while(_g1 < position) {
		var c = xml.charCodeAt(_g1++);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(tmp)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + tmp + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				parent.addChild(Xml.createProcessingInstruction(HxOverrides.substr(str,start + 1,p - start - 2)));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createCData(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					buf.b += String.fromCharCode(s.charCodeAt(1) == 120?Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)):Std.parseInt(HxOverrides.substr(s,1,s.length - 1)));
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null?_this.existsReserved(s):_this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						buf.b += Std.string(__map_reserved[s] != null?_this1.getReserved(s):_this1.h[s]);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null?i.fileName + ":" + i.lineNumber + ": ":"";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class && o.__name__ != null) {
			return true;
		}
		if(cl == Enum && o.__ename__ != null) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		return s;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) this.a[_g1++] = 0;
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	new Uint8Array(result).set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null?0:byteOffset;
	this.length = byteLength == null?buffer.byteLength - this.offset:byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0?value + 128 & 255:value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Float32Array = function() { };
$hxClasses["js.html.compat.Float32Array"] = js_html_compat_Float32Array;
js_html_compat_Float32Array.__name__ = ["js","html","compat","Float32Array"];
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_audio_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime__$backend_html5_HTML5Application.prototype = {
	gameDeviceCache: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 144:
			return 1073741907;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		return keyCode;
	}
	,create: function(config) {
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,getFrameRate: function() {
		if(this.framePeriod < 0) {
			return 60;
		} else if(this.framePeriod == 1000) {
			return 0;
		} else {
			return 1000 / this.framePeriod;
		}
	}
	,handleApplicationEvent: function(__) {
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			this.parent.onUpdate.dispatch(this.deltaTime | 0);
			if(this.parent.__renderers[0] != null) {
				this.parent.__renderers[0].onRender.dispatch();
				this.parent.__renderers[0].flip();
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") {
				this.parent.__windows[0].onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__windows[0].onKeyDown.canceled) {
					event.preventDefault();
				}
			} else {
				this.parent.__windows[0].onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__windows[0].onKeyUp.canceled) {
					event.preventDefault();
				}
			}
		}
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__windows[0] != null) {
			switch(event.type) {
			case "beforeunload":
				this.parent.__windows[0].onClose.dispatch();
				break;
			case "blur":
				this.parent.__windows[0].onFocusOut.dispatch();
				this.parent.__windows[0].onDeactivate.dispatch();
				break;
			case "focus":
				this.parent.__windows[0].onFocusIn.dispatch();
				this.parent.__windows[0].onActivate.dispatch();
				break;
			case "resize":
				var cacheWidth = this.parent.__windows[0].__width;
				var cacheHeight = this.parent.__windows[0].__height;
				this.parent.__windows[0].backend.handleResize();
				if(this.parent.__windows[0].__width != cacheWidth || this.parent.__windows[0].__height != cacheHeight) {
					this.parent.__windows[0].onResize.dispatch(this.parent.__windows[0].__width,this.parent.__windows[0].__height);
				}
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) {
			this.framePeriod = -1;
		} else if(value > 0) {
			this.framePeriod = 1000 / value;
		} else {
			this.framePeriod = 1000;
		}
		return value;
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g1 = 0;
		var _g = devices.length;
		while(_g1 < _g) {
			var i = _g1++;
			data = devices[i];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(i)) {
				cache = new lime__$backend_html5_GameDeviceData();
				cache.id = i;
				cache.connected = data.connected;
				var _g3 = 0;
				var _g2 = data.buttons.length;
				while(_g3 < _g2) cache.buttons.push(data.buttons[_g3++].value);
				var _g31 = 0;
				var _g21 = data.axes.length;
				while(_g31 < _g21) cache.axes.push(data.axes[_g31++]);
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[i] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(i);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(i);
					}
				}
			}
			cache = this.gameDeviceCache.h[i];
			joystick = lime_ui_Joystick.devices.h[i];
			gamepad = lime_ui_Gamepad.devices.h[i];
			if(data.connected) {
				var button;
				var value;
				var _g32 = 0;
				var _g22 = data.buttons.length;
				while(_g32 < _g22) {
					var i1 = _g32++;
					value = data.buttons[i1].value;
					if(value != cache.buttons[i1]) {
						if(i1 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i1 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i1);
							} else {
								joystick.onButtonUp.dispatch(i1);
							}
							if(gamepad != null) {
								switch(i1) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i1] = value;
					}
				}
				var _g33 = 0;
				var _g23 = data.axes.length;
				while(_g33 < _g23) {
					var i2 = _g33++;
					if(data.axes[i2] != cache.axes[i2]) {
						joystick.onAxisMove.dispatch(i2,data.axes[i2]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i2,data.axes[i2]);
						}
						cache.axes[i2] = data.axes[i2];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(i);
				lime_ui_Gamepad.__disconnect(i);
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime__$backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._backend.html5.GameDeviceData"] = lime__$backend_html5_GameDeviceData;
lime__$backend_html5_GameDeviceData.__name__ = ["lime","_backend","html5","GameDeviceData"];
lime__$backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$backend_html5_GameDeviceData
};
var lime__$backend_html5_HTML5AudioSource = function(parent) {
	this.parent = parent;
	this.gain = 1;
	this.position = new lime_math_Vector4();
};
$hxClasses["lime._backend.html5.HTML5AudioSource"] = lime__$backend_html5_HTML5AudioSource;
lime__$backend_html5_HTML5AudioSource.__name__ = ["lime","_backend","html5","HTML5AudioSource"];
lime__$backend_html5_HTML5AudioSource.prototype = {
	completed: null
	,gain: null
	,id: null
	,length: null
	,loops: null
	,parent: null
	,playing: null
	,position: null
	,dispose: function() {
	}
	,init: function() {
	}
	,play: function() {
		if(this.playing || this.parent.buffer == null) {
			return;
		}
		this.playing = true;
		var time = this.getCurrentTime();
		this.completed = false;
		this.id = this.parent.buffer.__srcHowl.play();
		this.setGain(this.parent.get_gain());
		this.setPosition(this.parent.get_position());
		this.parent.buffer.__srcHowl.on("end",$bind(this,this.howl_onEnd),this.id);
		this.setCurrentTime(time);
	}
	,pause: function() {
		this.playing = false;
		this.parent.buffer.__srcHowl.pause(this.id);
	}
	,stop: function() {
		this.playing = false;
		this.parent.buffer.__srcHowl.stop(this.id);
	}
	,howl_onEnd: function() {
		this.playing = false;
		if(this.loops > 0) {
			this.loops--;
			this.stop();
			this.play();
			return;
		} else {
			this.parent.buffer.__srcHowl.stop(this.id);
		}
		this.completed = true;
		this.parent.onComplete.dispatch();
	}
	,getCurrentTime: function() {
		if(this.completed) {
			return this.getLength();
		} else {
			var time = (this.parent.buffer.__srcHowl.seek(this.id) * 1000 | 0) - this.parent.offset;
			if(time < 0) {
				return 0;
			}
			return time;
		}
	}
	,setCurrentTime: function(value) {
		if(this.parent.buffer != null) {
			var pos = (value + this.parent.offset) / 1000;
			if(pos < 0) {
				pos = 0;
			}
			this.parent.buffer.__srcHowl.seek(pos,this.id);
		}
		return value;
	}
	,getGain: function() {
		return this.gain;
	}
	,setGain: function(value) {
		if(this.parent.buffer != null) {
			this.parent.buffer.__srcHowl.volume(value,this.id);
		}
		return this.gain = value;
	}
	,getLength: function() {
		if(this.length != 0) {
			return this.length;
		}
		return this.parent.buffer.__srcHowl.duration() * 1000 | 0;
	}
	,setLength: function(value) {
		return this.length = value;
	}
	,getLoops: function() {
		return this.loops;
	}
	,setLoops: function(value) {
		return this.loops = value;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(value) {
		this.position.x = value.x;
		this.position.y = value.y;
		this.position.z = value.z;
		this.position.w = value.w;
		return this.position;
	}
	,__class__: lime__$backend_html5_HTML5AudioSource
};
var lime__$backend_html5_HTML5HTTPRequest = function() {
};
$hxClasses["lime._backend.html5.HTML5HTTPRequest"] = lime__$backend_html5_HTML5HTTPRequest;
lime__$backend_html5_HTML5HTTPRequest.__name__ = ["lime","_backend","html5","HTML5HTTPRequest"];
lime__$backend_html5_HTML5HTTPRequest.prototype = {
	binary: null
	,parent: null
	,request: null
	,cancel: function() {
		if(this.request != null) {
			this.request.abort();
		}
	}
	,init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		this.request.addEventListener("progress",progress,false);
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var tmp = this.parent.formData.keys();
			while(tmp.hasNext()) {
				var key = tmp.next();
				if(query.length > 0) {
					query += "&";
				}
				var tmp1 = encodeURIComponent(key) + "=";
				var _this = this.parent.formData;
				var s = Std.string(__map_reserved[key] != null?_this.getReserved(key):_this.h[key]);
				query += tmp1 + encodeURIComponent(s);
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) {
					uri += "&" + query;
				} else {
					uri += "?" + query;
				}
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) {
			this.request.timeout = this.parent.timeout;
		}
		if(this.binary) {
			this.request.responseType = "arraybuffer";
		}
		var hasContentType = false;
		var _g = 0;
		var _g1 = this.parent.headers;
		while(_g < _g1.length) {
			var header = _g1[_g];
			++_g;
			if(header.name == "Content-Type") {
				hasContentType = true;
			}
			this.request.setRequestHeader(header.name,header.value);
		}
		if(!hasContentType) {
			this.request.setRequestHeader("Content-Type",this.parent.contentType);
		}
		if(this.parent.data != null) {
			this.request.send(this.parent.data.b.bufferValue);
		} else {
			this.request.send(query);
		}
	}
	,loadData: function(uri) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && _gthis.request.status >= 200 && _gthis.request.status <= 400) {
				var bytes = _gthis.request.responseType == ""?haxe_io_Bytes.ofString(_gthis.request.responseText):haxe_io_Bytes.ofData(_gthis.request.response);
				_gthis.processResponse();
				promise.complete(bytes);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
		return promise.future;
	}
	,loadText: function(uri) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && _gthis.request.status >= 200 && _gthis.request.status <= 400) {
				_gthis.processResponse();
				promise.complete(_gthis.request.responseText);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim(HxOverrides.substr(line,0,line.indexOf(":")));
				value = StringTools.trim(HxOverrides.substr(line,line.indexOf(":") + 1,null));
				if(name != "") {
					this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
				}
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__class__: lime__$backend_html5_HTML5HTTPRequest
};
var lime__$backend_html5_HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
lime__$backend_html5_HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime__$backend_html5_HTML5Mouse.hide = function() {
	if(!lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime_app_Application.current.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime__$backend_html5_HTML5Mouse.show = function() {
	if(lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = false;
		var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
		lime__$backend_html5_HTML5Mouse.__cursor = null;
		lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue);
	}
};
lime__$backend_html5_HTML5Mouse.warp = function(x,y,window) {
};
lime__$backend_html5_HTML5Mouse.get_cursor = function() {
	if(lime__$backend_html5_HTML5Mouse.__cursor == null) {
		return lime_ui_MouseCursor.DEFAULT;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
	if(lime__$backend_html5_HTML5Mouse.__cursor != value) {
		if(!lime__$backend_html5_HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime_app_Application.current.__windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				var tmp;
				switch(value[1]) {
				case 0:
					tmp = "default";
					break;
				case 1:
					tmp = "crosshair";
					break;
				case 3:
					tmp = "move";
					break;
				case 4:
					tmp = "pointer";
					break;
				case 5:
					tmp = "nesw-resize";
					break;
				case 6:
					tmp = "ns-resize";
					break;
				case 7:
					tmp = "nwse-resize";
					break;
				case 8:
					tmp = "ew-resize";
					break;
				case 9:
					tmp = "text";
					break;
				case 10:
					tmp = "wait";
					break;
				case 11:
					tmp = "wait";
					break;
				default:
					tmp = "auto";
				}
				$window.backend.element.style.cursor = tmp;
			}
		}
		lime__$backend_html5_HTML5Mouse.__cursor = value;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.get_lock = function() {
	return false;
};
lime__$backend_html5_HTML5Mouse.set_lock = function(value) {
	return value;
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime__$backend_html5_HTML5Renderer.prototype = {
	parent: null
	,create: function() {
		this.createContext();
		if(this.parent.context[1] == 0) {
			this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
			this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) {
			this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
			this.parent.type = lime_graphics_RendererType.DOM;
		} else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			if(!Object.prototype.hasOwnProperty.call(this.parent.window.config,"hardware") || this.parent.window.config.hardware) {
				var options = { alpha : Object.prototype.hasOwnProperty.call(this.parent.window.config,"background") && this.parent.window.config.background == null, antialias : Object.prototype.hasOwnProperty.call(this.parent.window.config,"antialiasing") && this.parent.window.config.antialiasing > 0, depth : Object.prototype.hasOwnProperty.call(this.parent.window.config,"depthBuffer")?this.parent.window.config.depthBuffer:true, premultipliedAlpha : true, stencil : Object.prototype.hasOwnProperty.call(this.parent.window.config,"stencilBuffer") && this.parent.window.config.stencilBuffer, preserveDrawingBuffer : false};
				var _g = 0;
				var _g1 = ["webgl2","webgl","experimental-webgl"];
				while(_g < _g1.length) {
					var name = _g1[_g];
					++_g;
					webgl = this.parent.window.backend.canvas.getContext(name,options);
					if(webgl != null) {
						break;
					}
				}
			}
			if(webgl == null) {
				this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
				this.parent.type = lime_graphics_RendererType.CANVAS;
			} else {
				lime_graphics_opengl_GL.context = webgl;
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
				this.parent.type = lime_graphics_RendererType.OPENGL;
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		switch(event.type) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			this.parent.onContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,readPixels: function(rect) {
		if(this.parent.window.backend.canvas != null) {
			if(rect == null) {
				rect = new lime_math_Rectangle(0,0,this.parent.window.backend.canvas.width,this.parent.window.backend.canvas.height);
			} else {
				rect.__contract(0,0,this.parent.window.backend.canvas.width,this.parent.window.backend.canvas.height);
			}
			if(rect.width > 0 && rect.height > 0) {
				var canvas = window.document.createElement("canvas");
				canvas.width = rect.width | 0;
				canvas.height = rect.height | 0;
				var context = canvas.getContext("2d");
				context.drawImage(this.parent.window.backend.canvas,-rect.x,-rect.y);
				return lime_graphics_Image.fromCanvas(canvas);
			}
		}
		return null;
	}
	,render: function() {
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) {
		this.element = parent.config.element;
	}
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"allowHighDPI") && parent.config.allowHighDPI) {
		this.scale = window.devicePixelRatio;
	}
	parent.__scale = this.scale;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime__$backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,element: null
	,cacheMouseX: null
	,cacheMouseY: null
	,currentTouches: null
	,enableTextEvents: null
	,parent: null
	,primaryTouch: null
	,scale: null
	,setHeight: null
	,setWidth: null
	,unusedTouchesPool: null
	,alert: function(message,title) {
		if(message != null) {
			js_Browser.alert(message);
		}
	}
	,close: function() {
		this.parent.application.removeWindow(this.parent);
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) {
			this.canvas = this.element;
		} else {
			this.canvas = window.document.createElement("canvas");
		}
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = Math.round(this.parent.__width * this.scale);
			this.canvas.height = Math.round(this.parent.__height * this.scale);
			this.canvas.style.width = this.parent.__width + "px";
			this.canvas.style.height = this.parent.__height + "px";
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) {
					this.element.appendChild(this.canvas);
				}
			} else {
				this.element.appendChild(this.div);
			}
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
			this.element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
		}
	}
	,focus: function() {
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getEnableTextEvents: function() {
		return this.enableTextEvents;
	}
	,handleContextMenuEvent: function(event) {
		if(this.parent.onMouseUp.canceled) {
			event.preventDefault();
		}
	}
	,handleFocusEvent: function(event) {
		if(this.enableTextEvents) {
			haxe_Timer.delay(function() {
				lime__$backend_html5_HTML5Window.textInput.focus();
			},20);
		}
	}
	,handleGamepadEvent: function(event) {
		switch(event.type) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleCutOrCopyEvent: function(event) {
		event.clipboardData.setData("text/plain",lime_system_Clipboard.get_text());
		event.preventDefault();
	}
	,handlePasteEvent: function(event) {
		if(event.clipboardData.types.indexOf("text/plain") > -1) {
			var text = lime_system_Clipboard.set_text(event.clipboardData.getData("text/plain"));
			this.parent.onTextInput.dispatch(text);
			event.preventDefault();
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$backend_html5_HTML5Window.textInput.value != lime__$backend_html5_HTML5Window.dummyCharacter) {
			if(lime__$backend_html5_HTML5Window.textInput.value.charAt(0) == lime__$backend_html5_HTML5Window.dummyCharacter) {
				this.parent.onTextInput.dispatch(HxOverrides.substr(lime__$backend_html5_HTML5Window.textInput.value,1,null));
			} else {
				this.parent.onTextInput.dispatch(lime__$backend_html5_HTML5Window.textInput.value);
			}
			lime__$backend_html5_HTML5Window.textInput.value = lime__$backend_html5_HTML5Window.dummyCharacter;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				this.parent.onMouseDown.dispatch(x,y,event.button);
				if(this.parent.onMouseDown.canceled) {
					event.preventDefault();
				}
				break;
			case "mouseenter":
				if(event.target == this.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "mouseleave":
				if(event.target == this.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if(this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "mouseup":
				this.parent.onMouseUp.dispatch(x,y,event.button);
				if(this.parent.onMouseUp.canceled) {
					event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY);
			if(this.parent.onMouseWheel.canceled) {
				event.preventDefault();
			}
		}
	}
	,handleResize: function() {
		this.primaryTouch = null;
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = Math.round(this.element.clientWidth * this.scale);
							this.canvas.height = Math.round(this.element.clientHeight * this.scale);
							this.canvas.style.width = this.element.clientWidth + "px";
							this.canvas.style.height = this.element.clientHeight + "px";
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.setWidth != 0?this.element.clientWidth / this.setWidth:1;
				var scaleY = this.setHeight != 0?this.element.clientHeight / this.setHeight:1;
				var targetWidth = this.element.clientWidth;
				var targetHeight = this.element.clientHeight;
				var marginLeft = 0;
				var marginTop = 0;
				if(scaleX < scaleY) {
					targetHeight = Math.floor(this.setHeight * scaleX);
					marginTop = Math.floor((this.element.clientHeight - targetHeight) / 2);
				} else {
					targetWidth = Math.floor(this.setWidth * scaleY);
					marginLeft = Math.floor((this.element.clientWidth - targetWidth) / 2);
				}
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = targetWidth + "px";
						this.canvas.style.height = targetHeight + "px";
						this.canvas.style.marginLeft = marginLeft + "px";
						this.canvas.style.marginTop = marginTop + "px";
					}
				} else {
					this.div.style.width = targetWidth + "px";
					this.div.style.height = targetHeight + "px";
					this.div.style.marginLeft = marginLeft + "px";
					this.div.style.marginTop = marginTop + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var rect = null;
		if(this.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			var x = 0.0;
			var y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			switch(event.type) {
			case "touchend":
				var touch = this.currentTouches.h[data.identifier];
				if(touch != null) {
					var cacheX = touch.x;
					var cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					lime_ui_Touch.onEnd.dispatch(touch);
					this.currentTouches.remove(data.identifier);
					this.unusedTouchesPool.add(touch);
					if(touch == this.primaryTouch) {
						this.parent.onMouseUp.dispatch(x,y,0);
						this.primaryTouch = null;
					}
				}
				break;
			case "touchmove":
				var touch1 = this.currentTouches.h[data.identifier];
				if(touch1 != null) {
					var cacheX1 = touch1.x;
					var cacheY1 = touch1.y;
					touch1.x = x / windowWidth;
					touch1.y = y / windowHeight;
					touch1.dx = touch1.x - cacheX1;
					touch1.dy = touch1.y - cacheY1;
					touch1.pressure = data.force;
					lime_ui_Touch.onMove.dispatch(touch1);
					if(touch1 == this.primaryTouch) {
						this.parent.onMouseMove.dispatch(x,y);
					}
				}
				break;
			case "touchstart":
				var touch2 = this.unusedTouchesPool.pop();
				if(touch2 == null) {
					touch2 = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch2.x = x / windowWidth;
					touch2.y = y / windowHeight;
					touch2.id = data.identifier;
					touch2.dx = 0;
					touch2.dy = 0;
					touch2.pressure = data.force;
					touch2.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch2;
				lime_ui_Touch.onStart.dispatch(touch2);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch2;
				}
				if(touch2 == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
				break;
			default:
			}
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setBorderless: function(value) {
		return value;
	}
	,setEnableTextEvents: function(value) {
		if(value) {
			if(lime__$backend_html5_HTML5Window.textInput == null) {
				lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$backend_html5_HTML5Window.textInput.type = "text";
				lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$backend_html5_HTML5Window.textInput.value = lime__$backend_html5_HTML5Window.dummyCharacter;
				lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
				window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
			}
			if(!this.enableTextEvents) {
				lime__$backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("paste",$bind(this,this.handlePasteEvent),true);
			}
			lime__$backend_html5_HTML5Window.textInput.focus();
			lime__$backend_html5_HTML5Window.textInput.select();
		} else if(lime__$backend_html5_HTML5Window.textInput != null) {
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("paste",$bind(this,this.handlePasteEvent),true);
			lime__$backend_html5_HTML5Window.textInput.blur();
		}
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		return false;
	}
	,setIcon: function(image) {
	}
	,setMaximized: function(value) {
		return false;
	}
	,setMinimized: function(value) {
		return false;
	}
	,setResizable: function(value) {
		return value;
	}
	,setTitle: function(value) {
		return value;
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime__$macros_AssetsMacro = function() { };
$hxClasses["lime._macros.AssetsMacro"] = lime__$macros_AssetsMacro;
lime__$macros_AssetsMacro.__name__ = ["lime","_macros","AssetsMacro"];
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	addRenderer: null
	,addWindow: null
	,registerModule: null
	,removeRenderer: null
	,removeWindow: null
	,setPreloader: null
	,unregisterModule: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
	this.__renderers = [];
	this.__windows = [];
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,__application: null
	,__preloader: null
	,__renderers: null
	,__windows: null
	,addRenderer: function(renderer) {
		var f = $bind(this,this.render);
		var a1 = renderer;
		renderer.onRender.add(function() {
			f(a1);
		});
		var f1 = $bind(this,this.onRenderContextLost);
		var a11 = renderer;
		renderer.onContextLost.add(function() {
			f1(a11);
		});
		var f2 = $bind(this,this.onRenderContextRestored);
		var a12 = renderer;
		renderer.onContextRestored.add(function(a2) {
			f2(a12,a2);
		});
		this.__renderers.push(renderer);
	}
	,addWindow: function(window) {
		var f = $bind(this,this.onWindowActivate);
		var a1 = window;
		window.onActivate.add(function() {
			f(a1);
		});
		var f1 = $bind(this,this.__onWindowClose);
		var a11 = window;
		window.onClose.add(function() {
			f1(a11);
		});
		var f2 = $bind(this,this.onWindowCreate);
		var a12 = window;
		window.onCreate.add(function() {
			f2(a12);
		});
		var f3 = $bind(this,this.onWindowDeactivate);
		var a13 = window;
		window.onDeactivate.add(function() {
			f3(a13);
		});
		var f4 = $bind(this,this.onWindowDropFile);
		var a14 = window;
		window.onDropFile.add(function(a2) {
			f4(a14,a2);
		});
		var f5 = $bind(this,this.onWindowEnter);
		var a15 = window;
		window.onEnter.add(function() {
			f5(a15);
		});
		var f6 = $bind(this,this.onWindowFocusIn);
		var a16 = window;
		window.onFocusIn.add(function() {
			f6(a16);
		});
		var f7 = $bind(this,this.onWindowFocusOut);
		var a17 = window;
		window.onFocusOut.add(function() {
			f7(a17);
		});
		var f8 = $bind(this,this.onWindowFullscreen);
		var a18 = window;
		window.onFullscreen.add(function() {
			f8(a18);
		});
		var f9 = $bind(this,this.onKeyDown);
		var a19 = window;
		window.onKeyDown.add(function(a21,a3) {
			f9(a19,a21,a3);
		});
		var f10 = $bind(this,this.onKeyUp);
		var a110 = window;
		window.onKeyUp.add(function(a22,a31) {
			f10(a110,a22,a31);
		});
		var f11 = $bind(this,this.onWindowLeave);
		var a111 = window;
		window.onLeave.add(function() {
			f11(a111);
		});
		var f12 = $bind(this,this.onWindowMinimize);
		var a112 = window;
		window.onMinimize.add(function() {
			f12(a112);
		});
		var f13 = $bind(this,this.onMouseDown);
		var a113 = window;
		window.onMouseDown.add(function(x,y,a23) {
			f13(a113,x,y,a23);
		});
		var f14 = $bind(this,this.onMouseMove);
		var a114 = window;
		window.onMouseMove.add(function(x1,y1) {
			f14(a114,x1,y1);
		});
		var f15 = $bind(this,this.onMouseMoveRelative);
		var a115 = window;
		window.onMouseMoveRelative.add(function(x2,y2) {
			f15(a115,x2,y2);
		});
		var f16 = $bind(this,this.onMouseUp);
		var a116 = window;
		window.onMouseUp.add(function(x3,y3,a24) {
			f16(a116,x3,y3,a24);
		});
		var f17 = $bind(this,this.onMouseWheel);
		var a117 = window;
		window.onMouseWheel.add(function(a25,a32) {
			f17(a117,a25,a32);
		});
		var f18 = $bind(this,this.onWindowMove);
		var a118 = window;
		window.onMove.add(function(x4,y4) {
			f18(a118,x4,y4);
		});
		var f19 = $bind(this,this.onWindowResize);
		var a119 = window;
		window.onResize.add(function(a26,a33) {
			f19(a119,a26,a33);
		});
		var f20 = $bind(this,this.onWindowRestore);
		var a120 = window;
		window.onRestore.add(function() {
			f20(a120);
		});
		var f21 = $bind(this,this.onTextEdit);
		var a121 = window;
		window.onTextEdit.add(function(a27,a34,a4) {
			f21(a121,a27,a34,a4);
		});
		var f22 = $bind(this,this.onTextInput);
		var a122 = window;
		window.onTextInput.add(function(a28) {
			f22(a122,a28);
		});
		if(window.id > -1) {
			this.onWindowCreate(window);
		}
		this.__windows.push(window);
	}
	,registerModule: function(application) {
		this.__application = application;
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onUpdate.add($bind(this,this.update));
		var tmp = lime_ui_Gamepad.devices.iterator();
		while(tmp.hasNext()) this.__onGamepadConnect(tmp.next());
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var tmp1 = lime_ui_Joystick.devices.iterator();
		while(tmp1.hasNext()) this.__onJoystickConnect(tmp1.next());
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && this.__renderers.indexOf(renderer) > -1) {
			HxOverrides.remove(this.__renderers,renderer);
		}
	}
	,removeWindow: function(window) {
		if(window != null && this.__windows.indexOf(window) > -1) {
			HxOverrides.remove(this.__windows,window);
		}
	}
	,setPreloader: function(preloader) {
		if(this.__preloader != null) {
			this.__preloader.onProgress.remove($bind(this,this.onPreloadProgress));
			this.__preloader.onComplete.remove($bind(this,this.onPreloadComplete));
		}
		this.__preloader = preloader;
		if(preloader == null || preloader.complete) {
			this.onPreloadComplete();
		} else {
			preloader.onProgress.add($bind(this,this.onPreloadProgress));
			preloader.onComplete.add($bind(this,this.onPreloadComplete));
		}
	}
	,unregisterModule: function(application) {
		this.__application.onExit.remove($bind(this,this.onModuleExit));
		this.__application.onUpdate.remove($bind(this,this.update));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Joystick.onConnect.remove($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
		this.onModuleExit(0);
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
	}
	,onKeyUp: function(window,keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(window,x,y,button) {
	}
	,onMouseMove: function(window,x,y) {
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function(window) {
	}
	,onWindowClose: function(window) {
	}
	,onWindowCreate: function(window) {
	}
	,onWindowDeactivate: function(window) {
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
	}
	,onWindowFocusOut: function(window) {
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowResize: function(window,width,height) {
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
	}
	,update: function(deltaTime) {
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		gamepad.onAxisMove.add(function(a2,a3) {
			f(a1,a2,a3);
		});
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		gamepad.onButtonDown.add(function(a21) {
			f1(a11,a21);
		});
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		gamepad.onButtonUp.add(function(a22) {
			f2(a12,a22);
		});
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		gamepad.onDisconnect.add(function() {
			f3(a13);
		});
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var f = $bind(this,this.onJoystickAxisMove);
		var a1 = joystick;
		joystick.onAxisMove.add(function(a2,a3) {
			f(a1,a2,a3);
		});
		var f1 = $bind(this,this.onJoystickButtonDown);
		var a11 = joystick;
		joystick.onButtonDown.add(function(a21) {
			f1(a11,a21);
		});
		var f2 = $bind(this,this.onJoystickButtonUp);
		var a12 = joystick;
		joystick.onButtonUp.add(function(a22) {
			f2(a12,a22);
		});
		var f3 = $bind(this,this.onJoystickDisconnect);
		var a13 = joystick;
		joystick.onDisconnect.add(function() {
			f3(a13);
		});
		var f4 = $bind(this,this.onJoystickHatMove);
		var a14 = joystick;
		joystick.onHatMove.add(function(a23,a31) {
			f4(a14,a23,a31);
		});
		var f5 = $bind(this,this.onJoystickTrackballMove);
		var a15 = joystick;
		joystick.onTrackballMove.add(function(a24,a32) {
			f5(a15,a24,a32);
		});
	}
	,__onWindowClose: function(window) {
		this.onWindowClose(window);
		HxOverrides.remove(this.__windows,window);
	}
	,__class__: lime_app_Module
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.modules = [];
	this.windowByID = new haxe_ds_IntMap();
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.registerModule(this);
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	config: null
	,modules: null
	,preloader: null
	,onUpdate: null
	,renderer: null
	,renderers: null
	,window: null
	,windows: null
	,backend: null
	,windowByID: null
	,addModule: function(module) {
		module.registerModule(this);
		this.modules.push(module);
		if(this.__renderers.length > 0) {
			var _g = 0;
			var _g1 = this.__renderers;
			while(_g < _g1.length) {
				var renderer = _g1[_g];
				++_g;
				module.addRenderer(renderer);
			}
		}
		if(this.__windows.length > 0) {
			var _g2 = 0;
			var _g11 = this.__windows;
			while(_g2 < _g11.length) {
				var $window = _g11[_g2];
				++_g2;
				module.addWindow($window);
			}
		}
		module.setPreloader(this.__preloader);
	}
	,addRenderer: function(renderer) {
		lime_app_Module.prototype.addRenderer.call(this,renderer);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.addRenderer(renderer);
		}
	}
	,create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) {
				this.backend.setFrameRate(config.fps);
			}
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g1 = config.windows;
				while(0 < _g1.length) {
					this.createWindow(new lime_ui_Window(_g1[0]));
					break;
				}
			}
			if(this.__preloader == null || this.__preloader.complete) {
				this.setPreloader(this.__preloader);
				var _g = 0;
				var _g11 = this.modules;
				while(_g < _g11.length) {
					++_g;
					this.setPreloader(this.__preloader);
				}
			}
		}
	}
	,createWindow: function(window) {
		lime_app_Module.prototype.addWindow.call(this,window);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.addWindow(window);
		}
		if(window.renderer == null) {
			this.addRenderer(new lime_graphics_Renderer(window));
		}
		window.create(this);
		this.windowByID.h[window.id] = window;
		window.onCreate.dispatch();
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,onModuleExit: function(code) {
		this.backend.exit();
	}
	,onWindowClose: function(window) {
		this.removeWindow(window);
	}
	,removeModule: function(module) {
		if(module != null) {
			module.unregisterModule(this);
			HxOverrides.remove(this.modules,module);
		}
	}
	,removeWindow: function(window) {
		if(window != null && this.windowByID.h.hasOwnProperty(window.id)) {
			HxOverrides.remove(this.__windows,window);
			this.windowByID.remove(window.id);
			window.close();
			if(window.renderer != null) {
				this.removeRenderer(window.renderer);
			}
			if(this.__windows[0] == window) {
				this.window = null;
			}
		}
	}
	,setPreloader: function(preloader) {
		lime_app_Module.prototype.setPreloader.call(this,preloader);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.setPreloader(preloader);
		}
	}
	,get_frameRate: function() {
		return this.backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.backend.setFrameRate(value);
	}
	,get_preloader: function() {
		return this.__preloader;
	}
	,get_renderer: function() {
		return this.__renderers[0];
	}
	,get_renderers: function() {
		return this.__renderers;
	}
	,get_window: function() {
		return this.__windows[0];
	}
	,get_windows: function() {
		return this.__windows;
	}
	,__class__: lime_app_Application
	,__properties__: {get_windows:"get_windows",get_window:"get_window",get_renderers:"get_renderers",get_renderer:"get_renderer",get_preloader:"get_preloader",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate"}
});
var lime_app_Event = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = ["lime","app","Event"];
lime_app_Event.prototype = {
	canceled: null
	,__listeners: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,dispatch: null
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Future = function(work,async) {
	if(async == null) {
		async = false;
	}
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else {
			try {
				this.value = work();
				this.isComplete = true;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.error = e;
				this.isError = true;
			}
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = ["lime","app","Future"];
lime_app_Future.ofEvents = function(onComplete,onError,onProgress) {
	var promise = new lime_app_Promise();
	onComplete.add(function(data) {
		promise.complete(data);
	},true);
	if(onError != null) {
		onError.add(function(error) {
			promise.error(error);
		},true);
	}
	if(onProgress != null) {
		onProgress.add(function(progress,total) {
			promise.progress(progress,total);
		},true);
	}
	return promise.future;
};
lime_app_Future.withError = function(error) {
	var future = new lime_app_Future();
	future.isError = true;
	future.error = error;
	return future;
};
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	error: null
	,isComplete: null
	,isError: null
	,value: null
	,__completeListeners: null
	,__errorListeners: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,ready: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		if(this.isComplete || this.isError) {
			return this;
		} else {
			lime_utils_Log.warn("Cannot block thread in JavaScript",{ fileName : "Future.hx", lineNumber : 157, className : "lime.app.Future", methodName : "ready"});
			return this;
		}
	}
	,result: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		this.ready(waitTime);
		if(this.isComplete) {
			return this.value;
		} else {
			return null;
		}
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new lime_app_Future();
			future.onError(this.error);
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = ["lime","app","_Future","FutureWork"];
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Preloader = function() {
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.libraries = [];
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = ["lime","app","Preloader"];
lime_app_Preloader.prototype = {
	complete: null
	,onComplete: null
	,onProgress: null
	,libraries: null
	,loadedLibraries: null
	,loadedStage: null
	,addLibrary: function(library) {
		this.libraries.push(library);
	}
	,create: function(config) {
	}
	,load: function() {
		var _gthis = this;
		this.loadedLibraries = -1;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = _g1[_g];
			++_g;
			library.load().onComplete(function(_) {
				_gthis.loadedLibraries++;
				_gthis.updateProgress();
			});
		}
		this.loadedLibraries++;
		this.updateProgress();
	}
	,start: function() {
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,updateProgress: function() {
		this.update(this.loadedLibraries,this.libraries.length);
		if(this.loadedLibraries == this.libraries.length) {
			this.start();
		}
	}
	,__class__: lime_app_Preloader
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = ["lime","app","Promise"];
lime_app_Promise.prototype = {
	future: null
	,isComplete: null
	,isError: null
	,complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,get_isComplete: function() {
		return this.future.isComplete;
	}
	,get_isError: function() {
		return this.future.isError;
	}
	,__class__: lime_app_Promise
	,__properties__: {get_isError:"get_isError",get_isComplete:"get_isComplete"}
};
var lime_app__$Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
lime_app__$Event_$Dynamic_$Void.__name__ = ["lime","app","_Event_Dynamic_Void"];
lime_app__$Event_$Dynamic_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Dynamic_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = ["lime","app","_Event_Float_Float_Int_Void"];
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Float_Float_Void"];
lime_app__$Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = ["lime","app","_Event_Int_Float_Void"];
lime_app__$Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = ["lime","app","_Event_Int_Int_Void"];
lime_app__$Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = ["lime","app","_Event_Int_Void"];
lime_app__$Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime","app","_Event_Int_lime_ui_JoystickHatPosition_Void"];
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = ["lime","app","_Event_String_Int_Int_Void"];
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = ["lime","app","_Event_String_Void"];
lime_app__$Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = ["lime","app","_Event_Void_Void"];
lime_app__$Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime","app","_Event_lime_graphics_RenderContext_Void"];
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadAxis_Float_Void"];
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadButton_Void"];
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime","app","_Event_lime_ui_Gamepad_Void"];
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime","app","_Event_lime_ui_Joystick_Void"];
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime","app","_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = ["lime","app","_Event_lime_ui_Touch_Void"];
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_app__$Event_$ofEvents_$T_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_ofEvents_T_Void"] = lime_app__$Event_$ofEvents_$T_$Void;
lime_app__$Event_$ofEvents_$T_$Void.__name__ = ["lime","app","_Event_ofEvents_T_Void"];
lime_app__$Event_$ofEvents_$T_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$ofEvents_$T_$Void
};
var lime_audio_ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.audio.ALAudioContext"] = lime_audio_ALAudioContext;
lime_audio_ALAudioContext.__name__ = ["lime","audio","ALAudioContext"];
lime_audio_ALAudioContext.prototype = {
	NONE: null
	,FALSE: null
	,TRUE: null
	,SOURCE_RELATIVE: null
	,CONE_INNER_ANGLE: null
	,CONE_OUTER_ANGLE: null
	,PITCH: null
	,POSITION: null
	,DIRECTION: null
	,VELOCITY: null
	,LOOPING: null
	,BUFFER: null
	,GAIN: null
	,MIN_GAIN: null
	,MAX_GAIN: null
	,ORIENTATION: null
	,SOURCE_STATE: null
	,INITIAL: null
	,PLAYING: null
	,PAUSED: null
	,STOPPED: null
	,BUFFERS_QUEUED: null
	,BUFFERS_PROCESSED: null
	,REFERENCE_DISTANCE: null
	,ROLLOFF_FACTOR: null
	,CONE_OUTER_GAIN: null
	,MAX_DISTANCE: null
	,SEC_OFFSET: null
	,SAMPLE_OFFSET: null
	,BYTE_OFFSET: null
	,SOURCE_TYPE: null
	,STATIC: null
	,STREAMING: null
	,UNDETERMINED: null
	,FORMAT_MONO8: null
	,FORMAT_MONO16: null
	,FORMAT_STEREO8: null
	,FORMAT_STEREO16: null
	,FREQUENCY: null
	,BITS: null
	,CHANNELS: null
	,SIZE: null
	,NO_ERROR: null
	,INVALID_NAME: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,INVALID_OPERATION: null
	,OUT_OF_MEMORY: null
	,VENDOR: null
	,VERSION: null
	,RENDERER: null
	,EXTENSIONS: null
	,DOPPLER_FACTOR: null
	,SPEED_OF_SOUND: null
	,DOPPLER_VELOCITY: null
	,DISTANCE_MODEL: null
	,INVERSE_DISTANCE: null
	,INVERSE_DISTANCE_CLAMPED: null
	,LINEAR_DISTANCE: null
	,LINEAR_DISTANCE_CLAMPED: null
	,EXPONENT_DISTANCE: null
	,EXPONENT_DISTANCE_CLAMPED: null
	,bufferData: function(buffer,format,data,size,freq) {
		lime_audio_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_audio_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_audio_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferiv(buffer,param,values);
	}
	,deleteBuffer: function(buffer) {
		lime_audio_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_audio_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_audio_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_audio_openal_AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime_audio_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_audio_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_audio_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_audio_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_audio_openal_AL.enable(capability);
	}
	,genSource: function() {
		return lime_audio_openal_AL.genSource();
	}
	,genSources: function(n) {
		return lime_audio_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return lime_audio_openal_AL.genBuffer();
	}
	,genBuffers: function(n) {
		return lime_audio_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_audio_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_audio_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_audio_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime_audio_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_audio_openal_AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime_audio_openal_AL.getError();
	}
	,getErrorString: function() {
		return lime_audio_openal_AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime_audio_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_audio_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime_audio_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_audio_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_audio_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_audio_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_audio_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_audio_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_audio_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_audio_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_audio_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime_audio_openal_AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime_audio_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_audio_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_audio_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_audio_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_audio_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_audio_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_audio_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_audio_openal_AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_audio_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_audio_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_audio_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_audio_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_audio_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_audio_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_audio_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_audio_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_audio_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_audio_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_audio_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_audio_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_audio_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_audio_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_audio_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_audio_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_audio_openal_AL.speedOfSound(value);
	}
	,__class__: lime_audio_ALAudioContext
};
var lime_audio_ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.audio.ALCAudioContext"] = lime_audio_ALCAudioContext;
lime_audio_ALCAudioContext.__name__ = ["lime","audio","ALCAudioContext"];
lime_audio_ALCAudioContext.prototype = {
	FALSE: null
	,TRUE: null
	,FREQUENCY: null
	,REFRESH: null
	,SYNC: null
	,MONO_SOURCES: null
	,STEREO_SOURCES: null
	,NO_ERROR: null
	,INVALID_DEVICE: null
	,INVALID_CONTEXT: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,OUT_OF_MEMORY: null
	,ATTRIBUTES_SIZE: null
	,ALL_ATTRIBUTES: null
	,DEFAULT_DEVICE_SPECIFIER: null
	,DEVICE_SPECIFIER: null
	,EXTENSIONS: null
	,ENUMERATE_ALL_EXT: null
	,DEFAULT_ALL_DEVICES_SPECIFIER: null
	,ALL_DEVICES_SPECIFIER: null
	,closeDevice: function(device) {
		return lime_audio_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_audio_openal_ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime_audio_openal_ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime_audio_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_audio_openal_ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime_audio_openal_ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime_audio_openal_ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime_audio_openal_ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime_audio_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_audio_openal_ALC.openDevice(deviceName);
	}
	,pauseDevice: function(device) {
		lime_audio_openal_ALC.pauseDevice(device);
	}
	,processContext: function(context) {
		lime_audio_openal_ALC.processContext(context);
	}
	,resumeDevice: function(device) {
		lime_audio_openal_ALC.resumeDevice(device);
	}
	,suspendContext: function(context) {
		lime_audio_openal_ALC.suspendContext(context);
	}
	,__class__: lime_audio_ALCAudioContext
};
var lime_audio_AudioBuffer = function() {
};
$hxClasses["lime.audio.AudioBuffer"] = lime_audio_AudioBuffer;
lime_audio_AudioBuffer.__name__ = ["lime","audio","AudioBuffer"];
lime_audio_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	return null;
};
lime_audio_AudioBuffer.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var audioBuffer = new lime_audio_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path]});
	return audioBuffer;
};
lime_audio_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_audio_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths});
	return audioBuffer;
};
lime_audio_AudioBuffer.fromURL = function(url,handler) {
	var audioBuffer = new lime_audio_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [url]});
	audioBuffer.__srcHowl.on("load",function() {
		handler(audioBuffer);
	});
	audioBuffer.__srcHowl.on("loaderror",function() {
		handler(null);
	});
	audioBuffer.__srcHowl.load();
};
lime_audio_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_audio_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function() {
				promise.error(null);
			});
			audioBuffer.__srcHowl.load();
		}
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_audio_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_audio_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_audio_AudioBuffer.prototype = {
	bitsPerSample: null
	,channels: null
	,data: null
	,sampleRate: null
	,__srcAudio: null
	,__srcBuffer: null
	,__srcCustom: null
	,__srcFMODSound: null
	,__srcHowl: null
	,__srcSound: null
	,dispose: function() {
		this.__srcHowl.unload();
	}
	,get_src: function() {
		return this.__srcHowl;
	}
	,set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_audio_AudioBuffer
	,__properties__: {set_src:"set_src",get_src:"get_src"}
};
var lime_audio_AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : ["lime","audio","AudioContext"], __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_audio_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
var lime_audio_AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime_audio_AudioManager;
lime_audio_AudioManager.__name__ = ["lime","audio","AudioManager"];
lime_audio_AudioManager.init = function(context) {
	if(lime_audio_AudioManager.context == null) {
		if(context == null) {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				lime_audio_AudioManager.context = lime_audio_AudioContext.WEB(new AudioContext ());
			} catch( e ) {
				haxe_CallStack.lastException = e;
				lime_audio_AudioManager.context = lime_audio_AudioContext.HTML5(new lime_audio_HTML5AudioContext());
			}
		} else {
			lime_audio_AudioManager.context = context;
		}
	}
};
lime_audio_AudioManager.resume = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		if(_g[1] == 0) {
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				alc.resumeDevice(alc.getContextsDevice(currentContext));
				alc.processContext(currentContext);
			}
		}
	}
};
lime_audio_AudioManager.shutdown = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		if(_g[1] == 0) {
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				alc.closeDevice(device);
			}
		}
	}
};
lime_audio_AudioManager.suspend = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		if(_g[1] == 0) {
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				alc.suspendContext(currentContext);
				alc.pauseDevice(alc.getContextsDevice(currentContext));
			}
		}
	}
};
var lime_audio_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) {
		loops = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	this.backend = new lime__$backend_html5_HTML5AudioSource(this);
	if(length != null && length != 0) {
		this.set_length(length);
	}
	this.set_loops(loops);
	if(buffer != null) {
		this.init();
	}
};
$hxClasses["lime.audio.AudioSource"] = lime_audio_AudioSource;
lime_audio_AudioSource.__name__ = ["lime","audio","AudioSource"];
lime_audio_AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,offset: null
	,backend: null
	,dispose: function() {
		this.backend.dispose();
	}
	,init: function() {
		this.backend.init();
	}
	,play: function() {
		this.backend.play();
	}
	,pause: function() {
		this.backend.pause();
	}
	,stop: function() {
		this.backend.stop();
	}
	,get_currentTime: function() {
		return this.backend.getCurrentTime();
	}
	,set_currentTime: function(value) {
		return this.backend.setCurrentTime(value);
	}
	,get_gain: function() {
		return this.backend.getGain();
	}
	,set_gain: function(value) {
		return this.backend.setGain(value);
	}
	,get_length: function() {
		return this.backend.getLength();
	}
	,set_length: function(value) {
		return this.backend.setLength(value);
	}
	,get_loops: function() {
		return this.backend.getLoops();
	}
	,set_loops: function(value) {
		return this.backend.setLoops(value);
	}
	,get_position: function() {
		return this.backend.getPosition();
	}
	,set_position: function(value) {
		return this.backend.setPosition(value);
	}
	,__class__: lime_audio_AudioSource
	,__properties__: {set_position:"set_position",get_position:"get_position",set_loops:"set_loops",get_loops:"get_loops",set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_audio_FlashAudioContext = function() {
};
$hxClasses["lime.audio.FlashAudioContext"] = lime_audio_FlashAudioContext;
lime_audio_FlashAudioContext.__name__ = ["lime","audio","FlashAudioContext"];
lime_audio_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) {
			startPosition = -1;
		}
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0;
		}
		return null;
	}
	,__class__: lime_audio_FlashAudioContext
};
var lime_audio_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime_audio_HTML5AudioContext;
lime_audio_HTML5AudioContext.__name__ = ["lime","audio","HTML5AudioContext"];
lime_audio_HTML5AudioContext.prototype = {
	HAVE_CURRENT_DATA: null
	,HAVE_ENOUGH_DATA: null
	,HAVE_FUTURE_DATA: null
	,HAVE_METADATA: null
	,HAVE_NOTHING: null
	,NETWORK_EMPTY: null
	,NETWORK_IDLE: null
	,NETWORK_LOADING: null
	,NETWORK_NO_SOURCE: null
	,canPlayType: function(buffer,type) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.canPlayType(type);
		}
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_audio_AudioBuffer();
		buffer.__srcAudio = new Audio();
		buffer.__srcAudio.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.autoplay;
		}
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.buffered;
		}
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentSrc;
		}
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentTime;
		}
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.defaultPlaybackRate;
		}
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.duration;
		}
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.ended;
		}
		return false;
	}
	,getError: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.error;
		}
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.loop;
		}
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.muted;
		}
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.networkState;
		}
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.paused;
		}
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.played;
		}
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.preload;
		}
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.readyState;
		}
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seekable;
		}
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seeking;
		}
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.src;
		}
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.volume;
		}
		return 1;
	}
	,load: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.load();
			return;
		}
	}
	,pause: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.pause();
			return;
		}
	}
	,play: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.play();
			return;
		}
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.autoplay = value;
		}
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.currentTime = value;
		}
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.defaultPlaybackRate = value;
		}
	}
	,setLoop: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.loop = value;
		}
	}
	,setMuted: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.muted = value;
		}
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.playbackRate = value;
		}
	}
	,setPreload: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.preload = value;
		}
	}
	,setSrc: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.src = value;
		}
	}
	,setVolume: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.volume = value;
		}
	}
	,__class__: lime_audio_HTML5AudioContext
};
var lime_audio_openal_AL = function() { };
$hxClasses["lime.audio.openal.AL"] = lime_audio_openal_AL;
lime_audio_openal_AL.__name__ = ["lime","audio","openal","AL"];
lime_audio_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_audio_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.bufferf = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_audio_openal_AL.bufferi = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_audio_openal_AL.deleteBuffer = function(buffer) {
};
lime_audio_openal_AL.deleteBuffers = function(buffers) {
};
lime_audio_openal_AL.deleteSource = function(source) {
};
lime_audio_openal_AL.deleteSources = function(sources) {
};
lime_audio_openal_AL.disable = function(capability) {
};
lime_audio_openal_AL.distanceModel = function(distanceModel) {
};
lime_audio_openal_AL.dopplerFactor = function(value) {
};
lime_audio_openal_AL.dopplerVelocity = function(value) {
};
lime_audio_openal_AL.enable = function(capability) {
};
lime_audio_openal_AL.genSource = function() {
	return null;
};
lime_audio_openal_AL.genSources = function(n) {
	return null;
};
lime_audio_openal_AL.genBuffer = function() {
	return null;
};
lime_audio_openal_AL.genBuffers = function(n) {
	return null;
};
lime_audio_openal_AL.getBoolean = function(param) {
	return false;
};
lime_audio_openal_AL.getBooleanv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getDouble = function(param) {
	return 0;
};
lime_audio_openal_AL.getDoublev = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_audio_openal_AL.getError = function() {
	return 0;
};
lime_audio_openal_AL.getErrorString = function() {
	switch(lime_audio_openal_AL.getError()) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_AL.getFloat = function(param) {
	return 0;
};
lime_audio_openal_AL.getFloatv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getInteger = function(param) {
	return 0;
};
lime_audio_openal_AL.getIntegerv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getListener3f = function(param) {
	return null;
};
lime_audio_openal_AL.getListener3i = function(param) {
	return null;
};
lime_audio_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_audio_openal_AL.getListenerfv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_audio_openal_AL.getListeneriv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_audio_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getString = function(param) {
	return null;
};
lime_audio_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_audio_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_audio_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_audio_openal_AL.isSource = function(source) {
	return false;
};
lime_audio_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listenerf = function(param,value) {
};
lime_audio_openal_AL.listenerfv = function(param,values) {
};
lime_audio_openal_AL.listeneri = function(param,value) {
};
lime_audio_openal_AL.listeneriv = function(param,values) {
};
lime_audio_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.sourcef = function(source,param,value) {
};
lime_audio_openal_AL.sourcefv = function(source,param,values) {
};
lime_audio_openal_AL.sourcei = function(source,param,value) {
};
lime_audio_openal_AL.sourceiv = function(source,param,values) {
};
lime_audio_openal_AL.sourcePlay = function(source) {
};
lime_audio_openal_AL.sourcePlayv = function(sources) {
};
lime_audio_openal_AL.sourceStop = function(source) {
};
lime_audio_openal_AL.sourceStopv = function(sources) {
};
lime_audio_openal_AL.sourceRewind = function(source) {
};
lime_audio_openal_AL.sourceRewindv = function(sources) {
};
lime_audio_openal_AL.sourcePause = function(source) {
};
lime_audio_openal_AL.sourcePausev = function(sources) {
};
lime_audio_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_audio_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_audio_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_audio_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_audio_openal_AL.speedOfSound = function(value) {
};
var lime_audio_openal__$ALBuffer_ALBuffer_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALBuffer.ALBuffer_Impl_"] = lime_audio_openal__$ALBuffer_ALBuffer_$Impl_$;
lime_audio_openal__$ALBuffer_ALBuffer_$Impl_$.__name__ = ["lime","audio","openal","_ALBuffer","ALBuffer_Impl_"];
lime_audio_openal__$ALBuffer_ALBuffer_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal_ALC = function() { };
$hxClasses["lime.audio.openal.ALC"] = lime_audio_openal_ALC;
lime_audio_openal_ALC.__name__ = ["lime","audio","openal","ALC"];
lime_audio_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_audio_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_audio_openal_ALC.destroyContext = function(context) {
};
lime_audio_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_audio_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_audio_openal_ALC.getError = function(device) {
	return 0;
};
lime_audio_openal_ALC.getErrorString = function(device) {
	switch(lime_audio_openal_ALC.getError(device)) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_audio_openal_ALC.getString = function(device,param) {
	return null;
};
lime_audio_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_audio_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_audio_openal_ALC.pauseDevice = function(device) {
};
lime_audio_openal_ALC.processContext = function(context) {
};
lime_audio_openal_ALC.resumeDevice = function(device) {
};
lime_audio_openal_ALC.suspendContext = function(context) {
};
var lime_audio_openal__$ALContext_ALContext_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime_audio_openal__$ALContext_ALContext_$Impl_$;
lime_audio_openal__$ALContext_ALContext_$Impl_$.__name__ = ["lime","audio","openal","_ALContext","ALContext_Impl_"];
lime_audio_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal__$ALDevice_ALDevice_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime_audio_openal__$ALDevice_ALDevice_$Impl_$;
lime_audio_openal__$ALDevice_ALDevice_$Impl_$.__name__ = ["lime","audio","openal","_ALDevice","ALDevice_Impl_"];
lime_audio_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal__$ALSource_ALSource_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALSource.ALSource_Impl_"] = lime_audio_openal__$ALSource_ALSource_$Impl_$;
lime_audio_openal__$ALSource_ALSource_$Impl_$.__name__ = ["lime","audio","openal","_ALSource","ALSource_Impl_"];
lime_audio_openal__$ALSource_ALSource_$Impl_$._new = function(handle) {
	return handle;
};
var lime_graphics_ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
lime_graphics_ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime_graphics_ConsoleRenderContext.prototype = {
	createIndexBuffer: function(indices,count) {
		return new lime_graphics_console_IndexBuffer();
	}
	,createVertexBuffer: function(decl,count) {
		return new lime_graphics_console_VertexBuffer();
	}
	,lookupShader: function(name) {
		return new lime_graphics_console_Shader();
	}
	,clear: function(r,g,b,a,depth,stencil) {
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1.0;
		}
	}
	,bindShader: function(shader) {
	}
	,setViewport: function(x,y,width,height,nearPlane,farPlane) {
		if(farPlane == null) {
			farPlane = 1.0;
		}
		if(nearPlane == null) {
			nearPlane = 0.0;
		}
	}
	,setVertexShaderConstantF: function(startRegister,vec4,vec4count) {
	}
	,setVertexSource: function(vb) {
	}
	,setIndexSource: function(ib) {
	}
	,draw: function(primitive,startVertex,primitiveCount) {
	}
	,drawIndexed: function(primitive,vertexCount,startIndex,primitiveCount) {
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,__class__: lime_graphics_ConsoleRenderContext
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var lime_graphics_FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
lime_graphics_FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
lime_graphics_FlashRenderContext.prototype = {
	accessibilityImplementation: null
	,accessibilityProperties: null
	,alpha: null
	,blendMode: null
	,blendShader: null
	,buttonMode: null
	,cacheAsBitmap: null
	,contextMenu: null
	,doubleClickEnabled: null
	,dropTarget: null
	,filters: null
	,focusRect: null
	,graphics: null
	,height: null
	,hitArea: null
	,loaderInfo: null
	,mask: null
	,mouseChildren: null
	,mouseEnabled: null
	,mouseX: null
	,mouseY: null
	,name: null
	,needsSoftKeyboard: null
	,numChildren: null
	,opaqueBackground: null
	,parent: null
	,root: null
	,rotation: null
	,rotationX: null
	,rotationY: null
	,rotationZ: null
	,scale9Grid: null
	,scaleX: null
	,scaleY: null
	,scaleZ: null
	,scrollRect: null
	,softKeyboardInputAreaOfInterest: null
	,soundTransform: null
	,stage: null
	,tabChildren: null
	,tabEnabled: null
	,tabIndex: null
	,textSnapshot: null
	,transform: null
	,useHandCursor: null
	,visible: null
	,width: null
	,x: null
	,y: null
	,z: null
	,addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime_graphics_FlashRenderContext
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		if(lime_app_Application.current != null && lime_app_Application.current.__renderers[0] != null) {
			var _g = lime_app_Application.current.__renderers[0].context;
			var tmp;
			switch(_g[1]) {
			case 1:case 2:
				tmp = lime_graphics_ImageType.CANVAS;
				break;
			case 3:
				tmp = lime_graphics_ImageType.FLASH;
				break;
			default:
				tmp = lime_graphics_ImageType.DATA;
			}
			this.type = tmp;
		} else {
			this.type = lime_graphics_ImageType.DATA;
		}
	} else {
		this.type = type;
	}
	if(buffer == null) {
		if(width > 0 && height > 0) {
			switch(this.type[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				this.buffer = new lime_graphics_ImageBuffer(elements != null?new Uint8Array(elements):null,width,height);
				if(color != null) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.fromBase64 = function(base64,type,onload) {
	if(base64 == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) {
		return null;
	}
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes,onload) {
	if(bytes == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path,onload,onerror) {
	if(path == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	var _image = new lime_graphics_Image(buffer);
	_image.type = lime_graphics_ImageType.CANVAS;
	return _image;
};
lime_graphics_Image.loadFromBase64 = function(base64,type) {
	var promise = new lime_app_Promise();
	lime_graphics_Image.fromBase64(base64,type,function(image) {
		promise.complete(image);
	});
	return promise.future;
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	var promise = new lime_app_Promise();
	lime_graphics_Image.fromBytes(bytes,function(image) {
		promise.complete(image);
	});
	return promise.future;
};
lime_graphics_Image.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	lime_graphics_Image.fromFile(path,function(image) {
		promise.complete(image);
	},function() {
		promise.error("");
	});
	return promise.future;
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	switch(bytes.length % 3) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) {
		lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	}
	return lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension;
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes.b[0] == 255) {
		return bytes.b[1] == 216;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes.b[0] == 71 && bytes.b[1] == 73 && bytes.b[2] == 70 && bytes.b[3] == 56) {
		var b = bytes.b[4];
		if(b == 55 || b == 57) {
			return bytes.b[5] == 97;
		} else {
			return false;
		}
	}
	return false;
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,rect: null
	,type: null
	,version: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			} else {
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.version = this.version;
			return image;
		} else {
			return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		}
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) {
			return;
		}
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		if(sourceImage == this) {
			sourceImage = this.clone();
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) {
				alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			}
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) {
			quality = 90;
		}
		if(format == null) {
			format = "png";
		}
		switch(format) {
		case "bmp":
			return lime_graphics_format_BMP.encode(this);
		case "jpeg":case "jpg":
			return lime_graphics_format_JPEG.encode(this,quality);
		case "png":
			return lime_graphics_format_PNG.encode(this);
		default:
		}
		return null;
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) {
			findColor = true;
		}
		if(this.buffer == null) {
			return null;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				return rgba;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this2 = 0;
					var bgra = this2;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					return bgra;
				default:
					var this3 = 0;
					var rgba1 = this3;
					rgba1 = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				return rgba;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this2 = 0;
					var bgra = this2;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					return bgra;
				default:
					var this3 = 0;
					var rgba1 = this3;
					rgba1 = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) {
			return null;
		}
		switch(this.type[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return;
		}
	}
	,resize: function(newWidth,newHeight) {
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime_graphics_utils_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,bytes,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixels(this,rect,bytes,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixels(this,rect,bytes,format);
			break;
		case 2:
			break;
		default:
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(this.buffer == null || sourceImage == null || sourceRect == null) {
			return 0;
		}
		switch(this.type[1]) {
		case 0:case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
		case 2:
			var _color;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb = this1;
				argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				_color = argb;
			} else {
				switch(format) {
				case 1:
					_color = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb1 = this2;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					_color = argb1;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb2 = this3;
					argb2 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					_color = argb2;
				}
			}
			var _mask;
			if(format == null) {
				var rgba2 = mask;
				var this4 = 0;
				var argb3 = this4;
				argb3 = (rgba2 & 255 & 255) << 24 | (rgba2 >>> 24 & 255 & 255) << 16 | (rgba2 >>> 16 & 255 & 255) << 8 | rgba2 >>> 8 & 255 & 255;
				_mask = argb3;
			} else {
				switch(format) {
				case 1:
					_mask = mask;
					break;
				case 2:
					var bgra1 = mask;
					var this5 = 0;
					var argb4 = this5;
					argb4 = (bgra1 & 255 & 255) << 24 | (bgra1 >>> 8 & 255 & 255) << 16 | (bgra1 >>> 16 & 255 & 255) << 8 | bgra1 >>> 24 & 255 & 255;
					_mask = argb4;
					break;
				default:
					var rgba3 = mask;
					var this6 = 0;
					var argb5 = this6;
					argb5 = (rgba3 & 255 & 255) << 24 | (rgba3 >>> 24 & 255 & 255) << 16 | (rgba3 >>> 16 & 255 & 255) << 8 | rgba3 >>> 8 & 255 & 255;
					_mask = argb5;
				}
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),operation,threshold,_color,_mask,copySource);
		default:
		}
		return 0;
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		image.addEventListener("load",function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		},false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			throw new js__$Boot_HaxeError("Image tried to read PNG/JPG Bytes, but found an invalid header.");
		}
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		image.crossOrigin = "Anonymous";
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_1) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			if(this.type[1] == 1) {
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		if(this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width) {
			if(this.buffer.height != 0) {
				return (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			switch(this.type[1]) {
			case 0:
				break;
			case 1:
				lime_graphics_utils_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			switch(this.type[1]) {
			case 0:case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			if(this.type[1] == 1) {
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
		}
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null?0:format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcCustom: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			buffer.data = elements != null?new Uint8Array(elements):null;
			var view = this.data;
			buffer.data.set(view != null?new Uint8Array(view):null);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			buffer.__srcImageData.data.set(new Uint8ClampedArray(this.__srcImageData.data));
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			buffer.__srcImage = this.__srcImage;
		}
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) {
			this.__srcImage = value;
		} else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : ["lime","graphics","ImageChannel"], __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : ["lime","graphics","RenderContext"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app__$Event_$Void_$Void();
	this.onContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onContextLost = new lime_app__$Event_$Void_$Void();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.renderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = ["lime","graphics","Renderer"];
lime_graphics_Renderer.prototype = {
	context: null
	,onContextLost: null
	,onContextRestored: null
	,onRender: null
	,type: null
	,window: null
	,backend: null
	,create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,readPixels: function(rect) {
		return this.backend.readPixels(rect);
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = { __ename__ : ["lime","graphics","RendererType"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM"] };
lime_graphics_RendererType.OPENGL = ["OPENGL",0];
lime_graphics_RendererType.OPENGL.toString = $estr;
lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CANVAS = ["CANVAS",1];
lime_graphics_RendererType.CANVAS.toString = $estr;
lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.DOM = ["DOM",2];
lime_graphics_RendererType.DOM.toString = $estr;
lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.FLASH = ["FLASH",3];
lime_graphics_RendererType.FLASH.toString = $estr;
lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CAIRO = ["CAIRO",4];
lime_graphics_RendererType.CAIRO.toString = $estr;
lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CONSOLE = ["CONSOLE",5];
lime_graphics_RendererType.CONSOLE.toString = $estr;
lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CUSTOM = ["CUSTOM",6];
lime_graphics_RendererType.CUSTOM.toString = $estr;
lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
var lime_graphics_cairo_Cairo = function(surface) {
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"}
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	target: null
	,userData: null
	,handle: null
	,arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setFontSize: function(size) {
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showGlyphs: function(glyphs) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,transform: function(matrix) {
	}
	,rotate: function(amount) {
	}
	,scale: function(x,y) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_operator: function() {
		return 0;
	}
	,set_operator: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",set_operator:"set_operator",get_operator:"get_operator",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fontOptions:"set_fontOptions",get_fontOptions:"get_fontOptions",set_fontFace:"set_fontFace",get_fontFace:"get_fontFace",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFTFontFace.CairoFTFontFace_Impl_"] = lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$;
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFTFontFace","CairoFTFontFace_Impl_"];
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$._new = function() {
	return 0;
};
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.create = function(face,loadFlags) {
	return 0;
};
var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] = lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontFace","CairoFontFace_Impl_"];
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] = lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontOptions","CairoFontOptions_Impl_"];
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__properties__ = {set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_antialias:"set_antialias",get_antialias:"get_antialias"}
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoGlyph = function(index,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.index = index;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.graphics.cairo.CairoGlyph"] = lime_graphics_cairo_CairoGlyph;
lime_graphics_cairo_CairoGlyph.__name__ = ["lime","graphics","cairo","CairoGlyph"];
lime_graphics_cairo_CairoGlyph.prototype = {
	index: null
	,x: null
	,y: null
	,__class__: lime_graphics_cairo_CairoGlyph
};
var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoImageSurface","CairoImageSurface_Impl_"];
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__properties__ = {get_width:"get_width",get_stride:"get_stride",get_height:"get_height",get_format:"get_format",get_data:"get_data"}
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new = function(format,width,height) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoPattern","CairoPattern_Impl_"];
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"}
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
	return handle;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_console_IndexBuffer = function() {
};
$hxClasses["lime.graphics.console.IndexBuffer"] = lime_graphics_console_IndexBuffer;
lime_graphics_console_IndexBuffer.__name__ = ["lime","graphics","console","IndexBuffer"];
lime_graphics_console_IndexBuffer.prototype = {
	__class__: lime_graphics_console_IndexBuffer
};
var lime_graphics_console_Primitive = $hxClasses["lime.graphics.console.Primitive"] = { __ename__ : ["lime","graphics","console","Primitive"], __constructs__ : ["Point","Line","LineStrip","Triangle","TriangleStrip"] };
lime_graphics_console_Primitive.Point = ["Point",0];
lime_graphics_console_Primitive.Point.toString = $estr;
lime_graphics_console_Primitive.Point.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Line = ["Line",1];
lime_graphics_console_Primitive.Line.toString = $estr;
lime_graphics_console_Primitive.Line.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.LineStrip = ["LineStrip",2];
lime_graphics_console_Primitive.LineStrip.toString = $estr;
lime_graphics_console_Primitive.LineStrip.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Triangle = ["Triangle",3];
lime_graphics_console_Primitive.Triangle.toString = $estr;
lime_graphics_console_Primitive.Triangle.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.TriangleStrip = ["TriangleStrip",4];
lime_graphics_console_Primitive.TriangleStrip.toString = $estr;
lime_graphics_console_Primitive.TriangleStrip.__enum__ = lime_graphics_console_Primitive;
var lime_graphics_console_Shader = function() {
};
$hxClasses["lime.graphics.console.Shader"] = lime_graphics_console_Shader;
lime_graphics_console_Shader.__name__ = ["lime","graphics","console","Shader"];
lime_graphics_console_Shader.prototype = {
	__class__: lime_graphics_console_Shader
};
var lime_graphics_console_VertexBuffer = function() {
};
$hxClasses["lime.graphics.console.VertexBuffer"] = lime_graphics_console_VertexBuffer;
lime_graphics_console_VertexBuffer.__name__ = ["lime","graphics","console","VertexBuffer"];
lime_graphics_console_VertexBuffer.prototype = {
	lock: function() {
		return new lime_graphics_console_VertexOutput();
	}
	,unlock: function() {
	}
	,__class__: lime_graphics_console_VertexBuffer
};
var lime_graphics_console_VertexOutput = function() {
};
$hxClasses["lime.graphics.console.VertexOutput"] = lime_graphics_console_VertexOutput;
lime_graphics_console_VertexOutput.__name__ = ["lime","graphics","console","VertexOutput"];
lime_graphics_console_VertexOutput.prototype = {
	vec2: function(x,y) {
	}
	,vec3: function(x,y,z) {
	}
	,color: function(r,g,b,a) {
	}
	,__class__: lime_graphics_console_VertexOutput
};
var lime_graphics_format_BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
lime_graphics_format_BMP.__name__ = ["lime","graphics","format","BMP"];
lime_graphics_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) {
		type = lime_graphics_format_BMPType.RGB;
	}
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) {
		switch(type[1]) {
		case 0:
			pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
			break;
		case 1:
			infoHeaderLength = 108;
			break;
		case 2:
			fileHeaderLength = 0;
			pixelValuesLength += image.width * image.height;
			break;
		}
	}
	var data = new haxe_io_Bytes(new ArrayBuffer(fileHeaderLength + infoHeaderLength + pixelValuesLength));
	var position = 0;
	if(fileHeaderLength > 0) {
		position = 1;
		data.b[0] = 66;
		position = 2;
		data.b[1] = 77;
		data.setInt32(2,data.length);
		position = 6;
		data.setUInt16(6,0);
		position = 8;
		data.setUInt16(8,0);
		position = 10;
		data.setInt32(10,fileHeaderLength + infoHeaderLength);
		position = 14;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime_graphics_format_BMPType.ICO?image.height * 2:image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime_graphics_format_BMPType.RGB?24:32);
	position += 2;
	data.setInt32(position,type == lime_graphics_format_BMPType.BITFIELD?3:0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime_graphics_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.b[position++] = 32;
		data.b[position++] = 110;
		data.b[position++] = 105;
		data.b[position++] = 87;
		var _g = 0;
		while(_g < 48) {
			++_g;
			data.b[position++] = 0;
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) {
		switch(type[1]) {
		case 0:
			var _g1 = 0;
			var _g2 = image.height;
			while(_g1 < _g2) {
				readPosition = (image.height - 1 - _g1++) * 4 * image.width;
				var _g3 = 0;
				var _g21 = image.width;
				while(_g3 < _g21) {
					++_g3;
					++readPosition;
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
				}
				var _g31 = 0;
				var _g22 = image.width * 3 % 4;
				while(_g31 < _g22) {
					++_g31;
					data.b[position++] = 0;
				}
			}
			break;
		case 1:
			var _g11 = 0;
			var _g4 = image.height;
			while(_g11 < _g4) {
				readPosition = (image.height - 1 - _g11++) * 4 * image.width;
				var _g32 = 0;
				var _g23 = image.width;
				while(_g32 < _g23) {
					++_g32;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
				}
			}
			break;
		case 2:
			var andMask = new haxe_io_Bytes(new ArrayBuffer(image.width * image.height));
			var maskPosition = 0;
			var _g12 = 0;
			var _g5 = image.height;
			while(_g12 < _g5) {
				readPosition = (image.height - 1 - _g12++) * 4 * image.width;
				var _g33 = 0;
				var _g24 = image.width;
				while(_g33 < _g24) {
					++_g33;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
					andMask.b[maskPosition++] = 0;
				}
			}
			data.blit(position,andMask,0,image.width * image.height);
			break;
		}
	}
	return data;
};
var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : ["lime","graphics","format","BMPType"], __constructs__ : ["RGB","BITFIELD","ICO"] };
lime_graphics_format_BMPType.RGB = ["RGB",0];
lime_graphics_format_BMPType.RGB.toString = $estr;
lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.BITFIELD = ["BITFIELD",1];
lime_graphics_format_BMPType.BITFIELD.toString = $estr;
lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.ICO = ["ICO",2];
lime_graphics_format_BMPType.ICO.toString = $estr;
lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
var lime_graphics_format_JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
lime_graphics_format_JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime_graphics_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime_graphics_format_PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
lime_graphics_format_PNG.__name__ = ["lime","graphics","format","PNG"];
lime_graphics_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/png");
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime_graphics_opengl_ExtensionPackedDepthStencil = function() { };
$hxClasses["lime.graphics.opengl.ExtensionPackedDepthStencil"] = lime_graphics_opengl_ExtensionPackedDepthStencil;
lime_graphics_opengl_ExtensionPackedDepthStencil.__name__ = ["lime","graphics","opengl","ExtensionPackedDepthStencil"];
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
lime_graphics_opengl_GL.__properties__ = {get_version:"get_version"}
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferData = function(target,data,usage) {
	lime_graphics_opengl_GL.context.bufferData(target,data,usage);
};
lime_graphics_opengl_GL.bufferSubData = function(target,offset,data) {
	lime_graphics_opengl_GL.context.bufferSubData(target,offset,data);
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	lime_graphics_opengl_GL.context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
lime_graphics_opengl_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	lime_graphics_opengl_GL.context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname);
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.readPixels(x,y,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	lime_graphics_opengl_GL.context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.uniform1f = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1f(location,x);
};
lime_graphics_opengl_GL.uniform1fv = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1fv(location,x);
};
lime_graphics_opengl_GL.uniform1i = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1i(location,x);
};
lime_graphics_opengl_GL.uniform1iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform1iv(location,v);
};
lime_graphics_opengl_GL.uniform2f = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2f(location,x,y);
};
lime_graphics_opengl_GL.uniform2fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2fv(location,v);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2iv(location,v);
};
lime_graphics_opengl_GL.uniform3f = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3f(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3fv(location,v);
};
lime_graphics_opengl_GL.uniform3i = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3i(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3iv(location,v);
};
lime_graphics_opengl_GL.uniform4f = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4f(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4fv(location,v);
};
lime_graphics_opengl_GL.uniform4i = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4i(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4iv(location,v);
};
lime_graphics_opengl_GL.uniformMatrix2fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix2fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix3fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix3fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix4fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix4fv(location,transpose,v);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.__currentProgram = program;
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(indx,x) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(indx,x);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(indx,x,y) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(indx,x,y);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(indx,x,y,z) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(indx,x,y,z);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(indx,x,y,z,w) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(indx,x,y,z,w);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.get_version = function() {
	return 2;
};
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
	image.type = lime_graphics_ImageType.CANVAS;
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	}
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) {
			lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		} else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			buffer.data = elements != null?new Uint8Array(elements):null;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) {
			alphaPoint = new lime_math_Vector2();
		}
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) {
			image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
		}
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.buffer.get_src() != null) {
		image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.msImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		buffer.data = elements != null?new Uint8Array(elements):null;
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) {
			a = color >> 24 & 255;
		} else {
			a = 255;
		}
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) {
			a = color & 255;
		} else {
			a = 255;
		}
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel32(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixels(image,rect,format);
};
lime_graphics_utils_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime_graphics_utils_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
	buffer.__srcImageData = null;
	buffer.data = null;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) {
		return;
	}
	var copy = image.clone();
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(copy.get_src(),x,y);
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixels = function(image,rect,bytes,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.setPixels(image,rect,bytes,format);
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image,clear) {
	if(image == null) {
		return;
	}
	if(image.type == lime_graphics_ImageType.CANVAS) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,clear);
	} else {
		lime_graphics_utils_ImageCanvasUtil.convertToData(image,clear);
	}
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		row = dataView.offset + dataView.stride * _g1++;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			offset = row + _g3++ * 4;
			switch(format) {
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >>> 24 & 255] & 255) << 24 | (greenTable[pixel >>> 16 & 255] & 255) << 16 | (blueTable[pixel >>> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(srcFormat) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >>> 24 & 255;
				break;
			case 1:
				value = srcPixel >>> 16 & 255;
				break;
			case 2:
				value = srcPixel >>> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(sourceData == null || destData == null) {
		return;
	}
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = 0;
		var _g = destView.height;
		while(_g1 < _g) {
			var y = _g1++;
			sourcePosition = sourceView.offset + sourceView.stride * y;
			destPosition = destView.offset + destView.stride * y;
			var _g3 = 0;
			var _g2 = destView.width;
			while(_g3 < _g2) {
				++_g3;
				switch(sourceFormat) {
				case 0:
					sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if(destPremultiplied) {
					if((sourcePixel & 255) == 0) {
						if(sourcePixel != 0) {
							sourcePixel = 0;
						}
					} else if((sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
						sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = sourcePixel >>> 24 & 255;
					destData[destPosition + 1] = sourcePixel >>> 16 & 255;
					destData[destPosition + 2] = sourcePixel >>> 8 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 1:
					destData[destPosition] = sourcePixel & 255;
					destData[destPosition + 1] = sourcePixel >>> 24 & 255;
					destData[destPosition + 2] = sourcePixel >>> 16 & 255;
					destData[destPosition + 3] = sourcePixel >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = sourcePixel >>> 8 & 255;
					destData[destPosition + 1] = sourcePixel >>> 16 & 255;
					destData[destPosition + 2] = sourcePixel >>> 24 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				}
				sourcePosition += 4;
				destPosition += 4;
			}
		}
	} else {
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var destPixel;
		if(alphaImage == null) {
			var _g11 = 0;
			var _g4 = destView.height;
			while(_g11 < _g4) {
				var y1 = _g11++;
				sourcePosition = sourceView.offset + sourceView.stride * y1;
				destPosition = destView.offset + destView.stride * y1;
				var _g31 = 0;
				var _g21 = destView.width;
				while(_g31 < _g21) {
					++_g31;
					switch(sourceFormat) {
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
						}
					}
					sourceAlpha = (sourcePixel & 255) / 255.0;
					destAlpha = (destPixel & 255) / 255.0;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) {
						destPixel = 0;
					} else {
						destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)] & 255;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) {
								destPixel = 0;
							}
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destData[destPosition] = destPixel >>> 24 & 255;
						destData[destPosition + 1] = destPixel >>> 16 & 255;
						destData[destPosition + 2] = destPixel >>> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >>> 24 & 255;
						destData[destPosition + 2] = destPixel >>> 16 & 255;
						destData[destPosition + 3] = destPixel >>> 8 & 255;
						break;
					case 2:
						destData[destPosition] = destPixel >>> 8 & 255;
						destData[destPosition + 1] = destPixel >>> 16 & 255;
						destData[destPosition + 2] = destPixel >>> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		} else {
			if(alphaPoint == null) {
				alphaPoint = new lime_math_Vector2();
			}
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPremultiplied = alphaImage.buffer.premultiplied;
			var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,destView.width,destView.height));
			var alphaPosition;
			var alphaPixel;
			var _g12 = 0;
			var _g5 = alphaView.height;
			while(_g12 < _g5) {
				var y2 = _g12++;
				sourcePosition = sourceView.offset + sourceView.stride * y2;
				destPosition = destView.offset + destView.stride * y2;
				alphaPosition = alphaView.offset + alphaView.stride * y2;
				var _g32 = 0;
				var _g22 = alphaView.width;
				while(_g32 < _g22) {
					++_g32;
					switch(sourceFormat) {
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(alphaFormat) {
					case 0:
						alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 1:
						alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
						break;
					case 2:
						alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					}
					if(alphaPremultiplied) {
						if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
							alphaPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
						}
					}
					sourceAlpha = (alphaPixel & 255) / 255;
					destAlpha = (destPixel & 255) / 255;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) {
						destPixel = 0;
					} else {
						destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)] & 255;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) {
								destPixel = 0;
							}
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destData[destPosition] = destPixel >>> 24 & 255;
						destData[destPosition + 1] = destPixel >>> 16 & 255;
						destData[destPosition + 2] = destPixel >>> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >>> 24 & 255;
						destData[destPosition + 2] = destPixel >>> 16 & 255;
						destData[destPosition + 3] = destPixel >>> 8 & 255;
						break;
					case 2:
						destData[destPosition] = destPixel >>> 8 & 255;
						destData[destPosition + 1] = destPixel >>> 16 & 255;
						destData[destPosition + 2] = destPixel >>> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba1;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format1 = image.buffer.format;
	if(image.buffer.premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		row = dataView.offset + dataView.stride * _g1++;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var offset = row + _g3++ * 4;
			switch(format1) {
			case 0:
				data[offset] = fillColor >>> 24 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >>> 24 & 255;
				data[offset + 2] = fillColor >>> 16 & 255;
				data[offset + 3] = fillColor >>> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >>> 8 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	if(format == 1) {
		color = (color & 16777215) << 8 | color >> 24 & 255;
	}
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	switch(format1) {
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
			hitColor = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
		hitColor = (hitColor >>> 24 & 255 & 255) << 24 | (hitColor >>> 16 & 255 & 255) << 16 | (hitColor >>> 8 & 255 & 255) << 8 | 255;
	}
	if(fillColor == hitColor) {
		return;
	}
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) {
				continue;
			}
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			switch(format1) {
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
					readColor = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				switch(format1) {
				case 0:
					data[nextPointOffset] = fillColor >>> 24 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >>> 24 & 255;
					data[nextPointOffset + 2] = fillColor >>> 16 & 255;
					data[nextPointOffset + 3] = fillColor >>> 8 & 255;
					break;
				case 2:
					data[nextPointOffset] = fillColor >>> 8 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	if(findColor == null) {
		findColor = true;
	}
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (argb1 >>> 16 & 255 & 255) << 24 | (argb1 >>> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >>> 24 & 255 & 255;
		_mask = rgba1;
		break;
	case 2:
		var bgra = color;
		var this3 = 0;
		var rgba2 = this3;
		rgba2 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba2;
		var bgra1 = mask;
		var this4 = 0;
		var rgba3 = this4;
		rgba3 = (bgra1 >>> 8 & 255 & 255) << 24 | (bgra1 >>> 16 & 255 & 255) << 16 | (bgra1 >>> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
		_mask = rgba3;
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >>> 24 & 255 & 255) << 24 | (_color >>> 16 & 255 & 255) << 16 | (_color >>> 8 & 255 & 255) << 8 | 255;
		_mask = (_mask >>> 24 & 255 & 255) << 24 | (_mask >>> 16 & 255 & 255) << 16 | (_mask >>> 8 & 255 & 255) << 8 | 255;
	}
	var pixel;
	var hit;
	var _g1 = 0;
	var _g = image.width;
	while(_g1 < _g) {
		var x = _g1++;
		hit = false;
		var _g3 = 0;
		var _g2 = image.height;
		while(_g3 < _g2) {
			pixel = image.getPixel32(x,_g3++,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(x < left) {
					left = x;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var ix;
	var _g11 = 0;
	var _g4 = image.width;
	while(_g11 < _g4) {
		ix = image.width - 1 - _g11++;
		hit = false;
		var _g31 = 0;
		var _g21 = image.height;
		while(_g31 < _g21) {
			pixel = image.getPixel32(ix,_g31++,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(ix > right) {
					right = ix;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var _g12 = 0;
	var _g5 = image.height;
	while(_g12 < _g5) {
		var y = _g12++;
		hit = false;
		var _g32 = 0;
		var _g22 = image.width;
		while(_g32 < _g22) {
			pixel = image.getPixel32(_g32++,y,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(y < top) {
					top = y;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var iy;
	var _g13 = 0;
	var _g6 = image.height;
	while(_g13 < _g6) {
		iy = image.height - 1 - _g13++;
		hit = false;
		var _g33 = 0;
		var _g23 = image.width;
		while(_g33 < _g23) {
			pixel = image.getPixel32(_g33++,iy,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(iy > bottom) {
					bottom = iy;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) {
		++w;
	}
	if(h > 0) {
		++h;
	}
	if(w < 0) {
		w = 0;
	}
	if(h < 0) {
		h = 0;
	}
	if(left == right) {
		w = 1;
	}
	if(top == bottom) {
		h = 1;
	}
	if(left > image.width) {
		left = 0;
	}
	if(top > image.height) {
		top = 0;
	}
	return new lime_math_Rectangle(left,top,w,h);
};
lime_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 0;
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this2 = 0;
		var bgra = this2;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this2 = 0;
		var bgra = this2;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) {
		return null;
	}
	var bytes = new haxe_io_Bytes(new ArrayBuffer((rect.width * rect.height | 0) * 4));
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		position = dataView.offset + dataView.stride * _g1++;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(sourceFormat) {
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				var this1 = 0;
				var argb1 = this1;
				argb1 = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
				argb = argb1;
				pixel = argb;
				break;
			case 2:
				var this2 = 0;
				var bgra1 = this2;
				bgra1 = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
				bgra = bgra1;
				pixel = bgra;
				break;
			default:
			}
			bytes.b[destPosition++] = pixel >>> 24 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 16 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 8 & 255 & 255;
			bytes.b[destPosition++] = pixel & 255 & 255;
			position += 4;
		}
	}
	return bytes;
};
lime_graphics_utils_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) {
		return;
	}
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		sourcePosition = sourceView.offset + sourceView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(sourceFormat) {
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			}
			if(sourcePremultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
					sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			destPixel = ((((sourcePixel >>> 24 & 255) * redMultiplier + (destPixel >>> 24 & 255) * (256 - redMultiplier)) / 256 | 0) & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | ((((sourcePixel >>> 16 & 255) * greenMultiplier + (destPixel >>> 16 & 255) * (256 - greenMultiplier)) / 256 | 0) & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | ((((sourcePixel >>> 8 & 255) * blueMultiplier + (destPixel >>> 8 & 255) * (256 - blueMultiplier)) / 256 | 0) & 255) << 8 | destPixel & 255 & 255;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | (((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0) & 255;
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		var offset = i * 4;
		switch(format) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) {
		return;
	}
	var elements = newWidth * newHeight * 4;
	var newBuffer = new lime_graphics_ImageBuffer(elements != null?new Uint8Array(elements):null,newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g1 = 0;
	while(_g1 < newHeight) {
		var y = _g1++;
		var _g3 = 0;
		while(_g3 < newWidth) {
			var x = _g3++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) {
				sourceIndexX = sourceIndex + 4;
			} else {
				sourceIndexX = sourceIndex;
			}
			if(sourceY < imageHeight - 1) {
				sourceIndexY = sourceIndex + imageWidth * 4;
			} else {
				sourceIndexY = sourceIndex;
			}
			if(sourceIndexX != sourceIndex) {
				sourceIndexXY = sourceIndexY + 4;
			} else {
				sourceIndexXY = sourceIndexY;
			}
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio | 0;
			newData[index + 1] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio | 0;
			newData[index + 2] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) {
				newData[index + 3] = 0;
			} else {
				newData[index + 3] = data[sourceIndex + 3];
			}
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var elements = newWidth * newHeight * 4;
	var newData = elements != null?new Uint8Array(elements):null;
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var index;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	switch(image.get_format()) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g2 = 0;
	while(_g2 < length) {
		index = _g2++ * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	var this3 = 0;
	var source = this3;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	switch(format1) {
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
			source = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | source & 255 & 255;
		}
	}
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | source & 255 & 255;
	var data1 = image.buffer.data;
	var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format2 = image.buffer.format;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format2) {
	case 0:
		data1[offset1] = pixel >>> 24 & 255;
		data1[offset1 + 1] = pixel >>> 16 & 255;
		data1[offset1 + 2] = pixel >>> 8 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 1:
		data1[offset1] = pixel & 255;
		data1[offset1 + 1] = pixel >>> 24 & 255;
		data1[offset1 + 2] = pixel >>> 16 & 255;
		data1[offset1 + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data1[offset1] = pixel >>> 8 & 255;
		data1[offset1 + 1] = pixel >>> 16 & 255;
		data1[offset1 + 2] = pixel >>> 24 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format1) {
	case 0:
		data[offset] = pixel >>> 24 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >>> 24 & 255;
		data[offset + 2] = pixel >>> 16 & 255;
		data[offset + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >>> 8 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setPixels = function(image,rect,bytes,format) {
	if(image.buffer.data == null) {
		return;
	}
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var dataPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		row = dataView.offset + dataView.stride * _g1++;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			dataPosition += 4;
			switch(format) {
			case 1:
				var argb = color;
				var this1 = 0;
				var rgba = this1;
				rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
				pixel = rgba;
				break;
			case 2:
				var bgra = color;
				var this2 = 0;
				var rgba1 = this2;
				rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
				pixel = rgba1;
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
			}
			var offset = row + x * 4;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(sourceFormat) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (argb1 >>> 16 & 255 & 255) << 24 | (argb1 >>> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >>> 24 & 255 & 255;
		_mask = rgba1;
		var argb2 = threshold;
		var this3 = 0;
		var rgba2 = this3;
		rgba2 = (argb2 >>> 16 & 255 & 255) << 24 | (argb2 >>> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >>> 24 & 255 & 255;
		_threshold = rgba2;
		break;
	case 2:
		var bgra = color;
		var this4 = 0;
		var rgba3 = this4;
		rgba3 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba3;
		var bgra1 = mask;
		var this5 = 0;
		var rgba4 = this5;
		rgba4 = (bgra1 >>> 8 & 255 & 255) << 24 | (bgra1 >>> 16 & 255 & 255) << 16 | (bgra1 >>> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
		_mask = rgba4;
		var bgra2 = threshold;
		var this6 = 0;
		var rgba5 = this6;
		rgba5 = (bgra2 >>> 8 & 255 & 255) << 24 | (bgra2 >>> 16 & 255 & 255) << 16 | (bgra2 >>> 24 & 255 & 255) << 8 | bgra2 & 255 & 255;
		_threshold = rgba5;
		break;
	default:
		_color = color;
		_mask = mask;
		_threshold = threshold;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case "==":
		_operation = 1;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		_operation = -1;
	}
	if(_operation == -1) {
		return 0;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return 0;
	}
	var hits = 0;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var pixelMask;
	var test;
	var value;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(srcFormat) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & _mask;
			var tmp1;
			var tmp2;
			tmp1 = pixelMask >>> 24 & 255;
			tmp2 = _threshold >>> 24 & 255;
			if(tmp1 != tmp2) {
				if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
					value = 1;
				} else {
					value = -1;
				}
			} else {
				tmp1 = pixelMask >>> 16 & 255;
				tmp2 = _threshold >>> 16 & 255;
				if(tmp1 != tmp2) {
					if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
						value = 1;
					} else {
						value = -1;
					}
				} else {
					tmp1 = pixelMask >>> 8 & 255;
					tmp2 = _threshold >>> 8 & 255;
					if(tmp1 != tmp2) {
						if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
							value = 1;
						} else {
							value = -1;
						}
					} else {
						tmp1 = pixelMask & 255;
						tmp2 = _threshold & 255;
						if(tmp1 != tmp2) {
							if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
								value = 1;
							} else {
								value = -1;
							}
						} else {
							value = 0;
						}
					}
				}
			}
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				if(value != 0) {
					test = value == -1;
				} else {
					test = true;
				}
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				if(value != 0) {
					test = value == 1;
				} else {
					test = true;
				}
				break;
			default:
				test = false;
			}
			if(test) {
				if(destPremultiplied) {
					if((_color & 255) == 0) {
						if(_color != 0) {
							_color = 0;
						}
					} else if((_color & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[_color & 255];
						_color = ((_color >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((_color >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((_color >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | _color & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = _color >>> 24 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 8 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 1:
					destData[destPosition] = _color & 255;
					destData[destPosition + 1] = _color >>> 24 & 255;
					destData[destPosition + 2] = _color >>> 16 & 255;
					destData[destPosition + 3] = _color >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = _color >>> 8 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 24 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				}
				++hits;
			} else if(copySource) {
				if(destPremultiplied) {
					if((srcPixel & 255) == 0) {
						if(srcPixel != 0) {
							srcPixel = 0;
						}
					} else if((srcPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[srcPixel & 255];
						srcPixel = ((srcPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((srcPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((srcPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = srcPixel >>> 24 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 8 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 1:
					destData[destPosition] = srcPixel & 255;
					destData[destPosition + 1] = srcPixel >>> 24 & 255;
					destData[destPosition + 2] = srcPixel >>> 16 & 255;
					destData[destPosition + 3] = srcPixel >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = srcPixel >>> 8 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 24 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				}
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) {
		image.dirty = true;
		image.version++;
	}
	return hits;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		var offset = i * 4;
		switch(format) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.__pixelCompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >>> 24 & 255;
	tmp2 = n2 >>> 24 & 255;
	if(tmp1 != tmp2) {
		if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
			return 1;
		} else {
			return -1;
		}
	} else {
		tmp1 = n1 >>> 16 & 255;
		tmp2 = n2 >>> 16 & 255;
		if(tmp1 != tmp2) {
			if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
				return 1;
			} else {
				return -1;
			}
		} else {
			tmp1 = n1 >>> 8 & 255;
			tmp2 = n2 >>> 8 & 255;
			if(tmp1 != tmp2) {
				if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
					return 1;
				} else {
					return -1;
				}
			} else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) {
					if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
						return 1;
					} else {
						return -1;
					}
				} else {
					return 0;
				}
			}
		}
	}
};
var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.x = Math.ceil(this.rect.x);
	this.y = Math.ceil(this.rect.y);
	this.width = Math.floor(this.rect.width);
	this.height = Math.floor(this.rect.height);
	this.offset = this.stride * (this.y + image.offsetY) + (this.x + image.offsetX) * 4;
};
$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime","graphics","utils","_ImageDataUtil","ImageDataView"];
lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,image: null
	,offset: null
	,rect: null
	,stride: null
	,clip: function(x,y,width,height) {
		this.rect.__contract(x,y,width,height);
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.offset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,row: function(y) {
		return this.offset + this.stride * y;
	}
	,__class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"}
lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) {
		this1 = data;
	} else {
		var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
		this1 = array != null?new Float32Array(array):null;
	}
	return this1;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new(this1 != null?new Float32Array(this1):null);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1,second) {
	var _g = this1;
	_g[0] = _g[0] + second[0];
	var _g1 = this1;
	_g1[6] = _g1[6] + second[6];
	var _g2 = this1;
	_g2[12] = _g2[12] + second[12];
	var _g3 = this1;
	_g3[18] = _g3[18] + second[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable == null) {
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable = new Uint8Array(256);
	}
	var value;
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable == null) {
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable = new Uint8Array(256);
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable == null) {
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable = new Uint8Array(256);
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable == null) {
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable = new Uint8Array(256);
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		if(Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c) {
			return this.d == Matrix3.d;
		} else {
			return false;
		}
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime_math_Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime_math_Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime_math_Matrix3
};
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime_math__$Matrix4_Matrix4_$Impl_$.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) {
		this1 = data;
	} else {
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		this1 = array != null?new Float32Array(array):null;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,pivotPoint.x,pivotPoint.y,pivotPoint.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1,xScale,yScale,zScale) {
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new(array != null?new Float32Array(array):null));
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1,x,y,z) {
	this1[12] = this1[12] + x;
	this1[13] = this1[13] + y;
	this1[14] = this1[14] + z;
};
lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(this1 != null?new Float32Array(this1):null);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) {
		transposeValues = false;
	}
	if(index == null) {
		index = 0;
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
	var l = array.length - index;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var c = _g1++;
		this1[c] = array[c + index];
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) {
		transposeValues = false;
	}
	if(index == null) {
		index = 0;
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
	var l = this1.length;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var c = _g1++;
		array[c + index] = this1[c];
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + row + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(x,y,scale,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(scale == null) {
		scale = 1;
	}
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var array = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(array != null?new Float32Array(array):null);
};
lime_math__$Matrix4_Matrix4_$Impl_$.createABCD = function(a,b,c,d,tx,ty) {
	var array = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(array != null?new Float32Array(array):null);
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	var array = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(array != null?new Float32Array(array):null);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + row + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyToMatrix4 = function(this1,other) {
	(js_Boot.__cast(other , Float32Array)).set(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat,toMat,percent) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m,i,lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i)) * percent);
	}
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] = this1[i] + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - this1[i]) * percent;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
	var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1,pos,at,up) {
	if(at == null) {
		at = new lime_math_Vector4(0,0,-1);
	}
	if(up == null) {
		up = new lime_math_Vector4(0,-1,0);
	}
	var dir = new lime_math_Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var right;
	var l = Math.sqrt(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z);
	if(l != 0) {
		dir.x /= l;
		dir.y /= l;
		dir.z /= l;
	}
	var l1 = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
	if(l1 != 0) {
		vup.x /= l1;
		vup.y /= l1;
		vup.z /= l1;
	}
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	var s = vup.x * dir.x + vup.y * dir.y + vup.z * dir.z;
	dir2.x *= s;
	dir2.y *= s;
	dir2.z *= s;
	vup = new lime_math_Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) {
		var l2 = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
		if(l2 != 0) {
			vup.x /= l2;
			vup.y /= l2;
			vup.z /= l2;
		}
	} else if(dir.x != 0) {
		vup = new lime_math_Vector4(-dir.y,dir.x,0);
	} else {
		vup = new lime_math_Vector4(1,0,0);
	}
	right = new lime_math_Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	var l3 = Math.sqrt(right.x * right.x + right.y * right.y + right.z * right.z);
	if(l3 != 0) {
		right.x /= l3;
		right.y /= l3;
		right.z /= l3;
	}
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1,rhs) {
	var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,0);
	var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,4);
	var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,8);
	var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,12);
	var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,1);
	var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,5);
	var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,9);
	var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,13);
	var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,2);
	var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,6);
	var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,10);
	var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,14);
	var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,3);
	var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,7);
	var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,11);
	var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,pivotPoint.x,pivotPoint.y,pivotPoint.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1,xScale,yScale,zScale) {
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new(array != null?new Float32Array(array):null));
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1,x,y,z) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1,ain,aout) {
	var i = 0;
	while(i + 3 <= ain.length) {
		var x = ain[i];
		var y = ain[i + 1];
		var z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
	var othis = this1 != null?new Float32Array(this1):null;
	this1[1] = othis[4];
	this1[2] = othis[8];
	this1[3] = othis[12];
	this1[4] = othis[1];
	this1[6] = othis[9];
	this1[7] = othis[13];
	this1[8] = othis[2];
	this1[9] = othis[6];
	this1[11] = othis[14];
	this1[12] = othis[3];
	this1[13] = othis[7];
	this1[14] = othis[11];
};
lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation = function(x,y,z,degrees) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,0,c + a1.x * a1.x * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,5,c + a1.y * a1.y * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,4,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,8,tmp1 - tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,9,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x?toIntersect.x:this.x;
		var x1 = this.get_right() > toIntersect.get_right()?toIntersect.get_right():this.get_right();
		if(x1 <= x0) {
			return new lime_math_Rectangle();
		}
		var y0 = this.y < toIntersect.y?toIntersect.y:this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom()?toIntersect.get_bottom():this.get_bottom();
		if(y1 <= y0) {
			return new lime_math_Rectangle();
		}
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x?toIntersect.x:this.x;
		if((this.get_right() > toIntersect.get_right()?toIntersect.get_right():this.get_right()) <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y?toIntersect.y:this.y;
		return (this.get_bottom() > toIntersect.get_bottom()?toIntersect.get_bottom():this.get_bottom()) > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		return new lime_math_Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x?toUnion.x:this.x;
		var x1 = this.get_right() < toUnion.get_right()?toUnion.get_right():this.get_right();
		var y0 = this.y > toUnion.y?toUnion.y:this.y;
		return new lime_math_Rectangle(x0,y0,x1 - x0,(this.get_bottom() < toUnion.get_bottom()?toUnion.get_bottom():this.get_bottom()) - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		if(this.x < x) {
			this.x = x;
		}
		if(this.y < y) {
			this.y = y;
		}
		if(this.get_right() > x + width) {
			this.width = x + width - this.x;
		}
		if(this.get_bottom() > y + height) {
			this.height = y + height - this.y;
		}
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
		}
		if(this.y > y) {
			this.y = y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f) {
	return new lime_math_Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime_math_Vector2.polar = function(len,angle) {
	return new lime_math_Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime_math_Vector2.prototype = {
	length: null
	,x: null
	,y: null
	,add: function(v) {
		return new lime_math_Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime_math_Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_length:"get_length"}
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
lime_math_Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	var l = Math.sqrt(a0.x * a0.x + a0.y * a0.y + a0.z * a0.z);
	if(l != 0) {
		a0.x /= l;
		a0.y /= l;
		a0.z /= l;
	}
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	var l1 = Math.sqrt(b0.x * b0.x + b0.y * b0.y + b0.z * b0.z);
	if(l1 != 0) {
		b0.x /= l1;
		b0.y /= l1;
		b0.z /= l1;
	}
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	length: null
	,lengthSquared: null
	,w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new lime_math_Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime_math_Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime_math_Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_math_color__$ARGB_ARGB_$Impl_$ = {};
$hxClasses["lime.math.color._ARGB.ARGB_Impl_"] = lime_math_color__$ARGB_ARGB_$Impl_$;
lime_math_color__$ARGB_ARGB_$Impl_$.__name__ = ["lime","math","color","_ARGB","ARGB_Impl_"];
lime_math_color__$ARGB_ARGB_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$ARGB_ARGB_$Impl_$._new = function(argb) {
	if(argb == null) {
		argb = 0;
	}
	var this1 = argb;
	return this1;
};
lime_math_color__$ARGB_ARGB_$Impl_$.create = function(a,r,g,b) {
	var this1 = 0;
	var argb = this1;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) == 0) {
		this1 = 0;
	} else if((this1 >>> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >>> 24 & 255];
		this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >>> 24 & 255);
			this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255;
		}
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >>> 24 & 255);
		this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) == 0) {
			this1 = 0;
		} else if((this1 >>> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >>> 24 & 255];
			this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 16 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
	var this1 = 0;
	var argb = this1;
	argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
	var this1 = 0;
	var argb = this1;
	argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$BGRA_BGRA_$Impl_$ = {};
$hxClasses["lime.math.color._BGRA.BGRA_Impl_"] = lime_math_color__$BGRA_BGRA_$Impl_$;
lime_math_color__$BGRA_BGRA_$Impl_$.__name__ = ["lime","math","color","_BGRA","BGRA_Impl_"];
lime_math_color__$BGRA_BGRA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$BGRA_BGRA_$Impl_$._new = function(bgra) {
	if(bgra == null) {
		bgra = 0;
	}
	var this1 = bgra;
	return this1;
};
lime_math_color__$BGRA_BGRA_$Impl_$.create = function(b,g,r,a) {
	var this1 = 0;
	var bgra = this1;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
	var this1 = 0;
	var bgra = this1;
	bgra = (argb & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb >>> 16 & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
	var this1 = 0;
	var bgra = this1;
	bgra = (rgba >>> 8 & 255 & 255) << 24 | (rgba >>> 16 & 255 & 255) << 16 | (rgba >>> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime","math","color","_RGBA","RGBA_Impl_"];
lime_math_color__$RGBA_RGBA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$RGBA_RGBA_$Impl_$._new = function(rgba) {
	if(rgba == null) {
		rgba = 0;
	}
	var this1 = rgba;
	return this1;
};
lime_math_color__$RGBA_RGBA_$Impl_$.create = function(r,g,b,a) {
	var this1 = 0;
	var rgba = this1;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) {
			this1 = 0;
		}
	} else if((this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) {
				this1 = 0;
			}
		} else if((this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 24 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 8 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
	var this1 = 0;
	var rgba = this1;
	rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
	var this1 = 0;
	var rgba = this1;
	rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = ["lime","net","_IHTTPRequest"];
lime_net__$IHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,cancel: null
	,__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.backend = new lime__$backend_html5_HTML5HTTPRequest();
	this.backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = ["lime","net","_HTTPRequest","AbstractHTTPRequest"];
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseData: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,backend: null
	,cancel: function() {
		this.backend.cancel();
	}
	,load: function(uri) {
		return null;
	}
	,__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net_HTTPRequest = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = ["lime","net","HTTPRequest"];
lime_net_HTTPRequest.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net_HTTPRequest.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	__class__: lime_net_HTTPRequest
});
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = ["lime","net","_HTTPRequest_Bytes"];
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(bytes) {
			_gthis.responseData = _gthis.fromBytes(bytes);
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = ["lime","net","_HTTPRequest_String"];
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(text) {
			_gthis.responseData = text;
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = ["lime","net","HTTPRequestHeader"];
lime_net_HTTPRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = ["lime","net","_HTTPRequest_lime_utils_Bytes"];
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_net__$HTTPRequest_$openfl_$utils_$ByteArray = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_openfl_utils_ByteArray"] = lime_net__$HTTPRequest_$openfl_$utils_$ByteArray;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__name__ = ["lime","net","_HTTPRequest_openfl_utils_ByteArray"];
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$openfl_$utils_$ByteArray
});
var lime_system_BackgroundWorker = function() {
	this.onProgress = new lime_app__$Event_$Dynamic_$Void();
	this.onError = new lime_app__$Event_$Dynamic_$Void();
	this.onComplete = new lime_app__$Event_$Dynamic_$Void();
	this.doWork = new lime_app__$Event_$Dynamic_$Void();
};
$hxClasses["lime.system.BackgroundWorker"] = lime_system_BackgroundWorker;
lime_system_BackgroundWorker.__name__ = ["lime","system","BackgroundWorker"];
lime_system_BackgroundWorker.prototype = {
	canceled: null
	,completed: null
	,doWork: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,__runMessage: null
	,cancel: function() {
		this.canceled = true;
	}
	,run: function(message) {
		this.canceled = false;
		this.completed = false;
		this.__runMessage = message;
		this.__doWork();
	}
	,sendComplete: function(message) {
		this.completed = true;
		if(!this.canceled) {
			this.canceled = true;
			this.onComplete.dispatch(message);
		}
	}
	,sendError: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			this.onError.dispatch(message);
		}
	}
	,sendProgress: function(message) {
		if(!this.canceled) {
			this.onProgress.dispatch(message);
		}
	}
	,__doWork: function() {
		this.doWork.dispatch(this.__runMessage);
	}
	,__update: function(deltaTime) {
	}
	,__class__: lime_system_BackgroundWorker
};
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = ["lime","system","CFFI"];
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	if(!lime_system_CFFI.enabled) {
		return Reflect.makeVarArgs(function(__) {
			return { };
		});
	}
	return null;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
$hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] = lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = ["lime","system","_CFFIPointer","CFFIPointer_Impl_"];
lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function(handle) {
	return handle;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function(this1) {
	return 0;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = ["lime","system","Clipboard"];
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"}
lime_system_Clipboard.get_text = function() {
	return lime_system_Clipboard._text;
};
lime_system_Clipboard.set_text = function(value) {
	lime_system_Clipboard._text = value;
	if(window.document.queryCommandEnabled("copy")) {
		window.document.execCommand("copy");
	}
	return value;
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = ["lime","system","Display"];
lime_system_Display.prototype = {
	bounds: null
	,currentMode: null
	,id: null
	,dpi: null
	,name: null
	,supportedModes: null
	,__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = ["lime","system","DisplayMode"];
lime_system_DisplayMode.prototype = {
	height: null
	,pixelFormat: null
	,refreshRate: null
	,width: null
	,__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : ["lime","system","Endian"], __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.__properties__ = {get_userDirectory:"get_userDirectory",get_numDisplays:"get_numDisplays",get_fontsDirectory:"get_fontsDirectory",get_endianness:"get_endianness",get_documentsDirectory:"get_documentsDirectory",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory",set_allowScreenTimeout:"set_allowScreenTimeout",get_allowScreenTimeout:"get_allowScreenTimeout"}
lime_system_System.exit = function(code) {
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.dpi = 96;
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return new Date().getTime();
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.openFile = function(path) {
	if(path != null) {
		window.open(path,"_blank");
	}
};
lime_system_System.openURL = function(url,target) {
	if(target == null) {
		target = "_blank";
	}
	if(url != null) {
		window.open(url,target);
	}
};
lime_system_System.__getDirectory = function(type) {
	return null;
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	return lime_system_System.__getDirectory(0);
};
lime_system_System.get_applicationStorageDirectory = function() {
	return lime_system_System.__getDirectory(1);
};
lime_system_System.get_desktopDirectory = function() {
	return lime_system_System.__getDirectory(2);
};
lime_system_System.get_documentsDirectory = function() {
	return lime_system_System.__getDirectory(3);
};
lime_system_System.get_fontsDirectory = function() {
	return lime_system_System.__getDirectory(4);
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_userDirectory = function() {
	return lime_system_System.__getDirectory(5);
};
lime_system_System.get_endianness = function() {
	return lime_system_Endian.LITTLE_ENDIAN;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onProgress = new lime_app__$Event_$Dynamic_$Void();
	this.onError = new lime_app__$Event_$Dynamic_$Void();
	this.onComplete = new lime_app__$Event_$Dynamic_$Void();
	this.doWork = new lime_app__$Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = ["lime","system","ThreadPool"];
lime_system_ThreadPool.prototype = {
	currentThreads: null
	,doWork: null
	,maxThreads: null
	,minThreads: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,queue: function(state) {
		this.doWork.dispatch(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxClasses["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : ["lime","system","_ThreadPool","ThreadPoolMessageType"], __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"] };
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE",0];
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR",1];
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT",2];
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS",3];
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK",4];
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = ["lime","system","_ThreadPool","ThreadPoolMessage"];
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	state: null
	,type: null
	,__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text__$Glyph_Glyph_$Impl_$ = {};
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
lime_text__$Glyph_Glyph_$Impl_$.__name__ = ["lime","text","_Glyph","Glyph_Impl_"];
lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
	return i;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = ["lime","text","GlyphMetrics"];
lime_text_GlyphMetrics.prototype = {
	advance: null
	,height: null
	,horizontalBearing: null
	,verticalBearing: null
	,__class__: lime_text_GlyphMetrics
};
var lime_text_GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) {
		this.offset = offset;
	} else {
		this.offset = new lime_math_Vector2();
	}
};
$hxClasses["lime.text.GlyphPosition"] = lime_text_GlyphPosition;
lime_text_GlyphPosition.__name__ = ["lime","text","GlyphPosition"];
lime_text_GlyphPosition.prototype = {
	advance: null
	,glyph: null
	,offset: null
	,__class__: lime_text_GlyphPosition
};
var lime_text__$TextDirection_TextDirection_$Impl_$ = {};
$hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime_text__$TextDirection_TextDirection_$Impl_$;
lime_text__$TextDirection_TextDirection_$Impl_$.__name__ = ["lime","text","_TextDirection","TextDirection_Impl_"];
lime_text__$TextDirection_TextDirection_$Impl_$.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"}
lime_text__$TextDirection_TextDirection_$Impl_$.reverse = function(this1) {
	this1 ^= 1;
};
lime_text__$TextDirection_TextDirection_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var lime_text_TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) {
		language = "en";
	}
	if(script == null) {
		script = "Zyyy";
	}
	if(direction == null) {
		direction = 4;
	}
	if(size == null) {
		size = 12;
	}
	if(text == null) {
		text = "";
	}
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.positions = [];
	this.__dirty = true;
};
$hxClasses["lime.text.TextLayout"] = lime_text_TextLayout;
lime_text_TextLayout.__name__ = ["lime","text","TextLayout"];
lime_text_TextLayout.prototype = {
	font: null
	,glyphs: null
	,positions: null
	,size: null
	,text: null
	,__dirty: null
	,__buffer: null
	,__direction: null
	,__handle: null
	,__language: null
	,__script: null
	,__position: function() {
		this.positions = [];
	}
	,get_positions: function() {
		if(this.__dirty) {
			this.__dirty = false;
			this.__position();
		}
		return this.positions;
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) {
			return value;
		}
		this.__direction = value;
		this.__dirty = true;
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) {
			return value;
		}
		this.font = value;
		this.__dirty = true;
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) {
			return value;
		}
		this.__language = value;
		this.__dirty = true;
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) {
			return value;
		}
		this.__script = value;
		this.__dirty = true;
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) {
			return value;
		}
		this.size = value;
		this.__dirty = true;
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) {
			return value;
		}
		this.text = value;
		this.__dirty = true;
		return value;
	}
	,__class__: lime_text_TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",get_positions:"get_positions",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
var lime_text__$TextScript_TextScript_$Impl_$ = {};
$hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime_text__$TextScript_TextScript_$Impl_$;
lime_text__$TextScript_TextScript_$Impl_$.__name__ = ["lime","text","_TextScript","TextScript_Impl_"];
lime_text__$TextScript_TextScript_$Impl_$.__properties__ = {get_rightToLeft:"get_rightToLeft"}
lime_text__$TextScript_TextScript_$Impl_$.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Arab":case "Armi":case "Avst":case "Cprt":case "Hebr":case "Khar":case "Lydi":case "Mand":case "Nkoo":case "Orkh":case "Phli":case "Phlp":case "Phnx":case "Samr":case "Sarb":case "Syrc":case "Thaa":
		return true;
	default:
		return false;
	}
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,get_guid: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].id;
	}
	,get_name: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].id;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = ["lime","ui","_GamepadAxis","GamepadAxis_Impl_"];
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = ["lime","ui","_GamepadButton","GamepadButton_Impl_"];
lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = ["lime","ui","Joystick"];
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
lime_ui_Joystick.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,onHatMove: null
	,onTrackballMove: null
	,get_guid: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].id;
	}
	,get_name: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].id;
	}
	,get_numAxes: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].axes.length;
	}
	,get_numButtons: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].buttons.length;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
	,__properties__: {get_numTrackballs:"get_numTrackballs",get_numHats:"get_numHats",get_numButtons:"get_numButtons",get_numAxes:"get_numAxes",get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
$hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] = lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = ["lime","ui","_JoystickHatPosition","JoystickHatPosition_Impl_"];
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__properties__ = {set_up:"set_up",get_up:"get_up",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_down:"set_down",get_down:"get_down",set_center:"set_center",get_center:"get_center"}
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function(value) {
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center = function(this1) {
	return this1 == 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center = function(this1,value) {
	if(value) {
		this1 = 0;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down = function(this1,value) {
	if(value) {
		this1 |= 4;
	} else {
		this1 &= 268435451;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left = function(this1,value) {
	if(value) {
		this1 |= 8;
	} else {
		this1 &= 268435447;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right = function(this1,value) {
	if(value) {
		this1 |= 2;
	} else {
		this1 &= 268435453;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function(this1,value) {
	if(value) {
		this1 |= 1;
	} else {
		this1 &= 268435454;
	}
	return value;
};
var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = ["lime","ui","_KeyCode","KeyCode_Impl_"];
lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"}
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) {
		this1 |= 768;
	} else {
		this1 &= 268434687;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	if((this1 & 8192) <= 0) {
		return (this1 & 8192) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) {
		this1 |= 8192;
	} else {
		this1 &= 268427263;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) {
		this1 |= 192;
	} else {
		this1 &= 268435263;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) {
		this1 |= 3072;
	} else {
		this1 &= 268432383;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	if((this1 & 4096) <= 0) {
		return (this1 & 4096) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) {
		this1 |= 4096;
	} else {
		this1 &= 268431359;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) {
		this1 |= 3;
	} else {
		this1 &= 268435452;
	}
	return value;
};
var lime_ui_Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
lime_ui_Mouse.__name__ = ["lime","ui","Mouse"];
lime_ui_Mouse.__properties__ = {set_lock:"set_lock",get_lock:"get_lock",set_cursor:"set_cursor",get_cursor:"get_cursor"}
lime_ui_Mouse.hide = function() {
	lime__$backend_html5_HTML5Mouse.hide();
};
lime_ui_Mouse.show = function() {
	lime__$backend_html5_HTML5Mouse.show();
};
lime_ui_Mouse.warp = function(x,y,window) {
	lime__$backend_html5_HTML5Mouse.warp(x,y,window);
};
lime_ui_Mouse.get_cursor = function() {
	return lime__$backend_html5_HTML5Mouse.get_cursor();
};
lime_ui_Mouse.set_cursor = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_cursor(value);
};
lime_ui_Mouse.get_lock = function() {
	return lime__$backend_html5_HTML5Mouse.get_lock();
};
lime_ui_Mouse.set_lock = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_lock(value);
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = ["lime","ui","Touch"];
lime_ui_Touch.prototype = {
	device: null
	,dx: null
	,dy: null
	,id: null
	,pressure: null
	,x: null
	,y: null
	,__class__: lime_ui_Touch
};
var lime_ui_Window = function(config) {
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onCreate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) {
			this.__width = config.width;
		}
		if(Object.prototype.hasOwnProperty.call(config,"height")) {
			this.__height = config.height;
		}
		if(Object.prototype.hasOwnProperty.call(config,"x")) {
			this.__x = config.x;
		}
		if(Object.prototype.hasOwnProperty.call(config,"y")) {
			this.__y = config.y;
		}
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) {
			this.__fullscreen = config.fullscreen;
		}
		if(Object.prototype.hasOwnProperty.call(config,"borderless")) {
			this.__borderless = config.borderless;
		}
		if(Object.prototype.hasOwnProperty.call(config,"resizable")) {
			this.__resizable = config.resizable;
		}
		if(Object.prototype.hasOwnProperty.call(config,"title")) {
			this.__title = config.title;
		}
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	application: null
	,config: null
	,display: null
	,id: null
	,onActivate: null
	,onClose: null
	,onCreate: null
	,onDeactivate: null
	,onDropFile: null
	,onEnter: null
	,onFocusIn: null
	,onFocusOut: null
	,onFullscreen: null
	,onKeyDown: null
	,onKeyUp: null
	,onLeave: null
	,onMinimize: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onMove: null
	,onResize: null
	,onRestore: null
	,onTextEdit: null
	,onTextInput: null
	,renderer: null
	,scale: null
	,stage: null
	,backend: null
	,__borderless: null
	,__fullscreen: null
	,__height: null
	,__maximized: null
	,__minimized: null
	,__resizable: null
	,__scale: null
	,__title: null
	,__width: null
	,__x: null
	,__y: null
	,alert: function(message,title) {
		this.backend.alert(message,title);
	}
	,close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.application = application;
		this.backend.create(application);
		if(this.renderer != null) {
			this.renderer.create();
		}
	}
	,focus: function() {
		this.backend.focus();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) {
			return;
		}
		this.backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,get_display: function() {
		return this.backend.getDisplay();
	}
	,get_borderless: function() {
		return this.__borderless;
	}
	,set_borderless: function(value) {
		return this.__borderless = this.backend.setBorderless(value);
	}
	,get_enableTextEvents: function() {
		return this.backend.getEnableTextEvents();
	}
	,set_enableTextEvents: function(value) {
		return this.backend.setEnableTextEvents(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_maximized: function() {
		return this.__maximized;
	}
	,set_maximized: function(value) {
		this.__minimized = false;
		return this.__maximized = this.backend.setMaximized(value);
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		this.__maximized = false;
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_resizable: function() {
		return this.__resizable;
	}
	,set_resizable: function(value) {
		this.__resizable = this.backend.setResizable(value);
		return this.__resizable;
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.backend.setTitle(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_title:"set_title",get_title:"get_title",get_scale:"get_scale",set_resizable:"set_resizable",get_resizable:"get_resizable",set_minimized:"set_minimized",get_minimized:"get_minimized",set_maximized:"set_maximized",get_maximized:"get_maximized",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_enableTextEvents:"set_enableTextEvents",get_enableTextEvents:"get_enableTextEvents",get_display:"get_display",set_borderless:"set_borderless",get_borderless:"get_borderless"}
};
var lime_utils_TAError = $hxClasses["lime.utils.TAError"] = { __ename__ : ["lime","utils","TAError"], __constructs__ : ["RangeError"] };
lime_utils_TAError.RangeError = ["RangeError",0];
lime_utils_TAError.RangeError.toString = $estr;
lime_utils_TAError.RangeError.__enum__ = lime_utils_TAError;
var lime_utils_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 930117;
};
$hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
lime_utils_AssetCache.__name__ = ["lime","utils","AssetCache"];
lime_utils_AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,version: null
	,exists: function(id,type) {
		if(type == "IMAGE" || type == null) {
			var _this = this.image;
			if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			var _this1 = this.font;
			if(__map_reserved[id] != null?_this1.existsReserved(id):_this1.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			var _this2 = this.audio;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				return true;
			}
		}
		return false;
	}
	,set: function(id,type,asset) {
		switch(type) {
		case "FONT":
			var _this = this.font;
			if(__map_reserved[id] != null) {
				_this.setReserved(id,asset);
			} else {
				_this.h[id] = asset;
			}
			break;
		case "IMAGE":
			if(!js_Boot.__instanceof(asset,lime_graphics_Image)) {
				throw new js__$Boot_HaxeError("Cannot cache non-Image asset: " + Std.string(asset) + " as Image");
			}
			var _this1 = this.image;
			var value = asset;
			if(__map_reserved[id] != null) {
				_this1.setReserved(id,value);
			} else {
				_this1.h[id] = value;
			}
			break;
		case "MUSIC":case "SOUND":
			if(!js_Boot.__instanceof(asset,lime_audio_AudioBuffer)) {
				throw new js__$Boot_HaxeError("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer");
			}
			var _this2 = this.audio;
			var value1 = asset;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,value1);
			} else {
				_this2.h[id] = value1;
			}
			break;
		default:
			throw new js__$Boot_HaxeError(type + " assets are not cachable");
		}
	}
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			while(keys.hasNext()) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) {
					this.audio.remove(key);
				}
			}
			var keys1 = this.font.keys();
			while(keys1.hasNext()) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.font.remove(key1);
				}
			}
			var keys2 = this.image.keys();
			while(keys2.hasNext()) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) {
					this.image.remove(key2);
				}
			}
		}
	}
	,__class__: lime_utils_AssetCache
};
var lime_utils_AssetManifest = function() {
	this.assets = [];
	this.libraryArgs = [];
	this.version = 1;
};
$hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
lime_utils_AssetManifest.__name__ = ["lime","utils","AssetManifest"];
lime_utils_AssetManifest.fromBytes = function(bytes) {
	if(bytes != null) {
		return lime_utils_AssetManifest.parse(bytes.getString(0,bytes.length));
	} else {
		return null;
	}
};
lime_utils_AssetManifest.fromFile = function(path) {
	return lime_utils_AssetManifest.fromBytes(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path));
};
lime_utils_AssetManifest.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes));
};
lime_utils_AssetManifest.loadFromFile = function(path) {
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(path).then(function(bytes) {
		return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes));
	});
};
lime_utils_AssetManifest.parse = function(data) {
	var manifestData = JSON.parse(data);
	var manifest = new lime_utils_AssetManifest();
	if(manifestData.version == 1) {
		manifest.name = manifestData.name;
		manifest.libraryType = manifestData.libraryType;
		manifest.libraryArgs = manifestData.libraryArgs;
		manifest.assets = haxe_Unserializer.run(manifestData.assets);
	}
	return manifest;
};
lime_utils_AssetManifest.prototype = {
	assets: null
	,libraryArgs: null
	,libraryType: null
	,name: null
	,version: null
	,serialize: function() {
		var manifestData = { };
		manifestData.version = this.version;
		manifestData.libraryType = this.libraryType;
		manifestData.libraryArgs = this.libraryArgs;
		manifestData.name = this.name;
		manifestData.assets = haxe_Serializer.run(this.assets);
		return JSON.stringify(manifestData);
	}
	,__class__: lime_utils_AssetManifest
};
var lime_utils_Assets = function() { };
$hxClasses["lime.utils.Assets"] = lime_utils_Assets;
lime_utils_Assets.__name__ = ["lime","utils","Assets"];
lime_utils_Assets.exists = function(id,type) {
	if(type == null) {
		type = "BINARY";
	}
	var colonIndex = id.indexOf(":");
	var symbol_libraryName = id.substring(0,colonIndex);
	var symbol_symbolName = id.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.exists(symbol_symbolName,type);
	}
	return false;
};
lime_utils_Assets.getAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var _this = lime_utils_Assets.cache.font;
			var font = __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
			if(font != null) {
				return font;
			}
			break;
		case "IMAGE":
			var _this1 = lime_utils_Assets.cache.image;
			var image = __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return image;
			}
			break;
		case "MUSIC":case "SOUND":
			var _this2 = lime_utils_Assets.cache.audio;
			var audio = __map_reserved[id] != null?_this2.getReserved(id):_this2.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return audio;
			}
			break;
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		}
	}
	var colonIndex = id.indexOf(":");
	var symbol_libraryName = id.substring(0,colonIndex);
	var symbol_symbolName = id.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			if(symbol_library.isLocal(symbol_symbolName,type)) {
				var asset = symbol_library.getAsset(symbol_symbolName,type);
				if(useCache && lime_utils_Assets.cache.enabled) {
					lime_utils_Assets.cache.set(id,type,asset);
				}
				return asset;
			} else {
				lime_utils_Log.info(type + " asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 145, className : "lime.utils.Assets", methodName : "getAsset"});
			}
		} else {
			lime_utils_Log.info("There is no " + type + " asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 151, className : "lime.utils.Assets", methodName : "getAsset"});
		}
	} else {
		lime_utils_Log.info("There is no asset library named \"" + symbol_libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 157, className : "lime.utils.Assets", methodName : "getAsset"});
	}
	return null;
};
lime_utils_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"SOUND",useCache);
};
lime_utils_Assets.getBytes = function(id) {
	return lime_utils_Assets.getAsset(id,"BINARY",false);
};
lime_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"FONT",useCache);
};
lime_utils_Assets.getImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var _this = lime_utils_Assets.libraries;
	return __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
};
lime_utils_Assets.getPath = function(id) {
	var colonIndex = id.indexOf(":");
	var symbol_libraryName = id.substring(0,colonIndex);
	var symbol_symbolName = id.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,null)) {
			return symbol_library.getPath(symbol_symbolName);
		} else {
			lime_utils_Log.info("There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 253, className : "lime.utils.Assets", methodName : "getPath"});
		}
	} else {
		lime_utils_Log.info("There is no asset library named \"" + symbol_libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 259, className : "lime.utils.Assets", methodName : "getPath"});
	}
	return null;
};
lime_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getAsset(id,"TEXT",false);
};
lime_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && lime_utils_Assets.cache.enabled) {
		if(lime_utils_Assets.cache.exists(id,type)) {
			return true;
		}
	}
	var colonIndex = id.indexOf(":");
	var symbol_libraryName = id.substring(0,colonIndex);
	var symbol_symbolName = id.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.isLocal(symbol_symbolName,type);
	} else {
		return false;
	}
};
lime_utils_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.isValidImage = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.list = function(type) {
	var items = [];
	var _this = lime_utils_Assets.libraries;
	var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(tmp.hasNext()) {
		var libraryItems = tmp.next().list(type);
		if(libraryItems != null) {
			items = items.concat(libraryItems);
		}
	}
	return items;
};
lime_utils_Assets.loadAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var _this = lime_utils_Assets.cache.font;
			var font = __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
			if(font != null) {
				return lime_app_Future.withValue(font);
			}
			break;
		case "IMAGE":
			var _this1 = lime_utils_Assets.cache.image;
			var image = __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return lime_app_Future.withValue(image);
			}
			break;
		case "MUSIC":case "SOUND":
			var _this2 = lime_utils_Assets.cache.audio;
			var audio = __map_reserved[id] != null?_this2.getReserved(id):_this2.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return lime_app_Future.withValue(audio);
			}
			break;
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		}
	}
	var colonIndex = id.indexOf(":");
	var symbol_libraryName = id.substring(0,colonIndex);
	var symbol_symbolName = id.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			var future = symbol_library.loadAsset(symbol_symbolName,type);
			if(useCache && lime_utils_Assets.cache.enabled) {
				future.onComplete(function(asset) {
					lime_utils_Assets.cache.set(id,type,asset);
				});
			}
			return future;
		} else {
			return lime_app_Future.withError("[Assets] There is no " + type + " asset with an ID of \"" + id + "\"");
		}
	} else {
		return lime_app_Future.withError("[Assets] There is no asset library named \"" + symbol_libraryName + "\"");
	}
};
lime_utils_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"SOUND",useCache);
};
lime_utils_Assets.loadBytes = function(id) {
	return lime_utils_Assets.loadAsset(id,"BINARY",false);
};
lime_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"FONT",useCache);
};
lime_utils_Assets.loadImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.loadLibrary = function(name) {
	var promise = new lime_app_Promise();
	var data = lime_utils_Assets.getText("libraries/" + name + ".json");
	if(data != null && data != "") {
		var library = lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.parse(data));
		var _this = lime_utils_Assets.libraries;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,library);
		} else {
			_this.h[name] = library;
		}
		library.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
		promise.completeWith(library.load());
	} else {
		promise.error("[Assets] There is no asset library named \"" + name + "\"");
	}
	return promise.future;
};
lime_utils_Assets.loadText = function(id) {
	var promise = new lime_app_Promise();
	var colonIndex = id.indexOf(":");
	var symbol_libraryName = id.substring(0,colonIndex);
	var symbol_symbolName = id.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,"TEXT")) {
			promise.completeWith(symbol_library.loadText(symbol_symbolName));
		} else {
			promise.error("[Assets] There is no String asset with an ID of \"" + id + "\"");
		}
	} else {
		promise.error("[Assets] There is no asset library named \"" + symbol_libraryName + "\"");
	}
	return promise.future;
};
lime_utils_Assets.registerLibrary = function(name,library) {
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name)) {
		var _this1 = lime_utils_Assets.libraries;
		if((__map_reserved[name] != null?_this1.getReserved(name):_this1.h[name]) == library) {
			return;
		} else {
			lime_utils_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_utils_Assets.library_onChange);
	}
	var _this2 = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		_this2.setReserved(name,library);
	} else {
		_this2.h[name] = library;
	}
};
lime_utils_Assets.unloadLibrary = function(name) {
	var _this = lime_utils_Assets.libraries;
	var library = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	if(library != null) {
		lime_utils_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_utils_Assets.library_onChange);
		library.unload();
	}
	lime_utils_Assets.libraries.remove(name);
};
lime_utils_Assets.library_onChange = function() {
	lime_utils_Assets.cache.clear();
	lime_utils_Assets.onChange.dispatch();
};
var lime_utils__$Assets_LibrarySymbol = function(id) {
	var colonIndex = id.indexOf(":");
	this.libraryName = id.substring(0,colonIndex);
	this.symbolName = id.substring(colonIndex + 1);
	this.library = lime_utils_Assets.getLibrary(this.libraryName);
};
$hxClasses["lime.utils._Assets.LibrarySymbol"] = lime_utils__$Assets_LibrarySymbol;
lime_utils__$Assets_LibrarySymbol.__name__ = ["lime","utils","_Assets","LibrarySymbol"];
lime_utils__$Assets_LibrarySymbol.prototype = {
	libraryName: null
	,symbolName: null
	,library: null
	,isLocal: function(type) {
		return this.library.isLocal(this.symbolName,type);
	}
	,exists: function(type) {
		return this.library.exists(this.symbolName,type);
	}
	,__class__: lime_utils__$Assets_LibrarySymbol
};
var lime_utils__$Bytes_Bytes_$Impl_$ = {};
$hxClasses["lime.utils._Bytes.Bytes_Impl_"] = lime_utils__$Bytes_Bytes_$Impl_$;
lime_utils__$Bytes_Bytes_$Impl_$.__name__ = ["lime","utils","_Bytes","Bytes_Impl_"];
lime_utils__$Bytes_Bytes_$Impl_$._new = function(length,bytesData) {
	return new haxe_io_Bytes(bytesData);
};
lime_utils__$Bytes_Bytes_$Impl_$.alloc = function(length) {
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.fastGet = function(b,pos) {
	return b.bytes[pos];
};
lime_utils__$Bytes_Bytes_$Impl_$.fromBytes = function(bytes) {
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.fromFile = function(path) {
	return null;
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes));
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile = function(path) {
	return new lime_net__$HTTPRequest_$lime_$utils_$Bytes().load(path);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.lime_bytes_from_data_pointer = function(data,length) {
	return lime_utils__$Bytes_Bytes_$Impl_$.cffi_lime_bytes_from_data_pointer(data,length);
};
lime_utils__$Bytes_Bytes_$Impl_$.lime_bytes_get_data_pointer = function(data) {
	return lime_utils__$Bytes_Bytes_$Impl_$.cffi_lime_bytes_get_data_pointer(data);
};
lime_utils__$Bytes_Bytes_$Impl_$.lime_bytes_read_file = function(path,bytes) {
	return lime_utils__$Bytes_Bytes_$Impl_$.cffi_lime_bytes_read_file(path,bytes);
};
var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = ["lime","utils","_Float32Array","Float32Array_Impl_"];
lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
lime_utils_GLUtils.__name__ = ["lime","utils","GLUtils"];
lime_utils_GLUtils.compileShader = function(source,type) {
	var shader = lime_graphics_opengl_GL.context.createShader(type);
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
	lime_graphics_opengl_GL.context.compileShader(shader);
	if(lime_graphics_opengl_GL.context.getShaderParameter(shader,35713) == 0) {
		var message;
		switch(type) {
		case 35632:
			message = "Error compiling fragment shader";
			break;
		case 35633:
			message = "Error compiling vertex shader";
			break;
		default:
			message = "Error compiling unknown shader type";
		}
		message += "\n" + lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
		lime_utils_Log.error(message,{ fileName : "GLUtils.hx", lineNumber : 35, className : "lime.utils.GLUtils", methodName : "compileShader"});
	}
	return shader;
};
lime_utils_GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime_utils_GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime_utils_GLUtils.compileShader(fragmentSource,35632);
	var program = lime_graphics_opengl_GL.context.createProgram();
	lime_graphics_opengl_GL.context.attachShader(program,vertexShader);
	lime_graphics_opengl_GL.context.attachShader(program,fragmentShader);
	lime_graphics_opengl_GL.context.linkProgram(program);
	if(lime_graphics_opengl_GL.context.getProgramParameter(program,35714) == 0) {
		lime_utils_Log.error("Unable to initialize the shader program",{ fileName : "GLUtils.hx", lineNumber : 56, className : "lime.utils.GLUtils", methodName : "createProgram"});
	}
	return program;
};
var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] = lime_utils__$Int16Array_Int16Array_$Impl_$;
lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = ["lime","utils","_Int16Array","Int16Array_Impl_"];
lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = ["lime","utils","_Int32Array","Int32Array_Impl_"];
lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = ["lime","utils","Log"];
lime_utils_Log.debug = function(message,info) {
	if(lime_utils_Log.level >= 4) {
		console.log("[" + info.className + "] " + message);
	}
};
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) {
		console.log("[" + info.className + "] ERROR: " + message);
	}
};
lime_utils_Log.info = function(message,info) {
	if(lime_utils_Log.level >= 3) {
		console.log("[" + info.className + "] " + message);
	}
};
lime_utils_Log.print = function(message) {
	console.log(message);
};
lime_utils_Log.println = function(message) {
	console.log(message);
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) {
		console.log("[" + info.className + "] " + message);
	}
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) {
		console.log("[" + info.className + "] WARNING: " + message);
	}
};
var lime_utils__$Log_LogLevel_$Impl_$ = {};
$hxClasses["lime.utils._Log.LogLevel_Impl_"] = lime_utils__$Log_LogLevel_$Impl_$;
lime_utils__$Log_LogLevel_$Impl_$.__name__ = ["lime","utils","_Log","LogLevel_Impl_"];
lime_utils__$Log_LogLevel_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_utils__$Log_LogLevel_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_utils__$Log_LogLevel_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_utils__$Log_LogLevel_$Impl_$.lte = function(a,b) {
	return a <= b;
};
var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = ["lime","utils","_UInt32Array","UInt32Array_Impl_"];
lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = ["lime","utils","_UInt8Array","UInt8Array_Impl_"];
lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		return new Uint8Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_compress_Deflate = function() { };
$hxClasses["lime.utils.compress.Deflate"] = lime_utils_compress_Deflate;
lime_utils_compress_Deflate.__name__ = ["lime","utils","compress","Deflate"];
lime_utils_compress_Deflate.compress = function(bytes) {
	var data = pako.deflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime_utils_compress_Deflate.decompress = function(bytes) {
	var data = pako.inflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime_utils_compress_LZMA = function() { };
$hxClasses["lime.utils.compress.LZMA"] = lime_utils_compress_LZMA;
lime_utils_compress_LZMA.__name__ = ["lime","utils","compress","LZMA"];
lime_utils_compress_LZMA.compress = function(bytes) {
	return null;
};
lime_utils_compress_LZMA.decompress = function(bytes) {
	return null;
};
var lime_utils_compress_Zlib = function() { };
$hxClasses["lime.utils.compress.Zlib"] = lime_utils_compress_Zlib;
lime_utils_compress_Zlib.__name__ = ["lime","utils","compress","Zlib"];
lime_utils_compress_Zlib.compress = function(bytes) {
	var data = pako.deflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime_utils_compress_Zlib.decompress = function(bytes) {
	var data = pako.inflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var motion_actuators_IGenericActuator = function() { };
$hxClasses["motion.actuators.IGenericActuator"] = motion_actuators_IGenericActuator;
motion_actuators_IGenericActuator.__name__ = ["motion","actuators","IGenericActuator"];
motion_actuators_IGenericActuator.prototype = {
	autoVisible: null
	,delay: null
	,ease: null
	,onComplete: null
	,onRepeat: null
	,onUpdate: null
	,reflect: null
	,repeat: null
	,reverse: null
	,smartRotation: null
	,snapping: null
	,onPause: null
	,onResume: null
	,apply: null
	,move: null
	,pause: null
	,resume: null
	,stop: null
	,__class__: motion_actuators_IGenericActuator
};
var motion_actuators_GenericActuator = function(target,duration,properties) {
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = motion_Actuate.defaultEase;
};
$hxClasses["motion.actuators.GenericActuator"] = motion_actuators_GenericActuator;
motion_actuators_GenericActuator.__name__ = ["motion","actuators","GenericActuator"];
motion_actuators_GenericActuator.__interfaces__ = [motion_actuators_IGenericActuator];
motion_actuators_GenericActuator.prototype = {
	duration: null
	,id: null
	,properties: null
	,target: null
	,_autoVisible: null
	,_delay: null
	,_ease: null
	,_onComplete: null
	,_onCompleteParams: null
	,_onRepeat: null
	,_onRepeatParams: null
	,_onUpdate: null
	,_onUpdateParams: null
	,_onResume: null
	,_onResumeParams: null
	,_onPause: null
	,_onPauseParams: null
	,_reflect: null
	,_repeat: null
	,_reverse: null
	,_smartRotation: null
	,_snapping: null
	,special: null
	,apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) {
				this.target[i] = Reflect.field(this.properties,i);
			} else {
				var o = this.target;
				var value = Reflect.field(this.properties,i);
				var tmp;
				var tmp1;
				if(o.__properties__) {
					tmp = o.__properties__["set_" + i];
					tmp1 = tmp;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					o[tmp](value);
				} else {
					o[i] = value;
				}
			}
		}
	}
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) {
			params = [];
		}
		return method.apply(method,params);
	}
	,change: function() {
		if(this._onUpdate != null) {
			var method = this._onUpdate;
			var params = this._onUpdateParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) {
				var method = this._onComplete;
				var params = this._onCompleteParams;
				if(params == null) {
					params = [];
				}
				method.apply(method,params);
			}
		}
		motion_Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) {
			this._onCompleteParams = [];
		} else {
			this._onCompleteParams = parameters;
		}
		if(this.duration == 0) {
			this.complete();
		}
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) {
			this._onRepeatParams = [];
		} else {
			this._onRepeatParams = parameters;
		}
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		return this;
	}
	,onPause: function(handler,parameters) {
		this._onPause = handler;
		if(parameters == null) {
			this._onPauseParams = [];
		} else {
			this._onPauseParams = parameters;
		}
		return this;
	}
	,onResume: function(handler,parameters) {
		this._onResume = handler;
		if(parameters == null) {
			this._onResumeParams = [];
		} else {
			this._onResumeParams = parameters;
		}
		return this;
	}
	,pause: function() {
		if(this._onPause != null) {
			var method = this._onPause;
			var params = this._onPauseParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,reflect: function(value) {
		if(value == null) {
			value = true;
		}
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) {
			times = -1;
		}
		this._repeat = times;
		return this;
	}
	,resume: function() {
		if(this._onResume != null) {
			var method = this._onResume;
			var params = this._onResumeParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,reverse: function(value) {
		if(value == null) {
			value = true;
		}
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) {
			value = true;
		}
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) {
			value = true;
		}
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: motion_actuators_GenericActuator
};
var motion_actuators_SimpleActuator = function(target,duration,properties) {
	this.active = true;
	this.propertyDetails = [];
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = openfl_Lib.getTimer() / 1000;
	motion_actuators_GenericActuator.call(this,target,duration,properties);
	if(!motion_actuators_SimpleActuator.addedEvent) {
		motion_actuators_SimpleActuator.addedEvent = true;
		openfl_Lib.current.stage.addEventListener("enterFrame",motion_actuators_SimpleActuator.stage_onEnterFrame);
	}
};
$hxClasses["motion.actuators.SimpleActuator"] = motion_actuators_SimpleActuator;
motion_actuators_SimpleActuator.__name__ = ["motion","actuators","SimpleActuator"];
motion_actuators_SimpleActuator.stage_onEnterFrame = function(event) {
	var currentTime = openfl_Lib.getTimer() / 1000;
	var actuator;
	var j = 0;
	var _g1 = 0;
	var _g = motion_actuators_SimpleActuator.actuatorsLength;
	while(_g1 < _g) {
		++_g1;
		actuator = motion_actuators_SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(currentTime >= actuator.timeOffset) {
				actuator.update(currentTime);
			}
			++j;
		} else {
			motion_actuators_SimpleActuator.actuators.splice(j,1);
			--motion_actuators_SimpleActuator.actuatorsLength;
		}
	}
};
motion_actuators_SimpleActuator.__super__ = motion_actuators_GenericActuator;
motion_actuators_SimpleActuator.prototype = $extend(motion_actuators_GenericActuator.prototype,{
	setField_openfl_geom_Transform: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			var tmp;
			var tmp1;
			if(target.__properties__) {
				tmp = target.__properties__["set_" + propertyName];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				target[tmp](value);
			} else {
				target[propertyName] = value;
			}
		}
	}
	,setField_motion_actuators_TransformActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			var tmp;
			var tmp1;
			if(target.__properties__) {
				tmp = target.__properties__["set_" + propertyName];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				target[tmp](value);
			} else {
				target[propertyName] = value;
			}
		}
	}
	,setField_motion_actuators_MotionPathActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			var tmp;
			var tmp1;
			if(target.__properties__) {
				tmp = target.__properties__["set_" + propertyName];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				target[tmp](value);
			} else {
				target[propertyName] = value;
			}
		}
	}
	,setField_openfl_display_DisplayObject: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			var tmp;
			var tmp1;
			if(target.__properties__) {
				tmp = target.__properties__["set_" + propertyName];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				target[tmp](value);
			} else {
				target[propertyName] = value;
			}
		}
	}
	,setField_motion_actuators_SimpleActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			var tmp;
			var tmp1;
			if(target.__properties__) {
				tmp = target.__properties__["set_" + propertyName];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				target[tmp](value);
			} else {
				target[propertyName] = value;
			}
		}
	}
	,timeOffset: null
	,active: null
	,cacheVisible: null
	,detailsLength: null
	,initialized: null
	,paused: null
	,pauseTime: null
	,propertyDetails: null
	,sendChange: null
	,setVisible: null
	,startTime: null
	,toggleVisible: null
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) {
				var target = this.target;
				var value1 = this.cacheVisible;
				if(Object.prototype.hasOwnProperty.call(target,"visible")) {
					target.visible = value1;
				} else {
					var tmp;
					var tmp1;
					if(target.__properties__) {
						tmp = target.__properties__["set_" + "visible"];
						tmp1 = tmp;
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						target[tmp](value1);
					} else {
						target.visible = value1;
					}
				}
			}
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			value = Reflect.field(target,propertyName);
		} else {
			var tmp;
			var tmp1;
			if(target == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(target.__properties__) {
					tmp = target.__properties__["get_" + propertyName];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = target[tmp]();
				} else {
					tmp1 = target[propertyName];
				}
			}
			value = tmp1;
		}
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i) && !(this.target.__properties__ && this.target.__properties__["set_" + i])) {
				start = Reflect.field(this.target,i);
			} else {
				isField = false;
				var o = this.target;
				var tmp;
				if(o == null) {
					start = null;
				} else {
					var tmp1;
					if(o.__properties__) {
						tmp = o.__properties__["get_" + i];
						tmp1 = tmp;
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						start = o[tmp]();
					} else {
						start = o[i];
					}
				}
			}
			if(typeof(start) == "number") {
				var target = this.properties;
				var value = null;
				if(Object.prototype.hasOwnProperty.call(target,i)) {
					value = Reflect.field(target,i);
				} else {
					var tmp2;
					var tmp3;
					if(target == null) {
						tmp3 = null;
					} else {
						var tmp4;
						if(target.__properties__) {
							tmp2 = target.__properties__["get_" + i];
							tmp4 = tmp2;
						} else {
							tmp4 = false;
						}
						if(tmp4) {
							tmp3 = target[tmp2]();
						} else {
							tmp3 = target[i];
						}
					}
					value = tmp3;
				}
				var value1 = value;
				if(start == null) {
					start = 0;
				}
				if(value1 == null) {
					value1 = 0;
				}
				details = new motion_actuators_PropertyDetails(this.target,i,start,value1 - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && js_Boot.__instanceof(this.target,openfl_display_DisplayObject);
		var tmp;
		if(this.toggleVisible && this.properties.alpha != 0) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"visible")) {
				value = Reflect.field(target,"visible");
			} else {
				var tmp1;
				var tmp2;
				if(target == null) {
					tmp2 = null;
				} else {
					var tmp3;
					if(target.__properties__) {
						tmp1 = target.__properties__["get_" + "visible"];
						tmp3 = tmp1;
					} else {
						tmp3 = false;
					}
					if(tmp3) {
						tmp2 = target[tmp1]();
					} else {
						tmp2 = target.visible;
					}
				}
				value = tmp2;
			}
			tmp = !value;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.setVisible = true;
			var target1 = this.target;
			var value1 = null;
			if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
				value1 = Reflect.field(target1,"visible");
			} else {
				var tmp4;
				var tmp5;
				if(target1 == null) {
					tmp5 = null;
				} else {
					var tmp6;
					if(target1.__properties__) {
						tmp4 = target1.__properties__["get_" + "visible"];
						tmp6 = tmp4;
					} else {
						tmp6 = false;
					}
					if(tmp6) {
						tmp5 = target1[tmp4]();
					} else {
						tmp5 = target1.visible;
					}
				}
				value1 = tmp5;
			}
			this.cacheVisible = value1;
			var target2 = this.target;
			if(Object.prototype.hasOwnProperty.call(target2,"visible")) {
				target2.visible = true;
			} else {
				var tmp7;
				var tmp8;
				if(target2.__properties__) {
					tmp7 = target2.__properties__["set_" + "visible"];
					tmp8 = tmp7;
				} else {
					tmp8 = false;
				}
				if(tmp8) {
					target2[tmp7](true);
				} else {
					target2.visible = true;
				}
			}
		}
		this.timeOffset = this.startTime;
		motion_actuators_SimpleActuator.actuators.push(this);
		++motion_actuators_SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		if(!this.paused) {
			this.paused = true;
			motion_actuators_GenericActuator.prototype.pause.call(this);
			this.pauseTime = openfl_Lib.getTimer();
		}
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += (openfl_Lib.getTimer() - this.pauseTime) / 1000;
			motion_actuators_GenericActuator.prototype.resume.call(this);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) {
			details.target[details.propertyName] = value;
		} else {
			var o = details.target;
			var field = details.propertyName;
			var tmp;
			var tmp1;
			if(o.__properties__) {
				tmp = o.__properties__["set_" + field];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				o[tmp](value);
			} else {
				o[field] = value;
			}
		}
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) {
					this.apply();
				}
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) {
						this.apply();
					}
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var i;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g1 = 0;
				var _g = this.detailsLength;
				while(_g1 < _g) {
					details = this.propertyDetails[_g1++];
					var value = details.start + details.change * easing;
					if(details.isField) {
						details.target[details.propertyName] = value;
					} else {
						var o = details.target;
						var field = details.propertyName;
						var tmp;
						var tmp1;
						if(o.__properties__) {
							tmp = o.__properties__["set_" + field];
							tmp1 = tmp;
						} else {
							tmp1 = false;
						}
						if(tmp1) {
							o[tmp](value);
						} else {
							o[field] = value;
						}
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g11 = 0;
				var _g2 = this.detailsLength;
				while(_g11 < _g2) {
					details = this.propertyDetails[_g11++];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) {
							rotation -= 360;
						} else if(rotation < -180) {
							rotation += 360;
						}
						endValue = details.start + rotation * easing;
					} else {
						endValue = details.start + details.change * easing;
					}
					if(!this._snapping) {
						if(details.isField) {
							details.target[details.propertyName] = endValue;
						} else {
							var o1 = details.target;
							var field1 = details.propertyName;
							var tmp2;
							var tmp3;
							if(o1.__properties__) {
								tmp2 = o1.__properties__["set_" + field1];
								tmp3 = tmp2;
							} else {
								tmp3 = false;
							}
							if(tmp3) {
								o1[tmp2](endValue);
							} else {
								o1[field1] = endValue;
							}
						}
					} else {
						var value1 = Math.round(endValue);
						if(details.isField) {
							details.target[details.propertyName] = value1;
						} else {
							var o2 = details.target;
							var field2 = details.propertyName;
							var tmp4;
							var tmp5;
							if(o2.__properties__) {
								tmp4 = o2.__properties__["set_" + field2];
								tmp5 = tmp4;
							} else {
								tmp5 = false;
							}
							if(tmp5) {
								o2[tmp4](value1);
							} else {
								o2[field2] = value1;
							}
						}
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					var tmp6;
					if(this.toggleVisible) {
						var target = this.target;
						var value2 = null;
						if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
							value2 = Reflect.field(target,"alpha");
						} else {
							var tmp7;
							var tmp8;
							if(target == null) {
								tmp8 = null;
							} else {
								var tmp9;
								if(target.__properties__) {
									tmp7 = target.__properties__["get_" + "alpha"];
									tmp9 = tmp7;
								} else {
									tmp9 = false;
								}
								if(tmp9) {
									tmp8 = target[tmp7]();
								} else {
									tmp8 = target.alpha;
								}
							}
							value2 = tmp8;
						}
						tmp6 = value2 == 0;
					} else {
						tmp6 = false;
					}
					if(tmp6) {
						var target1 = this.target;
						if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
							target1.visible = false;
						} else {
							var tmp10;
							var tmp11;
							if(target1.__properties__) {
								tmp10 = target1.__properties__["set_" + "visible"];
								tmp11 = tmp10;
							} else {
								tmp11 = false;
							}
							if(tmp11) {
								target1[tmp10](false);
							} else {
								target1.visible = false;
							}
						}
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						var method = this._onRepeat;
						var params = this._onRepeatParams;
						if(params == null) {
							params = [];
						}
						method.apply(method,params);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: motion_actuators_SimpleActuator
});
var motion_easing_Expo = function() { };
$hxClasses["motion.easing.Expo"] = motion_easing_Expo;
motion_easing_Expo.__name__ = ["motion","easing","Expo"];
motion_easing_Expo.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Expo.get_easeIn = function() {
	return new motion_easing_ExpoEaseIn();
};
motion_easing_Expo.get_easeInOut = function() {
	return new motion_easing_ExpoEaseInOut();
};
motion_easing_Expo.get_easeOut = function() {
	return new motion_easing_ExpoEaseOut();
};
var motion_easing_IEasing = function() { };
$hxClasses["motion.easing.IEasing"] = motion_easing_IEasing;
motion_easing_IEasing.__name__ = ["motion","easing","IEasing"];
motion_easing_IEasing.prototype = {
	calculate: null
	,ease: null
	,__class__: motion_easing_IEasing
};
var motion_easing_ExpoEaseOut = function() {
};
$hxClasses["motion.easing.ExpoEaseOut"] = motion_easing_ExpoEaseOut;
motion_easing_ExpoEaseOut.__name__ = ["motion","easing","ExpoEaseOut"];
motion_easing_ExpoEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseOut.prototype = {
	calculate: function(k) {
		if(k == 1) {
			return 1;
		} else {
			return 1 - Math.pow(2,-10 * k);
		}
	}
	,ease: function(t,b,c,d) {
		if(t == d) {
			return b + c;
		} else {
			return c * (1 - Math.pow(2,-10 * t / d)) + b;
		}
	}
	,__class__: motion_easing_ExpoEaseOut
};
var motion_Actuate = function() { };
$hxClasses["motion.Actuate"] = motion_Actuate;
motion_Actuate.__name__ = ["motion","Actuate"];
motion_Actuate.apply = function(target,properties,customActuator) {
	motion_Actuate.stop(target,properties);
	if(customActuator == null) {
		customActuator = motion_Actuate.defaultActuator;
	}
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
motion_Actuate.effects = function(target,duration,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	return new motion__$Actuate_EffectsOptions(target,duration,overwrite);
};
motion_Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) {
		allowCreation = true;
	}
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] == null && allowCreation) {
		motion_Actuate.targetLibraries.set(target,[]);
	}
	return motion_Actuate.targetLibraries.h[target.__id__];
};
motion_Actuate.isActive = function() {
	var result = false;
	var tmp = motion_Actuate.targetLibraries.iterator();
	while(tmp.hasNext()) {
		tmp.next();
		result = true;
		break;
	}
	return result;
};
motion_Actuate.motionPath = function(target,duration,properties,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MotionPathActuator);
};
motion_Actuate.pause = function(target) {
	if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
		target.pause();
	} else {
		var library = motion_Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator = library[_g];
				++_g;
				actuator.pause();
			}
		}
	}
};
motion_Actuate.pauseAll = function() {
	var tmp = motion_Actuate.targetLibraries.iterator();
	while(tmp.hasNext()) {
		var library = tmp.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.pause();
		}
	}
};
motion_Actuate.reset = function() {
	var tmp = motion_Actuate.targetLibraries.iterator();
	while(tmp.hasNext()) {
		var library = tmp.next();
		var i = library.length - 1;
		while(i >= 0) {
			library[i].stop(null,false,false);
			--i;
		}
	}
	motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
};
motion_Actuate.resume = function(target) {
	if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
		target.resume();
	} else {
		var library = motion_Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator = library[_g];
				++_g;
				actuator.resume();
			}
		}
	}
};
motion_Actuate.resumeAll = function() {
	var tmp = motion_Actuate.targetLibraries.iterator();
	while(tmp.hasNext()) {
		var library = tmp.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.resume();
		}
	}
};
motion_Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) {
		sendEvent = true;
	}
	if(complete == null) {
		complete = false;
	}
	if(target != null) {
		if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
			target.stop(null,complete,sendEvent);
		} else {
			var library = motion_Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					temp[properties] = null;
					properties = temp;
				} else if((properties instanceof Array) && properties.__enum__ == null) {
					var temp1 = { };
					var _g = 0;
					var _g1 = js_Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						temp1[property] = null;
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					--i;
				}
			}
		}
	}
};
motion_Actuate.timer = function(duration,customActuator) {
	return motion_Actuate.tween(new motion__$Actuate_TweenTimer(0),duration,new motion__$Actuate_TweenTimer(1),false,customActuator);
};
motion_Actuate.transform = function(target,duration,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	if(duration == null) {
		duration = 0;
	}
	return new motion__$Actuate_TransformOptions(target,duration,overwrite);
};
motion_Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) {
		overwrite = true;
	}
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) {
				customActuator = motion_Actuate.defaultActuator;
			}
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = motion_Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					--i;
				}
				library = motion_Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else {
			return motion_Actuate.apply(target,properties,customActuator);
		}
	}
	return null;
};
motion_Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(motion_Actuate.targetLibraries.h[target.__id__],actuator);
		if(motion_Actuate.targetLibraries.h[target.__id__].length == 0) {
			motion_Actuate.targetLibraries.remove(target);
		}
	}
};
motion_Actuate.update = function(target,duration,start,end,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	var properties = { start : start, end : end};
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MethodActuator);
};
var motion__$Actuate_EffectsOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.EffectsOptions"] = motion__$Actuate_EffectsOptions;
motion__$Actuate_EffectsOptions.__name__ = ["motion","_Actuate","EffectsOptions"];
motion__$Actuate_EffectsOptions.prototype = {
	duration: null
	,overwrite: null
	,target: null
	,filter: function(reference,properties) {
		properties.filter = reference;
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_FilterActuator);
	}
	,__class__: motion__$Actuate_EffectsOptions
};
var motion__$Actuate_TransformOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.TransformOptions"] = motion__$Actuate_TransformOptions;
motion__$Actuate_TransformOptions.__name__ = ["motion","_Actuate","TransformOptions"];
motion__$Actuate_TransformOptions.prototype = {
	duration: null
	,overwrite: null
	,target: null
	,color: function(value,strength,alpha) {
		if(strength == null) {
			strength = 1;
		}
		if(value == null) {
			value = 0;
		}
		var properties = { colorValue : value, colorStrength : strength};
		if(alpha != null) {
			properties.colorAlpha = alpha;
		}
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_TransformActuator);
	}
	,sound: function(volume,pan) {
		var properties = { };
		if(volume != null) {
			properties.soundVolume = volume;
		}
		if(pan != null) {
			properties.soundPan = pan;
		}
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_TransformActuator);
	}
	,__class__: motion__$Actuate_TransformOptions
};
var motion__$Actuate_TweenTimer = function(progress) {
	this.progress = progress;
};
$hxClasses["motion._Actuate.TweenTimer"] = motion__$Actuate_TweenTimer;
motion__$Actuate_TweenTimer.__name__ = ["motion","_Actuate","TweenTimer"];
motion__$Actuate_TweenTimer.prototype = {
	progress: null
	,__class__: motion__$Actuate_TweenTimer
};
var motion_MotionPath = function() {
	this._x = new motion_ComponentPath();
	this._y = new motion_ComponentPath();
	this._rotation = null;
};
$hxClasses["motion.MotionPath"] = motion_MotionPath;
motion_MotionPath.__name__ = ["motion","MotionPath"];
motion_MotionPath.prototype = {
	rotation: null
	,x: null
	,y: null
	,_rotation: null
	,_x: null
	,_y: null
	,bezier: function(x,y,controlX,controlY,strength) {
		if(strength == null) {
			strength = 1;
		}
		this._x.addPath(new motion_BezierPath(x,controlX,strength));
		this._y.addPath(new motion_BezierPath(y,controlY,strength));
		return this;
	}
	,line: function(x,y,strength) {
		if(strength == null) {
			strength = 1;
		}
		this._x.addPath(new motion_LinearPath(x,strength));
		this._y.addPath(new motion_LinearPath(y,strength));
		return this;
	}
	,get_rotation: function() {
		if(this._rotation == null) {
			this._rotation = new motion_RotationPath(this._x,this._y);
		}
		return this._rotation;
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,__class__: motion_MotionPath
	,__properties__: {get_y:"get_y",get_x:"get_x",get_rotation:"get_rotation"}
};
var motion_IComponentPath = function() { };
$hxClasses["motion.IComponentPath"] = motion_IComponentPath;
motion_IComponentPath.__name__ = ["motion","IComponentPath"];
motion_IComponentPath.prototype = {
	get_end: null
	,end: null
	,start: null
	,calculate: null
	,__class__: motion_IComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_ComponentPath = function() {
	this.paths = [];
	this.start = 0;
	this.totalStrength = 0;
};
$hxClasses["motion.ComponentPath"] = motion_ComponentPath;
motion_ComponentPath.__name__ = ["motion","ComponentPath"];
motion_ComponentPath.__interfaces__ = [motion_IComponentPath];
motion_ComponentPath.prototype = {
	start: null
	,end: null
	,paths: null
	,totalStrength: null
	,addPath: function(path) {
		this.paths.push(path);
		this.totalStrength += path.strength;
	}
	,calculate: function(k) {
		if(this.paths.length == 1) {
			return this.paths[0].calculate(this.start,k);
		} else {
			var ratio = k * this.totalStrength;
			var lastEnd = this.start;
			var _g = 0;
			var _g1 = this.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				if(ratio > path.strength) {
					ratio -= path.strength;
					lastEnd = path.end;
				} else {
					return path.calculate(lastEnd,ratio / path.strength);
				}
			}
		}
		return 0;
	}
	,get_end: function() {
		if(this.paths.length > 0) {
			return this.paths[this.paths.length - 1].end;
		} else {
			return this.start;
		}
	}
	,__class__: motion_ComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_BezierPath = function(end,control,strength) {
	this.end = end;
	this.control = control;
	this.strength = strength;
};
$hxClasses["motion.BezierPath"] = motion_BezierPath;
motion_BezierPath.__name__ = ["motion","BezierPath"];
motion_BezierPath.prototype = {
	control: null
	,end: null
	,strength: null
	,calculate: function(start,k) {
		return (1 - k) * (1 - k) * start + 2 * (1 - k) * k * this.control + k * k * this.end;
	}
	,__class__: motion_BezierPath
};
var motion_LinearPath = function(end,strength) {
	motion_BezierPath.call(this,end,0,strength);
};
$hxClasses["motion.LinearPath"] = motion_LinearPath;
motion_LinearPath.__name__ = ["motion","LinearPath"];
motion_LinearPath.__super__ = motion_BezierPath;
motion_LinearPath.prototype = $extend(motion_BezierPath.prototype,{
	calculate: function(start,k) {
		return start + k * (this.end - start);
	}
	,__class__: motion_LinearPath
});
var motion_RotationPath = function(x,y) {
	this.step = 0.01;
	this._x = x;
	this._y = y;
	this.offset = 0;
	this.start = this.calculate(0.0);
};
$hxClasses["motion.RotationPath"] = motion_RotationPath;
motion_RotationPath.__name__ = ["motion","RotationPath"];
motion_RotationPath.__interfaces__ = [motion_IComponentPath];
motion_RotationPath.prototype = {
	end: null
	,offset: null
	,start: null
	,step: null
	,_x: null
	,_y: null
	,calculate: function(k) {
		var dX = this._x.calculate(k) - this._x.calculate(k + this.step);
		var angle = Math.atan2(this._y.calculate(k) - this._y.calculate(k + this.step),dX) * (180 / Math.PI);
		angle = (angle + this.offset) % 360;
		return angle;
	}
	,get_end: function() {
		return this.calculate(1.0);
	}
	,__class__: motion_RotationPath
	,__properties__: {get_end:"get_end"}
};
var motion_actuators_FilterActuator = function(target,duration,properties) {
	this.filterIndex = -1;
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(js_Boot.__instanceof(properties.filter,Class)) {
		this.filterClass = properties.filter;
		if(target.get_filters().length == 0) {
			target.set_filters([Type.createInstance(this.filterClass,[])]);
		}
		var _g = 0;
		var _g1 = target.get_filters();
		while(_g < _g1.length) {
			var filter = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(filter,this.filterClass)) {
				this.filter = filter;
			}
		}
	} else {
		this.filterIndex = properties.filter;
		this.filter = target.get_filters()[this.filterIndex];
	}
};
$hxClasses["motion.actuators.FilterActuator"] = motion_actuators_FilterActuator;
motion_actuators_FilterActuator.__name__ = ["motion","actuators","FilterActuator"];
motion_actuators_FilterActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_FilterActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	filter: null
	,filterClass: null
	,filterIndex: null
	,apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				this.filter[propertyName] = Reflect.field(this.properties,propertyName);
			}
		}
		var target = this.target;
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,"filters")) {
			value = Reflect.field(target,"filters");
		} else {
			var tmp;
			var tmp1;
			if(target == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(target.__properties__) {
					tmp = target.__properties__["get_" + "filters"];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = target[tmp]();
				} else {
					tmp1 = target.filters;
				}
			}
			value = tmp1;
		}
		var filters = value;
		filters[this.properties.filter] = this.filter;
		var target1 = this.target;
		if(Object.prototype.hasOwnProperty.call(target1,"filters")) {
			target1.filters = filters;
		} else {
			var tmp3;
			var tmp4;
			if(target1.__properties__) {
				tmp3 = target1.__properties__["set_" + "filters"];
				tmp4 = tmp3;
			} else {
				tmp4 = false;
			}
			if(tmp4) {
				target1[tmp3](filters);
			} else {
				target1.filters = filters;
			}
		}
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				var target = this.filter;
				var value = null;
				if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
					value = Reflect.field(target,propertyName);
				} else {
					var tmp;
					var tmp1;
					if(target == null) {
						tmp1 = null;
					} else {
						var tmp2;
						if(target.__properties__) {
							tmp = target.__properties__["get_" + propertyName];
							tmp2 = tmp;
						} else {
							tmp2 = false;
						}
						if(tmp2) {
							tmp1 = target[tmp]();
						} else {
							tmp1 = target[propertyName];
						}
					}
					value = tmp1;
				}
				start = value;
				details = new motion_actuators_PropertyDetails(this.filter,propertyName,start,Reflect.field(this.properties,propertyName) - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		var filters = this.target.get_filters();
		if(this.filterIndex > -1) {
			filters[this.properties.filter] = this.filter;
		} else {
			var _g1 = 0;
			var _g = filters.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(js_Boot.__instanceof(filters[i],this.filterClass)) {
					filters[i] = this.filter;
				}
			}
		}
		var target = this.target;
		if(Object.prototype.hasOwnProperty.call(target,"filters")) {
			target.filters = filters;
		} else {
			var tmp;
			var tmp1;
			if(target.__properties__) {
				tmp = target.__properties__["set_" + "filters"];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				target[tmp](filters);
			} else {
				target.filters = filters;
			}
		}
	}
	,__class__: motion_actuators_FilterActuator
});
var motion_actuators_MethodActuator = function(target,duration,properties) {
	this.currentParameters = [];
	this.tweenProperties = { };
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) {
		this.properties.start = [];
	}
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) {
		this.properties.end = this.properties.start;
	}
	var _g1 = 0;
	var _g = this.properties.start.length;
	while(_g1 < _g) this.currentParameters.push(this.properties.start[_g1++]);
};
$hxClasses["motion.actuators.MethodActuator"] = motion_actuators_MethodActuator;
motion_actuators_MethodActuator.__name__ = ["motion","actuators","MethodActuator"];
motion_actuators_MethodActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MethodActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	currentParameters: null
	,tweenProperties: null
	,apply: function() {
		var method = this.target;
		var params = this.properties.end;
		if(params == null) {
			params = [];
		}
		method.apply(method,params);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
		}
		var method = this.target;
		var params = this.currentParameters;
		if(params == null) {
			params = [];
		}
		method.apply(method,params);
		motion_actuators_SimpleActuator.prototype.complete.call(this,sendEvent);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || typeof(start) == "number" && ((start | 0) === start)) {
				details = new motion_actuators_PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active && !this.paused) {
			var _g1 = 0;
			var _g = this.properties.start.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			var method = this.target;
			var params = this.currentParameters;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,__class__: motion_actuators_MethodActuator
});
var motion_actuators_MotionPathActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.MotionPathActuator"] = motion_actuators_MotionPathActuator;
motion_actuators_MotionPathActuator.__name__ = ["motion","actuators","MotionPathActuator"];
motion_actuators_MotionPathActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MotionPathActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) {
				this.target[propertyName] = (js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end();
			} else {
				var o = this.target;
				var value = (js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end();
				var tmp;
				var tmp1;
				if(o.__properties__) {
					tmp = o.__properties__["set_" + propertyName];
					tmp1 = tmp;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					o[tmp](value);
				} else {
					o[propertyName] = value;
				}
			}
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) {
					path.start = Reflect.field(this.target,propertyName);
				} else {
					isField = false;
					var o = this.target;
					var tmp;
					var tmp1;
					if(o == null) {
						tmp1 = null;
					} else {
						var tmp2;
						if(o.__properties__) {
							tmp = o.__properties__["get_" + propertyName];
							tmp2 = tmp;
						} else {
							tmp2 = false;
						}
						if(tmp2) {
							tmp1 = o[tmp]();
						} else {
							tmp1 = o[propertyName];
						}
					}
					path.start = tmp1;
				}
				details = new motion_actuators_PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details1 = _g1[_g];
					++_g;
					if(details1.isField) {
						details1.target[details1.propertyName] = (js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
					} else {
						var o = details1.target;
						var field = details1.propertyName;
						var value = (js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
						var tmp;
						var tmp1;
						if(o.__properties__) {
							tmp = o.__properties__["set_" + field];
							tmp1 = tmp;
						} else {
							tmp1 = false;
						}
						if(tmp1) {
							o[tmp](value);
						} else {
							o[field] = value;
						}
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details2 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details2.isField) {
							details2.target[details2.propertyName] = (js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
						} else {
							var o1 = details2.target;
							var field1 = details2.propertyName;
							var value1 = (js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
							var tmp2;
							var tmp3;
							if(o1.__properties__) {
								tmp2 = o1.__properties__["set_" + field1];
								tmp3 = tmp2;
							} else {
								tmp3 = false;
							}
							if(tmp3) {
								o1[tmp2](value1);
							} else {
								o1[field1] = value1;
							}
						}
					} else if(details2.isField) {
						details2.target[details2.propertyName] = Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					} else {
						var o2 = details2.target;
						var field2 = details2.propertyName;
						var value2 = Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
						var tmp4;
						var tmp5;
						if(o2.__properties__) {
							tmp4 = o2.__properties__["set_" + field2];
							tmp5 = tmp4;
						} else {
							tmp5 = false;
						}
						if(tmp5) {
							o2[tmp4](value2);
						} else {
							o2[field2] = value2;
						}
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					var tmp6;
					if(this.toggleVisible) {
						var target = this.target;
						var value3 = null;
						if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
							value3 = Reflect.field(target,"alpha");
						} else {
							var tmp7;
							var tmp8;
							if(target == null) {
								tmp8 = null;
							} else {
								var tmp9;
								if(target.__properties__) {
									tmp7 = target.__properties__["get_" + "alpha"];
									tmp9 = tmp7;
								} else {
									tmp9 = false;
								}
								if(tmp9) {
									tmp8 = target[tmp7]();
								} else {
									tmp8 = target.alpha;
								}
							}
							value3 = tmp8;
						}
						tmp6 = value3 == 0;
					} else {
						tmp6 = false;
					}
					if(tmp6) {
						var target1 = this.target;
						if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
							target1.visible = false;
						} else {
							var tmp10;
							var tmp11;
							if(target1.__properties__) {
								tmp10 = target1.__properties__["set_" + "visible"];
								tmp11 = tmp10;
							} else {
								tmp11 = false;
							}
							if(tmp11) {
								target1[tmp10](false);
							} else {
								target1.visible = false;
							}
						}
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						var method = this._onRepeat;
						var params = this._onRepeatParams;
						if(params == null) {
							params = [];
						}
						method.apply(method,params);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: motion_actuators_MotionPathActuator
});
var motion_actuators_PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) {
		isField = true;
	}
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
$hxClasses["motion.actuators.PropertyDetails"] = motion_actuators_PropertyDetails;
motion_actuators_PropertyDetails.__name__ = ["motion","actuators","PropertyDetails"];
motion_actuators_PropertyDetails.prototype = {
	change: null
	,isField: null
	,propertyName: null
	,start: null
	,target: null
	,__class__: motion_actuators_PropertyDetails
};
var motion_actuators_PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) {
		isField = true;
	}
	motion_actuators_PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
$hxClasses["motion.actuators.PropertyPathDetails"] = motion_actuators_PropertyPathDetails;
motion_actuators_PropertyPathDetails.__name__ = ["motion","actuators","PropertyPathDetails"];
motion_actuators_PropertyPathDetails.__super__ = motion_actuators_PropertyDetails;
motion_actuators_PropertyPathDetails.prototype = $extend(motion_actuators_PropertyDetails.prototype,{
	path: null
	,__class__: motion_actuators_PropertyPathDetails
});
var motion_actuators_TransformActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.TransformActuator"] = motion_actuators_TransformActuator;
motion_actuators_TransformActuator.__name__ = ["motion","actuators","TransformActuator"];
motion_actuators_TransformActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_TransformActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	endColorTransform: null
	,endSoundTransform: null
	,tweenColorTransform: null
	,tweenSoundTransform: null
	,apply: function() {
		this.initialize();
		if(this.endColorTransform != null) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"transform")) {
				value = Reflect.field(target,"transform");
			} else {
				var tmp;
				var tmp1;
				if(target == null) {
					tmp1 = null;
				} else {
					var tmp2;
					if(target.__properties__) {
						tmp = target.__properties__["get_" + "transform"];
						tmp2 = tmp;
					} else {
						tmp2 = false;
					}
					if(tmp2) {
						tmp1 = target[tmp]();
					} else {
						tmp1 = target.transform;
					}
				}
				value = tmp1;
			}
			var transform = value;
			var value1 = this.endColorTransform;
			if(Object.prototype.hasOwnProperty.call(transform,"colorTransform")) {
				transform.colorTransform = value1;
			} else {
				var tmp3;
				var tmp4;
				if(transform.__properties__) {
					tmp3 = transform.__properties__["set_" + "colorTransform"];
					tmp4 = tmp3;
				} else {
					tmp4 = false;
				}
				if(tmp4) {
					transform[tmp3](value1);
				} else {
					transform.colorTransform = value1;
				}
			}
		}
		if(this.endSoundTransform != null) {
			var target1 = this.target;
			var value2 = this.endSoundTransform;
			if(Object.prototype.hasOwnProperty.call(target1,"soundTransform")) {
				target1.soundTransform = value2;
			} else {
				var tmp5;
				var tmp6;
				if(target1.__properties__) {
					tmp5 = target1.__properties__["set_" + "soundTransform"];
					tmp6 = tmp5;
				} else {
					tmp6 = false;
				}
				if(tmp6) {
					target1[tmp5](value2);
				} else {
					target1.soundTransform = value2;
				}
			}
		}
	}
	,initialize: function() {
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorValue") && js_Boot.__instanceof(this.target,openfl_display_DisplayObject)) {
			this.initializeColor();
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume") || Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.initializeSound();
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,initializeColor: function() {
		this.endColorTransform = new openfl_geom_ColorTransform();
		var color = this.properties.colorValue;
		var strength = this.properties.colorStrength;
		if(strength < 1) {
			var multiplier;
			var offset;
			if(strength < 0.5) {
				multiplier = 1;
				offset = strength * 2;
			} else {
				multiplier = 1 - (strength - 0.5) * 2;
				offset = 1;
			}
			this.endColorTransform.redMultiplier = multiplier;
			this.endColorTransform.greenMultiplier = multiplier;
			this.endColorTransform.blueMultiplier = multiplier;
			this.endColorTransform.redOffset = offset * (color >> 16 & 255);
			this.endColorTransform.greenOffset = offset * (color >> 8 & 255);
			this.endColorTransform.blueOffset = offset * (color & 255);
		} else {
			this.endColorTransform.redMultiplier = 0;
			this.endColorTransform.greenMultiplier = 0;
			this.endColorTransform.blueMultiplier = 0;
			this.endColorTransform.redOffset = color >> 16 & 255;
			this.endColorTransform.greenOffset = color >> 8 & 255;
			this.endColorTransform.blueOffset = color & 255;
		}
		var propertyNames = ["redMultiplier","greenMultiplier","blueMultiplier","redOffset","greenOffset","blueOffset"];
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorAlpha")) {
			this.endColorTransform.alphaMultiplier = this.properties.colorAlpha;
			propertyNames.push("alphaMultiplier");
		} else {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
				value = Reflect.field(target,"alpha");
			} else {
				var tmp;
				var tmp1;
				if(target == null) {
					tmp1 = null;
				} else {
					var tmp2;
					if(target.__properties__) {
						tmp = target.__properties__["get_" + "alpha"];
						tmp2 = tmp;
					} else {
						tmp2 = false;
					}
					if(tmp2) {
						tmp1 = target[tmp]();
					} else {
						tmp1 = target.alpha;
					}
				}
				value = tmp1;
			}
			this.endColorTransform.alphaMultiplier = value;
		}
		var target1 = this.target;
		var value1 = null;
		if(Object.prototype.hasOwnProperty.call(target1,"transform")) {
			value1 = Reflect.field(target1,"transform");
		} else {
			var tmp3;
			var tmp4;
			if(target1 == null) {
				tmp4 = null;
			} else {
				var tmp5;
				if(target1.__properties__) {
					tmp3 = target1.__properties__["get_" + "transform"];
					tmp5 = tmp3;
				} else {
					tmp5 = false;
				}
				if(tmp5) {
					tmp4 = target1[tmp3]();
				} else {
					tmp4 = target1.transform;
				}
			}
			value1 = tmp4;
		}
		var transform = value1;
		var value2 = null;
		if(Object.prototype.hasOwnProperty.call(transform,"colorTransform")) {
			value2 = Reflect.field(transform,"colorTransform");
		} else {
			var tmp6;
			var tmp7;
			if(transform == null) {
				tmp7 = null;
			} else {
				var tmp8;
				if(transform.__properties__) {
					tmp6 = transform.__properties__["get_" + "colorTransform"];
					tmp8 = tmp6;
				} else {
					tmp8 = false;
				}
				if(tmp8) {
					tmp7 = transform[tmp6]();
				} else {
					tmp7 = transform.colorTransform;
				}
			}
			value2 = tmp7;
		}
		var begin = value2;
		this.tweenColorTransform = new openfl_geom_ColorTransform();
		var details;
		var start;
		var _g = 0;
		while(_g < propertyNames.length) {
			var propertyName = propertyNames[_g];
			++_g;
			var value3 = null;
			if(Object.prototype.hasOwnProperty.call(begin,propertyName)) {
				value3 = Reflect.field(begin,propertyName);
			} else {
				var tmp9;
				var tmp10;
				if(begin == null) {
					tmp10 = null;
				} else {
					var tmp11;
					if(begin.__properties__) {
						tmp9 = begin.__properties__["get_" + propertyName];
						tmp11 = tmp9;
					} else {
						tmp11 = false;
					}
					if(tmp11) {
						tmp10 = begin[tmp9]();
					} else {
						tmp10 = begin[propertyName];
					}
				}
				value3 = tmp10;
			}
			start = value3;
			var target2 = this.endColorTransform;
			var value4 = null;
			if(Object.prototype.hasOwnProperty.call(target2,propertyName)) {
				value4 = Reflect.field(target2,propertyName);
			} else {
				var tmp12;
				var tmp13;
				if(target2 == null) {
					tmp13 = null;
				} else {
					var tmp14;
					if(target2.__properties__) {
						tmp12 = target2.__properties__["get_" + propertyName];
						tmp14 = tmp12;
					} else {
						tmp14 = false;
					}
					if(tmp14) {
						tmp13 = target2[tmp12]();
					} else {
						tmp13 = target2[propertyName];
					}
				}
				value4 = tmp13;
			}
			details = new motion_actuators_PropertyDetails(this.tweenColorTransform,propertyName,start,value4 - start);
			this.propertyDetails.push(details);
		}
	}
	,initializeSound: function() {
		var target = this.target;
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,"soundTransform")) {
			value = Reflect.field(target,"soundTransform");
		} else {
			var tmp;
			var tmp1;
			if(target == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(target.__properties__) {
					tmp = target.__properties__["get_" + "soundTransform"];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = target[tmp]();
				} else {
					tmp1 = target.soundTransform;
				}
			}
			value = tmp1;
		}
		if(value == null) {
			var target1 = this.target;
			var value1 = new openfl_media_SoundTransform();
			if(Object.prototype.hasOwnProperty.call(target1,"soundTransform")) {
				target1.soundTransform = value1;
			} else {
				var tmp3;
				var tmp4;
				if(target1.__properties__) {
					tmp3 = target1.__properties__["set_" + "soundTransform"];
					tmp4 = tmp3;
				} else {
					tmp4 = false;
				}
				if(tmp4) {
					target1[tmp3](value1);
				} else {
					target1.soundTransform = value1;
				}
			}
		}
		var target2 = this.target;
		var value2 = null;
		if(Object.prototype.hasOwnProperty.call(target2,"soundTransform")) {
			value2 = Reflect.field(target2,"soundTransform");
		} else {
			var tmp5;
			var tmp6;
			if(target2 == null) {
				tmp6 = null;
			} else {
				var tmp7;
				if(target2.__properties__) {
					tmp5 = target2.__properties__["get_" + "soundTransform"];
					tmp7 = tmp5;
				} else {
					tmp7 = false;
				}
				if(tmp7) {
					tmp6 = target2[tmp5]();
				} else {
					tmp6 = target2.soundTransform;
				}
			}
			value2 = tmp6;
		}
		var start = value2;
		var target3 = this.target;
		var value3 = null;
		if(Object.prototype.hasOwnProperty.call(target3,"soundTransform")) {
			value3 = Reflect.field(target3,"soundTransform");
		} else {
			var tmp8;
			var tmp9;
			if(target3 == null) {
				tmp9 = null;
			} else {
				var tmp10;
				if(target3.__properties__) {
					tmp8 = target3.__properties__["get_" + "soundTransform"];
					tmp10 = tmp8;
				} else {
					tmp10 = false;
				}
				if(tmp10) {
					tmp9 = target3[tmp8]();
				} else {
					tmp9 = target3.soundTransform;
				}
			}
			value3 = tmp9;
		}
		this.endSoundTransform = value3;
		this.tweenSoundTransform = new openfl_media_SoundTransform();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume")) {
			this.endSoundTransform.volume = this.properties.soundVolume;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"volume",start.volume,this.endSoundTransform.volume - start.volume));
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.endSoundTransform.pan = this.properties.soundPan;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"pan",start.pan,this.endSoundTransform.pan - start.pan));
		}
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.endColorTransform != null) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"transform")) {
				value = Reflect.field(target,"transform");
			} else {
				var tmp;
				var tmp1;
				if(target == null) {
					tmp1 = null;
				} else {
					var tmp2;
					if(target.__properties__) {
						tmp = target.__properties__["get_" + "transform"];
						tmp2 = tmp;
					} else {
						tmp2 = false;
					}
					if(tmp2) {
						tmp1 = target[tmp]();
					} else {
						tmp1 = target.transform;
					}
				}
				value = tmp1;
			}
			var transform = value;
			var value1 = this.tweenColorTransform;
			if(Object.prototype.hasOwnProperty.call(transform,"colorTransform")) {
				transform.colorTransform = value1;
			} else {
				var tmp3;
				var tmp4;
				if(transform.__properties__) {
					tmp3 = transform.__properties__["set_" + "colorTransform"];
					tmp4 = tmp3;
				} else {
					tmp4 = false;
				}
				if(tmp4) {
					transform[tmp3](value1);
				} else {
					transform.colorTransform = value1;
				}
			}
		}
		if(this.endSoundTransform != null) {
			var target1 = this.target;
			var value2 = this.tweenSoundTransform;
			if(Object.prototype.hasOwnProperty.call(target1,"soundTransform")) {
				target1.soundTransform = value2;
			} else {
				var tmp5;
				var tmp6;
				if(target1.__properties__) {
					tmp5 = target1.__properties__["set_" + "soundTransform"];
					tmp6 = tmp5;
				} else {
					tmp6 = false;
				}
				if(tmp6) {
					target1[tmp5](value2);
				} else {
					target1.soundTransform = value2;
				}
			}
		}
	}
	,__class__: motion_actuators_TransformActuator
});
var motion_easing_Back = function() { };
$hxClasses["motion.easing.Back"] = motion_easing_Back;
motion_easing_Back.__name__ = ["motion","easing","Back"];
motion_easing_Back.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Back.get_easeIn = function() {
	return new motion_easing_BackEaseIn(1.70158);
};
motion_easing_Back.get_easeInOut = function() {
	return new motion_easing_BackEaseInOut(1.70158);
};
motion_easing_Back.get_easeOut = function() {
	return new motion_easing_BackEaseOut(1.70158);
};
var motion_easing_BackEaseIn = function(s) {
	this.s = s;
};
$hxClasses["motion.easing.BackEaseIn"] = motion_easing_BackEaseIn;
motion_easing_BackEaseIn.__name__ = ["motion","easing","BackEaseIn"];
motion_easing_BackEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_BackEaseIn.prototype = {
	s: null
	,calculate: function(k) {
		return k * k * ((this.s + 1) * k - this.s);
	}
	,ease: function(t,b,c,d) {
		t /= d;
		return c * t * t * ((this.s + 1) * t - this.s) + b;
	}
	,__class__: motion_easing_BackEaseIn
};
var motion_easing_BackEaseInOut = function(s) {
	this.s = s;
};
$hxClasses["motion.easing.BackEaseInOut"] = motion_easing_BackEaseInOut;
motion_easing_BackEaseInOut.__name__ = ["motion","easing","BackEaseInOut"];
motion_easing_BackEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_BackEaseInOut.prototype = {
	s: null
	,calculate: function(k) {
		k /= 0.5;
		if(k < 1) {
			return 0.5 * (k * k * (((this.s *= 1.525) + 1) * k - this.s));
		}
		k -= 2;
		return 0.5 * (k * k * (((this.s *= 1.525) + 1) * k + this.s) + 2);
	}
	,ease: function(t,b,c,d) {
		t /= d / 2;
		if(t < 1) {
			return c / 2 * (t * t * (((this.s *= 1.525) + 1) * t - this.s)) + b;
		}
		var tmp = c / 2;
		t -= 2;
		return tmp * (t * t * (((this.s *= 1.525) + 1) * t + this.s) + 2) + b;
	}
	,__class__: motion_easing_BackEaseInOut
};
var motion_easing_BackEaseOut = function(s) {
	this.s = s;
};
$hxClasses["motion.easing.BackEaseOut"] = motion_easing_BackEaseOut;
motion_easing_BackEaseOut.__name__ = ["motion","easing","BackEaseOut"];
motion_easing_BackEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_BackEaseOut.prototype = {
	s: null
	,calculate: function(k) {
		return --k * k * ((this.s + 1) * k + this.s) + 1;
	}
	,ease: function(t,b,c,d) {
		t = t / d - 1;
		return c * (t * t * ((this.s + 1) * t + this.s) + 1) + b;
	}
	,__class__: motion_easing_BackEaseOut
};
var motion_easing_Elastic = function() { };
$hxClasses["motion.easing.Elastic"] = motion_easing_Elastic;
motion_easing_Elastic.__name__ = ["motion","easing","Elastic"];
motion_easing_Elastic.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Elastic.get_easeIn = function() {
	return new motion_easing_ElasticEaseIn(0.1,0.4);
};
motion_easing_Elastic.get_easeInOut = function() {
	return new motion_easing_ElasticEaseInOut(0.1,0.4);
};
motion_easing_Elastic.get_easeOut = function() {
	return new motion_easing_ElasticEaseOut(0.1,0.4);
};
var motion_easing_ElasticEaseIn = function(a,p) {
	this.a = a;
	this.p = p;
};
$hxClasses["motion.easing.ElasticEaseIn"] = motion_easing_ElasticEaseIn;
motion_easing_ElasticEaseIn.__name__ = ["motion","easing","ElasticEaseIn"];
motion_easing_ElasticEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_ElasticEaseIn.prototype = {
	a: null
	,p: null
	,calculate: function(k) {
		if(k == 0) {
			return 0;
		}
		if(k == 1) {
			return 1;
		}
		var s;
		if(this.a < 1) {
			this.a = 1;
			s = this.p / 4;
		} else {
			s = this.p / (2 * Math.PI) * Math.asin(1 / this.a);
		}
		return -(this.a * Math.pow(2,10 * --k) * Math.sin((k - s) * (2 * Math.PI) / this.p));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) {
			return b;
		}
		t /= d;
		if(t == 1) {
			return b + c;
		}
		var s;
		if(this.a < Math.abs(c)) {
			this.a = c;
			s = this.p / 4;
		} else {
			s = this.p / (2 * Math.PI) * Math.asin(c / this.a);
		}
		return -(this.a * Math.pow(2,10 * --t) * Math.sin((t * d - s) * (2 * Math.PI) / this.p)) + b;
	}
	,__class__: motion_easing_ElasticEaseIn
};
var motion_easing_ElasticEaseInOut = function(a,p) {
	this.a = a;
	this.p = p;
};
$hxClasses["motion.easing.ElasticEaseInOut"] = motion_easing_ElasticEaseInOut;
motion_easing_ElasticEaseInOut.__name__ = ["motion","easing","ElasticEaseInOut"];
motion_easing_ElasticEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ElasticEaseInOut.prototype = {
	a: null
	,p: null
	,calculate: function(k) {
		if(k == 0) {
			return 0;
		}
		k /= 0.5;
		if(k == 2) {
			return 1;
		}
		if(k < 1) {
			return -0.5 * (Math.pow(2,10 * --k) * Math.sin((k - 0.11249999999999999) * (2 * Math.PI) / 0.44999999999999996));
		}
		return Math.pow(2,-10 * --k) * Math.sin((k - 0.11249999999999999) * (2 * Math.PI) / 0.44999999999999996) * 0.5 + 1;
	}
	,ease: function(t,b,c,d) {
		if(t == 0) {
			return b;
		}
		t /= d / 2;
		if(t == 2) {
			return b + c;
		}
		var s;
		if(this.a < Math.abs(c)) {
			this.a = c;
			s = this.p / 4;
		} else {
			s = this.p / (2 * Math.PI) * Math.asin(c / this.a);
		}
		if(t < 1) {
			return -0.5 * (this.a * Math.pow(2,10 * --t) * Math.sin((t * d - s) * (2 * Math.PI) / this.p)) + b;
		}
		return this.a * Math.pow(2,-10 * --t) * Math.sin((t * d - s) * (2 * Math.PI) / this.p) * 0.5 + c + b;
	}
	,__class__: motion_easing_ElasticEaseInOut
};
var motion_easing_ElasticEaseOut = function(a,p) {
	this.a = a;
	this.p = p;
};
$hxClasses["motion.easing.ElasticEaseOut"] = motion_easing_ElasticEaseOut;
motion_easing_ElasticEaseOut.__name__ = ["motion","easing","ElasticEaseOut"];
motion_easing_ElasticEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ElasticEaseOut.prototype = {
	a: null
	,p: null
	,calculate: function(k) {
		if(k == 0) {
			return 0;
		}
		if(k == 1) {
			return 1;
		}
		var s;
		if(this.a < 1) {
			this.a = 1;
			s = this.p / 4;
		} else {
			s = this.p / (2 * Math.PI) * Math.asin(1 / this.a);
		}
		return this.a * Math.pow(2,-10 * k) * Math.sin((k - s) * (2 * Math.PI) / this.p) + 1;
	}
	,ease: function(t,b,c,d) {
		if(t == 0) {
			return b;
		}
		t /= d;
		if(t == 1) {
			return b + c;
		}
		var s;
		if(this.a < Math.abs(c)) {
			this.a = c;
			s = this.p / 4;
		} else {
			s = this.p / (2 * Math.PI) * Math.asin(c / this.a);
		}
		return this.a * Math.pow(2,-10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / this.p) + c + b;
	}
	,__class__: motion_easing_ElasticEaseOut
};
var motion_easing_ExpoEaseIn = function() {
};
$hxClasses["motion.easing.ExpoEaseIn"] = motion_easing_ExpoEaseIn;
motion_easing_ExpoEaseIn.__name__ = ["motion","easing","ExpoEaseIn"];
motion_easing_ExpoEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseIn.prototype = {
	calculate: function(k) {
		if(k == 0) {
			return 0;
		} else {
			return Math.pow(2,10 * (k - 1));
		}
	}
	,ease: function(t,b,c,d) {
		if(t == 0) {
			return b;
		} else {
			return c * Math.pow(2,10 * (t / d - 1)) + b;
		}
	}
	,__class__: motion_easing_ExpoEaseIn
};
var motion_easing_ExpoEaseInOut = function() {
};
$hxClasses["motion.easing.ExpoEaseInOut"] = motion_easing_ExpoEaseInOut;
motion_easing_ExpoEaseInOut.__name__ = ["motion","easing","ExpoEaseInOut"];
motion_easing_ExpoEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseInOut.prototype = {
	calculate: function(k) {
		if(k == 0) {
			return 0;
		}
		if(k == 1) {
			return 1;
		}
		k /= 0.5;
		if(k < 1.0) {
			return 0.5 * Math.pow(2,10 * (k - 1));
		}
		return 0.5 * (2 - Math.pow(2,-10 * --k));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) {
			return b;
		}
		if(t == d) {
			return b + c;
		}
		t /= d / 2.0;
		if(t < 1.0) {
			return c / 2 * Math.pow(2,10 * (t - 1)) + b;
		}
		return c / 2 * (2 - Math.pow(2,-10 * --t)) + b;
	}
	,__class__: motion_easing_ExpoEaseInOut
};
var motion_easing_Linear = function() { };
$hxClasses["motion.easing.Linear"] = motion_easing_Linear;
motion_easing_Linear.__name__ = ["motion","easing","Linear"];
motion_easing_Linear.__properties__ = {get_easeNone:"get_easeNone"}
motion_easing_Linear.get_easeNone = function() {
	return new motion_easing_LinearEaseNone();
};
var motion_easing_LinearEaseNone = function() {
};
$hxClasses["motion.easing.LinearEaseNone"] = motion_easing_LinearEaseNone;
motion_easing_LinearEaseNone.__name__ = ["motion","easing","LinearEaseNone"];
motion_easing_LinearEaseNone.__interfaces__ = [motion_easing_IEasing];
motion_easing_LinearEaseNone.prototype = {
	calculate: function(k) {
		return k;
	}
	,ease: function(t,b,c,d) {
		return c * t / d + b;
	}
	,__class__: motion_easing_LinearEaseNone
};
var motion_easing_Quad = function() { };
$hxClasses["motion.easing.Quad"] = motion_easing_Quad;
motion_easing_Quad.__name__ = ["motion","easing","Quad"];
motion_easing_Quad.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Quad.get_easeIn = function() {
	return new motion_easing_QuadEaseIn();
};
motion_easing_Quad.get_easeInOut = function() {
	return new motion_easing_QuadEaseInOut();
};
motion_easing_Quad.get_easeOut = function() {
	return new motion_easing_QuadEaseOut();
};
var motion_easing_QuadEaseIn = function() {
};
$hxClasses["motion.easing.QuadEaseIn"] = motion_easing_QuadEaseIn;
motion_easing_QuadEaseIn.__name__ = ["motion","easing","QuadEaseIn"];
motion_easing_QuadEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_QuadEaseIn.prototype = {
	calculate: function(k) {
		return k * k;
	}
	,ease: function(t,b,c,d) {
		t /= d;
		return c * t * t + b;
	}
	,__class__: motion_easing_QuadEaseIn
};
var motion_easing_QuadEaseInOut = function() {
};
$hxClasses["motion.easing.QuadEaseInOut"] = motion_easing_QuadEaseInOut;
motion_easing_QuadEaseInOut.__name__ = ["motion","easing","QuadEaseInOut"];
motion_easing_QuadEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_QuadEaseInOut.prototype = {
	calculate: function(k) {
		k *= 2;
		if(k < 1) {
			return 0.5 * k * k;
		}
		return -0.5 * ((k - 1) * (k - 3) - 1);
	}
	,ease: function(t,b,c,d) {
		t /= d / 2;
		if(t < 1) {
			return c / 2 * t * t + b;
		}
		return -c / 2 * ((t - 1) * (t - 3) - 1) + b;
	}
	,__class__: motion_easing_QuadEaseInOut
};
var motion_easing_QuadEaseOut = function() {
};
$hxClasses["motion.easing.QuadEaseOut"] = motion_easing_QuadEaseOut;
motion_easing_QuadEaseOut.__name__ = ["motion","easing","QuadEaseOut"];
motion_easing_QuadEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_QuadEaseOut.prototype = {
	calculate: function(k) {
		return -k * (k - 2);
	}
	,ease: function(t,b,c,d) {
		t /= d;
		return -c * t * (t - 2) + b;
	}
	,__class__: motion_easing_QuadEaseOut
};
var openfl_IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl_IAssetCache;
openfl_IAssetCache.__name__ = ["openfl","IAssetCache"];
openfl_IAssetCache.prototype = {
	get_enabled: null
	,set_enabled: null
	,clear: null
	,getBitmapData: null
	,getFont: null
	,getSound: null
	,hasBitmapData: null
	,hasFont: null
	,hasSound: null
	,removeBitmapData: null
	,removeFont: null
	,removeSound: null
	,setBitmapData: null
	,setFont: null
	,setSound: null
	,__class__: openfl_IAssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl_AssetCache;
openfl_AssetCache.__name__ = ["openfl","AssetCache"];
openfl_AssetCache.__interfaces__ = [openfl_IAssetCache];
openfl_AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.sound = new haxe_ds_StringMap();
		} else {
			var keys = this.bitmapData.keys();
			while(keys.hasNext()) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) {
					this.removeBitmapData(key);
				}
			}
			var keys1 = this.font.keys();
			while(keys1.hasNext()) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.removeFont(key1);
				}
			}
			var keys2 = this.sound.keys();
			while(keys2.hasNext()) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) {
					this.removeSound(key2);
				}
			}
		}
	}
	,getBitmapData: function(id) {
		var _this = this.bitmapData;
		return __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
	}
	,getFont: function(id) {
		var _this = this.font;
		return __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
	}
	,getSound: function(id) {
		var _this = this.sound;
		return __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
	}
	,hasBitmapData: function(id) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,hasFont: function(id) {
		var _this = this.font;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,hasSound: function(id) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,removeBitmapData: function(id) {
		lime_utils_Assets.cache.image.remove(id);
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		lime_utils_Assets.cache.font.remove(id);
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		lime_utils_Assets.cache.audio.remove(id);
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,bitmapData);
		} else {
			_this.h[id] = bitmapData;
		}
	}
	,setFont: function(id,font) {
		var _this = this.font;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,font);
		} else {
			_this.h[id] = font;
		}
	}
	,setSound: function(id,sound) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,sound);
		} else {
			_this.h[id] = sound;
		}
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl_AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_Assets = function() { };
$hxClasses["openfl.Assets"] = openfl_Assets;
openfl_Assets.__name__ = ["openfl","Assets"];
openfl_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) {
		useWeakReference = false;
	}
	if(priority == null) {
		priority = 0;
	}
	if(useCapture == null) {
		useCapture = false;
	}
	if(!lime_utils_Assets.onChange.has(openfl_Assets.LimeAssets_onChange)) {
		lime_utils_Assets.onChange.add(openfl_Assets.LimeAssets_onChange);
	}
	openfl_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_Assets.dispatchEvent = function(event) {
	return openfl_Assets.dispatcher.dispatchEvent(event);
};
openfl_Assets.exists = function(id,type) {
	return lime_utils_Assets.exists(id,type);
};
openfl_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) {
			return bitmapData;
		}
	}
	var image = lime_utils_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_Assets.cache.get_enabled()) {
			openfl_Assets.cache.setBitmapData(id,bitmapData1);
		}
		return bitmapData1;
	}
	return null;
};
openfl_Assets.getBytes = function(id) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_utils_Assets.getBytes(id));
};
openfl_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) {
		return openfl_Assets.cache.getFont(id);
	}
	var limeFont = lime_utils_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) {
			openfl_Assets.cache.setFont(id,font);
		}
		return font;
	}
	return new openfl_text_Font();
};
openfl_Assets.getLibrary = function(name) {
	return lime_utils_Assets.getLibrary(name);
};
openfl_Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			if(library.isLocal(symbolName,"MOVIE_CLIP")) {
				return library.getMovieClip(symbolName);
			} else {
				lime_utils_Log.info("MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 223, className : "openfl.Assets", methodName : "getMovieClip"});
			}
		} else {
			lime_utils_Log.info("There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 229, className : "openfl.Assets", methodName : "getMovieClip"});
		}
	} else {
		lime_utils_Log.info("There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 235, className : "openfl.Assets", methodName : "getMovieClip"});
	}
	return null;
};
openfl_Assets.getMusic = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return openfl_Assets.getSound(id,useCache);
};
openfl_Assets.getPath = function(id) {
	return lime_utils_Assets.getPath(id);
};
openfl_Assets.getSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasSound(id)) {
		var sound = openfl_Assets.cache.getSound(id);
		if(openfl_Assets.isValidSound(sound)) {
			return sound;
		}
	}
	var buffer = lime_utils_Assets.getAudioBuffer(id,false);
	if(buffer != null) {
		var sound1 = openfl_media_Sound.fromAudioBuffer(buffer);
		if(useCache && openfl_Assets.cache.get_enabled()) {
			openfl_Assets.cache.setSound(id,sound1);
		}
		return sound1;
	}
	return null;
};
openfl_Assets.getText = function(id) {
	return lime_utils_Assets.getText(id);
};
openfl_Assets.hasEventListener = function(type) {
	return openfl_Assets.dispatcher.hasEventListener(type);
};
openfl_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl_Assets.cache.hasBitmapData(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			if(openfl_Assets.cache.hasFont(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl_Assets.cache.hasSound(id)) {
				return true;
			}
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		return library.isLocal(symbolName,type);
	}
	return false;
};
openfl_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
openfl_Assets.isValidSound = function(sound) {
	return true;
};
openfl_Assets.list = function(type) {
	return lime_utils_Assets.list(type);
};
openfl_Assets.loadBitmapData = function(id,useCache,handler) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) {
			promise.complete(bitmapData);
			return promise.future;
		}
	}
	lime_utils_Assets.loadImage(id,false).onComplete(function(image) {
		if(image != null) {
			var bitmapData1 = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_Assets.cache.get_enabled()) {
				openfl_Assets.cache.setBitmapData(id,bitmapData1);
			}
			promise.complete(bitmapData1);
		} else {
			promise.error("[Assets] Could not load Image \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadBytes = function(id,handler) {
	var promise = new lime_app_Promise();
	var future = lime_utils_Assets.loadBytes(id);
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	future.onComplete(function(bytes) {
		promise.complete(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	});
	future.onProgress(function(progress,total) {
		promise.progress(progress,total);
	});
	future.onError(function(msg) {
		promise.error(msg);
	});
	return promise.future;
};
openfl_Assets.loadFont = function(id,useCache,handler) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) {
		promise.complete(openfl_Assets.cache.getFont(id));
		return promise.future;
	}
	lime_utils_Assets.loadFont(id).onComplete(function(limeFont) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) {
			openfl_Assets.cache.setFont(id,font);
		}
		promise.complete(font);
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadLibrary = function(name,handler) {
	var future = lime_utils_Assets.loadLibrary(name);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.loadMusic = function(id,useCache,handler) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	return new lime_app_Future(function() {
		return openfl_Assets.getMusic(id,useCache);
	});
};
openfl_Assets.loadMovieClip = function(id,handler) {
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			promise.completeWith(library.loadMovieClip(symbolName));
		} else {
			promise.error("[Assets] There is no MovieClip asset with an ID of \"" + id + "\"");
		}
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	}
	return promise.future;
};
openfl_Assets.loadSound = function(id,useCache,handler) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	lime_utils_Assets.loadAudioBuffer(id,useCache).onComplete(function(buffer) {
		if(buffer != null) {
			var sound = openfl_media_Sound.fromAudioBuffer(buffer);
			if(useCache && openfl_Assets.cache.get_enabled()) {
				openfl_Assets.cache.setSound(id,sound);
			}
			promise.complete(sound);
		} else {
			promise.error("[Assets] Could not load Sound \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadText = function(id,handler) {
	var future = lime_utils_Assets.loadText(id);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.registerLibrary = function(name,library) {
	lime_utils_Assets.registerLibrary(name,library);
};
openfl_Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) {
		capture = false;
	}
	openfl_Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl_Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl_Assets.resolveEnum = function(name) {
	return Type.resolveEnum(name);
};
openfl_Assets.unloadLibrary = function(name) {
	lime_utils_Assets.unloadLibrary(name);
};
openfl_Assets.LimeAssets_onChange = function() {
	openfl_Assets.dispatchEvent(new openfl_events_Event("change"));
};
var openfl_AssetLibrary = function() {
	lime_utils_AssetLibrary.call(this);
};
$hxClasses["openfl.AssetLibrary"] = openfl_AssetLibrary;
openfl_AssetLibrary.__name__ = ["openfl","AssetLibrary"];
openfl_AssetLibrary.__super__ = lime_utils_AssetLibrary;
openfl_AssetLibrary.prototype = $extend(lime_utils_AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,loadMovieClip: function(id) {
		var _gthis = this;
		return new lime_app_Future(function() {
			return _gthis.getMovieClip(id);
		});
	}
	,__class__: openfl_AssetLibrary
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
	if(openfl_display_MovieClip.__initSymbol != null) {
		this.__swf = openfl_display_MovieClip.__initSWF;
		this.__symbol = openfl_display_MovieClip.__initSymbol;
		openfl_display_MovieClip.__initSWF = null;
		openfl_display_MovieClip.__initSymbol = null;
		this.__fromSymbol(this.__swf,this.__symbol);
	}
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	enabled: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__frameScripts: null
	,__frameTime: null
	,__lastUpdate: null
	,__objectDepths: null
	,__objects: null
	,__playing: null
	,__swf: null
	,__symbol: null
	,__timeElapsed: null
	,__totalFrames: null
	,__zeroSymbol: null
	,addFrameScript: function(index,method) {
		if(method != null) {
			if(this.__frameScripts == null) {
				this.__frameScripts = new haxe_ds_IntMap();
			}
			this.__frameScripts.h[index] = method;
		} else if(this.__frameScripts != null) {
			this.__frameScripts.remove(index);
		}
	}
	,gotoAndPlay: function(frame,scene) {
		if(this.__symbol != null) {
			this.__currentFrame = this.__getFrame(frame);
			this.__updateFrame();
			this.play();
		}
	}
	,gotoAndStop: function(frame,scene) {
		if(this.__symbol != null) {
			this.__currentFrame = this.__getFrame(frame);
			this.__updateFrame();
			this.stop();
		}
	}
	,nextFrame: function() {
		if(this.__symbol != null) {
			var next = this.__currentFrame + 1;
			if(next > this.__totalFrames) {
				next = this.__totalFrames;
			}
			this.gotoAndStop(next);
		}
	}
	,play: function() {
		if(this.__symbol != null) {
			if(!this.__playing && this.__totalFrames > 1) {
				this.__playing = true;
				this.__frameTime = 1000 / this.__swf.frameRate | 0;
				this.__timeElapsed = 0;
			}
		}
	}
	,prevFrame: function() {
		if(this.__symbol != null) {
			var previous = this.__currentFrame - 1;
			if(previous < 1) {
				previous = 1;
			}
			this.gotoAndStop(previous);
		}
	}
	,stop: function() {
		if(this.__symbol != null) {
			if(this.__playing) {
				this.__playing = false;
			}
		}
	}
	,__applyTween: function(start,end,ratio) {
		return start + (end - start) * ratio;
	}
	,__enterFrame: function(deltaTime) {
		if(this.__symbol != null) {
			if(this.__playing) {
				this.__timeElapsed += deltaTime;
				var advanceFrames = Math.floor(this.__timeElapsed / this.__frameTime);
				this.__timeElapsed = this.__timeElapsed % this.__frameTime;
				if(this.__frameScripts != null) {
					var _g1 = 0;
					while(_g1 < advanceFrames) {
						++_g1;
						this.__currentFrame++;
						if(this.__currentFrame > this.__totalFrames) {
							this.__currentFrame = 1;
						}
						if(this.__frameScripts.h.hasOwnProperty(this.__currentFrame - 1)) {
							this.__frameScripts.h[this.__currentFrame - 1]();
							if(!this.__playing) {
								break;
							}
						}
					}
				} else {
					this.__currentFrame += advanceFrames;
					while(this.__currentFrame > this.__totalFrames) this.__currentFrame -= this.__totalFrames;
				}
				this.__updateFrame();
			}
		}
		openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
	}
	,__fromSymbol: function(swf,symbol) {
		if(this.__objects != null) {
			return;
		}
		this.__swf = swf;
		this.__symbol = symbol;
		this.__lastUpdate = -1;
		this.__objectDepths = [];
		this.__objects = new haxe_ds_IntMap();
		this.__zeroSymbol = -1;
		this.__currentFrame = 1;
		this.__totalFrames = this.__symbol.frames.length;
		var _g1 = 0;
		var _g = this.__symbol.frames.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__symbol.frames[i].label != null) {
				this.__currentLabels.push(new openfl_display_FrameLabel(this.__symbol.frames[i].label,i + 1));
			}
		}
		this.__updateFrame();
		var _g2 = 0;
		var _g11 = Type.getInstanceFields(js_Boot.getClass(this));
		while(_g2 < _g11.length) {
			var field = _g11[_g2];
			++_g2;
			var _g21 = 0;
			var _g3 = this.__children;
			while(_g21 < _g3.length) {
				var child = _g3[_g21];
				++_g21;
				if(child.get_name() == field) {
					this[field] = child;
				}
			}
		}
		if(this.__totalFrames > 1) {
			this.play();
		}
	}
	,__getFrame: function(frame) {
		if(typeof(frame) == "number" && ((frame | 0) === frame)) {
			var index = frame;
			if(index < 1) {
				return 1;
			}
			if(index > this.__totalFrames) {
				return this.__totalFrames;
			}
			return index;
		} else if(typeof(frame) == "string") {
			var label = frame;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var frameLabel = _g1[_g];
				++_g;
				if(frameLabel.get_name() == label) {
					return frameLabel.get_frame();
				}
			}
		}
		return 1;
	}
	,__placeObject: function(displayObject,frameObject) {
		if(frameObject.name != null) {
			displayObject.set_name(frameObject.name);
		}
		if(frameObject.matrix != null) {
			displayObject.get_transform().set_matrix(frameObject.matrix);
		}
		if(frameObject.colorTransform != null) {
			displayObject.get_transform().set_colorTransform(frameObject.colorTransform);
		}
		if(frameObject.filters != null) {
			var filters = [];
			var _g = 0;
			var _g1 = frameObject.filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				switch(filter[1]) {
				case 0:
					filters.push(new openfl_filters_BlurFilter(filter[2],filter[3],filter[4]));
					break;
				case 1:
					filters.push(new openfl_filters_ColorMatrixFilter(filter[2]));
					break;
				case 2:
					filters.push(new openfl_filters_DropShadowFilter(filter[2],filter[3],filter[4],filter[5],filter[6],filter[7],filter[8],filter[9],filter[10],filter[11],filter[12]));
					break;
				case 3:
					filters.push(new openfl_filters_GlowFilter(filter[2],filter[3],filter[4],filter[5],filter[6],filter[7],filter[8],filter[9]));
					break;
				}
			}
			displayObject.set_filters(filters);
		}
		displayObject.set_visible(frameObject.visible);
	}
	,__renderFrame: function(index) {
		var previousIndex = this.__lastUpdate - 1;
		if(previousIndex > index) {
			var timelineObject;
			var exists;
			var i = 0;
			while(i < this.__objectDepths.length) {
				timelineObject = this.__objectDepths[i];
				exists = false;
				var _g = 0;
				var _g1 = this.__symbol.frames[0].objects;
				while(_g < _g1.length) {
					var frameObject = _g1[_g];
					++_g;
					if(frameObject.id == timelineObject.id) {
						exists = true;
						break;
					}
				}
				if(!exists) {
					if(timelineObject.displayObject.parent == this) {
						this.removeChild(timelineObject.displayObject);
					}
					this.__objectDepths.splice(i,1);
				} else {
					++i;
				}
			}
			previousIndex = 0;
		}
		var frame;
		var timelineObject1;
		var displayObject;
		var symbol;
		var mask = null;
		var maskObject = null;
		var depthChange = false;
		var _g11 = previousIndex;
		var _g2 = index + 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(i1 < 0) {
				continue;
			}
			frame = this.__symbol.frames[i1];
			var _g21 = 0;
			var _g3 = frame.objects;
			while(_g21 < _g3.length) {
				var frameObject1 = _g3[_g21];
				++_g21;
				if(frameObject1.type != openfl__$internal_timeline_FrameObjectType.DESTROY) {
					if(frameObject1.id == 0 && frameObject1.symbol != this.__zeroSymbol) {
						timelineObject1 = this.__objects.h[0];
						if(timelineObject1 != null && timelineObject1.displayObject.parent == this) {
							this.removeChild(timelineObject1.displayObject);
						}
						HxOverrides.remove(this.__objectDepths,this.__objects.h[0]);
						timelineObject1 = null;
						this.__zeroSymbol = frameObject1.symbol;
					}
					displayObject = null;
					if(!this.__objects.h.hasOwnProperty(frameObject1.id)) {
						if(this.__swf.symbols.h.hasOwnProperty(frameObject1.symbol)) {
							symbol = this.__swf.symbols.h[frameObject1.symbol];
							displayObject = symbol.__createObject(this.__swf);
						}
						if(displayObject != null) {
							timelineObject1 = new openfl_display__$MovieClip_TimelineObject(frameObject1.id,frameObject1.depth,displayObject);
							this.__objectDepths.push(timelineObject1);
							depthChange = true;
							this.__objects.h[frameObject1.id] = timelineObject1;
						}
					} else {
						timelineObject1 = this.__objects.h[frameObject1.id];
						displayObject = timelineObject1.displayObject;
						if(timelineObject1.displayObject.parent == null) {
							this.__objectDepths.push(timelineObject1);
							depthChange = true;
						}
					}
					if(displayObject != null) {
						this.__placeObject(displayObject,frameObject1);
						if(mask != null) {
							if(mask.clipDepth < frameObject1.depth) {
								mask = null;
							} else {
								displayObject.set_mask(maskObject);
							}
						} else {
							displayObject.set_mask(null);
						}
						if(frameObject1.clipDepth != 0) {
							mask = frameObject1;
							displayObject.set_visible(false);
							maskObject = displayObject;
						}
					}
				} else if(this.__objects.h.hasOwnProperty(frameObject1.id)) {
					timelineObject1 = this.__objects.h[frameObject1.id];
					if(timelineObject1 != null && timelineObject1.displayObject.parent == this) {
						this.removeChild(timelineObject1.displayObject);
					}
					HxOverrides.remove(this.__objectDepths,timelineObject1);
					depthChange = true;
				}
			}
		}
		if(depthChange) {
			this.__objectDepths.sort($bind(this,this.__sortTimelineDepth));
			var i2 = this.__objectDepths.length - 1;
			while(i2 >= 0) {
				timelineObject1 = this.__objectDepths[i2];
				this.addChildAt(timelineObject1.displayObject,0);
				--i2;
			}
		}
	}
	,__sortTimelineDepth: function(a,b) {
		return a.depth - b.depth;
	}
	,__stopAllMovieClips: function() {
		openfl_display_Sprite.prototype.__stopAllMovieClips.call(this);
		this.stop();
	}
	,__updateFrame: function() {
		if(this.__currentFrame != this.__lastUpdate) {
			var frameIndex = this.__currentFrame - 1;
			if(frameIndex > -1) {
				if(this.__symbol.frames.length > frameIndex && this.__symbol.frames[frameIndex] != null) {
					this.__currentFrameLabel = this.__symbol.frames[frameIndex].label;
				} else {
					this.__currentFrameLabel = null;
				}
				if(this.__currentFrameLabel != null) {
					this.__currentLabel = this.__currentFrameLabel;
				} else if(this.__currentFrame != this.__lastUpdate + 1) {
					this.__currentLabel = null;
					var _g = 0;
					var _g1 = this.__currentLabels;
					while(_g < _g1.length) {
						var label = _g1[_g];
						++_g;
						if(label.get_frame() <= this.__currentFrame) {
							this.__currentLabel = label.get_name();
						} else {
							break;
						}
					}
				}
				this.__renderFrame(frameIndex);
			}
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		this.__lastUpdate = this.__currentFrame;
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl_display_MovieClip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl__$Vector_Vector_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length",set_fixed:"set_fixed",get_fixed:"get_fixed"}
openfl__$Vector_Vector_$Impl_$.concat = function(this1,a) {
	return this1.concat(a);
};
openfl__$Vector_Vector_$Impl_$.copy = function(this1) {
	return this1.copy();
};
openfl__$Vector_Vector_$Impl_$.get = function(this1,index) {
	return this1.get(index);
};
openfl__$Vector_Vector_$Impl_$.indexOf = function(this1,x,from) {
	if(from == null) {
		from = 0;
	}
	return this1.indexOf(x,from);
};
openfl__$Vector_Vector_$Impl_$.insertAt = function(this1,index,element) {
	this1.insertAt(index,element);
};
openfl__$Vector_Vector_$Impl_$.iterator = function(this1) {
	return this1.iterator();
};
openfl__$Vector_Vector_$Impl_$.join = function(this1,sep) {
	return this1.join(sep);
};
openfl__$Vector_Vector_$Impl_$.lastIndexOf = function(this1,x,from) {
	if(from == null) {
		from = 0;
	}
	return this1.lastIndexOf(x,from);
};
openfl__$Vector_Vector_$Impl_$.pop = function(this1) {
	return this1.pop();
};
openfl__$Vector_Vector_$Impl_$.push = function(this1,x) {
	return this1.push(x);
};
openfl__$Vector_Vector_$Impl_$.reverse = function(this1) {
	this1.reverse();
};
openfl__$Vector_Vector_$Impl_$.set = function(this1,index,value) {
	return this1.set(index,value);
};
openfl__$Vector_Vector_$Impl_$.shift = function(this1) {
	return this1.shift();
};
openfl__$Vector_Vector_$Impl_$.slice = function(this1,pos,end) {
	return this1.slice(pos,end);
};
openfl__$Vector_Vector_$Impl_$.sort = function(this1,f) {
	this1.sort(f);
};
openfl__$Vector_Vector_$Impl_$.splice = function(this1,pos,len) {
	return this1.splice(pos,len);
};
openfl__$Vector_Vector_$Impl_$.toString = function(this1) {
	return this1.toString();
};
openfl__$Vector_Vector_$Impl_$.unshift = function(this1,x) {
	this1.unshift(x);
};
openfl__$Vector_Vector_$Impl_$.ofArray = function(a) {
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return vector;
};
openfl__$Vector_Vector_$Impl_$.convert = function(v) {
	return v;
};
openfl__$Vector_Vector_$Impl_$.toBoolVector = function(t,length,fixed) {
	return new openfl__$Vector_BoolVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.toIntVector = function(t,length,fixed) {
	return new openfl__$Vector_IntVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.toFloatVector = function(t,length,fixed) {
	return new openfl__$Vector_FloatVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.toFunctionVector = function(t,length,fixed) {
	return new openfl__$Vector_FunctionVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.toObjectVector = function(t,length,fixed) {
	return new openfl__$Vector_ObjectVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.fromBoolVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromIntVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromFloatVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromFunctionVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromObjectVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.get_fixed = function(this1) {
	return this1.fixed;
};
openfl__$Vector_Vector_$Impl_$.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
openfl__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return this1.get_length();
};
openfl__$Vector_Vector_$Impl_$.set_length = function(this1,value) {
	return this1.set_length(value);
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.setTo(0,0,1);
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(this.__array == null) {
			this.__array = new Float32Array(9);
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		openfl_geom_Matrix.__matrix3.setTo(this.a,this.b,this.c,this.d,this.tx,this.ty);
		return openfl_geom_Matrix.__matrix3;
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.tx;
		} else {
			return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
		}
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.ty;
		} else {
			return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
		}
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
		this.redOffset = second.redMultiplier * this.redOffset + second.redOffset;
		this.greenOffset = second.greenMultiplier * this.greenOffset + second.greenOffset;
		this.blueOffset = second.blueMultiplier * this.blueOffset + second.blueOffset;
		this.alphaOffset = second.alphaMultiplier * this.alphaOffset + second.alphaOffset;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) {
			skipAlphaMultiplier = false;
		}
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function() {
		if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			openfl_geom_ColorTransform.__limeColorMatrix = new Float32Array(20);
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib["as"] = function(v,c) {
	if(js_Boot.__instanceof(v,c)) {
		return v;
	} else {
		return null;
	}
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	if(target == null) {
		target = "_blank";
	}
	lime_system_System.openURL(request.url,target);
};
openfl_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	var _this = openfl_Lib.__sentWarnings;
	if(!(__map_reserved[api] != null?_this.existsReserved(api):_this.h.hasOwnProperty(api))) {
		var _this1 = openfl_Lib.__sentWarnings;
		if(__map_reserved[api] != null) {
			_this1.setReserved(api,true);
		} else {
			_this1.h[api] = true;
		}
		lime_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 151, className : "openfl.Lib", methodName : "trace"});
};
var openfl__$Vector_IVector = function() { };
$hxClasses["openfl._Vector.IVector"] = openfl__$Vector_IVector;
openfl__$Vector_IVector.__name__ = ["openfl","_Vector","IVector"];
openfl__$Vector_IVector.prototype = {
	get_length: null
	,set_length: null
	,fixed: null
	,concat: null
	,copy: null
	,get: null
	,indexOf: null
	,insertAt: null
	,iterator: null
	,join: null
	,lastIndexOf: null
	,pop: null
	,push: null
	,reverse: null
	,set: null
	,shift: null
	,slice: null
	,sort: null
	,splice: null
	,toString: null
	,unshift: null
	,__class__: openfl__$Vector_IVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_BoolVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.BoolVector"] = openfl__$Vector_BoolVector;
openfl__$Vector_BoolVector.__name__ = ["openfl","_Vector","BoolVector"];
openfl__$Vector_BoolVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_BoolVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_BoolVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_BoolVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_BoolVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_BoolVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return false;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_BoolVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_BoolVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) this.__array[_g1++] = false;
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_BoolVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FloatVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FloatVector"] = openfl__$Vector_FloatVector;
openfl__$Vector_FloatVector.__name__ = ["openfl","_Vector","FloatVector"];
openfl__$Vector_FloatVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FloatVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FloatVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_FloatVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_FloatVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_FloatVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_FloatVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FloatVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) this.__array[_g1++] = 0;
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FloatVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FunctionVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FunctionVector"] = openfl__$Vector_FunctionVector;
openfl__$Vector_FunctionVector.__name__ = ["openfl","_Vector","FunctionVector"];
openfl__$Vector_FunctionVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FunctionVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FunctionVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_FunctionVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_FunctionVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_FunctionVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return null;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_FunctionVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FunctionVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) this.__array[_g1++] = null;
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FunctionVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_IntVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.IntVector"] = openfl__$Vector_IntVector;
openfl__$Vector_IntVector.__name__ = ["openfl","_Vector","IntVector"];
openfl__$Vector_IntVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_IntVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_IntVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_IntVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_IntVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_IntVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_IntVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_IntVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) this.__array[_g1++] = 0;
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_IntVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_ObjectVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.ObjectVector"] = openfl__$Vector_ObjectVector;
openfl__$Vector_ObjectVector.__name__ = ["openfl","_Vector","ObjectVector"];
openfl__$Vector_ObjectVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_ObjectVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_ObjectVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_ObjectVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_ObjectVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_ObjectVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					++_g1;
					this.__array.push(null);
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_ObjectVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$internal_renderer_AbstractBlendModeManager = function() {
};
$hxClasses["openfl._internal.renderer.AbstractBlendModeManager"] = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_AbstractBlendModeManager.__name__ = ["openfl","_internal","renderer","AbstractBlendModeManager"];
openfl__$internal_renderer_AbstractBlendModeManager.prototype = {
	setBlendMode: function(blendMode) {
	}
	,__class__: openfl__$internal_renderer_AbstractBlendModeManager
};
var openfl__$internal_renderer_AbstractFilterManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractFilterManager"] = openfl__$internal_renderer_AbstractFilterManager;
openfl__$internal_renderer_AbstractFilterManager.__name__ = ["openfl","_internal","renderer","AbstractFilterManager"];
openfl__$internal_renderer_AbstractFilterManager.prototype = {
	renderSession: null
	,pushObject: function(object) {
		return null;
	}
	,popObject: function(object) {
	}
	,__class__: openfl__$internal_renderer_AbstractFilterManager
};
var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	renderSession: null
	,pushMask: function(mask) {
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,popRect: function() {
	}
	,saveState: function() {
	}
	,restoreState: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = function(stage) {
	this.stage = stage;
	this.width = stage.stageWidth;
	this.height = stage.stageHeight;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl__$internal_renderer_AbstractRenderer.prototype = {
	height: null
	,width: null
	,transparent: null
	,viewport: null
	,renderSession: null
	,stage: null
	,clear: function() {
	}
	,render: function() {
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_AbstractShaderManager = function() {
};
$hxClasses["openfl._internal.renderer.AbstractShaderManager"] = openfl__$internal_renderer_AbstractShaderManager;
openfl__$internal_renderer_AbstractShaderManager.__name__ = ["openfl","_internal","renderer","AbstractShaderManager"];
openfl__$internal_renderer_AbstractShaderManager.prototype = {
	currentShader: null
	,defaultShader: null
	,setShader: function(shader) {
	}
	,__class__: openfl__$internal_renderer_AbstractShaderManager
};
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	if(openfl__$internal_renderer_DrawCommandBuffer.empty == null) {
		this.types = [];
		this.b = [];
		this.i = [];
		this.f = [];
		this.o = [];
		this.ff = [];
		this.ii = [];
		this.copyOnWrite = true;
	} else {
		this.clear();
	}
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl","_internal","renderer","DrawCommandBuffer"];
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,copyOnWrite: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,append: function(other) {
		if(this.get_length() == 0) {
			this.types = other.types;
			this.b = other.b;
			this.i = other.i;
			this.f = other.f;
			this.o = other.o;
			this.ff = other.ff;
			this.ii = other.ii;
			this.copyOnWrite = other.copyOnWrite = true;
			return other;
		}
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c = data.readBeginBitmapFill();
				this.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
				break;
			case 1:
				var c1 = data.readBeginFill();
				this.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1),openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1));
				break;
			case 2:
				var c2 = data.readBeginGradientFill();
				this.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c2));
				break;
			case 3:
				var c3 = data.readCubicCurveTo();
				this.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
				break;
			case 4:
				var c4 = data.readCurveTo();
				this.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
				break;
			case 5:
				var c5 = data.readDrawCircle();
				this.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
				break;
			case 6:
				var c6 = data.readDrawEllipse();
				this.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
				break;
			case 7:
				var c7 = data.readDrawRect();
				this.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
				break;
			case 8:
				var c8 = data.readDrawRoundRect();
				this.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
				break;
			case 10:
				var c9 = data.readDrawTriangles();
				this.drawTriangles(openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c9),openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c9),openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c9),openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c9));
				break;
			case 11:
				data.readEndFill();
				this.endFill();
				break;
			case 12:
				var c10 = data.readLineBitmapStyle();
				this.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c10));
				break;
			case 13:
				var c11 = data.readLineGradientStyle();
				this.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c11));
				break;
			case 14:
				var c12 = data.readLineStyle();
				this.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c12));
				break;
			case 15:
				var c13 = data.readLineTo();
				this.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c13));
				break;
			case 16:
				var c14 = data.readMoveTo();
				this.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14));
				break;
			case 17:
				this.overrideMatrix(openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix(data.readOverrideMatrix()));
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,clear: function() {
		this.types = openfl__$internal_renderer_DrawCommandBuffer.empty.types;
		this.b = openfl__$internal_renderer_DrawCommandBuffer.empty.b;
		this.i = openfl__$internal_renderer_DrawCommandBuffer.empty.i;
		this.f = openfl__$internal_renderer_DrawCommandBuffer.empty.f;
		this.o = openfl__$internal_renderer_DrawCommandBuffer.empty.o;
		this.ff = openfl__$internal_renderer_DrawCommandBuffer.empty.ff;
		this.ii = openfl__$internal_renderer_DrawCommandBuffer.empty.ii;
		this.copyOnWrite = true;
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,destroy: function() {
		this.clear();
		this.types = null;
		this.b = null;
		this.i = null;
		this.f = null;
		this.o = null;
		this.ff = null;
		this.ii = null;
	}
	,drawCircle: function(x,y,radius) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRect: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,prepareWrite: function() {
		if(this.copyOnWrite) {
			this.types = this.types.slice();
			this.b = this.b.slice();
			this.i = this.i.slice();
			this.f = this.f.slice();
			this.o = this.o.slice();
			this.ff = this.ff.slice();
			this.ii = this.ii.slice();
			this.copyOnWrite = false;
		}
	}
	,overrideMatrix: function(matrix) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl","_internal","renderer","DrawCommandReader"];
openfl__$internal_renderer_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,advance: function() {
		switch(this.prev[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,'float': function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,'int': function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new(this);
	}
	,readBeginFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new(this);
	}
	,readBeginGradientFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new(this);
	}
	,readCubicCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new(this);
	}
	,readCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new(this);
	}
	,readDrawCircle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
		return openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new(this);
	}
	,readDrawEllipse: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
		return openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new(this);
	}
	,readDrawRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
		return openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new(this);
	}
	,readDrawRoundRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
		return openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new(this);
	}
	,readDrawTriangles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
		return openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new(this);
	}
	,readEndFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new(this);
	}
	,readLineBitmapStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
		return openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new(this);
	}
	,readLineGradientStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
		return openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new(this);
	}
	,readLineStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
		return openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new(this);
	}
	,readLineTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new(this);
	}
	,readMoveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new(this);
	}
	,readOverrideMatrix: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
		return openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new(this);
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		this.advance();
		this.prev = type;
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginBitmapFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth = function(this1) {
	return this1.bool(1);
};
var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__properties__ = {get_alpha:"get_alpha",get_color:"get_color"}
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color = function(this1) {
	return this1["int"](0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha = function(this1) {
	return this1["float"](0);
};
var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginGradientFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors = function(this1) {
	return this1.iArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas = function(this1) {
	return this1.fArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios = function(this1) {
	return this1.iArr(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1["float"](0);
};
var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CubicCurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY2:"get_controlY2",get_controlX2:"get_controlX2",get_controlY1:"get_controlY1",get_controlX1:"get_controlX1"}
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 = function(this1) {
	return this1["float"](3);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1["float"](4);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1["float"](5);
};
var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY:"get_controlY",get_controlX:"get_controlX"}
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1["float"](3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawCircleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__properties__ = {get_radius:"get_radius",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius = function(this1) {
	return this1["float"](2);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawEllipseView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height = function(this1) {
	return this1["float"](3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height = function(this1) {
	return this1["float"](3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRoundRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__properties__ = {get_ellipseHeight:"get_ellipseHeight",get_ellipseWidth:"get_ellipseWidth",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height = function(this1) {
	return this1["float"](3);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth = function(this1) {
	return this1["float"](4);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight = function(this1) {
	return this1.obj(0);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTrianglesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__properties__ = {get_culling:"get_culling",get_uvtData:"get_uvtData",get_indices:"get_indices",get_vertices:"get_vertices"}
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling = function(this1) {
	return this1.obj(3);
};
var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","EndFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new = function(d) {
	return d;
};
var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineBitmapStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth = function(this1) {
	return this1.bool(1);
};
var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineGradientStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors = function(this1) {
	return this1.iArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas = function(this1) {
	return this1.fArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios = function(this1) {
	return this1.iArr(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1["float"](0);
};
var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__properties__ = {get_miterLimit:"get_miterLimit",get_joints:"get_joints",get_caps:"get_caps",get_scaleMode:"get_scaleMode",get_pixelHinting:"get_pixelHinting",get_alpha:"get_alpha",get_color:"get_color",get_thickness:"get_thickness"}
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color = function(this1) {
	return this1["int"](0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit = function(this1) {
	return this1["float"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","MoveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","OverrideMatrixView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__properties__ = {get_matrix:"get_matrix"}
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(0);
};
var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__ : ["openfl","_internal","renderer","DrawCommandType"], __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","UNKNOWN"] };
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL",0];
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL",1];
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL",2];
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO",3];
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO",4];
openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE",5];
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE",6];
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT",7];
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT",8];
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES",9];
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES",10];
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL",11];
openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE",12];
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE",13];
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE",14];
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO",15];
openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO",16];
openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX",17];
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN",18];
openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
var openfl__$internal_renderer_RenderSession = function() {
	this.activeTextures = 0;
	this.allowSmoothing = true;
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl__$internal_renderer_RenderSession.prototype = {
	allowSmoothing: null
	,cairo: null
	,context: null
	,element: null
	,gl: null
	,renderer: null
	,roundPixels: null
	,transformProperty: null
	,transformOriginProperty: null
	,upscaled: null
	,vendorPrefix: null
	,projectionMatrix: null
	,z: null
	,drawCount: null
	,currentBlendMode: null
	,activeTextures: null
	,blendModeManager: null
	,filterManager: null
	,maskManager: null
	,shaderManager: null
	,__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_cairo_CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = ["openfl","_internal","renderer","cairo","CairoBitmap"];
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	var cairo = renderSession.cairo;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		renderSession.maskManager.pushObject(bitmap);
		var transform = bitmap.__renderTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else {
			cairo.set_matrix(transform.__toMatrix3());
		}
		var surface = bitmap.bitmapData.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,renderSession.allowSmoothing && bitmap.smoothing?1:3);
			cairo.set_source(pattern);
			if(bitmap.__worldAlpha == 1) {
				cairo.paint();
			} else {
				cairo.paintWithAlpha(bitmap.__worldAlpha);
			}
		}
		renderSession.maskManager.popObject(bitmap);
	}
};
var openfl__$internal_renderer_cairo_CairoBlendModeManager = function(renderSession) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.cairo.CairoBlendModeManager"] = openfl__$internal_renderer_cairo_CairoBlendModeManager;
openfl__$internal_renderer_cairo_CairoBlendModeManager.__name__ = ["openfl","_internal","renderer","cairo","CairoBlendModeManager"];
openfl__$internal_renderer_cairo_CairoBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_cairo_CairoBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,renderSession: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.renderSession.cairo.set_operator(12);
			break;
		case 1:
			break;
		case 2:
			this.renderSession.cairo.set_operator(17);
			break;
		case 3:
			this.renderSession.cairo.set_operator(23);
			break;
		case 4:
			break;
		case 5:
			this.renderSession.cairo.set_operator(21);
			break;
		case 6:
			break;
		case 7:
			this.renderSession.cairo.set_operator(2);
			break;
		case 8:
			this.renderSession.cairo.set_operator(18);
			break;
		case 9:
			this.renderSession.cairo.set_operator(14);
			break;
		case 10:
			this.renderSession.cairo.set_operator(2);
			break;
		case 11:
			this.renderSession.cairo.set_operator(16);
			break;
		case 12:
			this.renderSession.cairo.set_operator(15);
			break;
		case 13:
			break;
		case 14:
			break;
		default:
			this.renderSession.cairo.set_operator(2);
		}
	}
	,__class__: openfl__$internal_renderer_cairo_CairoBlendModeManager
});
var openfl__$internal_renderer_cairo_CairoDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoDisplayObject"] = openfl__$internal_renderer_cairo_CairoDisplayObject;
openfl__$internal_renderer_cairo_CairoDisplayObject.__name__ = ["openfl","_internal","renderer","cairo","CairoDisplayObject"];
openfl__$internal_renderer_cairo_CairoDisplayObject.render = function(displayObject,renderSession) {
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl","_internal","renderer","cairo","CairoGraphics"];
openfl__$internal_renderer_cairo_CairoGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern == null) {
		return;
	}
	if(!strokeBefore) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	}
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
	if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
	}
	if(strokeBefore) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	}
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
};
openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var pattern = null;
	switch(type) {
	case 0:
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
		}
		var point1 = matrix.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix.transformPoint(new openfl_geom_Point(819.2,0));
		point1.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point2.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point1.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		point2.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear(point1.x,point1.y,point2.x,point2.y);
		break;
	case 1:
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
		}
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		var x = matrix.tx + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		var y = matrix.ty + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial(x,y,0,x,y,Math.abs((point.x - matrix.tx) / 2));
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = ((rgb & 16711680) >>> 16) / 255;
		var g = ((rgb & 65280) >>> 8) / 255;
		var b = (rgb & 255) / 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA(pattern,ratio,r,g,b,alpha);
	}
	var mat = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix(pattern);
	mat.tx = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	mat.ty = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(pattern,mat);
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern = function(bitmapFill,matrix,bitmapRepeat,smooth) {
	var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(bitmapFill.getSurface());
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,smooth && openfl__$internal_renderer_cairo_CairoGraphics.allowSmoothing?1:3);
	if(bitmapRepeat) {
		lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend(pattern,1);
	}
	openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = matrix;
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_cairo_CairoGraphics.endFill = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.fillCommands,false);
	openfl__$internal_renderer_cairo_CairoGraphics.fillCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.endStroke = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands,true);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.hitTest = function(graphics,x,y) {
	return false;
};
openfl__$internal_renderer_cairo_CairoGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.get_length();
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		result.push(uvt.get(t1 - 1));
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_cairo_CairoGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	if(commands.get_length() == 0) {
		return;
	}
	openfl__$internal_renderer_cairo_CairoGraphics.bounds = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(3);
	var hasPath = false;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	try {
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c = data.readBeginBitmapFill();
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c);
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c);
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				break;
			case 1:
				var c1 = data.readBeginFill();
				if(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) < 0.005) {
					openfl__$internal_renderer_cairo_CairoGraphics.hasFill = false;
				} else {
					if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) {
						openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 16711680) >>> 16) / 255,((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 65280) >>> 8) / 255,(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 255) / 255,openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1));
					openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 2:
				var c2 = data.readBeginGradientFill();
				if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) {
					openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c2));
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 3:
				var c3 = data.readCubicCurveTo();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3) - offsetY);
				break;
			case 4:
				var c4 = data.readCurveTo();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4) - offsetY);
				break;
			case 5:
				var c5 = data.readDrawCircle();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5) - offsetX + openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5) - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5),0,Math.PI * 2);
				break;
			case 6:
				var c6 = data.readDrawEllipse();
				hasPath = true;
				var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6);
				var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6);
				var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6);
				var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6);
				x -= offsetX;
				y -= offsetY;
				var ox = width / 2 * .5522848;
				var oy = height / 2 * .5522848;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var c7 = data.readDrawRect();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.rectangle(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
				break;
			case 8:
				var c8 = data.readDrawRoundRect();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
				break;
			case 10:
				var c9 = data.readDrawTriangles();
				var v = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c9);
				var ind = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c9);
				var uvt = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c9);
				var colorFill = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill == null;
				if(colorFill && uvt != null) {
					throw "__break__";
				}
				var width1 = 0;
				var height1 = 0;
				var currentMatrix = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__renderTransform.__toMatrix3();
				if(!colorFill) {
					if(uvt == null) {
						uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
						var _g3 = 0;
						var _g2 = v.get_length() / 2 | 0;
						while(_g3 < _g2) {
							var i = _g3++;
							uvt.push(v.get(i * 2) / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width);
							uvt.push(v.get(i * 2 + 1) / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height);
						}
					}
					var normalizedUVT = openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT(uvt,openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c9).get_length() != v.get_length());
					var maxUVT = normalizedUVT.max;
					uvt = normalizedUVT.uvt;
					if(maxUVT > 1) {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.width | 0;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.height | 0;
					} else {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
					}
				}
				var i1 = 0;
				var l = ind.get_length();
				var a_;
				var b_;
				var c_;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x1;
				var y1;
				var x2;
				var y2;
				var x3;
				var y3;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(1);
				while(i1 < l) {
					a_ = i1;
					b_ = i1 + 1;
					c_ = i1 + 2;
					iax = ind.get(a_) * 2;
					iay = ind.get(a_) * 2 + 1;
					ibx = ind.get(b_) * 2;
					iby = ind.get(b_) * 2 + 1;
					icx = ind.get(c_) * 2;
					icy = ind.get(c_) * 2 + 1;
					x1 = v.get(iax);
					y1 = v.get(iay);
					x2 = v.get(ibx);
					y2 = v.get(iby);
					x3 = v.get(icx);
					y3 = v.get(icy);
					switch(openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c9)) {
					case 0:
						if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
							i1 += 3;
							continue;
						}
						break;
					case 2:
						if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
							i1 += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1,y1);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2,y2);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
						if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
						}
						i1 += 3;
						continue;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.graphics.__renderTransform.__toMatrix3());
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1,y1);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2,y2);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
					uvx1 = uvt.get(iax) * width1;
					uvx2 = uvt.get(ibx) * width1;
					uvx3 = uvt.get(icx) * width1;
					uvy1 = uvt.get(iay) * height1;
					uvy2 = uvt.get(iby) * height1;
					uvy3 = uvt.get(icy) * height1;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i1 += 3;
						continue;
					}
					x1 *= currentMatrix.a;
					x2 *= currentMatrix.a;
					x3 *= currentMatrix.a;
					y1 *= currentMatrix.d;
					y2 *= currentMatrix.d;
					y3 *= currentMatrix.d;
					t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
					t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
					t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
					t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
					dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
					dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(new lime_math_Matrix3(t1,t2,t3,t4,dx,dy));
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
					if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.fill();
					}
					i1 += 3;
				}
				break;
			case 12:
				var c10 = data.readLineBitmapStyle();
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
					openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c10));
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 13:
				var c11 = data.readLineGradientStyle();
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
					openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c11));
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 14:
				var c12 = data.readLineStyle();
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
					openfl__$internal_renderer_cairo_CairoGraphics.closePath(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12) == null);
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12) == null) {
					openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = false;
				} else {
					openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineWidth(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12) > 0?openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12):1);
					if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c12) == null) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(1);
					} else {
						var _g21 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c12);
						var tmp;
						switch(_g21) {
						case 0:
							tmp = 2;
							break;
						case 1:
							tmp = 0;
							break;
						default:
							tmp = 1;
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(tmp);
					}
					if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c12) == null) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(1);
					} else {
						var _g22 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c12);
						var tmp1;
						switch(_g22) {
						case 0:
							tmp1 = 0;
							break;
						case 2:
							tmp1 = 2;
							break;
						default:
							tmp1 = 1;
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(tmp1);
					}
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_miterLimit(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c12));
					var r = ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c12) & 16711680) >>> 16) / 255;
					var g = ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c12) & 65280) >>> 8) / 255;
					var b = (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c12) & 255) / 255;
					if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c12) == 1) {
						openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB(r,g,b);
					} else {
						openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(r,g,b,openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c12));
					}
				}
				break;
			case 15:
				var c13 = data.readLineTo();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c13) - offsetX,openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c13) - offsetY);
				positionX = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c13);
				positionY = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c13);
				break;
			case 16:
				var c14 = data.readMoveTo();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14) - offsetX,openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14) - offsetY);
				positionX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14);
				positionY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14);
				closeGap = true;
				startX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14);
				startY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14);
				break;
			default:
				data.skip(type);
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	data.destroy();
	if(hasPath) {
		if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
			if(openfl__$internal_renderer_cairo_CairoGraphics.hasFill && closeGap) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(startX - offsetX,startY - offsetY);
			} else if(closeGap && positionX == startX && positionY == startY) {
				openfl__$internal_renderer_cairo_CairoGraphics.closePath(true);
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
			if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
			}
		}
		if(!stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasFill) {
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(-openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,-openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			if(openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix != null) {
				var matrix = openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix.clone();
				matrix.invert();
				if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
					matrix.concat(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix);
				}
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern,matrix.__toMatrix3());
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
			if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix.__toMatrix3());
				if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix.__toMatrix3());
			} else if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
		}
	}
};
openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function(cx,cy,x,y) {
	var current = null;
	if(!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(cx,cy);
		current = new lime_math_Vector2(cx,cy);
	} else {
		current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
	}
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(current.x + 0.66666666666666663 * (cx - current.x),current.y + 0.66666666666666663 * (cy - current.y),x + 0.66666666666666663 * (cx - x),y + 0.66666666666666663 * (cy - y),x,y);
};
openfl__$internal_renderer_cairo_CairoGraphics.render = function(graphics,renderSession,parentTransform) {
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		var cairo = renderSession.cairo;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c = data.readCubicCurveTo();
				cairo.curveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c));
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				break;
			case 4:
				var c1 = data.readCurveTo();
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1);
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1);
				break;
			case 5:
				var c2 = data.readDrawCircle();
				cairo.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2),0,Math.PI * 2);
				break;
			case 6:
				var c3 = data.readDrawEllipse();
				var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c3);
				var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c3);
				var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c3);
				var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c3);
				x -= 0;
				y -= 0;
				var ox = width / 2 * .5522848;
				var oy = height / 2 * .5522848;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				cairo.moveTo(x,ym);
				cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var c4 = data.readDrawRect();
				cairo.rectangle(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c4));
				break;
			case 8:
				var c5 = data.readDrawRoundRect();
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c5));
				break;
			case 15:
				var c6 = data.readLineTo();
				cairo.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6));
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6);
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6);
				break;
			case 16:
				var c7 = data.readMoveTo();
				cairo.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7));
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
				break;
			default:
				data.skip(type);
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_cairo_CairoMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoMaskManager"] = openfl__$internal_renderer_cairo_CairoMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.__name__ = ["openfl","_internal","renderer","cairo","CairoMaskManager"];
openfl__$internal_renderer_cairo_CairoMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		cairo.set_matrix(mask.__getRenderTransform().__toMatrix3());
		cairo.newPath();
		mask.__renderCairoMask(this.renderSession);
		cairo.clip();
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		cairo.set_matrix(new lime_math_Matrix3(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty));
		cairo.newPath();
		cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		cairo.clip();
	}
	,popMask: function() {
		this.renderSession.cairo.restore();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		this.renderSession.cairo.restore();
	}
	,__class__: openfl__$internal_renderer_cairo_CairoMaskManager
});
var openfl__$internal_renderer_cairo_CairoRenderer = function(stage,cairo) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.cairo = cairo;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.cairo = cairo;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_cairo_CairoMaskManager(this.renderSession);
	this.renderSession.blendModeManager = new openfl__$internal_renderer_cairo_CairoBlendModeManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.__name__ = ["openfl","_internal","renderer","cairo","CairoRenderer"];
openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	cairo: null
	,clear: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__renderCairo(this.stage,this.renderSession);
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.cairo.identityMatrix();
		if(this.stage.__clearBeforeRender) {
			this.cairo.setSourceRGB(this.stage.__colorSplit[0],this.stage.__colorSplit[1],this.stage.__colorSplit[2]);
			this.cairo.paint();
		}
		this.stage.__renderCairo(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_cairo_CairoRenderer
});
var openfl__$internal_renderer_cairo_CairoTextField = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = ["openfl","_internal","renderer","cairo","CairoTextField"];
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderSession,transform) {
};
var openfl__$internal_renderer_cairo_CairoTilemap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTilemap"] = openfl__$internal_renderer_cairo_CairoTilemap;
openfl__$internal_renderer_cairo_CairoTilemap.__name__ = ["openfl","_internal","renderer","cairo","CairoTilemap"];
openfl__$internal_renderer_cairo_CairoTilemap.render = function(tilemap,renderSession) {
	if(!tilemap.__renderable || tilemap.__tiles.length == 0 || tilemap.__worldAlpha <= 0) {
		return;
	}
	var cairo = renderSession.cairo;
	renderSession.maskManager.pushObject(tilemap);
	var rect = openfl_geom_Rectangle.__temp;
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderSession.maskManager.pushRect(rect,tilemap.__renderTransform);
	var transform = tilemap.__renderTransform;
	var roundPixels = renderSession.roundPixels;
	var defaultTileset = tilemap.tileset;
	var cacheBitmapData = null;
	var surface = null;
	var pattern = null;
	var tiles;
	var count;
	var tile;
	var alpha;
	var visible;
	var tileset;
	var tileData;
	var bitmapData;
	tiles = tilemap.__tiles;
	count = tiles.length;
	var matrix = new lime_math_Matrix3();
	var tileTransform = openfl_geom_Matrix.__temp;
	var _g1 = 0;
	while(_g1 < count) {
		tile = tiles[_g1++];
		alpha = tile.alpha;
		visible = tile.visible;
		if(!visible || alpha <= 0) {
			continue;
		}
		if(tile.tileset != null) {
			tileset = tile.tileset;
		} else {
			tileset = defaultTileset;
		}
		if(tileset == null) {
			continue;
		}
		tileData = tileset.__data[tile.id];
		if(tileData == null) {
			continue;
		}
		bitmapData = tileset.bitmapData;
		if(bitmapData == null) {
			continue;
		}
		if(bitmapData != cacheBitmapData) {
			surface = bitmapData.getSurface();
			pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,renderSession.allowSmoothing && tilemap.smoothing?1:3);
			cairo.set_source(pattern);
			cacheBitmapData = bitmapData;
		}
		tileTransform.copyFrom(tile.matrix);
		tileTransform.concat(transform);
		if(roundPixels) {
			tileTransform.tx = Math.round(tileTransform.tx);
			tileTransform.ty = Math.round(tileTransform.ty);
		}
		cairo.set_matrix(tileTransform.__toMatrix3());
		matrix.tx = tileData.x;
		matrix.ty = tileData.y;
		lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(pattern,matrix);
		cairo.set_source(pattern);
		cairo.save();
		cairo.newPath();
		cairo.rectangle(0,0,tileData.width,tileData.height);
		cairo.clip();
		if(tilemap.__worldAlpha == 1 && alpha == 1) {
			cairo.paint();
		} else {
			cairo.paintWithAlpha(tilemap.__worldAlpha * alpha);
		}
		cairo.restore();
	}
	renderSession.maskManager.popRect();
	renderSession.maskManager.popObject(tilemap);
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		renderSession.maskManager.pushObject(bitmap,false);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.bitmapData.image);
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__renderTransform;
		var scrollRect = bitmap.__scrollRect;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.msImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) {
			context.drawImage(bitmap.bitmapData.image.get_src(),0,0);
		} else {
			context.drawImage(bitmap.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		}
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.msImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		renderSession.maskManager.popObject(bitmap,false);
	}
};
var openfl__$internal_renderer_canvas_CanvasDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasDisplayObject"] = openfl__$internal_renderer_canvas_CanvasDisplayObject;
openfl__$internal_renderer_canvas_CanvasDisplayObject.__name__ = ["openfl","_internal","renderer","canvas","CanvasDisplayObject"];
openfl__$internal_renderer_canvas_CanvasDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderSession.maskManager.pushObject(displayObject);
		var context = renderSession.context;
		var transform = displayObject.__renderTransform;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		var color = displayObject.opaqueBackground;
		context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
		context.fillRect(0,0,displayObject.get_width(),displayObject.get_height());
		renderSession.maskManager.popObject(displayObject);
	}
	if(displayObject.__graphics != null) {
		if(!(!displayObject.__renderable || displayObject.__worldAlpha <= 0)) {
			var graphics = displayObject.__graphics;
			if(graphics != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,displayObject.__renderTransform);
				var width = graphics.__width;
				var height = graphics.__height;
				if(graphics.__canvas != null) {
					var context1 = renderSession.context;
					var scrollRect = displayObject.__scrollRect;
					if(width > 0 && height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
						renderSession.maskManager.pushObject(displayObject);
						context1.globalAlpha = displayObject.__worldAlpha;
						var transform1 = graphics.__worldTransform;
						if(renderSession.roundPixels) {
							context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx | 0,transform1.ty | 0);
						} else {
							context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
						}
						context1.drawImage(graphics.__canvas,0,0);
						renderSession.maskManager.popObject(displayObject);
					}
				}
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) {
		return;
	}
	if(!strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	if(strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat,smooth) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.image);
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(smooth);
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat?"repeat":"no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	switch(type) {
	case 0:
		var matrix1 = matrix != null?matrix:new openfl_geom_Matrix();
		var point1 = matrix1.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix1.transformPoint(new openfl_geom_Point(819.2,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point1.x,point1.y,point2.x,point2.y);
		break;
	case 1:
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
		}
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,Math.abs((point.x - matrix.tx) / 2));
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = (rgb & 16711680) >>> 16;
		var g = (rgb & 65280) >>> 8;
		var b = rgb & 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	context.fillStyle = context.createPattern(bitmap.image.get_src(),repeat?"repeat":"no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
		context.fill();
	}
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
	openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
		return false;
	} else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		var transform = graphics.__renderTransform;
		var px = x * transform.a + y * transform.c + transform.tx;
		var py = x * transform.b + y * transform.d + transform.ty;
		x = px;
		y = py;
		x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.a + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.c + transform.tx;
		y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.b + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.d + transform.ty;
		if(graphics.__canvas == null) {
			graphics.__canvas = window.document.createElement("canvas");
			graphics.__context = graphics.__canvas.getContext("2d");
		}
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:case 1:case 2:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					var c = data.readBeginBitmapFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					var c1 = data.readBeginGradientFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
				} else {
					var c2 = data.readBeginFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),1);
				}
				break;
			case 3:
				var c3 = data.readCubicCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
				break;
			case 4:
				var c4 = data.readCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
				break;
			case 5:
				var c5 = data.readDrawCircle();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
				break;
			case 6:
				var c6 = data.readDrawEllipse();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
				break;
			case 7:
				var c7 = data.readDrawRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
				break;
			case 8:
				var c8 = data.readDrawRoundRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
				break;
			case 11:
				data.readEndFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 12:
				var c9 = data.readLineBitmapStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c9));
				break;
			case 13:
				var c10 = data.readLineGradientStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c10));
				break;
			case 14:
				var c11 = data.readLineStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11),1,openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c11));
				break;
			case 15:
				var c12 = data.readLineTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12));
				break;
			case 16:
				var c13 = data.readMoveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13));
				break;
			default:
				data.skip(type);
			}
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		}
		data.destroy();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
			return true;
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
			return true;
		}
	}
	return false;
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.get_length();
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		result.push(uvt.get(t1 - 1));
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type[1]) {
		case 0:
			var c = data.readBeginBitmapFill();
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),true,openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			if(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c) != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c);
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c).clone();
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			var c1 = data.readBeginFill();
			if(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) < 0.005) {
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			} else {
				if(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) == 1) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + StringTools.hex(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1),6);
				} else {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + ((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 16711680) >>> 16) + ", " + ((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 65280) >>> 8) + ", " + (openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 255) + ", " + openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			var c2 = data.readBeginGradientFill();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c2));
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			break;
		case 3:
			var c3 = data.readCubicCurveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3) - offsetY);
			break;
		case 4:
			var c4 = data.readCurveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4) - offsetY);
			break;
		case 5:
			var c5 = data.readDrawCircle();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5) - offsetX + openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5) - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5),0,Math.PI * 2,true);
			break;
		case 6:
			var c6 = data.readDrawEllipse();
			var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6);
			var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6);
			var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6);
			var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6);
			x -= offsetX;
			y -= offsetY;
			var ox = width / 2 * .5522848;
			var oy = height / 2 * .5522848;
			var xe = x + width;
			var ye = y + height;
			var xm = x + width / 2;
			var ym = y + height / 2;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 7:
			var c7 = data.readDrawRect();
			var optimizationUsed = false;
			if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null && !openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				var st = 0;
				var sr = 0;
				var sb = 0;
				var sl = 0;
				var canOptimizeMatrix = true;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) {
						canOptimizeMatrix = false;
					} else {
						var stl = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7)));
						var sbr = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7)));
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7);
					sl = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7);
					sb = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7);
					sr = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7);
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
					}
				}
			}
			if(!optimizationUsed) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
			}
			break;
		case 8:
			var c8 = data.readDrawRoundRect();
			openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
			break;
		case 12:
			var c9 = data.readLineBitmapStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c9));
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 13:
			var c10 = data.readLineGradientStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c10));
			openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 14:
			var c11 = data.readLineStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11) == null);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11) == null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11) > 0?openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11):1;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c11) == null?"round":openfl_display__$JointStyle_JointStyle_$Impl_$.toString(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c11)).toLowerCase();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11) == null?"round":openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11) == 0?"butt":openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11)).toLowerCase();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c11);
				if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c11) == 1) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 16777215,6);
				} else {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 16711680) >>> 16) + ", " + ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 65280) >>> 8) + ", " + (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 255) + ", " + openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c11) + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			}
			break;
		case 15:
			var c12 = data.readLineTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12) - offsetX,openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12) - offsetY);
			positionX = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12);
			positionY = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12);
			break;
		case 16:
			var c13 = data.readMoveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13) - offsetX,openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13) - offsetY);
			positionX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13);
			positionY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13);
			closeGap = true;
			startX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13);
			startY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13);
			break;
		default:
			data.skip(type);
		}
	}
	data.destroy();
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
		} else if(closeGap && positionX == startX && positionY == startY) {
			openfl__$internal_renderer_canvas_CanvasGraphics.closePath(true);
		}
		if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
		}
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession,parentTransform) {
	graphics.__update();
	if(graphics.__dirty) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing = renderSession.allowSmoothing;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || width < 1 || height < 1) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
			graphics.__canvas.width = width;
			graphics.__canvas.height = height;
			var transform = graphics.__renderTransform;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			try {
				while(_g < _g1.length) {
					var type = _g1[_g];
					++_g;
					switch(type[1]) {
					case 0:case 1:case 2:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
							var c = data.readBeginBitmapFill();
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
						} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
							var c1 = data.readBeginGradientFill();
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
						} else {
							var c2 = data.readBeginFill();
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c2));
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c2));
						}
						break;
					case 3:
						var c3 = data.readCubicCurveTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
						break;
					case 4:
						var c4 = data.readCurveTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
						break;
					case 5:
						var c5 = data.readDrawCircle();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
						break;
					case 6:
						var c6 = data.readDrawEllipse();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
						break;
					case 7:
						var c7 = data.readDrawRect();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
						break;
					case 8:
						var c8 = data.readDrawRoundRect();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
						break;
					case 10:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						var c9 = data.readDrawTriangles();
						var v = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c9);
						var ind = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c9);
						var uvt = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c9);
						var pattern = null;
						var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
						if(colorFill && uvt != null) {
							throw "__break__";
						}
						if(!colorFill) {
							if(uvt == null) {
								uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
								var _g3 = 0;
								var _g2 = v.get_length() / 2 | 0;
								while(_g3 < _g2) {
									var i = _g3++;
									uvt.push(v.get(i * 2) / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width);
									uvt.push(v.get(i * 2 + 1) / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
								}
							}
							var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,uvt.get_length() != v.get_length());
							var maxUVT = normalizedUVT.max;
							uvt = normalizedUVT.uvt;
							if(maxUVT > 1) {
								pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0);
							} else {
								pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
							}
						}
						var i1 = 0;
						var l = ind.get_length();
						var a_;
						var b_;
						var c_;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x1;
						var y1;
						var x2;
						var y2;
						var x3;
						var y3;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i1 < l) {
							a_ = i1;
							b_ = i1 + 1;
							c_ = i1 + 2;
							iax = ind.get(a_) * 2;
							iay = ind.get(a_) * 2 + 1;
							ibx = ind.get(b_) * 2;
							iby = ind.get(b_) * 2 + 1;
							icx = ind.get(c_) * 2;
							icy = ind.get(c_) * 2 + 1;
							x1 = v.get(iax);
							y1 = v.get(iay);
							x2 = v.get(ibx);
							y2 = v.get(iby);
							x3 = v.get(icx);
							y3 = v.get(icy);
							switch(openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c9)) {
							case 0:
								if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
									i1 += 3;
									continue;
								}
								break;
							case 2:
								if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
									i1 += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
								if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
									openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
								}
								i1 += 3;
								continue;
							}
							openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
							uvx1 = uvt.get(iax) * pattern.width;
							uvx2 = uvt.get(ibx) * pattern.width;
							uvx3 = uvt.get(icx) * pattern.width;
							uvy1 = uvt.get(iay) * pattern.height;
							uvy2 = uvt.get(iby) * pattern.height;
							uvy3 = uvt.get(icy) * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i1 += 3;
								continue;
							}
							t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
							t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
							t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
							t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
							dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
							dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
							openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							i1 += 3;
						}
						break;
					case 11:
						data.readEndFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
						openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
						break;
					case 12:
						var c10 = data.readLineBitmapStyle();
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c10));
						break;
					case 13:
						var c11 = data.readLineGradientStyle();
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c11));
						break;
					case 14:
						var c12 = data.readLineStyle();
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c12));
						break;
					case 15:
						var c13 = data.readLineTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c13));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c13));
						break;
					case 16:
						var c14 = data.readMoveTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14));
						break;
					default:
						data.skip(type);
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			}
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c = data.readCubicCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c));
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c);
				break;
			case 4:
				var c1 = data.readCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1);
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1);
				break;
			case 5:
				var c2 = data.readDrawCircle();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2),0,Math.PI * 2,true);
				break;
			case 6:
				var c3 = data.readDrawEllipse();
				var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c3);
				var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c3);
				var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c3);
				var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c3);
				x -= 0;
				y -= 0;
				var ox = width / 2 * .5522848;
				var oy = height / 2 * .5522848;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var c4 = data.readDrawRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c4));
				break;
			case 8:
				var c5 = data.readDrawRoundRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c5));
				break;
			case 15:
				var c6 = data.readLineTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6));
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6);
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6);
				break;
			case 16:
				var c7 = data.readMoveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7));
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
				break;
			default:
				data.skip(type);
			}
		}
		data.destroy();
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing = function(smooth) {
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing) {
		smooth = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled != smooth) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.mozImageSmoothingEnabled = smooth;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.msImageSmoothingEnabled = smooth;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = smooth;
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getRenderTransform();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = function(stage,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	context: null
	,clear: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__renderCanvas(this.stage,this.renderSession);
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!this.stage.__transparent && this.stage.__clearBeforeRender) {
			this.context.fillStyle = this.stage.__colorString;
			this.context.fillRect(0,0,this.stage.stageWidth,this.stage.stageHeight);
		} else if(this.stage.__transparent && this.stage.__clearBeforeRender) {
			this.context.clearRect(0,0,this.stage.stageWidth,this.stage.stageHeight);
		}
		this.stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		var width = graphics.__width;
		var height = graphics.__height;
		if(graphics.__canvas != null) {
			var context = renderSession.context;
			var scrollRect = shape.__scrollRect;
			if(width > 0 && height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
				renderSession.maskManager.pushObject(shape);
				context.globalAlpha = shape.__worldAlpha;
				var transform = graphics.__worldTransform;
				if(renderSession.roundPixels) {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
				} else {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				}
				context.drawImage(graphics.__canvas,0,0);
				renderSession.maskManager.popObject(shape);
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl__$internal_renderer_canvas_CanvasTextField.disableInputMode = function(textEngine) {
};
openfl__$internal_renderer_canvas_CanvasTextField.enableInputMode = function(textEngine) {
	textEngine.__cursorPosition = -1;
	if(textEngine.__hiddenInput == null) {
		textEngine.__hiddenInput = window.document.createElement("input");
		var hiddenInput = textEngine.__hiddenInput;
		hiddenInput.type = "text";
		hiddenInput.style.position = "absolute";
		hiddenInput.style.opacity = "0";
		hiddenInput.style.color = "transparent";
		hiddenInput.style.left = "0px";
		hiddenInput.style.top = "50%";
		if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
			hiddenInput.style.fontSize = "0px";
			hiddenInput.style.width = "0px";
			hiddenInput.style.height = "0px";
		} else {
			hiddenInput.style.width = "1px";
			hiddenInput.style.height = "1px";
		}
		hiddenInput.style.pointerEvents = "none";
		hiddenInput.style.zIndex = "-10000000";
		if(textEngine.maxChars > 0) {
			hiddenInput.maxLength = textEngine.maxChars;
		}
		window.document.body.appendChild(hiddenInput);
		hiddenInput.value = textEngine.text;
	}
};
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderSession,transform) {
	var textEngine = textField.__textEngine;
	var bounds = textEngine.bounds;
	var graphics = textField.__graphics;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update();
	if(textField.__dirty || graphics.__dirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			graphics.__canvas.width = width;
			graphics.__canvas.height = height;
			var transform1 = graphics.__renderTransform;
			if(renderSession.roundPixels) {
				openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx | 0,transform1.ty | 0);
			} else {
				openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.mozImageSmoothingEnabled = false;
					graphics.__context.msImageSmoothingEnabled = false;
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.mozImageSmoothingEnabled = true;
					graphics.__context.msImageSmoothingEnabled = true;
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g1 = 0;
				var _g = textField.get_scrollV() - 1;
				while(_g1 < _g) {
					var i = _g1++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var offsetY = 0.0;
				var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
				var _g2 = 0;
				var _g11 = textEngine.layoutGroups;
				while(_g2 < _g11.get_length()) {
					var group = _g11.get(_g2);
					++_g2;
					if(group.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group.lineIndex > textField.get_scrollV() + textEngine.bottomScrollV - 2) {
						break;
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(group.format.color,6);
					if(applyHack) {
						offsetY = group.format.size * 0.185;
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g3 = 0;
								var _g21 = textField.__caretIndex - group.startIndex;
								while(_g3 < _g21) {
									var i1 = _g3++;
									if(group.advances.length <= i1) {
										break;
									}
									advance += group.advances[i1];
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
							}
						} else if(group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex || group.startIndex <= textField.__selectionIndex && group.endIndex >= textField.__selectionIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group.startIndex > selectionStart) {
								selectionStart = group.startIndex;
							}
							if(group.endIndex < selectionEnd) {
								selectionEnd = group.endIndex;
							}
							var start;
							var end;
							start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= textEngine.text.length) {
								end = textField.getCharBoundaries(textEngine.text.length - 1);
								end.x += end.width + 2;
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
							}
						}
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX1 = -textField.get_scrollH();
					var scrollY1 = 0.0;
					var _g12 = 0;
					var _g4 = textField.get_scrollV() - 1;
					while(_g12 < _g4) {
						var i2 = _g12++;
						scrollY1 -= textEngine.lineHeights.get(i2);
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
					openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.get_defaultTextFormat().color,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY1 + 2.5);
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTilemap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTilemap"] = openfl__$internal_renderer_canvas_CanvasTilemap;
openfl__$internal_renderer_canvas_CanvasTilemap.__name__ = ["openfl","_internal","renderer","canvas","CanvasTilemap"];
openfl__$internal_renderer_canvas_CanvasTilemap.render = function(tilemap,renderSession) {
	if(!tilemap.__renderable || tilemap.__tiles.length == 0 || tilemap.__worldAlpha <= 0) {
		return;
	}
	var context = renderSession.context;
	renderSession.maskManager.pushObject(tilemap);
	var rect = openfl_geom_Rectangle.__temp;
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderSession.maskManager.pushRect(rect,tilemap.__renderTransform);
	var transform = tilemap.__renderTransform;
	var roundPixels = renderSession.roundPixels;
	if(!renderSession.allowSmoothing || !tilemap.smoothing) {
		context.mozImageSmoothingEnabled = false;
		context.msImageSmoothingEnabled = false;
		context.imageSmoothingEnabled = false;
	}
	var defaultTileset = tilemap.tileset;
	var cacheBitmapData = null;
	var source = null;
	var tiles;
	var count;
	var tile;
	var alpha;
	var visible;
	var tileset;
	var tileData;
	var bitmapData;
	tiles = tilemap.__tiles;
	count = tiles.length;
	var tileTransform = openfl_geom_Matrix.__temp;
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var i = _g1++;
		tile = tiles[i];
		alpha = tile.alpha;
		visible = tile.visible;
		if(!visible || alpha <= 0) {
			continue;
		}
		if(tile.tileset != null) {
			tileset = tile.tileset;
		} else {
			tileset = defaultTileset;
		}
		if(tileset == null) {
			continue;
		}
		tileData = tileset.__data[tile.id];
		if(tileData == null) {
			continue;
		}
		bitmapData = tileset.bitmapData;
		if(bitmapData == null) {
			continue;
		}
		if(bitmapData != cacheBitmapData) {
			if(bitmapData.image.buffer.__srcImage == null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmapData.image);
			}
			source = bitmapData.image.get_src();
			cacheBitmapData = bitmapData;
		}
		context.globalAlpha = tilemap.__worldAlpha * alpha;
		tileTransform.copyFrom(tile.matrix);
		tileTransform.concat(transform);
		if(roundPixels) {
			context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,tileTransform.tx | 0,tileTransform.ty | 0);
		} else {
			context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,tileTransform.tx,tileTransform.ty);
		}
		context.drawImage(source,tileData.x,tileData.y,tileData.width,tileData.height,0,0,tileData.width,tileData.height);
	}
	if(!renderSession.allowSmoothing || !tilemap.smoothing) {
		context.mozImageSmoothingEnabled = true;
		context.msImageSmoothingEnabled = true;
		context.imageSmoothingEnabled = true;
	}
	renderSession.maskManager.popRect();
	renderSession.maskManager.popObject(tilemap);
};
var openfl__$internal_renderer_console_ConsoleRenderer = function(stage,ctx) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	throw new js__$Boot_HaxeError("ConsoleRenderer not supported");
};
$hxClasses["openfl._internal.renderer.console.ConsoleRenderer"] = openfl__$internal_renderer_console_ConsoleRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.__name__ = ["openfl","_internal","renderer","console","ConsoleRenderer"];
openfl__$internal_renderer_console_ConsoleRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function() {
	}
	,__class__: openfl__$internal_renderer_console_ConsoleRenderer
});
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		renderSession.maskManager.pushObject(bitmap);
		if(bitmap.bitmapData.image.buffer.__srcImage != null) {
			openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession);
		} else {
			openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
		}
		renderSession.maskManager.popObject(bitmap);
	} else {
		if(bitmap.__image != null) {
			renderSession.element.removeChild(bitmap.__image);
			bitmap.__image = null;
			bitmap.__style = null;
		}
		if(bitmap.__canvas != null) {
			renderSession.element.removeChild(bitmap.__canvas);
			bitmap.__canvas = null;
			bitmap.__style = null;
		}
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		bitmap.__imageVersion = -1;
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.msImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	if(bitmap.__imageVersion != bitmap.bitmapData.image.version) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.bitmapData.image);
		bitmap.__canvas.width = bitmap.bitmapData.width;
		bitmap.__canvas.height = bitmap.bitmapData.height;
		bitmap.__context.drawImage(bitmap.bitmapData.image.buffer.__srcCanvas,0,0);
		bitmap.__imageVersion = bitmap.bitmapData.image.version;
	}
	openfl__$internal_renderer_dom_DOMRenderer.updateClip(bitmap,renderSession);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.src = bitmap.bitmapData.image.buffer.__srcImage.src;
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl__$internal_renderer_dom_DOMRenderer.updateClip(bitmap,renderSession);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
var openfl__$internal_renderer_dom_DOMDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMDisplayObject"] = openfl__$internal_renderer_dom_DOMDisplayObject;
openfl__$internal_renderer_dom_DOMDisplayObject.__name__ = ["openfl","_internal","renderer","dom","DOMDisplayObject"];
openfl__$internal_renderer_dom_DOMDisplayObject.render = function(displayObject,renderSession) {
	var tmp = displayObject.opaqueBackground != null && displayObject.get_width() > 0 && displayObject.get_height() > 0;
	var graphics = displayObject.__graphics;
	if(displayObject.stage != null && displayObject.__worldVisible && displayObject.__renderable && graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,displayObject.__renderTransform);
		if(graphics.__dirty || displayObject.__worldAlphaChanged || displayObject.__canvas == null && graphics.__canvas != null) {
			if(graphics.__canvas != null) {
				if(displayObject.__canvas != graphics.__canvas) {
					if(displayObject.__canvas != null) {
						renderSession.element.removeChild(displayObject.__canvas);
					}
					displayObject.__canvas = graphics.__canvas;
					displayObject.__context = graphics.__context;
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(displayObject,displayObject.__canvas,renderSession);
				}
			} else if(displayObject.__canvas != null) {
				renderSession.element.removeChild(displayObject.__canvas);
				displayObject.__canvas = null;
				displayObject.__style = null;
			}
		}
		if(displayObject.__canvas != null) {
			renderSession.maskManager.pushObject(displayObject);
			var cacheTransform = displayObject.__renderTransform;
			displayObject.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				displayObject.__renderTransformChanged = true;
			}
			openfl__$internal_renderer_dom_DOMRenderer.updateClip(displayObject,renderSession);
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(displayObject,renderSession,true,true,true);
			displayObject.__renderTransform = cacheTransform;
			renderSession.maskManager.popObject(displayObject);
		}
	} else if(displayObject.__canvas != null) {
		renderSession.element.removeChild(displayObject.__canvas);
		displayObject.__canvas = null;
		displayObject.__style = null;
	}
};
var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.clipRects = [];
	this.numClipRects = 0;
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl","_internal","renderer","dom","DOMMaskManager"];
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	currentClipRect: null
	,clipRects: null
	,numClipRects: null
	,pushMask: function(mask) {
		this.pushRect(mask.getBounds(mask),mask.__getRenderTransform());
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		if(this.numClipRects == this.clipRects.length) {
			this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.clipRects[this.numClipRects];
		rect.__transform(clipRect,transform);
		if(this.numClipRects > 0) {
			var parentClipRect = this.clipRects[this.numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.currentClipRect = clipRect;
		this.numClipRects++;
	}
	,popMask: function() {
		this.popRect();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		if(this.numClipRects > 0) {
			this.numClipRects--;
			if(this.numClipRects > 0) {
				this.currentClipRect = this.clipRects[this.numClipRects - 1];
			} else {
				this.currentClipRect = null;
			}
		}
	}
	,updateClip: function(displayObject) {
		if(this.currentClipRect == null) {
			displayObject.__worldClipChanged = displayObject.__worldClip != null;
			displayObject.__worldClip = null;
		} else {
			if(displayObject.__worldClip == null) {
				displayObject.__worldClip = new openfl_geom_Rectangle();
			}
			var clip = openfl_geom_Rectangle.__temp;
			var matrix = openfl_geom_Matrix.__temp;
			matrix.copyFrom(displayObject.__renderTransform);
			matrix.invert();
			this.currentClipRect.__transform(clip,matrix);
			if(clip.equals(displayObject.__worldClip)) {
				displayObject.__worldClipChanged = false;
			} else {
				displayObject.__worldClip.copyFrom(clip);
				displayObject.__worldClipChanged = true;
			}
		}
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_dom_DOMRenderer = function(stage,element) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.element = element;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.element = element;
	this.renderSession.roundPixels = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	this.renderSession.transformProperty = prefix.lowercase == "webkit"?"-webkit-transform":"transform";
	this.renderSession.transformOriginProperty = prefix.lowercase == "webkit"?"-webkit-transform-origin":"transform-origin";
	this.renderSession.maskManager = new openfl__$internal_renderer_dom_DOMMaskManager(this.renderSession);
	this.renderSession.renderer = this;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__renderTransformChanged) {
		var _this = displayObject.__renderTransform;
		style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + (_this.tx | 0) + ", " + (_this.ty | 0) + ", 0, 1)":"matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + _this.tx + ", " + _this.ty + ", 0, 1)",null);
	}
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null?"null":"" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) {
			style.setProperty("opacity",displayObject.__worldAlpha == null?"null":"" + displayObject.__worldAlpha,null);
		} else {
			style.removeProperty("opacity");
		}
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) {
			style.removeProperty("clip");
		} else {
			var clip = displayObject.__worldClip;
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__renderTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldClip = null;
	displayObject.__worldZ = -1;
};
openfl__$internal_renderer_dom_DOMRenderer.updateClip = function(displayObject,renderSession) {
	renderSession.maskManager.updateClip(displayObject);
};
openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	element: null
	,clear: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__renderDOM(this.stage,this.renderSession);
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		if(!this.stage.__transparent) {
			this.element.style.background = this.stage.__colorString;
		} else {
			this.element.style.background = "none";
		}
		this.renderSession.z = 1;
		this.stage.__renderDOM(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_dom_DOMRenderer
});
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
			if(graphics.__canvas != null) {
				if(shape.__canvas != graphics.__canvas) {
					if(shape.__canvas != null) {
						renderSession.element.removeChild(shape.__canvas);
					}
					shape.__canvas = graphics.__canvas;
					shape.__context = graphics.__context;
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
			} else if(shape.__canvas != null) {
				renderSession.element.removeChild(shape.__canvas);
				shape.__canvas = null;
				shape.__style = null;
			}
		}
		if(shape.__canvas != null) {
			renderSession.maskManager.pushObject(shape);
			var cacheTransform = shape.__renderTransform;
			shape.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				shape.__renderTransformChanged = true;
			}
			openfl__$internal_renderer_dom_DOMRenderer.updateClip(shape,renderSession);
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(shape,renderSession,true,true,true);
			shape.__renderTransform = cacheTransform;
			renderSession.maskManager.popObject(shape);
		}
	} else if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
	var textEngine = textField.__textEngine;
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		div.innerHTML = textEngine.text.replace(new RegExp("\n","g".split("u").join("")),"<br>");
		div.style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textEngine.__measuredWidth = div.clientWidth;
	if(textField.__div == null) {
		div.style.width = Std.string(textEngine.width - 4) + "px";
	}
	textEngine.__measuredHeight = div.clientHeight;
	if(textField.__div == null) {
		window.document.body.removeChild(div);
	}
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderSession) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							textField.__dirty = false;
						}
					},true);
				}
				if(!textEngine.multiline) {
					textField.__style.setProperty("white-space","nowrap",null);
				} else {
					textField.__style.setProperty("word-wrap","break-word",null);
				}
				textField.__style.setProperty("overflow","hidden",null);
				if(textEngine.selectable) {
					textField.__style.setProperty("cursor","text",null);
				} else {
					textField.__style.setProperty("cursor","inherit",null);
				}
				textField.__div.contentEditable = textEngine.type == 1;
				var style = textField.__style;
				var _this_r = new RegExp("\n","g".split("u").join(""));
				textField.__div.innerHTML = textEngine.text.replace(_this_r,"<br>");
				if(textEngine.background) {
					style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor,6),null);
				} else {
					style.removeProperty("background-color");
				}
				if(textEngine.border) {
					style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor,6),null);
				} else {
					style.removeProperty("border");
				}
				style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
				if(textEngine.autoSize != 2) {
					style.setProperty("width","auto",null);
				} else {
					style.setProperty("width",textEngine.width + "px",null);
				}
				style.setProperty("height",textEngine.height + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g) {
				case 0:
					style.setProperty("text-align","center",null);
					break;
				case 4:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) {
			openfl__$internal_renderer_dom_DOMRenderer.updateClip(textField,renderSession);
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,true);
		}
	} else if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
var openfl__$internal_renderer_dom_DOMTilemap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTilemap"] = openfl__$internal_renderer_dom_DOMTilemap;
openfl__$internal_renderer_dom_DOMTilemap.__name__ = ["openfl","_internal","renderer","dom","DOMTilemap"];
openfl__$internal_renderer_dom_DOMTilemap.render = function(tilemap,renderSession) {
	if(tilemap.stage != null && tilemap.__worldVisible && tilemap.__renderable && tilemap.__tiles.length > 0) {
		if(tilemap.__canvas == null) {
			tilemap.__canvas = window.document.createElement("canvas");
			tilemap.__context = tilemap.__canvas.getContext("2d");
			openfl__$internal_renderer_dom_DOMRenderer.initializeElement(tilemap,tilemap.__canvas,renderSession);
		}
		tilemap.__canvas.width = tilemap.__width;
		tilemap.__canvas.height = tilemap.__height;
		tilemap.__context.globalAlpha = tilemap.__worldAlpha;
		renderSession.context = tilemap.__context;
		if(!(!tilemap.__renderable || tilemap.__tiles.length == 0 || tilemap.__worldAlpha <= 0)) {
			var context = renderSession.context;
			renderSession.maskManager.pushObject(tilemap);
			var rect = openfl_geom_Rectangle.__temp;
			rect.setTo(0,0,tilemap.__width,tilemap.__height);
			renderSession.maskManager.pushRect(rect,tilemap.__renderTransform);
			var transform = tilemap.__renderTransform;
			var roundPixels = renderSession.roundPixels;
			if(!renderSession.allowSmoothing || !tilemap.smoothing) {
				context.mozImageSmoothingEnabled = false;
				context.msImageSmoothingEnabled = false;
				context.imageSmoothingEnabled = false;
			}
			var defaultTileset = tilemap.tileset;
			var cacheBitmapData = null;
			var source = null;
			var tiles;
			var count;
			var tile;
			var alpha;
			var visible;
			var tileset;
			var tileData;
			var bitmapData;
			tiles = tilemap.__tiles;
			count = tiles.length;
			var tileTransform = openfl_geom_Matrix.__temp;
			var _g1 = 0;
			var _g = count;
			while(_g1 < _g) {
				tile = tiles[_g1++];
				alpha = tile.alpha;
				visible = tile.visible;
				if(!visible || alpha <= 0) {
					continue;
				}
				if(tile.tileset != null) {
					tileset = tile.tileset;
				} else {
					tileset = defaultTileset;
				}
				if(tileset == null) {
					continue;
				}
				tileData = tileset.__data[tile.id];
				if(tileData == null) {
					continue;
				}
				bitmapData = tileset.bitmapData;
				if(bitmapData == null) {
					continue;
				}
				if(bitmapData != cacheBitmapData) {
					if(bitmapData.image.buffer.__srcImage == null) {
						lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmapData.image);
					}
					source = bitmapData.image.get_src();
					cacheBitmapData = bitmapData;
				}
				context.globalAlpha = tilemap.__worldAlpha * alpha;
				tileTransform.copyFrom(tile.matrix);
				tileTransform.concat(transform);
				if(roundPixels) {
					context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,tileTransform.tx | 0,tileTransform.ty | 0);
				} else {
					context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,tileTransform.tx,tileTransform.ty);
				}
				context.drawImage(source,tileData.x,tileData.y,tileData.width,tileData.height,0,0,tileData.width,tileData.height);
			}
			if(!renderSession.allowSmoothing || !tilemap.smoothing) {
				context.mozImageSmoothingEnabled = true;
				context.msImageSmoothingEnabled = true;
				context.imageSmoothingEnabled = true;
			}
			renderSession.maskManager.popRect();
			renderSession.maskManager.popObject(tilemap);
		}
		renderSession.context = null;
		openfl__$internal_renderer_dom_DOMRenderer.updateClip(tilemap,renderSession);
		openfl__$internal_renderer_dom_DOMRenderer.applyStyle(tilemap,renderSession,true,false,true);
	} else if(tilemap.__canvas != null) {
		renderSession.element.removeChild(tilemap.__canvas);
		tilemap.__canvas = null;
		tilemap.__style = null;
	}
};
var openfl__$internal_renderer_flash_FlashRenderer = function() { };
$hxClasses["openfl._internal.renderer.flash.FlashRenderer"] = openfl__$internal_renderer_flash_FlashRenderer;
openfl__$internal_renderer_flash_FlashRenderer.__name__ = ["openfl","_internal","renderer","flash","FlashRenderer"];
openfl__$internal_renderer_flash_FlashRenderer.register = function(renderObject) {
	if(openfl__$internal_renderer_flash_FlashRenderer.instances == null) {
		openfl__$internal_renderer_flash_FlashRenderer.instances = new haxe_ds_ObjectMap();
		openfl_Lib.current.stage.addEventListener("enterFrame",openfl__$internal_renderer_flash_FlashRenderer.render);
	}
	openfl__$internal_renderer_flash_FlashRenderer.instances.set(renderObject,true);
};
openfl__$internal_renderer_flash_FlashRenderer.render = function(_) {
	var tmp = openfl__$internal_renderer_flash_FlashRenderer.instances.keys();
	while(tmp.hasNext()) tmp.next().__renderFlash();
};
var openfl__$internal_renderer_flash_IDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.flash.IDisplayObject"] = openfl__$internal_renderer_flash_IDisplayObject;
openfl__$internal_renderer_flash_IDisplayObject.__name__ = ["openfl","_internal","renderer","flash","IDisplayObject"];
openfl__$internal_renderer_flash_IDisplayObject.prototype = {
	__renderFlash: null
	,__class__: openfl__$internal_renderer_flash_IDisplayObject
};
var openfl__$internal_renderer_flash_FlashTilemap = function() { };
$hxClasses["openfl._internal.renderer.flash.FlashTilemap"] = openfl__$internal_renderer_flash_FlashTilemap;
openfl__$internal_renderer_flash_FlashTilemap.__name__ = ["openfl","_internal","renderer","flash","FlashTilemap"];
openfl__$internal_renderer_flash_FlashTilemap.render = function(tilemap) {
};
var openfl__$internal_renderer_opengl_GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl__$internal_renderer_opengl_GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		renderSession.blendModeManager.setBlendMode(bitmap.get_blendMode());
		renderSession.maskManager.pushObject(bitmap);
		var shader = renderSession.filterManager.pushObject(bitmap);
		shader.get_data().uImage0.input = bitmap.bitmapData;
		shader.get_data().uImage0.smoothing = renderSession.allowSmoothing && (bitmap.smoothing || renderSession.upscaled);
		shader.get_data().uMatrix.value = renderer.getMatrix(bitmap.__renderTransform);
		renderSession.shaderManager.setShader(shader);
		gl.bindBuffer(gl.ARRAY_BUFFER,bitmap.bitmapData.getBuffer(gl,bitmap.__worldAlpha));
		gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,24,0);
		gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,24,12);
		gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,24,20);
		gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
		renderSession.filterManager.popObject(bitmap);
		renderSession.maskManager.popObject(bitmap);
	}
};
var openfl__$internal_renderer_opengl_GLBlendModeManager = function(gl) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.gl = gl;
	this.setBlendMode(10);
	gl.enable(gl.BLEND);
};
$hxClasses["openfl._internal.renderer.opengl.GLBlendModeManager"] = openfl__$internal_renderer_opengl_GLBlendModeManager;
openfl__$internal_renderer_opengl_GLBlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","GLBlendModeManager"];
openfl__$internal_renderer_opengl_GLBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_opengl_GLBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,gl: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE);
			break;
		case 9:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.DST_COLOR,this.gl.ONE_MINUS_SRC_ALPHA);
			break;
		case 12:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_COLOR);
			break;
		case 14:
			this.gl.blendEquation(this.gl.FUNC_REVERSE_SUBTRACT);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE);
			break;
		default:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLBlendModeManager
});
var openfl__$internal_renderer_opengl_GLDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLDisplayObject"] = openfl__$internal_renderer_opengl_GLDisplayObject;
openfl__$internal_renderer_opengl_GLDisplayObject.__name__ = ["openfl","_internal","renderer","opengl","GLDisplayObject"];
openfl__$internal_renderer_opengl_GLDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderSession.maskManager.pushObject(displayObject);
		var gl = renderSession.gl;
		var rect = openfl_geom_Rectangle.__temp;
		rect.setTo(0,0,displayObject.get_width(),displayObject.get_height());
		renderSession.maskManager.pushRect(rect,displayObject.__renderTransform);
		var color = displayObject.opaqueBackground;
		gl.clearColor((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		renderSession.maskManager.popRect();
		renderSession.maskManager.popObject(displayObject);
	}
	if(displayObject.__graphics != null) {
		if(!(!displayObject.__renderable || displayObject.__worldAlpha <= 0)) {
			var graphics = displayObject.__graphics;
			if(graphics != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,displayObject.__renderTransform);
				if(graphics.__bitmap != null && graphics.__visible) {
					var renderer = renderSession.renderer;
					var gl1 = renderSession.gl;
					renderSession.blendModeManager.setBlendMode(displayObject.get_blendMode());
					renderSession.maskManager.pushObject(displayObject);
					var shader = renderSession.filterManager.pushObject(displayObject);
					shader.get_data().uImage0.input = graphics.__bitmap;
					shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
					shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
					renderSession.shaderManager.setShader(shader);
					gl1.bindBuffer(gl1.ARRAY_BUFFER,graphics.__bitmap.getBuffer(gl1,displayObject.__worldAlpha));
					gl1.vertexAttribPointer(shader.get_data().aPosition.index,3,gl1.FLOAT,false,24,0);
					gl1.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl1.FLOAT,false,24,12);
					gl1.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl1.FLOAT,false,24,20);
					gl1.drawArrays(gl1.TRIANGLE_STRIP,0,4);
					renderSession.filterManager.popObject(displayObject);
					renderSession.maskManager.popObject(displayObject);
				}
			}
		}
	}
};
var openfl__$internal_renderer_opengl_GLFilterManager = function(renderer,renderSession) {
	openfl__$internal_renderer_AbstractFilterManager.call(this,renderSession);
	this.renderer = renderer;
	this.gl = renderSession.gl;
	this.filterDepth = 0;
	this.matrix = new openfl_geom_Matrix();
};
$hxClasses["openfl._internal.renderer.opengl.GLFilterManager"] = openfl__$internal_renderer_opengl_GLFilterManager;
openfl__$internal_renderer_opengl_GLFilterManager.__name__ = ["openfl","_internal","renderer","opengl","GLFilterManager"];
openfl__$internal_renderer_opengl_GLFilterManager.__super__ = openfl__$internal_renderer_AbstractFilterManager;
openfl__$internal_renderer_opengl_GLFilterManager.prototype = $extend(openfl__$internal_renderer_AbstractFilterManager.prototype,{
	filterDepth: null
	,gl: null
	,matrix: null
	,renderer: null
	,pushObject: function(object) {
		if(object.__filters != null && object.__filters.length > 0) {
			if(object.__filters.length == 1 && object.__filters[0].__numPasses == 0) {
				return object.__filters[0].__initShader(this.renderSession,0);
			} else {
				this.renderer.getRenderTarget(true);
			}
			this.filterDepth++;
		}
		return this.renderSession.shaderManager.defaultShader;
	}
	,popObject: function(object) {
		if(object.__filters != null && object.__filters.length > 0) {
			var filter = object.__filters[0];
			var currentTarget;
			var shader;
			if(object.__filters.length > 1 || filter.__numPasses > 0) {
				var _g1 = 0;
				var _g = filter.__numPasses;
				while(_g1 < _g) {
					var i = _g1++;
					currentTarget = this.renderer.currentRenderTarget;
					this.renderer.getRenderTarget(true);
					shader = filter.__initShader(this.renderSession,i);
					this.renderPass(currentTarget,shader);
				}
				this.filterDepth--;
				this.renderer.getRenderTarget(this.filterDepth > 0);
				this.renderPass(this.renderer.currentRenderTarget,this.renderSession.shaderManager.defaultShader);
			} else {
				this.filterDepth--;
			}
		}
	}
	,renderPass: function(target,shader) {
		shader.get_data().uImage0.input = target;
		shader.get_data().uImage0.smoothing = this.renderSession.allowSmoothing && this.renderSession.upscaled;
		shader.get_data().uMatrix.value = this.renderer.getMatrix(this.matrix);
		this.renderSession.shaderManager.setShader(shader);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,target.getBuffer(this.gl,1));
		this.gl.vertexAttribPointer(shader.get_data().aPosition.index,3,this.gl.FLOAT,false,24,0);
		this.gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,this.gl.FLOAT,false,24,12);
		this.gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,this.gl.FLOAT,false,24,20);
		this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,4);
	}
	,__class__: openfl__$internal_renderer_opengl_GLFilterManager
});
var openfl__$internal_renderer_opengl_GLMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.gl = renderSession.gl;
	this.clipRects = [];
	this.numClipRects = 0;
	this.tempRect = new openfl_geom_Rectangle();
};
$hxClasses["openfl._internal.renderer.opengl.GLMaskManager"] = openfl__$internal_renderer_opengl_GLMaskManager;
openfl__$internal_renderer_opengl_GLMaskManager.__name__ = ["openfl","_internal","renderer","opengl","GLMaskManager"];
openfl__$internal_renderer_opengl_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_opengl_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	clipRects: null
	,gl: null
	,numClipRects: null
	,tempRect: null
	,pushMask: function(mask) {
		this.pushRect(mask.getBounds(mask),mask.__getRenderTransform());
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		if(this.numClipRects == this.clipRects.length) {
			this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.clipRects[this.numClipRects];
		rect.__transform(clipRect,transform);
		if(this.numClipRects > 0) {
			var parentClipRect = this.clipRects[this.numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.scissorRect(clipRect);
		this.numClipRects++;
	}
	,popMask: function() {
		this.popRect();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		if(this.numClipRects > 0) {
			this.numClipRects--;
			if(this.numClipRects > 0) {
				this.scissorRect(this.clipRects[this.numClipRects - 1]);
			} else {
				this.scissorRect();
			}
		}
	}
	,scissorRect: function(rect) {
		if(rect != null) {
			var renderer = this.renderSession.renderer;
			this.gl.enable(this.gl.SCISSOR_TEST);
			var clipRect = this.tempRect;
			rect.__transform(clipRect,renderer.displayMatrix);
			var x = Math.floor(clipRect.x);
			var y = Math.floor(renderer.height - clipRect.y - clipRect.height);
			var width = Math.ceil(clipRect.width);
			var height = Math.ceil(clipRect.height);
			if(width < 0) {
				width = 0;
			}
			if(height < 0) {
				height = 0;
			}
			this.gl.scissor(x,y,width,height);
		} else {
			this.gl.disable(this.gl.SCISSOR_TEST);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLMaskManager
});
var openfl__$internal_renderer_opengl_GLRenderer = function(stage,gl,flipped) {
	if(flipped == null) {
		flipped = true;
	}
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.gl = gl;
	this.flipped = flipped;
	this.matrix = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	this.values = [];
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.gl = gl;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.blendModeManager = new openfl__$internal_renderer_opengl_GLBlendModeManager(gl);
	this.renderSession.filterManager = new openfl__$internal_renderer_opengl_GLFilterManager(this,this.renderSession);
	this.renderSession.shaderManager = new openfl__$internal_renderer_opengl_GLShaderManager(gl);
	this.renderSession.maskManager = new openfl__$internal_renderer_opengl_GLMaskManager(this.renderSession);
	if(stage.window != null) {
		if(stage.stage3Ds.get(0).context3D == null) {
			stage.stage3Ds.get(0).__createContext(stage,this.renderSession);
		}
		this.resize(Math.ceil(stage.window.__width * stage.window.__scale),Math.ceil(stage.window.__height * stage.window.__scale));
	}
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	projection: null
	,projectionFlipped: null
	,currentRenderTarget: null
	,displayHeight: null
	,displayMatrix: null
	,displayWidth: null
	,flipped: null
	,gl: null
	,matrix: null
	,renderTargetA: null
	,renderTargetB: null
	,offsetX: null
	,offsetY: null
	,values: null
	,clear: function() {
		if(this.stage.__transparent) {
			this.gl.clearColor(0,0,0,0);
		} else {
			this.gl.clearColor(this.stage.__colorSplit[0],this.stage.__colorSplit[1],this.stage.__colorSplit[2],1);
		}
		this.gl.clear(this.gl.COLOR_BUFFER_BIT);
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__renderGL(this.stage,this.renderSession);
		}
	}
	,getCacheObject: function() {
	}
	,getMatrix: function(transform) {
		var _matrix = openfl_geom_Matrix.__temp;
		_matrix.copyFrom(transform);
		_matrix.concat(this.displayMatrix);
		if(this.renderSession.roundPixels) {
			_matrix.tx = Math.round(_matrix.tx);
			_matrix.ty = Math.round(_matrix.ty);
		}
		lime_math__$Matrix4_Matrix4_$Impl_$.identity(this.matrix);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,0,_matrix.a);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,1,_matrix.b);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,4,_matrix.c);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,5,_matrix.d);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,12,_matrix.tx);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,13,_matrix.ty);
		lime_math__$Matrix4_Matrix4_$Impl_$.append(this.matrix,this.flipped?this.projectionFlipped:this.projection);
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			this.values[i] = lime_math__$Matrix4_Matrix4_$Impl_$.get(this.matrix,i);
		}
		return this.values;
	}
	,getRenderTarget: function(framebuffer) {
		if(framebuffer) {
			if(this.renderTargetA == null) {
				this.renderTargetA = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.get(0).context3D.createRectangleTexture(this.width,this.height,1,true));
				this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetA.getTexture(this.gl));
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.renderTargetB == null) {
				this.renderTargetB = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.get(0).context3D.createRectangleTexture(this.width,this.height,1,true));
				this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetB.getTexture(this.gl));
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.currentRenderTarget == this.renderTargetA) {
				this.currentRenderTarget = this.renderTargetB;
			} else {
				this.currentRenderTarget = this.renderTargetA;
			}
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this.currentRenderTarget.__getFramebuffer(this.gl));
			this.gl.viewport(0,0,this.width,this.height);
			this.gl.clearColor(0,0,0,0);
			this.gl.clear(this.gl.COLOR_BUFFER_BIT);
			this.flipped = false;
		} else {
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null);
			this.flipped = true;
		}
	}
	,render: function() {
		this.gl.viewport(this.offsetX,this.offsetY,this.displayWidth,this.displayHeight);
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.renderSession.upscaled = this.displayMatrix.a != 1 || this.displayMatrix.d != 1;
		this.stage.__renderGL(this.renderSession);
		if(this.offsetX > 0 || this.offsetY > 0) {
			this.gl.clearColor(0,0,0,1);
			this.gl.enable(this.gl.SCISSOR_TEST);
			if(this.offsetX > 0) {
				this.gl.scissor(0,0,this.offsetX,this.height);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.scissor(this.offsetX + this.displayWidth,0,this.width,this.height);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
			}
			if(this.offsetY > 0) {
				this.gl.scissor(0,0,this.width,this.offsetY);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.scissor(0,this.offsetY + this.displayHeight,this.width,this.height);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
			}
			this.gl.disable(this.gl.SCISSOR_TEST);
		}
	}
	,resize: function(width,height) {
		openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this,width,height);
		if(this.renderTargetA != null && (this.renderTargetA.width != width || this.renderTargetA.height != height)) {
			this.renderTargetA = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.get(0).context3D.createRectangleTexture(width,height,1,true));
			this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetA.getTexture(this.gl));
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
		}
		if(this.renderTargetB != null && (this.renderTargetB.width != width || this.renderTargetB.height != height)) {
			this.renderTargetB = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.get(0).context3D.createRectangleTexture(width,height,1,true));
			this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetB.getTexture(this.gl));
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
		}
		this.displayMatrix = this.stage.__displayMatrix;
		var _this = this.displayMatrix;
		this.offsetX = Math.round(0 * _this.a + 0 * _this.c + _this.tx);
		var _this1 = this.displayMatrix;
		this.offsetY = Math.round(0 * _this1.b + 0 * _this1.d + _this1.ty);
		var _this2 = this.displayMatrix;
		this.displayWidth = Math.round(width * _this2.a + 0 * _this2.c + _this2.tx - this.offsetX);
		var _this3 = this.displayMatrix;
		this.displayHeight = Math.round(0 * _this3.b + height * _this3.d + _this3.ty - this.offsetY);
		this.projection = lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.offsetY,this.displayHeight + this.offsetY,-1000,1000);
		this.projectionFlipped = lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.displayHeight + this.offsetY,this.offsetY,-1000,1000);
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
});
var openfl__$internal_renderer_opengl_GLShaderManager = function(gl) {
	openfl__$internal_renderer_AbstractShaderManager.call(this);
	this.gl = gl;
	this.defaultShader = new openfl_display_Shader();
	this.defaultShader.gl = gl;
	this.defaultShader.__init();
};
$hxClasses["openfl._internal.renderer.opengl.GLShaderManager"] = openfl__$internal_renderer_opengl_GLShaderManager;
openfl__$internal_renderer_opengl_GLShaderManager.__name__ = ["openfl","_internal","renderer","opengl","GLShaderManager"];
openfl__$internal_renderer_opengl_GLShaderManager.__super__ = openfl__$internal_renderer_AbstractShaderManager;
openfl__$internal_renderer_opengl_GLShaderManager.prototype = $extend(openfl__$internal_renderer_AbstractShaderManager.prototype,{
	gl: null
	,setShader: function(shader) {
		if(this.currentShader == shader) {
			if(this.currentShader != null) {
				this.currentShader.__update();
			}
			return;
		}
		if(this.currentShader != null) {
			this.currentShader.__disable();
		}
		if(shader == null) {
			this.currentShader = null;
			this.gl.useProgram(null);
			return;
		}
		this.currentShader = shader;
		if(this.currentShader.gl == null) {
			this.currentShader.gl = this.gl;
			this.currentShader.__init();
		}
		this.gl.useProgram(shader.glProgram);
		this.currentShader.__enable();
		this.currentShader.__update();
	}
	,__class__: openfl__$internal_renderer_opengl_GLShaderManager
});
var openfl__$internal_renderer_opengl_GLShape = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLShape"] = openfl__$internal_renderer_opengl_GLShape;
openfl__$internal_renderer_opengl_GLShape.__name__ = ["openfl","_internal","renderer","opengl","GLShape"];
openfl__$internal_renderer_opengl_GLShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		if(graphics.__bitmap != null && graphics.__visible) {
			var renderer = renderSession.renderer;
			var gl = renderSession.gl;
			renderSession.blendModeManager.setBlendMode(shape.get_blendMode());
			renderSession.maskManager.pushObject(shape);
			var shader = renderSession.filterManager.pushObject(shape);
			shader.get_data().uImage0.input = graphics.__bitmap;
			shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
			shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
			renderSession.shaderManager.setShader(shader);
			gl.bindBuffer(gl.ARRAY_BUFFER,graphics.__bitmap.getBuffer(gl,shape.__worldAlpha));
			gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,24,0);
			gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,24,12);
			gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,24,20);
			gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
			renderSession.filterManager.popObject(shape);
			renderSession.maskManager.popObject(shape);
		}
	}
};
var openfl__$internal_renderer_opengl_GLStage3D = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLStage3D"] = openfl__$internal_renderer_opengl_GLStage3D;
openfl__$internal_renderer_opengl_GLStage3D.__name__ = ["openfl","_internal","renderer","opengl","GLStage3D"];
openfl__$internal_renderer_opengl_GLStage3D.render = function(stage3D,renderSession) {
	if(stage3D.context3D != null) {
		renderSession.gl.depthMask(true);
		renderSession.blendModeManager.setBlendMode(null);
		if(renderSession.shaderManager.currentShader != null) {
			renderSession.shaderManager.setShader(null);
			if(stage3D.context3D.__program != null) {
				stage3D.context3D.__program.__use();
			}
		}
	}
};
var openfl__$internal_renderer_opengl_GLTilemap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLTilemap"] = openfl__$internal_renderer_opengl_GLTilemap;
openfl__$internal_renderer_opengl_GLTilemap.__name__ = ["openfl","_internal","renderer","opengl","GLTilemap"];
openfl__$internal_renderer_opengl_GLTilemap.render = function(tilemap,renderSession) {
	if(!tilemap.__renderable || tilemap.__tiles.length == 0 || tilemap.__worldAlpha <= 0) {
		return;
	}
	var renderer = renderSession.renderer;
	var gl = renderSession.gl;
	renderSession.blendModeManager.setBlendMode(tilemap.get_blendMode());
	renderSession.maskManager.pushObject(tilemap);
	var shader = renderSession.filterManager.pushObject(tilemap);
	var rect = openfl_geom_Rectangle.__temp;
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderSession.maskManager.pushRect(rect,tilemap.__renderTransform);
	shader.get_data().uMatrix.value = renderer.getMatrix(tilemap.__renderTransform);
	shader.get_data().uImage0.smoothing = renderSession.allowSmoothing && tilemap.smoothing;
	var defaultTileset = tilemap.tileset;
	var worldAlpha = tilemap.__worldAlpha;
	var alphaDirty = tilemap.__worldAlpha != tilemap.__cacheAlpha;
	var tiles;
	var count;
	var bufferData;
	var startIndex;
	var offset;
	var tileWidth = 0;
	var tileHeight = 0;
	var tile;
	var alpha;
	var visible;
	var tileset;
	var tileData;
	var tileMatrix;
	var x;
	var y;
	var x2;
	var y2;
	var x3;
	var y3;
	var x4;
	var y4;
	tiles = tilemap.__tiles;
	count = tiles.length;
	bufferData = tilemap.__bufferData;
	if(bufferData == null || tilemap.__dirty || bufferData.length != count * 30) {
		startIndex = 0;
		if(bufferData == null) {
			var elements = count * 30;
			bufferData = elements != null?new Float32Array(elements):null;
		} else if(bufferData.length != count * 30) {
			if(!tilemap.__dirty) {
				startIndex = bufferData.length / 30 | 0;
			}
			var elements1 = count * 30;
			var data = elements1 != null?new Float32Array(elements1):null;
			if(bufferData.length <= data.length) {
				data.set(bufferData);
			} else {
				data.set(bufferData.subarray(0,data.length));
			}
			bufferData = data;
		}
		var _g1 = startIndex;
		while(_g1 < count) {
			var i = _g1++;
			openfl__$internal_renderer_opengl_GLTilemap.__updateTileAlpha(tiles[i],worldAlpha,i * 30,bufferData);
			if(tiles[i].tileset != null) {
				tileset = tiles[i].tileset;
			} else {
				tileset = tilemap.tileset;
			}
			if(tileset != null) {
				openfl__$internal_renderer_opengl_GLTilemap.__updateTileUV(tiles[i],tileset,i * 30,bufferData);
			}
		}
		tilemap.__bufferData = bufferData;
	}
	if(tilemap.__buffer == null) {
		tilemap.__buffer = gl.createBuffer();
	}
	gl.bindBuffer(gl.ARRAY_BUFFER,tilemap.__buffer);
	var drawCount = 0;
	var _g11 = 0;
	while(_g11 < count) {
		var i1 = _g11++;
		offset = i1 * 30;
		tile = tiles[i1];
		alpha = tile.alpha;
		visible = tile.visible;
		if(!visible || alpha <= 0) {
			openfl__$internal_renderer_opengl_GLTilemap.__skipTile(tile,i1,offset,bufferData);
			continue;
		}
		if(tile.tileset != null) {
			tileset = tile.tileset;
		} else {
			tileset = defaultTileset;
		}
		if(tileset == null) {
			openfl__$internal_renderer_opengl_GLTilemap.__skipTile(tile,i1,offset,bufferData);
			continue;
		}
		tileData = tileset.__data[tile.id];
		if(tileData == null) {
			openfl__$internal_renderer_opengl_GLTilemap.__skipTile(tile,i1,offset,bufferData);
			continue;
		}
		tileWidth = tileData.width;
		tileHeight = tileData.height;
		if(alphaDirty || tile.__alphaDirty) {
			openfl__$internal_renderer_opengl_GLTilemap.__updateTileAlpha(tile,worldAlpha,offset,bufferData);
		}
		if(tile.__sourceDirty) {
			openfl__$internal_renderer_opengl_GLTilemap.__updateTileUV(tile,tileset,offset,bufferData);
		}
		if(tile.__transformDirty) {
			tileMatrix = tile.matrix;
			x = tile.__transform[0] = 0 * tileMatrix.a + 0 * tileMatrix.c + tileMatrix.tx;
			y = tile.__transform[1] = 0 * tileMatrix.b + 0 * tileMatrix.d + tileMatrix.ty;
			x2 = tile.__transform[2] = tileWidth * tileMatrix.a + 0 * tileMatrix.c + tileMatrix.tx;
			y2 = tile.__transform[3] = tileWidth * tileMatrix.b + 0 * tileMatrix.d + tileMatrix.ty;
			x3 = tile.__transform[4] = 0 * tileMatrix.a + tileHeight * tileMatrix.c + tileMatrix.tx;
			y3 = tile.__transform[5] = 0 * tileMatrix.b + tileHeight * tileMatrix.d + tileMatrix.ty;
			x4 = tile.__transform[6] = tileWidth * tileMatrix.a + tileHeight * tileMatrix.c + tileMatrix.tx;
			y4 = tile.__transform[7] = tileWidth * tileMatrix.b + tileHeight * tileMatrix.d + tileMatrix.ty;
			tile.__transformDirty = false;
		} else {
			x = tile.__transform[0];
			y = tile.__transform[1];
			x2 = tile.__transform[2];
			y2 = tile.__transform[3];
			x3 = tile.__transform[4];
			y3 = tile.__transform[5];
			x4 = tile.__transform[6];
			y4 = tile.__transform[7];
		}
		bufferData[offset] = x;
		bufferData[offset + 1] = y;
		bufferData[offset + 5] = x2;
		bufferData[offset + 6] = y2;
		bufferData[offset + 10] = x3;
		bufferData[offset + 11] = y3;
		bufferData[offset + 15] = x3;
		bufferData[offset + 16] = y3;
		bufferData[offset + 20] = x2;
		bufferData[offset + 21] = y2;
		bufferData[offset + 25] = x4;
		bufferData[offset + 26] = y4;
		drawCount = i1;
		openfl__$internal_renderer_opengl_GLTilemap.__skippedTiles.h[i1] = false;
	}
	gl.bufferData(gl.ARRAY_BUFFER,bufferData,gl.DYNAMIC_DRAW);
	gl.vertexAttribPointer(shader.get_data().aPosition.index,2,gl.FLOAT,false,20,0);
	gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,20,8);
	gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,20,16);
	var cacheBitmapData = null;
	var lastIndex = 0;
	var _g12 = 0;
	var _g = drawCount + 1;
	while(_g12 < _g) {
		var i2 = _g12++;
		if(openfl__$internal_renderer_opengl_GLTilemap.__skippedTiles.h[i2]) {
			continue;
		}
		tile = tiles[i2];
		if(tile.tileset != null) {
			tileset = tile.tileset;
		} else {
			tileset = defaultTileset;
		}
		if(tileset.bitmapData != cacheBitmapData) {
			if(cacheBitmapData != null) {
				shader.get_data().uImage0.input = cacheBitmapData;
				renderSession.shaderManager.setShader(shader);
				gl.drawArrays(gl.TRIANGLES,lastIndex * 6,(i2 - lastIndex) * 6);
			}
			cacheBitmapData = tileset.bitmapData;
			lastIndex = i2;
		}
		if(i2 == drawCount && tileset.bitmapData != null) {
			shader.get_data().uImage0.input = tileset.bitmapData;
			renderSession.shaderManager.setShader(shader);
			gl.drawArrays(gl.TRIANGLES,lastIndex * 6,(i2 + 1 - lastIndex) * 6);
		}
	}
	gl.disableVertexAttribArray(shader.get_data().aAlpha.index);
	tilemap.__dirty = false;
	tilemap.__cacheAlpha = worldAlpha;
	renderSession.filterManager.popObject(tilemap);
	renderSession.maskManager.popRect();
	renderSession.maskManager.popObject(tilemap);
};
openfl__$internal_renderer_opengl_GLTilemap.__skipTile = function(tile,i,tileOffset,bufferData) {
	var tileOffset1 = i * 30;
	bufferData[tileOffset1 + 4] = 0;
	bufferData[tileOffset1 + 9] = 0;
	bufferData[tileOffset1 + 14] = 0;
	bufferData[tileOffset1 + 19] = 0;
	bufferData[tileOffset1 + 24] = 0;
	bufferData[tileOffset1 + 29] = 0;
	openfl__$internal_renderer_opengl_GLTilemap.__skippedTiles.h[i] = true;
	tile.__alphaDirty = true;
};
openfl__$internal_renderer_opengl_GLTilemap.__updateTileAlpha = function(tile,worldAlpha,tileOffset,bufferData) {
	var alpha = worldAlpha * tile.alpha;
	bufferData[tileOffset + 4] = alpha;
	bufferData[tileOffset + 9] = alpha;
	bufferData[tileOffset + 14] = alpha;
	bufferData[tileOffset + 19] = alpha;
	bufferData[tileOffset + 24] = alpha;
	bufferData[tileOffset + 29] = alpha;
	tile.__alphaDirty = false;
};
openfl__$internal_renderer_opengl_GLTilemap.__updateTileUV = function(tile,tileset,tileOffset,bufferData) {
	var tileData = tileset.__data[tile.id];
	if(tileData == null) {
		return;
	}
	var x = tileData.__uvX;
	var y = tileData.__uvY;
	var x2 = tileData.__uvWidth;
	var y2 = tileData.__uvHeight;
	bufferData[tileOffset + 2] = x;
	bufferData[tileOffset + 3] = y;
	bufferData[tileOffset + 7] = x2;
	bufferData[tileOffset + 8] = y;
	bufferData[tileOffset + 12] = x;
	bufferData[tileOffset + 13] = y2;
	bufferData[tileOffset + 17] = x;
	bufferData[tileOffset + 18] = y2;
	bufferData[tileOffset + 22] = x2;
	bufferData[tileOffset + 23] = y;
	bufferData[tileOffset + 27] = x2;
	bufferData[tileOffset + 28] = y2;
	tile.__sourceDirty = false;
};
var openfl__$internal_stage3D_AGALConverter = function() { };
$hxClasses["openfl._internal.stage3D.AGALConverter"] = openfl__$internal_stage3D_AGALConverter;
openfl__$internal_stage3D_AGALConverter.__name__ = ["openfl","_internal","stage3D","AGALConverter"];
openfl__$internal_stage3D_AGALConverter.prefixFromType = function(regType,programType) {
	switch(regType) {
	case 0:
		return "va";
	case 1:
		if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
			return "vc";
		} else {
			return "fc";
		}
		break;
	case 2:
		if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
			return "vt";
		} else {
			return "ft";
		}
		break;
	case 3:
		return "output_";
	case 4:
		return "v";
	case 5:
		return "sampler";
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Invalid data!"));
	}
};
openfl__$internal_stage3D_AGALConverter.readUInt64 = function(byteArray) {
	var low = byteArray.readInt();
	return new haxe__$Int64__$_$_$Int64(byteArray.readInt(),low);
};
openfl__$internal_stage3D_AGALConverter.convertToGLSL = function(agal,samplerState) {
	agal.position = 0;
	agal.__endian = 1;
	var magic = agal.readByte() & 255;
	if(magic == 176) {
		return agal.readUTF();
	}
	if(magic != 160) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Magic value must be 0xA0, may not be AGAL"));
	}
	if(agal.readInt() != 1) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Version must be 1"));
	}
	if((agal.readByte() & 255) != 161) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Shader type ID must be 0xA1"));
	}
	var programType = (agal.readByte() & 255) == 0?openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX:openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT;
	var map = new openfl__$internal_stage3D_RegisterMap();
	var sb_b = "";
	while(agal.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(agal)) {
		var opcode = agal.readInt();
		var dest = agal.readUnsignedInt();
		var source1 = openfl__$internal_stage3D_AGALConverter.readUInt64(agal);
		var source2 = openfl__$internal_stage3D_AGALConverter.readUInt64(agal);
		var dr = openfl__$internal_stage3D__$AGALConverter_DestRegister.parse(dest,programType);
		var sr1 = openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse(source1,programType,dr.mask);
		var sr2 = openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse(source2,programType,dr.mask);
		sb_b += "\t";
		switch(opcode) {
		case 0:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + "; // mov");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 1:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " + " + sr2.toGLSL() + "; // add");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 2:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " - " + sr2.toGLSL() + "; // sub");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 3:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL() + "; // mul");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 4:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " / " + sr2.toGLSL() + "; // div");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 5:
			sb_b += Std.string(dr.toGLSL() + " = vec4(1) / " + sr1.toGLSL() + ", " + sr2.toGLSL() + "; // rcp (untested)");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 6:
			sb_b += Std.string(dr.toGLSL() + " = min(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // min");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 7:
			sb_b += Std.string(dr.toGLSL() + " = max(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // max");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 8:
			sb_b += Std.string(dr.toGLSL() + " = fract(" + sr1.toGLSL() + "); // frc");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 9:
			sb_b += Std.string(dr.toGLSL() + " = sqrt(" + sr1.toGLSL() + "); // sqrt");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 10:
			sb_b += Std.string(dr.toGLSL() + " = inversesqrt(" + sr1.toGLSL() + "); // rsq");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 11:
			sb_b += Std.string(dr.toGLSL() + " = pow(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // pow");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 12:
			sb_b += Std.string(dr.toGLSL() + " = log2(" + sr1.toGLSL() + "); // log");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 13:
			sb_b += Std.string(dr.toGLSL() + " = exp2(" + sr1.toGLSL() + "); // exp");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 14:
			sb_b += Std.string(dr.toGLSL() + " = normalize(" + sr1.toGLSL() + "); // normalize");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 15:
			sb_b += Std.string(dr.toGLSL() + " = sin(" + sr1.toGLSL() + "); // sin");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 16:
			sb_b += Std.string(dr.toGLSL() + " = cos(" + sr1.toGLSL() + "); // cos");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 17:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = cross(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")); // crs");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 18:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp3");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 19:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec4(" + sr1.toGLSL() + "), vec4(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp4");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 20:
			sb_b += Std.string(dr.toGLSL() + " = abs(" + sr1.toGLSL() + "); // abs");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 21:
			sb_b += Std.string(dr.toGLSL() + " = -" + sr1.toGLSL() + "; // neg");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 22:
			sb_b += Std.string(dr.toGLSL() + " = clamp(" + sr1.toGLSL() + ", 0.0, 1.0); // saturate");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 23:
			var existingUsage = map.getRegisterUsage(sr2);
			if(existingUsage != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * mat3(" + sr2.toGLSL(false) + "); // m33");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 7;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m33");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 24:
			var existingUsage1 = map.getRegisterUsage(sr2);
			if(existingUsage1 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage1 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m44");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec4(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,3) + ")); // m44");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,3);
			}
			break;
		case 25:
			dr.mask &= 7;
			var existingUsage2 = map.getRegisterUsage(sr2);
			if(existingUsage2 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage2 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m34");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m34");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 39:
			sr1.sourceMask = 15;
			sb_b += Std.string("if (any(lessThan(" + sr1.toGLSL() + ", vec4(0)))) discard;");
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 40:
			var sampler = openfl__$internal_stage3D__$AGALConverter_SamplerRegister.parse(source2,programType);
			switch(sampler.d) {
			case 0:
				sr1.sourceMask = 3;
				map.addSaR(sampler,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D);
				sb_b += Std.string(dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				break;
			case 1:
				sr1.sourceMask = 7;
				sb_b += Std.string(dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				map.addSaR(sampler,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE);
				break;
			}
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			if(samplerState != null) {
				samplerState[sampler.n] = sampler.toSamplerState();
			}
			break;
		case 41:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(greaterThanEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // ste");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 42:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(lessThan(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // slt");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 44:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(equal(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // seq");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 45:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(notEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // sne");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Opcode " + opcode));
		}
		sb_b += "\n";
	}
	if(openfl__$internal_stage3D_AGALConverter.limitedProfile == null) {
		var version = lime_graphics_opengl_GL.context.getParameter(7938);
		openfl__$internal_stage3D_AGALConverter.limitedProfile = version.indexOf("OpenGL ES") > -1 || version.indexOf("WebGL") > -1;
	}
	var glsl_b = "";
	glsl_b = "" + Std.string("// AGAL " + (programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX?"vertex":"fragment") + " shader\n");
	if(openfl__$internal_stage3D_AGALConverter.limitedProfile) {
		glsl_b += Std.string("#version " + 100 + "\n");
		glsl_b += "precision highp float;\n";
	}
	glsl_b += Std.string(map.toGLSL(false));
	if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "uniform vec4 vcPositionScale;\n";
	}
	glsl_b += "void main() {\n";
	glsl_b += Std.string(map.toGLSL(true));
	glsl_b += sb_b == null?"null":"" + sb_b;
	if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "\tgl_Position *= vcPositionScale;\n";
	}
	glsl_b += "}\n";
	return glsl_b;
};
var openfl__$internal_stage3D__$AGALConverter_DestRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.DestRegister"] = openfl__$internal_stage3D__$AGALConverter_DestRegister;
openfl__$internal_stage3D__$AGALConverter_DestRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","DestRegister"];
openfl__$internal_stage3D__$AGALConverter_DestRegister.parse = function(v,programType) {
	var dr = new openfl__$internal_stage3D__$AGALConverter_DestRegister();
	dr.programType = programType;
	dr.type = v >>> 24 & 15;
	dr.mask = v >>> 16 & 15;
	dr.n = v & 65535;
	return dr;
};
openfl__$internal_stage3D__$AGALConverter_DestRegister.prototype = {
	mask: null
	,n: null
	,programType: null
	,type: null
	,getWriteMask: function() {
		var str = ".";
		if((this.mask & 1) != 0) {
			str = "." + "x";
		}
		if((this.mask & 2) != 0) {
			str += "y";
		}
		if((this.mask & 4) != 0) {
			str += "z";
		}
		if((this.mask & 8) != 0) {
			str += "w";
		}
		return str;
	}
	,toGLSL: function(useMask) {
		if(useMask == null) {
			useMask = true;
		}
		var str = this.type == 3?this.programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX?"gl_Position":"gl_FragColor":openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		if(useMask && this.mask != 15) {
			str += this.getWriteMask();
		}
		return str;
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_DestRegister
};
var openfl__$internal_stage3D__$AGALConverter_ProgramType = $hxClasses["openfl._internal.stage3D._AGALConverter.ProgramType"] = { __ename__ : ["openfl","_internal","stage3D","_AGALConverter","ProgramType"], __constructs__ : ["VERTEX","FRAGMENT"] };
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX = ["VERTEX",0];
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX.__enum__ = openfl__$internal_stage3D__$AGALConverter_ProgramType;
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT = ["FRAGMENT",1];
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT.__enum__ = openfl__$internal_stage3D__$AGALConverter_ProgramType;
var openfl__$internal_stage3D_RegisterMap = function() {
	this.mEntries = [];
};
$hxClasses["openfl._internal.stage3D.RegisterMap"] = openfl__$internal_stage3D_RegisterMap;
openfl__$internal_stage3D_RegisterMap.__name__ = ["openfl","_internal","stage3D","RegisterMap"];
openfl__$internal_stage3D_RegisterMap.prototype = {
	mEntries: null
	,add: function(type,name,number,usage) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				if(entry.usage != usage) {
					throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot use register in multiple ways yet (mat4/vec4)"));
				}
				return;
			}
		}
		var entry1 = new openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry();
		entry1.type = type;
		entry1.name = name;
		entry1.number = number;
		entry1.usage = usage;
		this.mEntries.push(entry1);
	}
	,addDR: function(dr,usage) {
		this.add(dr.type,dr.toGLSL(false),dr.n,usage);
	}
	,addSaR: function(sr,usage) {
		this.add(sr.type,sr.toGLSL(),sr.n,usage);
	}
	,addSR: function(sr,usage,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(sr.d != 0) {
			this.add(sr.itype,openfl__$internal_stage3D_AGALConverter.prefixFromType(sr.itype,sr.programType) + sr.n,sr.n,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			this.add(sr.type,openfl__$internal_stage3D_AGALConverter.prefixFromType(sr.type,sr.programType) + sr.o,sr.o,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY);
			return;
		}
		this.add(sr.type,sr.toGLSL(false,offset),sr.n + offset,usage);
	}
	,getRegisterUsage: function(sr) {
		if(sr.d != 0) {
			return openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY;
		}
		return this.getUsage(sr.type,sr.toGLSL(false),sr.n);
	}
	,getUsage: function(type,name,number) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				return entry.usage;
			}
		}
		return openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED;
	}
	,toGLSL: function(tempRegistersOnly) {
		this.mEntries.sort(function(a,b) {
			if(a.type != b.type) {
				return js_Boot.__cast(a.type , Int) - js_Boot.__cast(b.type , Int);
			} else {
				return a.number - b.number;
			}
		});
		var sb_b = "";
		var _g1 = 0;
		var _g = this.mEntries.length;
		while(_g1 < _g) {
			var i = _g1++;
			var entry = this.mEntries[i];
			if(tempRegistersOnly && entry.type != 2 || !tempRegistersOnly && entry.type == 2) {
				continue;
			}
			if(entry.type == 3) {
				continue;
			}
			switch(entry.type) {
			case 0:
				sb_b += "attribute ";
				break;
			case 1:
				sb_b += "uniform ";
				break;
			case 2:
				sb_b += "\t";
				break;
			case 3:
				break;
			case 4:
				sb_b += "varying ";
				break;
			case 5:
				sb_b += "uniform ";
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
			switch(entry.usage[1]) {
			case 0:
				haxe_Log.trace("Missing switch patten: RegisterUsage.UNUSED",{ fileName : "AGALConverter.hx", lineNumber : 765, className : "openfl._internal.stage3D.RegisterMap", methodName : "toGLSL"});
				break;
			case 1:
				sb_b += "vec4 ";
				break;
			case 2:
				sb_b += "mat4 ";
				break;
			case 3:
				sb_b += "sampler2D ";
				break;
			case 4:
				haxe_Log.trace("Missing switch patten: RegisterUsage.SAMPLER_2D_ALPHA",{ fileName : "AGALConverter.hx", lineNumber : 769, className : "openfl._internal.stage3D.RegisterMap", methodName : "toGLSL"});
				break;
			case 5:
				sb_b += "samplerCube ";
				break;
			case 6:
				sb_b += "vec4 ";
				break;
			}
			if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA) {
				sb_b += "sampler2D ";
				sb_b += entry.name == null?"null":"" + entry.name;
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name + "_alpha");
				sb_b += ";\n";
			} else if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				var count = 128;
				if(i < this.mEntries.length - 1) {
					count = this.mEntries[i + 1].number - entry.number;
				}
				sb_b += Std.string(entry.name + "[" + count + "]");
				sb_b += ";\n";
			} else {
				sb_b += entry.name == null?"null":"" + entry.name;
				sb_b += ";\n";
			}
		}
		return sb_b;
	}
	,__class__: openfl__$internal_stage3D_RegisterMap
};
var openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.RegisterMapEntry"] = openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry;
openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry.__name__ = ["openfl","_internal","stage3D","_AGALConverter","RegisterMapEntry"];
openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry.prototype = {
	name: null
	,number: null
	,type: null
	,usage: null
	,__class__: openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry
};
var openfl__$internal_stage3D__$AGALConverter_RegisterUsage = $hxClasses["openfl._internal.stage3D._AGALConverter.RegisterUsage"] = { __ename__ : ["openfl","_internal","stage3D","_AGALConverter","RegisterUsage"], __constructs__ : ["UNUSED","VECTOR_4","MATRIX_4_4","SAMPLER_2D","SAMPLER_2D_ALPHA","SAMPLER_CUBE","VECTOR_4_ARRAY"] };
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED = ["UNUSED",0];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 = ["VECTOR_4",1];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4 = ["MATRIX_4_4",2];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D = ["SAMPLER_2D",3];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA = ["SAMPLER_2D_ALPHA",4];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE = ["SAMPLER_CUBE",5];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY = ["VECTOR_4_ARRAY",6];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
var openfl__$internal_stage3D__$AGALConverter_SamplerRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.SamplerRegister"] = openfl__$internal_stage3D__$AGALConverter_SamplerRegister;
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","SamplerRegister"];
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.parse = function(v,programType) {
	var sr = new openfl__$internal_stage3D__$AGALConverter_SamplerRegister();
	sr.programType = programType;
	var a;
	a = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 28);
	var b = new haxe__$Int64__$_$_$Int64(0,15);
	sr.f = new haxe__$Int64__$_$_$Int64(a.high & b.high,a.low & b.low).low;
	var a1;
	a1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 24);
	var b1 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.m = new haxe__$Int64__$_$_$Int64(a1.high & b1.high,a1.low & b1.low).low;
	var a2;
	a2 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 20);
	var b2 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.w = new haxe__$Int64__$_$_$Int64(a2.high & b2.high,a2.low & b2.low).low;
	var a3;
	a3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 16);
	var b3 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.s = new haxe__$Int64__$_$_$Int64(a3.high & b3.high,a3.low & b3.low).low;
	var a4;
	a4 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 12);
	var b4 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.d = new haxe__$Int64__$_$_$Int64(a4.high & b4.high,a4.low & b4.low).low;
	var a5;
	a5 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 8);
	var b5 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.t = new haxe__$Int64__$_$_$Int64(a5.high & b5.high,a5.low & b5.low).low;
	var a6;
	a6 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high);
	var b6 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.type = new haxe__$Int64__$_$_$Int64(a6.high & b6.high,a6.low & b6.low).low;
	var a7;
	a7 = new haxe__$Int64__$_$_$Int64(v.high >> 16,v.high << 16 | v.low >>> 16);
	var b7 = new haxe__$Int64__$_$_$Int64(0,255);
	sr.b = new haxe__$Int64__$_$_$Int64(a7.high & b7.high,a7.low & b7.low).low;
	var b8 = new haxe__$Int64__$_$_$Int64(0,65535);
	sr.n = new haxe__$Int64__$_$_$Int64(v.high & b8.high,v.low & b8.low).low;
	return sr;
};
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.prototype = {
	b: null
	,d: null
	,f: null
	,m: null
	,n: null
	,programType: null
	,s: null
	,t: null
	,type: null
	,w: null
	,toGLSL: function() {
		return openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
	}
	,toSamplerState: function() {
		var magFilter = 0;
		var minFilter = 0;
		var wrapModeS = 0;
		var wrapModeT = 0;
		switch(this.f) {
		case 0:
			magFilter = 9728;
			break;
		case 1:
			magFilter = 9729;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		switch(this.m) {
		case 0:
			if(this.f != 0) {
				minFilter = 9729;
			} else {
				minFilter = 9728;
			}
			break;
		case 1:
			if(this.f != 0) {
				minFilter = 9986;
			} else {
				minFilter = 9984;
			}
			break;
		case 2:
			if(this.f != 0) {
				minFilter = 9987;
			} else {
				minFilter = 9985;
			}
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		switch(this.w) {
		case 0:
			wrapModeS = 33071;
			wrapModeT = 33071;
			break;
		case 1:
			wrapModeS = 10497;
			wrapModeT = 10497;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		return new openfl__$internal_stage3D_SamplerState(minFilter,magFilter,wrapModeS,wrapModeT,(this.b << 24 >> 24) / 8.0,0.0,(this.s & 4) == 4,(this.s & 1) == 1);
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_SamplerRegister
};
var openfl__$internal_stage3D__$AGALConverter_SourceRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.SourceRegister"] = openfl__$internal_stage3D__$AGALConverter_SourceRegister;
openfl__$internal_stage3D__$AGALConverter_SourceRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","SourceRegister"];
openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse = function(v,programType,sourceMask) {
	var sr = new openfl__$internal_stage3D__$AGALConverter_SourceRegister();
	sr.programType = programType;
	var a;
	a = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 31);
	var b = new haxe__$Int64__$_$_$Int64(0,1);
	sr.d = new haxe__$Int64__$_$_$Int64(a.high & b.high,a.low & b.low).low;
	var a1;
	a1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 16);
	var b1 = new haxe__$Int64__$_$_$Int64(0,3);
	sr.q = new haxe__$Int64__$_$_$Int64(a1.high & b1.high,a1.low & b1.low).low;
	var a2;
	a2 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 8);
	var b2 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.itype = new haxe__$Int64__$_$_$Int64(a2.high & b2.high,a2.low & b2.low).low;
	var a3;
	a3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high);
	var b3 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.type = new haxe__$Int64__$_$_$Int64(a3.high & b3.high,a3.low & b3.low).low;
	var a4;
	a4 = new haxe__$Int64__$_$_$Int64(v.high >> 24,v.high << 8 | v.low >>> 24);
	var b4 = new haxe__$Int64__$_$_$Int64(0,255);
	sr.s = new haxe__$Int64__$_$_$Int64(a4.high & b4.high,a4.low & b4.low).low;
	var a5;
	a5 = new haxe__$Int64__$_$_$Int64(v.high >> 16,v.high << 16 | v.low >>> 16);
	var b5 = new haxe__$Int64__$_$_$Int64(0,255);
	sr.o = new haxe__$Int64__$_$_$Int64(a5.high & b5.high,a5.low & b5.low).low;
	var b6 = new haxe__$Int64__$_$_$Int64(0,65535);
	sr.n = new haxe__$Int64__$_$_$Int64(v.high & b6.high,v.low & b6.low).low;
	sr.sourceMask = sourceMask;
	return sr;
};
openfl__$internal_stage3D__$AGALConverter_SourceRegister.prototype = {
	d: null
	,itype: null
	,n: null
	,o: null
	,programType: null
	,q: null
	,s: null
	,sourceMask: null
	,type: null
	,toGLSL: function(emitSwizzle,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(emitSwizzle == null) {
			emitSwizzle = true;
		}
		if(this.type == 3) {
			if(this.programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
				return "gl_Position";
			} else {
				return "gl_FragColor";
			}
		}
		var fullxyzw = this.s == 228 && this.sourceMask == 15;
		var swizzle = "";
		if(this.type != 5 && !fullxyzw) {
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				if((this.sourceMask & 1 << i) != 0) {
					switch(this.s >> i * 2 & 3) {
					case 0:
						swizzle += "x";
						break;
					case 1:
						swizzle += "y";
						break;
					case 2:
						swizzle += "z";
						break;
					case 3:
						swizzle += "w";
						break;
					}
				}
			}
		}
		var str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType);
		if(this.d == 0) {
			str += this.n + offset;
		} else {
			str += this.o;
			var indexComponent = String.fromCharCode(HxOverrides.cca("x",0) + this.q);
			str += "[ int(" + (openfl__$internal_stage3D_AGALConverter.prefixFromType(this.itype,this.programType) + this.n + "." + indexComponent) + ") +" + offset + "]";
		}
		if(emitSwizzle && swizzle != "") {
			str += "." + swizzle;
		}
		return str;
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_SourceRegister
};
var openfl__$internal_stage3D_Context3DStateCache = function() {
	this._registers = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,4096);
	this.clearSettings();
};
$hxClasses["openfl._internal.stage3D.Context3DStateCache"] = openfl__$internal_stage3D_Context3DStateCache;
openfl__$internal_stage3D_Context3DStateCache.__name__ = ["openfl","_internal","stage3D","Context3DStateCache"];
openfl__$internal_stage3D_Context3DStateCache.prototype = {
	_activeTexture: null
	,_activeVertexArray: null
	,_cullingMode: null
	,_depthTestCompareMode: null
	,_depthTestEnabled: null
	,_depthTestMask: null
	,_destBlendFactor: null
	,_program: null
	,_registers: null
	,_srcBlendFactor: null
	,_viewportHeight: null
	,_viewportOriginX: null
	,_viewportOriginY: null
	,_viewportWidth: null
	,clearRegisters: function() {
		var _g1 = 0;
		while(_g1 < 4096) this._registers.set(_g1++,-999999999.0);
	}
	,clearSettings: function() {
		this._srcBlendFactor = null;
		this._destBlendFactor = null;
		this._depthTestEnabled = false;
		this._depthTestMask = false;
		this._depthTestCompareMode = null;
		this._program = null;
		this._cullingMode = null;
		this._activeTexture = -1;
		this._activeVertexArray = -1;
		this._viewportOriginX = -1;
		this._viewportOriginY = -1;
		this._viewportWidth = -1;
		this._viewportHeight = -1;
		this.clearRegisters();
	}
	,updateActiveTextureSample: function(texture) {
		this._activeTexture = texture;
		return true;
	}
	,updateActiveVertexArray: function(vertexArray) {
		this._activeVertexArray = vertexArray;
		return true;
	}
	,updateBlendDestFactor: function(factor) {
		this._destBlendFactor = factor;
		return true;
	}
	,updateBlendSrcFactor: function(factor) {
		this._srcBlendFactor = factor;
		return true;
	}
	,updateCullingMode: function(cullMode) {
		this._cullingMode = cullMode;
		return true;
	}
	,updateDepthCompareMode: function(mode) {
		this._depthTestCompareMode = mode;
		return true;
	}
	,updateDepthTestEnabled: function(test) {
		this._depthTestEnabled = test;
		return true;
	}
	,updateDepthTestMask: function(mask) {
		this._depthTestMask = mask;
		return true;
	}
	,updateProgram3D: function(program3d) {
		this._program = program3d;
		return true;
	}
	,updateRegisters: function(mTemp,startRegister,numRegisters) {
		return true;
	}
	,updateViewport: function(originX,originY,width,height) {
		this._viewportOriginX = originX;
		this._viewportOriginY = originY;
		this._viewportWidth = width;
		this._viewportHeight = height;
		return true;
	}
	,__class__: openfl__$internal_stage3D_Context3DStateCache
};
var openfl__$internal_stage3D_GLUtils = function() { };
$hxClasses["openfl._internal.stage3D.GLUtils"] = openfl__$internal_stage3D_GLUtils;
openfl__$internal_stage3D_GLUtils.__name__ = ["openfl","_internal","stage3D","GLUtils"];
openfl__$internal_stage3D_GLUtils.CheckGLError = function() {
	if(!openfl__$internal_stage3D_GLUtils.debug) {
		return;
	}
	var error = lime_graphics_opengl_GL.context.getError();
	if(error != 0) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Error calling openGL api. Error: " + error + "\n"));
	}
};
var openfl__$internal_stage3D_SamplerState = function(minFilter,magFilter,wrapModeS,wrapModeT,lodBias,maxAniso,ignoreSampler,centroid) {
	if(centroid == null) {
		centroid = false;
	}
	if(ignoreSampler == null) {
		ignoreSampler = false;
	}
	if(maxAniso == null) {
		maxAniso = 0.0;
	}
	if(lodBias == null) {
		lodBias = 0.0;
	}
	this.minFilter = minFilter;
	this.magFilter = magFilter;
	this.wrapModeS = wrapModeS;
	this.wrapModeT = wrapModeT;
	this.lodBias = lodBias;
	this.maxAniso = maxAniso;
	this.ignoreSampler = ignoreSampler;
	this.centroid = centroid;
};
$hxClasses["openfl._internal.stage3D.SamplerState"] = openfl__$internal_stage3D_SamplerState;
openfl__$internal_stage3D_SamplerState.__name__ = ["openfl","_internal","stage3D","SamplerState"];
openfl__$internal_stage3D_SamplerState.prototype = {
	centroid: null
	,ignoreSampler: null
	,lodBias: null
	,magFilter: null
	,maxAniso: null
	,minFilter: null
	,wrapModeS: null
	,wrapModeT: null
	,copyFrom: function(other) {
		if(other == null || other.ignoreSampler) {
			return;
		}
		this.minFilter = other.minFilter;
		this.magFilter = other.magFilter;
		this.wrapModeS = other.wrapModeS;
		this.wrapModeT = other.wrapModeT;
		this.lodBias = other.lodBias;
		this.maxAniso = other.maxAniso;
		this.centroid = other.centroid;
	}
	,equals: function(other) {
		if(this == other) {
			return true;
		}
		if(other == null) {
			return false;
		}
		if(this.minFilter == other.minFilter && this.magFilter == other.magFilter && this.wrapModeS == other.wrapModeS && this.wrapModeT == other.wrapModeT && this.lodBias == other.lodBias) {
			return this.maxAniso == other.maxAniso;
		} else {
			return false;
		}
	}
	,__class__: openfl__$internal_stage3D_SamplerState
};
var openfl__$internal_swf_FilterType = $hxClasses["openfl._internal.swf.FilterType"] = { __ename__ : ["openfl","_internal","swf","FilterType"], __constructs__ : ["BlurFilter","ColorMatrixFilter","DropShadowFilter","GlowFilter"] };
openfl__$internal_swf_FilterType.BlurFilter = function(blurX,blurY,quality) { var $x = ["BlurFilter",0,blurX,blurY,quality]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.ColorMatrixFilter = function(matrix) { var $x = ["ColorMatrixFilter",1,matrix]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) { var $x = ["DropShadowFilter",2,distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) { var $x = ["GlowFilter",3,color,alpha,blurX,blurY,strength,quality,inner,knockout]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
var openfl__$internal_swf_SWFLite = function() {
	this.symbols = new haxe_ds_IntMap();
};
$hxClasses["openfl._internal.swf.SWFLite"] = openfl__$internal_swf_SWFLite;
openfl__$internal_swf_SWFLite.__name__ = ["openfl","_internal","swf","SWFLite"];
openfl__$internal_swf_SWFLite.resolveClass = function(name) {
	var value = Type.resolveClass(name);
	if(value == null) {
		value = Type.resolveClass(StringTools.replace(name,"openfl._legacy","openfl"));
	}
	if(value == null) {
		value = Type.resolveClass(StringTools.replace(name,"openfl._v2","openfl"));
	}
	return value;
};
openfl__$internal_swf_SWFLite.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	if(value == null) {
		value = Type.resolveEnum(StringTools.replace(name,"openfl._legacy","openfl"));
	}
	if(value == null) {
		value = Type.resolveEnum(StringTools.replace(name,"openfl._v2","openfl"));
	}
	return value;
};
openfl__$internal_swf_SWFLite.unserialize = function(data) {
	if(data == null) {
		return null;
	}
	var unserializer = new haxe_Unserializer(data);
	unserializer.setResolver({ resolveClass : openfl__$internal_swf_SWFLite.resolveClass, resolveEnum : openfl__$internal_swf_SWFLite.resolveEnum});
	return unserializer.unserialize();
};
openfl__$internal_swf_SWFLite.prototype = {
	frameRate: null
	,library: null
	,root: null
	,symbols: null
	,createButton: function(className) {
		return null;
	}
	,createMovieClip: function(className) {
		if(className == null) {
			className = "";
		}
		if(className == "") {
			return this.root.__createObject(this);
		} else {
			var tmp = this.symbols.iterator();
			while(tmp.hasNext()) {
				var symbol = tmp.next();
				if(symbol.className == className) {
					if(js_Boot.__instanceof(symbol,openfl__$internal_symbols_SpriteSymbol)) {
						return (js_Boot.__cast(symbol , openfl__$internal_symbols_SpriteSymbol)).__createObject(this);
					}
				}
			}
		}
		return null;
	}
	,getBitmapData: function(className) {
		var tmp = this.symbols.iterator();
		while(tmp.hasNext()) {
			var symbol = tmp.next();
			if(symbol.className == className) {
				if(js_Boot.__instanceof(symbol,openfl__$internal_symbols_BitmapSymbol)) {
					return openfl_Assets.getBitmapData(symbol.path);
				}
			}
		}
		return null;
	}
	,hasSymbol: function(className) {
		var tmp = this.symbols.iterator();
		while(tmp.hasNext()) if(tmp.next().className == className) {
			return true;
		}
		return false;
	}
	,serialize: function() {
		var serializer = new haxe_Serializer();
		serializer.serialize(this);
		return serializer.toString();
	}
	,__class__: openfl__$internal_swf_SWFLite
};
var openfl__$internal_swf_SWFLiteLibrary = function(id) {
	openfl_AssetLibrary.call(this);
	this.id = id;
};
$hxClasses["openfl._internal.swf.SWFLiteLibrary"] = openfl__$internal_swf_SWFLiteLibrary;
openfl__$internal_swf_SWFLiteLibrary.__name__ = ["openfl","_internal","swf","SWFLiteLibrary"];
openfl__$internal_swf_SWFLiteLibrary.__super__ = openfl_AssetLibrary;
openfl__$internal_swf_SWFLiteLibrary.prototype = $extend(openfl_AssetLibrary.prototype,{
	id: null
	,swf: null
	,exists: function(id,type) {
		if(this.swf == null) {
			return false;
		}
		if(id == "" && type == "MOVIE_CLIP") {
			return true;
		}
		if(type == "IMAGE" || type == "MOVIE_CLIP") {
			if(this.swf != null) {
				return this.swf.hasSymbol(id);
			} else {
				return false;
			}
		}
		return false;
	}
	,getImage: function(id) {
		var tmp;
		var tmp1;
		var _this = this.cachedImages;
		if(!(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id))) {
			var _this1 = this.classTypes;
			if(__map_reserved[id] != null) {
				tmp1 = _this1.existsReserved(id);
			} else {
				tmp1 = _this1.h.hasOwnProperty(id);
			}
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			var _this2 = this.paths;
			if(__map_reserved[id] != null) {
				tmp = _this2.existsReserved(id);
			} else {
				tmp = _this2.h.hasOwnProperty(id);
			}
		} else {
			tmp = true;
		}
		if(tmp) {
			return openfl_AssetLibrary.prototype.getImage.call(this,id);
		} else if(this.swf != null) {
			return lime_graphics_Image.fromBitmapData(this.swf.getBitmapData(id));
		} else {
			return null;
		}
	}
	,getMovieClip: function(id) {
		if(this.swf != null) {
			return this.swf.createMovieClip(id);
		} else {
			return null;
		}
	}
	,isLocal: function(id,type) {
		return true;
	}
	,load: function() {
		var _gthis = this;
		if(this.id != null) {
			var _this = this.preload;
			var key = this.id;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,true);
			} else {
				_this.h[key] = true;
			}
		}
		var tmp = this.paths.keys();
		while(tmp.hasNext()) {
			var id = tmp.next();
			var _this1 = this.preload;
			if(__map_reserved[id] != null) {
				_this1.setReserved(id,true);
			} else {
				_this1.h[id] = true;
			}
		}
		return openfl_AssetLibrary.prototype.load.call(this).then(function(_) {
			if(_gthis.id != null) {
				_gthis.swf = openfl__$internal_swf_SWFLite.unserialize(_gthis.getText(_gthis.id));
				_gthis.swf.library = _gthis;
			}
			var promise = new lime_app_Promise();
			promise.complete(_gthis);
			return promise.future;
		});
	}
	,unload: function() {
		var bitmap;
		var tmp = this.swf.symbols.iterator();
		while(tmp.hasNext()) {
			var symbol = tmp.next();
			if(js_Boot.__instanceof(symbol,openfl__$internal_symbols_BitmapSymbol)) {
				bitmap = symbol;
				openfl_Assets.cache.removeBitmapData(bitmap.path);
			}
		}
	}
	,__class__: openfl__$internal_swf_SWFLiteLibrary
});
var openfl__$internal_swf_ShapeCommand = $hxClasses["openfl._internal.swf.ShapeCommand"] = { __ename__ : ["openfl","_internal","swf","ShapeCommand"], __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CurveTo","EndFill","LineStyle","LineTo","MoveTo"] };
openfl__$internal_swf_ShapeCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.BeginGradientFill = function(fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["BeginGradientFill",2,fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",3,controlX,controlY,anchorX,anchorY]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.EndFill = ["EndFill",4];
openfl__$internal_swf_ShapeCommand.EndFill.toString = $estr;
openfl__$internal_swf_ShapeCommand.EndFill.__enum__ = openfl__$internal_swf_ShapeCommand;
openfl__$internal_swf_ShapeCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",5,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.LineTo = function(x,y) { var $x = ["LineTo",6,x,y]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.MoveTo = function(x,y) { var $x = ["MoveTo",7,x,y]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
var openfl__$internal_symbols_SWFSymbol = function() {
};
$hxClasses["openfl._internal.symbols.SWFSymbol"] = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SWFSymbol.__name__ = ["openfl","_internal","symbols","SWFSymbol"];
openfl__$internal_symbols_SWFSymbol.prototype = {
	className: null
	,id: null
	,__createObject: function(swf) {
		return null;
	}
	,__class__: openfl__$internal_symbols_SWFSymbol
};
var openfl__$internal_symbols_BitmapSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.BitmapSymbol"] = openfl__$internal_symbols_BitmapSymbol;
openfl__$internal_symbols_BitmapSymbol.__name__ = ["openfl","_internal","symbols","BitmapSymbol"];
openfl__$internal_symbols_BitmapSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_BitmapSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	alpha: null
	,path: null
	,__createObject: function(swf) {
		return new openfl_display_Bitmap(this.__getBitmap(swf),1,true);
	}
	,__getBitmap: function(swf) {
		if(openfl_Assets.cache.hasBitmapData(this.path)) {
			return openfl_Assets.cache.getBitmapData(this.path);
		} else {
			var source = swf.library.getImage(this.path);
			if(source != null && this.alpha != null && this.alpha != "") {
				var alphaBitmapData = swf.library.getImage(this.alpha);
				source.copyChannel(alphaBitmapData,alphaBitmapData.get_rect(),new lime_math_Vector2(),lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.ALPHA);
				source.buffer.premultiplied = true;
				source.set_premultiplied(false);
			}
			var bitmapData = openfl_display_BitmapData.fromImage(source);
			openfl_Assets.cache.setBitmapData(this.path,bitmapData);
			return bitmapData;
		}
	}
	,__class__: openfl__$internal_symbols_BitmapSymbol
});
var openfl__$internal_symbols_ButtonSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ButtonSymbol"] = openfl__$internal_symbols_ButtonSymbol;
openfl__$internal_symbols_ButtonSymbol.__name__ = ["openfl","_internal","symbols","ButtonSymbol"];
openfl__$internal_symbols_ButtonSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ButtonSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	downState: null
	,hitState: null
	,overState: null
	,upState: null
	,__createObject: function(swf) {
		var simpleButton = null;
		openfl_display_SimpleButton.__initSWF = swf;
		openfl_display_SimpleButton.__initSymbol = this;
		if(this.className != null) {
			var symbolType = Type.resolveClass(this.className);
			if(symbolType != null) {
				simpleButton = Type.createInstance(symbolType,[]);
			}
		}
		if(simpleButton == null) {
			simpleButton = new openfl_display_SimpleButton();
		}
		return simpleButton;
	}
	,__class__: openfl__$internal_symbols_ButtonSymbol
});
var openfl__$internal_symbols_DynamicTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.DynamicTextSymbol"] = openfl__$internal_symbols_DynamicTextSymbol;
openfl__$internal_symbols_DynamicTextSymbol.__name__ = ["openfl","_internal","symbols","DynamicTextSymbol"];
openfl__$internal_symbols_DynamicTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_DynamicTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	align: null
	,border: null
	,color: null
	,fontHeight: null
	,fontID: null
	,fontName: null
	,height: null
	,html: null
	,indent: null
	,input: null
	,leading: null
	,leftMargin: null
	,multiline: null
	,password: null
	,rightMargin: null
	,selectable: null
	,text: null
	,width: null
	,wordWrap: null
	,x: null
	,y: null
	,__createObject: function(swf) {
		var textField = new openfl_text_TextField();
		textField.__fromSymbol(swf,this);
		return textField;
	}
	,__class__: openfl__$internal_symbols_DynamicTextSymbol
});
var openfl__$internal_symbols_FontSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.FontSymbol"] = openfl__$internal_symbols_FontSymbol;
openfl__$internal_symbols_FontSymbol.__name__ = ["openfl","_internal","symbols","FontSymbol"];
openfl__$internal_symbols_FontSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_FontSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	advances: null
	,bold: null
	,codes: null
	,glyphs: null
	,italic: null
	,leading: null
	,name: null
	,__class__: openfl__$internal_symbols_FontSymbol
});
var openfl__$internal_symbols_ShapeSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ShapeSymbol"] = openfl__$internal_symbols_ShapeSymbol;
openfl__$internal_symbols_ShapeSymbol.__name__ = ["openfl","_internal","symbols","ShapeSymbol"];
openfl__$internal_symbols_ShapeSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ShapeSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	commands: null
	,rendered: null
	,__createObject: function(swf) {
		var shape = new openfl_display_Shape();
		var graphics = shape.get_graphics();
		if(this.rendered != null) {
			graphics.copyFrom(this.rendered.get_graphics());
			return shape;
		}
		var _g = 0;
		var _g1 = this.commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 0:
				var smooth = command[5];
				var repeat = command[4];
				var matrix = command[3];
				var bitmap = swf.symbols.h[command[2]];
				if(bitmap != null && bitmap.path != "") {
					graphics.beginBitmapFill(bitmap.__getBitmap(swf),matrix,repeat,smooth);
				}
				break;
			case 1:
				graphics.beginFill(command[2],command[3]);
				break;
			case 2:
				graphics.beginGradientFill(command[2],command[3],command[4],command[5],command[6],command[7],command[8],command[9]);
				break;
			case 3:
				graphics.curveTo(command[2],command[3],command[4],command[5]);
				break;
			case 4:
				graphics.endFill();
				break;
			case 5:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha = command[4];
				var color = command[3];
				var thickness = command[2];
				if(thickness != null) {
					graphics.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
				} else {
					graphics.lineStyle();
				}
				break;
			case 6:
				graphics.lineTo(command[2],command[3]);
				break;
			case 7:
				graphics.moveTo(command[2],command[3]);
				break;
			}
		}
		this.commands = null;
		this.rendered = new openfl_display_Shape();
		this.rendered.get_graphics().copyFrom(shape.get_graphics());
		return shape;
	}
	,__class__: openfl__$internal_symbols_ShapeSymbol
});
var openfl__$internal_symbols_SpriteSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
	this.frames = [];
};
$hxClasses["openfl._internal.symbols.SpriteSymbol"] = openfl__$internal_symbols_SpriteSymbol;
openfl__$internal_symbols_SpriteSymbol.__name__ = ["openfl","_internal","symbols","SpriteSymbol"];
openfl__$internal_symbols_SpriteSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SpriteSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	frames: null
	,__createObject: function(swf) {
		var movieClip = null;
		openfl_display_MovieClip.__initSWF = swf;
		openfl_display_MovieClip.__initSymbol = this;
		if(this.className != null) {
			var symbolType = Type.resolveClass(this.className);
			if(symbolType != null) {
				movieClip = Type.createInstance(symbolType,[]);
			}
		}
		if(movieClip == null) {
			movieClip = new openfl_display_MovieClip();
		}
		return movieClip;
	}
	,__class__: openfl__$internal_symbols_SpriteSymbol
});
var openfl__$internal_symbols_StaticTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.StaticTextSymbol"] = openfl__$internal_symbols_StaticTextSymbol;
openfl__$internal_symbols_StaticTextSymbol.__name__ = ["openfl","_internal","symbols","StaticTextSymbol"];
openfl__$internal_symbols_StaticTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_StaticTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	matrix: null
	,records: null
	,rendered: null
	,__createObject: function(swf) {
		var shape = new openfl_display_Shape();
		var graphics = shape.get_graphics();
		if(this.rendered != null) {
			graphics.copyFrom(this.rendered.get_graphics());
			return shape;
		}
		if(this.records != null) {
			var font = null;
			var color = 16777215;
			var offsetX = this.matrix.tx;
			var offsetY = this.matrix.ty;
			var _g = 0;
			var _g1 = this.records;
			while(_g < _g1.length) {
				var record = _g1[_g];
				++_g;
				if(record.fontID != null) {
					font = swf.symbols.h[record.fontID];
				}
				if(record.offsetX != null) {
					offsetX = this.matrix.tx + record.offsetX * 0.05;
				}
				if(record.offsetY != null) {
					offsetY = this.matrix.ty + record.offsetY * 0.05;
				}
				if(record.color != null) {
					color = record.color;
				}
				if(font != null) {
					var scale = record.fontHeight / 1024 * 0.05;
					var index;
					var _g3 = 0;
					var _g2 = record.glyphs.length;
					while(_g3 < _g2) {
						var i = _g3++;
						index = record.glyphs[i];
						var _g4 = 0;
						var _g5 = font.glyphs[index];
						while(_g4 < _g5.length) {
							var command = _g5[_g4];
							++_g4;
							switch(command[1]) {
							case 1:
								graphics.beginFill(color & 16777215,(color >> 24 & 255) / 255);
								break;
							case 3:
								graphics.curveTo(command[2] * scale + offsetX,command[3] * scale + offsetY,command[4] * scale + offsetX,command[5] * scale + offsetY);
								break;
							case 4:
								graphics.endFill();
								break;
							case 5:
								var miterLimit = command[9];
								var joints = command[8];
								var caps = command[7];
								var scaleMode = command[6];
								var pixelHinting = command[5];
								var alpha = command[4];
								var color1 = command[3];
								var thickness = command[2];
								if(thickness != null) {
									graphics.lineStyle(thickness,color1,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
								} else {
									graphics.lineStyle();
								}
								break;
							case 6:
								graphics.lineTo(command[2] * scale + offsetX,command[3] * scale + offsetY);
								break;
							case 7:
								graphics.moveTo(command[2] * scale + offsetX,command[3] * scale + offsetY);
								break;
							default:
							}
						}
						offsetX += record.advances[i] * 0.05;
					}
				}
			}
		}
		this.records = null;
		this.rendered = new openfl_display_Shape();
		this.rendered.get_graphics().copyFrom(shape.get_graphics());
		return shape;
	}
	,__class__: openfl__$internal_symbols_StaticTextSymbol
});
var openfl__$internal_symbols_StaticTextRecord = function() {
};
$hxClasses["openfl._internal.symbols.StaticTextRecord"] = openfl__$internal_symbols_StaticTextRecord;
openfl__$internal_symbols_StaticTextRecord.__name__ = ["openfl","_internal","symbols","StaticTextRecord"];
openfl__$internal_symbols_StaticTextRecord.prototype = {
	advances: null
	,color: null
	,fontHeight: null
	,fontID: null
	,glyphs: null
	,offsetX: null
	,offsetY: null
	,__class__: openfl__$internal_symbols_StaticTextRecord
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.text = "";
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.wordWrap = false;
	this.lineAscents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineBreaks = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	this.lineDescents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineLeadings = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineHeights = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineWidths = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.layoutGroups = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.textFormatRanges = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	openfl__$internal_text_TextEngine.__canvas = window.document.createElement("canvas");
	openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = ["openfl","_internal","text","TextEngine"];
openfl__$internal_text_TextEngine.findFont = function(name) {
	return null;
};
openfl__$internal_text_TextEngine.getFormatHeight = function(format) {
	var ascent;
	var descent;
	var leading;
	openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(format);
	ascent = format.size;
	descent = format.size * 0.185;
	leading = format.leading;
	return ascent + descent + leading;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var font = format.italic?"italic ":"normal ";
	font += "normal ";
	font += format.bold?"bold ":"normal ";
	font += format.size + "px";
	font += "/" + (format.size + format.leading + 6) + "px ";
	var _g1 = format.font;
	var tmp;
	switch(_g1) {
	case "_sans":
		tmp = "sans-serif";
		break;
	case "_serif":
		tmp = "serif";
		break;
	case "_typewriter":
		tmp = "monospace";
		break;
	default:
		tmp = "'" + format.font + "'";
	}
	font += "" + tmp;
	return font;
};
openfl__$internal_text_TextEngine.getFontInstance = function(format) {
	return null;
};
openfl__$internal_text_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,caretIndex: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,restrict: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__cursorPosition: null
	,__cursorTimer: null
	,__hasFocus: null
	,__isKeyDown: null
	,__measuredHeight: null
	,__measuredWidth: null
	,__selectionStart: null
	,__showCursor: null
	,__textFormat: null
	,__textLayout: null
	,__texture: null
	,__cairoFont: null
	,__font: null
	,__hiddenInput: null
	,getBounds: function() {
		var padding = this.border?1:0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
	}
	,getLine: function(index) {
		if(index < 0 || index > this.lineBreaks.get_length() + 1) {
			return null;
		}
		if(this.lineBreaks.get_length() == 0) {
			return this.text;
		} else {
			return this.text.substring(index > 0?this.lineBreaks.get(index - 1):0,this.lineBreaks.get(index));
		}
	}
	,getLineBreakIndex: function(startIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		var cr = this.text.indexOf("\n",startIndex);
		var lf = this.text.indexOf("\r",startIndex);
		if(cr == -1) {
			return lf;
		}
		if(lf == -1) {
			return cr;
		}
		if(cr < lf) {
			return cr;
		} else {
			return lf;
		}
	}
	,getLineMeasurements: function() {
		this.lineAscents.set_length(0);
		this.lineDescents.set_length(0);
		this.lineLeadings.set_length(0);
		this.lineHeights.set_length(0);
		this.lineWidths.set_length(0);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.bottomScrollV = 0;
		this.maxScrollH = 0;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.push(currentLineAscent);
				this.lineDescents.push(currentLineDescent);
				this.lineLeadings.push(currentLineLeading != null?currentLineLeading:0);
				this.lineHeights.push(currentLineHeight);
				this.lineWidths.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2) {
					this.bottomScrollV++;
				}
			}
			currentLineAscent = Math.max(currentLineAscent,group.ascent);
			currentLineDescent = Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) {
				currentLineLeading = group.leading;
			} else {
				currentLineLeading = Math.max(currentLineLeading,group.leading) | 0;
			}
			currentLineHeight = Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) {
				this.textWidth = currentLineWidth;
			}
			this.textHeight = group.offsetY - 2 + group.ascent + group.descent;
		}
		this.lineAscents.push(currentLineAscent);
		this.lineDescents.push(currentLineDescent);
		this.lineLeadings.push(currentLineLeading != null?currentLineLeading:0);
		this.lineHeights.push(currentLineHeight);
		this.lineWidths.push(currentLineWidth);
		if(this.numLines == 1) {
			this.bottomScrollV = 1;
			if(currentLineLeading > 0) {
				this.textHeight += currentLineLeading;
			}
		} else if(this.textHeight <= this.height - 2) {
			this.bottomScrollV++;
		}
		if(this.autoSize != 2) {
			switch(this.autoSize) {
			case 0:case 1:case 3:
				if(!this.wordWrap) {
					this.width = this.textWidth + 4;
				}
				this.height = this.textHeight + 4;
				this.bottomScrollV = this.numLines;
				break;
			default:
			}
		}
		if(this.textWidth > this.width - 4) {
			this.maxScrollH = this.textWidth - this.width + 4 | 0;
		} else {
			this.maxScrollH = 0;
		}
		this.maxScrollV = this.numLines - this.bottomScrollV + 1;
	}
	,getLayoutGroups: function() {
		var _gthis = this;
		this.layoutGroups.set_length(0);
		var rangeIndex = -1;
		var formatRange = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var descent = 0.0;
		var layoutGroup;
		var widthValue;
		var heightValue = 0.0;
		var spaceWidth = 0.0;
		var previousSpaceIndex = 0;
		var spaceIndex = this.text.indexOf(" ");
		var breakIndex = this.getLineBreakIndex();
		var marginRight = 0.0;
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		if(-1 < _gthis.textFormatRanges.get_length() - 1) {
			rangeIndex = 0;
			formatRange = _gthis.textFormatRanges.get(0);
			currentFormat.__merge(formatRange.format);
			openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
			ascent = currentFormat.size;
			descent = currentFormat.size * 0.185;
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
			if(spaceIndex > -1) {
				spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
			}
		}
		lineFormat = formatRange.format;
		var wrap;
		var maxLoops = this.text.length;
		if(this.multiline) {
			++maxLoops;
		}
		while(textIndex < maxLoops) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
			layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,breakIndex);
			var text = this.text;
			var advances = [];
			var _g1 = textIndex;
			var _g = breakIndex;
			while(_g1 < _g) advances.push(openfl__$internal_text_TextEngine.__context.measureText(text.charAt(_g1++)).width);
			layoutGroup.advances = advances;
			layoutGroup.offsetX = offsetX;
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetY = offsetY;
			var advances1 = layoutGroup.advances;
			var width = 0.0;
			var _g2 = 0;
			while(_g2 < advances1.length) {
				var advance = advances1[_g2];
				++_g2;
				width += advance;
			}
			layoutGroup.width = width;
			layoutGroup.height = heightValue;
			this.layoutGroups.push(layoutGroup);
			offsetY += heightValue;
			offsetX = 2;
			if(this.wordWrap && layoutGroup.offsetX + layoutGroup.width > this.width - 2) {
				layoutGroup.offsetY = offsetY;
				layoutGroup.offsetX = offsetX;
				layoutGroup.lineIndex++;
				offsetY += heightValue;
				++lineIndex;
			}
			if(formatRange.end == breakIndex) {
				if(rangeIndex < _gthis.textFormatRanges.get_length() - 1) {
					++rangeIndex;
					formatRange = _gthis.textFormatRanges.get(rangeIndex);
					currentFormat.__merge(formatRange.format);
					openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
					leading = currentFormat.leading;
					heightValue = ascent + descent + leading;
					if(spaceIndex > -1) {
						spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
					}
				}
				lineFormat = formatRange.format;
			}
			textIndex = breakIndex + 1;
			breakIndex = this.getLineBreakIndex(textIndex);
			++lineIndex;
		} else if(formatRange.end >= spaceIndex && spaceIndex > -1 && textIndex < formatRange.end) {
			layoutGroup = null;
			wrap = false;
			while(textIndex != formatRange.end) {
				if(spaceIndex == -1) {
					spaceIndex = formatRange.end;
				}
				var text1 = this.text;
				var advances2 = [];
				var _g11 = textIndex;
				var _g3 = spaceIndex;
				while(_g11 < _g3) advances2.push(openfl__$internal_text_TextEngine.__context.measureText(text1.charAt(_g11++)).width);
				var width1 = 0.0;
				var _g4 = 0;
				while(_g4 < advances2.length) {
					var advance1 = advances2[_g4];
					++_g4;
					width1 += advance1;
				}
				widthValue = width1;
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) {
						wrap = true;
					}
				}
				if(wrap) {
					offsetY += heightValue;
					var i = this.layoutGroups.get_length() - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups.get(i);
						if(i > 0 && layoutGroup.startIndex > previousSpaceIndex) {
							++offsetCount;
						} else {
							break;
						}
						--i;
					}
					++lineIndex;
					offsetX = 2;
					if(offsetCount > 0) {
						var bumpX = this.layoutGroups.get(this.layoutGroups.get_length() - offsetCount).offsetX;
						var _g12 = this.layoutGroups.get_length() - offsetCount;
						var _g5 = this.layoutGroups.get_length();
						while(_g12 < _g5) {
							layoutGroup = this.layoutGroups.get(_g12++);
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
					layoutGroup.advances = advances2;
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = widthValue;
					layoutGroup.height = heightValue;
					this.layoutGroups.push(layoutGroup);
					offsetX = widthValue + spaceWidth;
					marginRight = spaceWidth;
					wrap = false;
				} else {
					if(layoutGroup != null && textIndex == spaceIndex) {
						if(formatRange.format.align != 2) {
							layoutGroup.endIndex = spaceIndex;
						}
						layoutGroup.advances.push(spaceWidth);
						marginRight += spaceWidth;
					} else if(layoutGroup == null || lineFormat.align == 2) {
						layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
						layoutGroup.advances = advances2;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
						this.layoutGroups.push(layoutGroup);
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					} else {
						layoutGroup.endIndex = spaceIndex;
						layoutGroup.advances = layoutGroup.advances.concat(advances2);
						layoutGroup.width += marginRight + widthValue;
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					}
					offsetX += widthValue + spaceWidth;
				}
				textIndex = spaceIndex + 1;
				previousSpaceIndex = spaceIndex;
				spaceIndex = this.text.indexOf(" ",previousSpaceIndex + 1);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					if(rangeIndex < _gthis.textFormatRanges.get_length() - 1) {
						++rangeIndex;
						formatRange = _gthis.textFormatRanges.get(rangeIndex);
						currentFormat.__merge(formatRange.format);
						openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
						ascent = currentFormat.size;
						descent = currentFormat.size * 0.185;
						leading = currentFormat.leading;
						heightValue = ascent + descent + leading;
						if(spaceIndex > -1) {
							spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
						}
					}
				}
				if(spaceIndex > breakIndex && breakIndex > -1 || textIndex > this.text.length || spaceIndex > formatRange.end || spaceIndex == -1 && breakIndex > -1) {
					if(spaceIndex > formatRange.end) {
						--textIndex;
					}
					break;
				}
			}
		} else {
			if(textIndex > formatRange.end) {
				break;
			} else if(textIndex < formatRange.end || textIndex == this.text.length) {
				layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,formatRange.end);
				var text2 = this.text;
				var endIndex = formatRange.end;
				var advances3 = [];
				var _g13 = textIndex;
				while(_g13 < endIndex) advances3.push(openfl__$internal_text_TextEngine.__context.measureText(text2.charAt(_g13++)).width);
				layoutGroup.advances = advances3;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				var advances4 = layoutGroup.advances;
				var width2 = 0.0;
				var _g6 = 0;
				while(_g6 < advances4.length) {
					var advance2 = advances4[_g6];
					++_g6;
					width2 += advance2;
				}
				layoutGroup.width = width2;
				layoutGroup.height = heightValue;
				this.layoutGroups.push(layoutGroup);
				offsetX += layoutGroup.width;
				textIndex = formatRange.end;
			}
			if(rangeIndex < _gthis.textFormatRanges.get_length() - 1) {
				++rangeIndex;
				formatRange = _gthis.textFormatRanges.get(rangeIndex);
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
				if(spaceIndex > -1) {
					spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
				}
			}
			if(textIndex == formatRange.end) {
				break;
			}
		}
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var group;
		var lineLength;
		var _g1 = 0;
		var _g = this.layoutGroups.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			group = this.layoutGroups.get(i);
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				switch(group.format.align) {
				case 0:
					var tmp = this.width - 4;
					if(this.lineWidths.get(lineIndex) < tmp) {
						offsetX = Math.round((this.width - 4 - this.lineWidths.get(lineIndex)) / 2);
					} else {
						offsetX = 0;
					}
					break;
				case 2:
					var tmp1 = this.width - 4;
					if(this.lineWidths.get(lineIndex) < tmp1) {
						lineLength = 1;
						var _g3 = i + 1;
						var _g2 = this.layoutGroups.get_length();
						while(_g3 < _g2) if(this.layoutGroups.get(_g3++).lineIndex == lineIndex) {
							++lineLength;
						} else {
							break;
						}
						if(lineLength > 1) {
							group = this.layoutGroups.get(i + lineLength - 1);
							var endChar = this.text.charAt(group.endIndex);
							if(group.endIndex < this.text.length && endChar != "\n" && endChar != "\r") {
								offsetX = (this.width - 4 - this.lineWidths.get(lineIndex)) / (lineLength - 1);
								var _g31 = 1;
								var _g21 = lineLength;
								while(_g31 < _g21) {
									var j = _g31++;
									this.layoutGroups.get(i + j).offsetX += offsetX * j;
								}
							}
						}
					}
					offsetX = 0;
					break;
				case 4:
					var tmp2 = this.width - 4;
					if(this.lineWidths.get(lineIndex) < tmp2) {
						offsetX = Math.round(this.width - 4 - this.lineWidths.get(lineIndex));
					} else {
						offsetX = 0;
					}
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) {
				group.offsetX += offsetX;
			}
		}
	}
	,update: function() {
		if(this.text == null || !this.multiline && StringTools.trim(this.text) == "" || this.textFormatRanges.get_length() == 0) {
			this.lineAscents.set_length(0);
			this.lineBreaks.set_length(0);
			this.lineDescents.set_length(0);
			this.lineLeadings.set_length(0);
			this.lineHeights.set_length(0);
			this.lineWidths.set_length(0);
			this.layoutGroups.set_length(0);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,__class__: openfl__$internal_text_TextEngine
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = ["openfl","_internal","text","TextFormatRange"];
openfl__$internal_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl","_internal","text","TextLayoutGroup"];
openfl__$internal_text_TextLayoutGroup.prototype = {
	advances: null
	,ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,startIndex: null
	,width: null
	,__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl__$internal_timeline_Frame = function() {
	this.objects = [];
};
$hxClasses["openfl._internal.timeline.Frame"] = openfl__$internal_timeline_Frame;
openfl__$internal_timeline_Frame.__name__ = ["openfl","_internal","timeline","Frame"];
openfl__$internal_timeline_Frame.prototype = {
	label: null
	,objects: null
	,__class__: openfl__$internal_timeline_Frame
};
var openfl__$internal_timeline_FrameObject = function() {
};
$hxClasses["openfl._internal.timeline.FrameObject"] = openfl__$internal_timeline_FrameObject;
openfl__$internal_timeline_FrameObject.__name__ = ["openfl","_internal","timeline","FrameObject"];
openfl__$internal_timeline_FrameObject.prototype = {
	clipDepth: null
	,colorTransform: null
	,depth: null
	,filters: null
	,id: null
	,matrix: null
	,name: null
	,symbol: null
	,type: null
	,visible: null
	,__class__: openfl__$internal_timeline_FrameObject
};
var openfl__$internal_timeline_FrameObjectType = $hxClasses["openfl._internal.timeline.FrameObjectType"] = { __ename__ : ["openfl","_internal","timeline","FrameObjectType"], __constructs__ : ["CREATE","UPDATE","DESTROY"] };
openfl__$internal_timeline_FrameObjectType.CREATE = ["CREATE",0];
openfl__$internal_timeline_FrameObjectType.CREATE.toString = $estr;
openfl__$internal_timeline_FrameObjectType.CREATE.__enum__ = openfl__$internal_timeline_FrameObjectType;
openfl__$internal_timeline_FrameObjectType.UPDATE = ["UPDATE",1];
openfl__$internal_timeline_FrameObjectType.UPDATE.toString = $estr;
openfl__$internal_timeline_FrameObjectType.UPDATE.__enum__ = openfl__$internal_timeline_FrameObjectType;
openfl__$internal_timeline_FrameObjectType.DESTROY = ["DESTROY",2];
openfl__$internal_timeline_FrameObjectType.DESTROY.toString = $estr;
openfl__$internal_timeline_FrameObjectType.DESTROY.__enum__ = openfl__$internal_timeline_FrameObjectType;
var openfl__$internal_utils_NullUtils = function() { };
$hxClasses["openfl._internal.utils.NullUtils"] = openfl__$internal_utils_NullUtils;
openfl__$internal_utils_NullUtils.__name__ = ["openfl","_internal","utils","NullUtils"];
var openfl__$internal_utils_PerlinNoise = function(seed,octaves,falloff) {
	if(seed == null) {
		seed = 123;
	}
	if(falloff == null) {
		falloff = .5;
	}
	this.octaves = octaves == null?4:octaves;
	this.baseFactor = 0.015625;
	this.seedOffset(seed);
	this.octFreqPers(falloff);
};
$hxClasses["openfl._internal.utils.PerlinNoise"] = openfl__$internal_utils_PerlinNoise;
openfl__$internal_utils_PerlinNoise.__name__ = ["openfl","_internal","utils","PerlinNoise"];
openfl__$internal_utils_PerlinNoise.prototype = {
	octaves: null
	,aOctFreq: null
	,aOctPers: null
	,fPersMax: null
	,iXoffset: null
	,iYoffset: null
	,iZoffset: null
	,baseFactor: null
	,fill: function(bitmap,_x,_y,_z,_) {
		var baseX = _x * this.baseFactor + this.iXoffset;
		_y = _y * this.baseFactor + this.iYoffset;
		_z = _z * this.baseFactor + this.iZoffset;
		var width = bitmap.width;
		var height = bitmap.height;
		var p = openfl__$internal_utils_PerlinNoise.P;
		var octaves = this.octaves;
		var aOctFreq = this.aOctFreq;
		var aOctPers = this.aOctPers;
		var _g1 = 0;
		while(_g1 < height) {
			var py = _g1++;
			_x = baseX;
			var _g3 = 0;
			while(_g3 < width) {
				var px = _g3++;
				var s = 0.;
				var _g5 = 0;
				while(_g5 < octaves) {
					var i = _g5++;
					var fFreq = aOctFreq[i];
					var fPers = aOctPers[i];
					var x = _x * fFreq;
					var y = _y * fFreq;
					var z = _z * fFreq;
					var xf = x - x % 1;
					var yf = y - y % 1;
					var zf = z - z % 1;
					var X = (xf | 0) & 255;
					var Y = (yf | 0) & 255;
					var Z = (zf | 0) & 255;
					x -= xf;
					y -= yf;
					z -= zf;
					var u = x * x * x * (x * (x * 6 - 15) + 10);
					var v = y * y * y * (y * (y * 6 - 15) + 10);
					var w = z * z * z * (z * (z * 6 - 15) + 10);
					var A = p[X] + Y;
					var AA = p[A] + Z;
					var AB = p[A + 1] + Z;
					var B = p[X + 1] + Y;
					var BA = p[B] + Z;
					var BB = p[B + 1] + Z;
					var x1 = x - 1;
					var y1 = y - 1;
					var z1 = z - 1;
					var hash = p[BB + 1] & 15;
					var g1 = ((hash & 1) == 0?hash < 8?x1:y1:hash < 8?-x1:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x1:z1:hash < 4?-y1:hash == 14?-x1:-z1);
					hash = p[AB + 1] & 15;
					var g2 = ((hash & 1) == 0?hash < 8?x:y1:hash < 8?-x:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x:z1:hash < 4?-y1:hash == 14?-x:-z1);
					hash = p[BA + 1] & 15;
					var g3 = ((hash & 1) == 0?hash < 8?x1:y:hash < 8?-x1:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x1:z1:hash < 4?-y:hash == 14?-x1:-z1);
					hash = p[AA + 1] & 15;
					var g4 = ((hash & 1) == 0?hash < 8?x:y:hash < 8?-x:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x:z1:hash < 4?-y:hash == 14?-x:-z1);
					hash = p[BB] & 15;
					var g5 = ((hash & 1) == 0?hash < 8?x1:y1:hash < 8?-x1:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x1:z:hash < 4?-y1:hash == 14?-x1:-z);
					hash = p[AB] & 15;
					var g6 = ((hash & 1) == 0?hash < 8?x:y1:hash < 8?-x:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x:z:hash < 4?-y1:hash == 14?-x:-z);
					hash = p[BA] & 15;
					var g7 = ((hash & 1) == 0?hash < 8?x1:y:hash < 8?-x1:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x1:z:hash < 4?-y:hash == 14?-x1:-z);
					hash = p[AA] & 15;
					var g8 = ((hash & 1) == 0?hash < 8?x:y:hash < 8?-x:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x:z:hash < 4?-y:hash == 14?-x:-z);
					g2 += u * (g1 - g2);
					g4 += u * (g3 - g4);
					g6 += u * (g5 - g6);
					g8 += u * (g7 - g8);
					g4 += v * (g2 - g4);
					g8 += v * (g6 - g8);
					s += (g8 + w * (g4 - g8)) * fPers;
				}
				var color = (s * this.fPersMax + 1) * 128 | 0;
				bitmap.setPixel32(px,py,-16777216 | color << 16 | color << 8 | color);
				_x += this.baseFactor;
			}
			_y += this.baseFactor;
		}
	}
	,octFreqPers: function(fPersistence) {
		var fFreq;
		var fPers;
		this.aOctFreq = [];
		this.aOctPers = [];
		this.fPersMax = 0;
		var _g1 = 0;
		var _g = this.octaves;
		while(_g1 < _g) {
			var i = _g1++;
			fFreq = Math.pow(2,i);
			fPers = Math.pow(fPersistence,i);
			this.fPersMax += fPers;
			this.aOctFreq.push(fFreq);
			this.aOctPers.push(fPers);
		}
		this.fPersMax = 1 / this.fPersMax;
	}
	,seedOffset: function(iSeed) {
		iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iXoffset = iSeed;
		iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iYoffset = iSeed;
		iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iZoffset = iSeed;
	}
	,__class__: openfl__$internal_utils_PerlinNoise
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl_Lib.application == null) {
		openfl_Lib.application = this;
	}
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = ["openfl","display","Application"];
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	create: function(config) {
		this.config = config;
		this.backend.create(config);
		openfl_Lib.current.__loaderInfo = openfl_display_LoaderInfo.create(null);
		openfl_Lib.current.__loaderInfo.content = openfl_Lib.current;
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) {
				this.backend.setFrameRate(config.fps);
			}
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g1 = config.windows;
				while(0 < _g1.length) {
					this.createWindow(new openfl_display_Window(_g1[0]));
					break;
				}
			}
			if(this.__preloader == null || this.__preloader.complete) {
				this.onPreloadComplete();
			}
		}
	}
	,__class__: openfl_display_Application
});
var openfl_display__$BlendMode_BlendMode_$Impl_$ = {};
$hxClasses["openfl.display._BlendMode.BlendMode_Impl_"] = openfl_display__$BlendMode_BlendMode_$Impl_$;
openfl_display__$BlendMode_BlendMode_$Impl_$.__name__ = ["openfl","display","_BlendMode","BlendMode_Impl_"];
openfl_display__$BlendMode_BlendMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "add":
		return 0;
	case "alpha":
		return 1;
	case "darken":
		return 2;
	case "difference":
		return 3;
	case "erase":
		return 4;
	case "hardlight":
		return 5;
	case "invert":
		return 6;
	case "layer":
		return 7;
	case "lighten":
		return 8;
	case "multiply":
		return 9;
	case "normal":
		return 10;
	case "overlay":
		return 11;
	case "screen":
		return 12;
	case "shader":
		return 13;
	case "subtract":
		return 14;
	default:
		return null;
	}
};
openfl_display__$BlendMode_BlendMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "add";
	case 1:
		return "alpha";
	case 2:
		return "darken";
	case 3:
		return "difference";
	case 4:
		return "erase";
	case 5:
		return "hardlight";
	case 6:
		return "invert";
	case 7:
		return "layer";
	case 8:
		return "lighten";
	case 9:
		return "multiply";
	case 10:
		return "normal";
	case 11:
		return "overlay";
	case 12:
		return "screen";
	case 13:
		return "shader";
	case 14:
		return "subtract";
	default:
		return null;
	}
};
var openfl_display__$CapsStyle_CapsStyle_$Impl_$ = {};
$hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] = openfl_display__$CapsStyle_CapsStyle_$Impl_$;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.__name__ = ["openfl","display","_CapsStyle","CapsStyle_Impl_"];
openfl_display__$CapsStyle_CapsStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "round":
		return 1;
	case "square":
		return 2;
	default:
		return null;
	}
};
openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_DirectRenderer = function(type) {
	if(type == null) {
		type = "DirectRenderer";
	}
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl_display_DirectRenderer;
openfl_display_DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl_display_DirectRenderer.__super__ = openfl_display_DisplayObject;
openfl_display_DirectRenderer.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__render: null
	,get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl_display_DirectRenderer
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
var openfl_display_FPS = function(x,y,color) {
	if(color == null) {
		color = 0;
	}
	if(y == null) {
		y = 10;
	}
	if(x == null) {
		x = 10;
	}
	openfl_text_TextField.call(this);
	this.set_x(x);
	this.set_y(y);
	this.currentFPS = 0;
	this.set_selectable(false);
	this.mouseEnabled = false;
	this.set_defaultTextFormat(new openfl_text_TextFormat("_sans",12,color));
	this.set_text("FPS: ");
	this.cacheCount = 0;
	this.times = [];
	this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
};
$hxClasses["openfl.display.FPS"] = openfl_display_FPS;
openfl_display_FPS.__name__ = ["openfl","display","FPS"];
openfl_display_FPS.__super__ = openfl_text_TextField;
openfl_display_FPS.prototype = $extend(openfl_text_TextField.prototype,{
	currentFPS: null
	,cacheCount: null
	,times: null
	,this_onEnterFrame: function(event) {
		var currentTime = new Date().getTime() / 1000;
		this.times.push(currentTime);
		while(this.times[0] < currentTime - 1) this.times.shift();
		var currentCount = this.times.length;
		this.currentFPS = Math.round((currentCount + this.cacheCount) / 2);
		if(currentCount != this.cacheCount) {
			this.set_text("FPS: " + this.currentFPS);
		}
		this.cacheCount = currentCount;
	}
	,__class__: openfl_display_FPS
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__frame: null
	,__name: null
	,get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
var openfl_display__$GradientType_GradientType_$Impl_$ = {};
$hxClasses["openfl.display._GradientType.GradientType_Impl_"] = openfl_display__$GradientType_GradientType_$Impl_$;
openfl_display__$GradientType_GradientType_$Impl_$.__name__ = ["openfl","display","_GradientType","GradientType_Impl_"];
openfl_display__$GradientType_GradientType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linear":
		return 0;
	case "radial":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GradientType_GradientType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linear";
	case 1:
		return "radial";
	default:
		return null;
	}
};
var openfl_display_Graphics = function(owner) {
	this.__dirty = true;
	this.__owner = owner;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__width = 0;
	this.__height = 0;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	__bounds: null
	,__commands: null
	,__dirty: null
	,__height: null
	,__managed: null
	,__positionX: null
	,__positionY: null
	,__renderTransform: null
	,__strokePadding: null
	,__transformDirty: null
	,__visible: null
	,__owner: null
	,__width: null
	,__worldTransform: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.beginBitmapFill(bitmap,matrix != null?matrix.clone():null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) {
			this.__visible = true;
		}
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds != null?sourceGraphics.__bounds.clone():null;
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix1;
		var iy1;
		var ix2;
		var iy2;
		ix1 = anchorX;
		ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) {
				ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			}
			if(t2 > 0 && t2 < 1) {
				ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
			}
		}
		iy1 = anchorY;
		iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v1 = controlY1 - this.__positionX;
			var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t11 = (-u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			var t21 = (-u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			if(t11 > 0 && t11 < 1) {
				iy1 = this.__calculateBezierCubicPoint(t11,this.__positionX,controlY1,controlY2,anchorY);
			}
			if(t21 > 0 && t21 < 1) {
				iy2 = this.__calculateBezierCubicPoint(t21,this.__positionX,controlY1,controlY2,anchorY);
			}
		}
		this.__inflateBounds(ix1 - this.__strokePadding,iy1 - this.__strokePadding);
		this.__inflateBounds(ix1 + this.__strokePadding,iy1 + this.__strokePadding);
		this.__inflateBounds(ix2 - this.__strokePadding,iy2 - this.__strokePadding);
		this.__inflateBounds(ix2 + this.__strokePadding,iy2 + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) {
			ix = anchorX;
		} else {
			ix = this.__calculateBezierQuadPoint((this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX),this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) {
			iy = anchorY;
		} else {
			iy = this.__calculateBezierQuadPoint((this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY),this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) {
			return;
		}
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawEllipse(x,y,width,height);
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		var fill;
		var bitmapFill;
		var gradientFill;
		var stroke;
		var path;
		var _g = 0;
		while(_g < graphicsData.get_length()) {
			var graphics = graphicsData.get(_g);
			++_g;
			if(js_Boot.__instanceof(graphics,openfl_display_GraphicsSolidFill)) {
				fill = graphics;
				this.beginFill(fill.color,fill.alpha);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsBitmapFill)) {
				bitmapFill = graphics;
				this.beginBitmapFill(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsGradientFill)) {
				gradientFill = graphics;
				this.beginGradientFill(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsStroke)) {
				stroke = graphics;
				if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsSolidFill)) {
					fill = stroke.fill;
					this.lineStyle(stroke.thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
				} else {
					this.lineStyle(stroke.thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
					if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsBitmapFill)) {
						bitmapFill = stroke.fill;
						this.lineBitmapStyle(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
					} else if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsGradientFill)) {
						gradientFill = stroke.fill;
						this.lineGradientStyle(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
					}
				}
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsPath)) {
				path = graphics;
				this.drawPath(path.commands,path.data,path.winding);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsEndFill)) {
				this.endFill();
			}
		}
	}
	,drawPath: function(commands,data,winding) {
		if(winding == null) {
			winding = 0;
		}
		var dataIndex = 0;
		var _g = 0;
		try {
			while(_g < commands.get_length()) {
				var command = commands.get(_g);
				++_g;
				switch(command) {
				case 1:
					this.moveTo(data.get(dataIndex),data.get(dataIndex + 1));
					dataIndex += 2;
					break;
				case 2:
					this.lineTo(data.get(dataIndex),data.get(dataIndex + 1));
					dataIndex += 2;
					break;
				case 3:
					this.curveTo(data.get(dataIndex),data.get(dataIndex + 1),data.get(dataIndex + 2),data.get(dataIndex + 3));
					dataIndex += 4;
					break;
				case 4:
					this.moveTo(data.get(dataIndex + 2),data.get(dataIndex + 3));
					throw "__break__";
					break;
				case 5:
					this.lineTo(data.get(dataIndex + 2),data.get(dataIndex + 3));
					throw "__break__";
					break;
				case 6:
					this.cubicCurveTo(data.get(dataIndex),data.get(dataIndex + 1),data.get(dataIndex + 2),data.get(dataIndex + 3),data.get(dataIndex + 4),data.get(dataIndex + 5));
					dataIndex += 6;
					break;
				default:
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		openfl_Lib.notImplemented({ fileName : "Graphics.hx", lineNumber : 450, className : "openfl.display.Graphics", methodName : "drawRoundRectComplex"});
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		if(culling == null) {
			culling = 1;
		}
		var vlen = vertices.get_length() / 2 | 0;
		if(culling == null) {
			culling = 1;
		}
		if(indices == null) {
			if(vlen % 3 != 0) {
				throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			}
			indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
			var _g1 = 0;
			while(_g1 < vlen) indices.push(_g1++);
		}
		this.__inflateBounds(0,0);
		var tmpx = -Infinity;
		var tmpy = -Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g11 = 0;
		while(_g11 < vlen) {
			var i = _g11++;
			tmpx = vertices.get(i * 2);
			tmpy = vertices.get(i * 2 + 1);
			if(maxX < tmpx) {
				maxX = tmpx;
			}
			if(maxY < tmpy) {
				maxY = tmpy;
			}
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawTriangles(vertices,indices,uvtData,culling);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.lineBitmapStyle(bitmap,matrix != null?matrix.clone():null,repeat,smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) {
			miterLimit = 3;
		}
		if(scaleMode == null) {
			scaleMode = 2;
		}
		if(pixelHinting == null) {
			pixelHinting = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) {
					this.__strokePadding = thickness;
				}
			} else if(thickness / 2 > this.__strokePadding) {
				this.__strokePadding = thickness / 2;
			}
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) {
			this.__visible = true;
		}
	}
	,lineTo: function(x,y) {
		if(!isFinite(x) || !isFinite(y)) {
			return;
		}
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,readGraphicsData: function(recurse) {
		if(recurse == null) {
			recurse = true;
		}
		var graphicsData = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this.__owner.__readGraphicsData(graphicsData,recurse);
		return graphicsData;
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__cleanup: function() {
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
		}
		this.__bitmap = null;
		this.__canvas = null;
		this.__context = null;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) {
			return;
		}
		var bounds = openfl_geom_Rectangle.__temp;
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) {
			return false;
		}
		var norm = matrix.a * matrix.d - matrix.b * matrix.c;
		var px = norm == 0?-matrix.tx:1.0 / norm * (matrix.c * (matrix.ty - y) + matrix.d * (x - matrix.tx));
		var norm1 = matrix.a * matrix.d - matrix.b * matrix.c;
		var py = norm1 == 0?-matrix.ty:1.0 / norm1 * (matrix.a * (y - matrix.ty) + matrix.b * (matrix.tx - x));
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) {
				return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			}
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) {
			this.__bounds.width = x - this.__bounds.x;
		}
		if(y > this.__bounds.y + this.__bounds.height) {
			this.__bounds.height = y - this.__bounds.y;
		}
	}
	,__readGraphicsData: function(graphicsData) {
		var data = new openfl__$internal_renderer_DrawCommandReader(this.__commands);
		var path;
		var _g = 0;
		var _g1 = this.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c = data.readBeginBitmapFill();
				graphicsData.push(new openfl_display_GraphicsBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c)));
				break;
			case 1:
				graphicsData.push(new openfl_display_GraphicsSolidFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(data.readBeginFill()),1));
				break;
			case 2:
				var c1 = data.readBeginGradientFill();
				graphicsData.push(new openfl_display_GraphicsGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1)));
				break;
			case 3:
				data.readCubicCurveTo();
				break;
			case 4:
				var c2 = data.readCurveTo();
				path = new openfl_display_GraphicsPath();
				path.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c2),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c2),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c2),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c2));
				graphicsData.push(path);
				break;
			case 5:
				data.readDrawCircle();
				break;
			case 6:
				data.readDrawEllipse();
				break;
			case 7:
				data.readDrawEllipse();
				break;
			case 8:
				data.readDrawEllipse();
				break;
			case 11:
				data.readEndFill();
				graphicsData.push(new openfl_display_GraphicsEndFill());
				break;
			case 12:
				data.readLineBitmapStyle();
				break;
			case 13:
				data.readLineGradientStyle();
				break;
			case 14:
				var c3 = data.readLineStyle();
				graphicsData.push(new openfl_display_GraphicsStroke(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c3),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c3),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c3),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c3),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c3),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c3)));
				break;
			case 15:
				var c4 = data.readLineTo();
				path = new openfl_display_GraphicsPath();
				path.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c4),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c4));
				graphicsData.push(path);
				break;
			case 16:
				var c5 = data.readMoveTo();
				path = new openfl_display_GraphicsPath();
				path.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c5));
				graphicsData.push(path);
				break;
			default:
				data.skip(type);
			}
		}
	}
	,__update: function() {
		if(this.__bounds == null || this.__bounds.width <= 0 || this.__bounds.height <= 0) {
			return;
		}
		var parentTransform = this.__owner.__renderTransform;
		var scaleX = 1.0;
		var scaleY = 1.0;
		if(parentTransform != null) {
			if(parentTransform.b == 0) {
				scaleX = Math.abs(parentTransform.a);
			} else {
				scaleX = Math.sqrt(parentTransform.a * parentTransform.a + parentTransform.b * parentTransform.b);
			}
			if(parentTransform.c == 0) {
				scaleY = Math.abs(parentTransform.d);
			} else {
				scaleY = Math.sqrt(parentTransform.c * parentTransform.c + parentTransform.d * parentTransform.d);
			}
		}
		var width = this.__bounds.width * scaleX;
		var height = this.__bounds.height * scaleY;
		if(Math.abs(width - this.__width) > 2 || Math.abs(height - this.__height) > 2) {
			this.set___dirty(true);
		}
		this.__width = Math.floor(width);
		this.__height = Math.floor(height);
		if(this.__width <= 0 || this.__height <= 0) {
			return;
		}
		this.__renderTransform.a = this.__width / this.__bounds.width;
		this.__renderTransform.d = this.__height / this.__bounds.height;
		this.__worldTransform.a = 1 / this.__renderTransform.a;
		this.__worldTransform.b = 0;
		this.__worldTransform.c = 0;
		this.__worldTransform.d = 1 / this.__renderTransform.d;
		this.__worldTransform.tx = this.__bounds.x;
		this.__worldTransform.ty = this.__bounds.y;
		this.__worldTransform.concat(this.__owner.__renderTransform);
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) {
			var _this = this.__owner;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_IGraphicsFill = function() { };
$hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
openfl_display_IGraphicsFill.__name__ = ["openfl","display","IGraphicsFill"];
openfl_display_IGraphicsFill.prototype = {
	__graphicsFillType: null
	,__class__: openfl_display_IGraphicsFill
};
var openfl_display_IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl_display_IGraphicsData.prototype = {
	__graphicsDataType: null
	,__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsBitmapFill = function(bitmapData,matrix,repeat,smooth) {
	if(smooth == null) {
		smooth = false;
	}
	if(repeat == null) {
		repeat = true;
	}
	this.bitmapData = bitmapData;
	this.matrix = matrix;
	this.repeat = repeat;
	this.smooth = smooth;
	this.__graphicsDataType = openfl_display_GraphicsDataType.BITMAP;
	this.__graphicsFillType = openfl_display_GraphicsFillType.BITMAP_FILL;
};
$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
openfl_display_GraphicsBitmapFill.__name__ = ["openfl","display","GraphicsBitmapFill"];
openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsBitmapFill.prototype = {
	bitmapData: null
	,matrix: null
	,repeat: null
	,smooth: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsBitmapFill
};
var openfl_display_GraphicsEndFill = function() {
	this.__graphicsDataType = openfl_display_GraphicsDataType.END;
	this.__graphicsFillType = openfl_display_GraphicsFillType.END_FILL;
};
$hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
openfl_display_GraphicsEndFill.__name__ = ["openfl","display","GraphicsEndFill"];
openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsEndFill.prototype = {
	__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsEndFill
};
var openfl_display_GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) {
		focalPointRatio = 0;
	}
	if(type == null) {
		type = 0;
	}
	if(spreadMethod == null) {
		spreadMethod = 0;
	}
	if(interpolationMethod == null) {
		interpolationMethod = 1;
	}
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = openfl_display_GraphicsDataType.GRADIENT;
	this.__graphicsFillType = openfl_display_GraphicsFillType.GRADIENT_FILL;
};
$hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
openfl_display_GraphicsGradientFill.__name__ = ["openfl","display","GraphicsGradientFill"];
openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsGradientFill.prototype = {
	alphas: null
	,colors: null
	,focalPointRatio: null
	,interpolationMethod: null
	,matrix: null
	,ratios: null
	,spreadMethod: null
	,type: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsGradientFill
};
var openfl_display_IGraphicsPath = function() { };
$hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
openfl_display_IGraphicsPath.__name__ = ["openfl","display","IGraphicsPath"];
var openfl_display_GraphicsPath = function(commands,data,winding) {
	if(winding == null) {
		winding = 0;
	}
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = openfl_display_GraphicsDataType.PATH;
};
$hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
openfl_display_GraphicsPath.__name__ = ["openfl","display","GraphicsPath"];
openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsPath.prototype = {
	commands: null
	,data: null
	,winding: null
	,__graphicsDataType: null
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands != null && this.data != null) {
			this.commands.push(3);
			this.data.push(anchorX);
			this.data.push(anchorY);
			this.data.push(controlX);
			this.data.push(controlY);
		}
	}
	,lineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			this.commands.push(2);
			this.data.push(x);
			this.data.push(y);
		}
	}
	,moveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			this.commands.push(1);
			this.data.push(x);
			this.data.push(y);
		}
	}
	,wideLineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			this.commands.push(2);
			this.data.push(x);
			this.data.push(y);
		}
	}
	,wideMoveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			this.commands.push(1);
			this.data.push(x);
			this.data.push(y);
		}
	}
	,__class__: openfl_display_GraphicsPath
};
var openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$ = {};
$hxClasses["openfl.display._GraphicsPathWinding.GraphicsPathWinding_Impl_"] = openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.__name__ = ["openfl","display","_GraphicsPathWinding","GraphicsPathWinding_Impl_"];
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.fromString = function(value) {
	switch(value) {
	case "evenOdd":
		return 0;
	case "nonZero":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "evenOdd";
	case 1:
		return "nonZero";
	default:
		return null;
	}
};
var openfl_display_GraphicsSolidFill = function(color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = openfl_display_GraphicsDataType.SOLID;
	this.__graphicsFillType = openfl_display_GraphicsFillType.SOLID_FILL;
};
$hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
openfl_display_GraphicsSolidFill.__name__ = ["openfl","display","GraphicsSolidFill"];
openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsSolidFill.prototype = {
	alpha: null
	,color: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsSolidFill
};
var openfl_display_IGraphicsStroke = function() { };
$hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
openfl_display_IGraphicsStroke.__name__ = ["openfl","display","IGraphicsStroke"];
var openfl_display_GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) {
		miterLimit = 3;
	}
	if(pixelHinting == null) {
		pixelHinting = false;
	}
	if(thickness == null) {
		thickness = 0.0;
	}
	this.caps = caps != null?caps:0;
	this.fill = fill;
	this.joints = joints != null?joints:2;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	this.scaleMode = scaleMode != null?scaleMode:2;
	this.thickness = thickness;
	this.__graphicsDataType = openfl_display_GraphicsDataType.STROKE;
};
$hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
openfl_display_GraphicsStroke.__name__ = ["openfl","display","GraphicsStroke"];
openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke,openfl_display_IGraphicsData];
openfl_display_GraphicsStroke.prototype = {
	caps: null
	,fill: null
	,joints: null
	,miterLimit: null
	,pixelHinting: null
	,scaleMode: null
	,thickness: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsStroke
};
var openfl_display_GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : ["openfl","display","GraphicsDataType"], __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END"] };
openfl_display_GraphicsDataType.STROKE = ["STROKE",0];
openfl_display_GraphicsDataType.STROKE.toString = $estr;
openfl_display_GraphicsDataType.STROKE.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.SOLID = ["SOLID",1];
openfl_display_GraphicsDataType.SOLID.toString = $estr;
openfl_display_GraphicsDataType.SOLID.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl_display_GraphicsDataType.GRADIENT.toString = $estr;
openfl_display_GraphicsDataType.GRADIENT.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.PATH = ["PATH",3];
openfl_display_GraphicsDataType.PATH.toString = $estr;
openfl_display_GraphicsDataType.PATH.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.BITMAP = ["BITMAP",4];
openfl_display_GraphicsDataType.BITMAP.toString = $estr;
openfl_display_GraphicsDataType.BITMAP.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.END = ["END",5];
openfl_display_GraphicsDataType.END.toString = $estr;
openfl_display_GraphicsDataType.END.__enum__ = openfl_display_GraphicsDataType;
var openfl_display_GraphicsFillType = $hxClasses["openfl.display.GraphicsFillType"] = { __ename__ : ["openfl","display","GraphicsFillType"], __constructs__ : ["SOLID_FILL","GRADIENT_FILL","BITMAP_FILL","END_FILL"] };
openfl_display_GraphicsFillType.SOLID_FILL = ["SOLID_FILL",0];
openfl_display_GraphicsFillType.SOLID_FILL.toString = $estr;
openfl_display_GraphicsFillType.SOLID_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL",1];
openfl_display_GraphicsFillType.GRADIENT_FILL.toString = $estr;
openfl_display_GraphicsFillType.GRADIENT_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.BITMAP_FILL = ["BITMAP_FILL",2];
openfl_display_GraphicsFillType.BITMAP_FILL.toString = $estr;
openfl_display_GraphicsFillType.BITMAP_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.END_FILL = ["END_FILL",3];
openfl_display_GraphicsFillType.END_FILL.toString = $estr;
openfl_display_GraphicsFillType.END_FILL.__enum__ = openfl_display_GraphicsFillType;
var openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$ = {};
$hxClasses["openfl.display._InterpolationMethod.InterpolationMethod_Impl_"] = openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.__name__ = ["openfl","display","_InterpolationMethod","InterpolationMethod_Impl_"];
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linearRGB":
		return 0;
	case "rgb":
		return 1;
	default:
		return null;
	}
};
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linearRGB";
	case 1:
		return "rgb";
	default:
		return null;
	}
};
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) {
		quality = 80;
	}
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl_display_JPEGEncoderOptions.prototype = {
	quality: null
	,__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display__$JointStyle_JointStyle_$Impl_$ = {};
$hxClasses["openfl.display._JointStyle.JointStyle_Impl_"] = openfl_display__$JointStyle_JointStyle_$Impl_$;
openfl_display__$JointStyle_JointStyle_$Impl_$.__name__ = ["openfl","display","_JointStyle","JointStyle_Impl_"];
openfl_display__$JointStyle_JointStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bevel":
		return 0;
	case "miter":
		return 1;
	case "round":
		return 2;
	default:
		return null;
	}
};
openfl_display__$JointStyle_JointStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display__$LineScaleMode_LineScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._LineScaleMode.LineScaleMode_Impl_"] = openfl_display__$LineScaleMode_LineScaleMode_$Impl_$;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.__name__ = ["openfl","display","_LineScaleMode","LineScaleMode_Impl_"];
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "horizontal":
		return 0;
	case "none":
		return 1;
	case "normal":
		return 2;
	case "vertical":
		return 3;
	default:
		return null;
	}
};
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "horizontal";
	case 1:
		return "none";
	case 2:
		return "normal";
	case 3:
		return "vertical";
	default:
		return null;
	}
};
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	content: null
	,contentLoaderInfo: null
	,close: function() {
		openfl_Lib.notImplemented({ fileName : "Loader.hx", lineNumber : 48, className : "openfl.display.Loader", methodName : "close"});
	}
	,load: function(request,context) {
		var _gthis = this;
		var extension = "";
		var path = request.url;
		var queryIndex = path.indexOf("?");
		if(queryIndex > -1) {
			path = path.substring(0,queryIndex);
		}
		var extIndex = path.lastIndexOf(".");
		if(extIndex > -1) {
			extension = path.substring(extIndex + 1);
		}
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null || request.contentType == "") {
			var tmp;
			switch(extension) {
			case "gif":
				tmp = "image/gif";
				break;
			case "jpeg":case "jpg":
				tmp = "image/jpeg";
				break;
			case "js":
				tmp = "application/javascript";
				break;
			case "json":
				tmp = "application/json";
				break;
			case "png":
				tmp = "image/png";
				break;
			case "swf":
				tmp = "application/x-shockwave-flash";
				break;
			default:
				tmp = "application/x-www-form-urlencoded";
			}
			this.contentLoaderInfo.contentType = tmp;
		} else {
			this.contentLoaderInfo.contentType = request.contentType;
		}
		if(this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1) {
			var loader = new openfl_net_URLLoader();
			loader.addEventListener("complete",function(e) {
				_gthis.contentLoaderInfo.content = new openfl_display_Sprite();
				_gthis.addChild(_gthis.contentLoaderInfo.content);
				eval("(function () {" + Std.string(loader.data) + "})()");
				var event = new openfl_events_Event("complete");
				event.target = _gthis.contentLoaderInfo;
				event.currentTarget = _gthis.contentLoaderInfo;
				_gthis.contentLoaderInfo.dispatchEvent(event);
			});
			loader.addEventListener("ioError",function(e1) {
				_gthis.BitmapData_onError(e1);
			});
			loader.dataFormat = 1;
			loader.load(request);
			return;
		} else if(this.contentLoaderInfo.contentType.indexOf("/json") > -1) {
			var loader1 = new openfl_net_URLLoader();
			loader1.addEventListener("complete",function(e2) {
				var info = JSON.parse(loader1.data);
				var library = Type.createInstance(Type.resolveClass(info.type),[null]);
				openfl_Assets.registerLibrary(info.name,library);
				var manifest = haxe_Unserializer.run(info.manifest);
				var assetType;
				var basePath = request.url;
				basePath = StringTools.replace(basePath,"\\","/");
				var parts = basePath.split("/");
				parts.pop();
				parts.pop();
				basePath = parts.join("/");
				var libraryData = null;
				var loaded = -1;
				var total = 0;
				var checkLoaded = function() {
					if(loaded >= total) {
						library.swf = openfl__$internal_swf_SWFLite.unserialize(libraryData);
						_gthis.contentLoaderInfo.content = library.getMovieClip("");
						_gthis.addChild(_gthis.contentLoaderInfo.content);
						var event1 = new openfl_events_Event("complete");
						event1.target = _gthis.contentLoaderInfo;
						event1.currentTarget = _gthis.contentLoaderInfo;
						_gthis.contentLoaderInfo.dispatchEvent(event1);
					}
				};
				var _g = 0;
				while(_g < manifest.length) {
					var asset = [manifest[_g]];
					++_g;
					if(!openfl_Assets.exists(asset[0].id)) {
						assetType = asset[0].type;
						switch(assetType) {
						case "IMAGE":
							++total;
							openfl_display_BitmapData.fromFile(basePath + "/" + Std.string(asset[0].path),(function(asset1) {
								return function(bitmapData) {
									++loaded;
									checkLoaded();
									openfl_Assets.cache.setBitmapData(asset1[0].path,bitmapData);
								};
							})(asset),(function() {
								return function() {
									_gthis.BitmapData_onError(null);
								};
							})());
							break;
						case "TEXT":
							++total;
							var textLoader = [new openfl_net_URLLoader()];
							var tmp1 = (function(textLoader1) {
								return function(_) {
									libraryData = textLoader1[0].data;
									++loaded;
									checkLoaded();
								};
							})(textLoader);
							textLoader[0].addEventListener("complete",tmp1);
							var tmp2 = (function() {
								return function(e3) {
									_gthis.BitmapData_onError(e3);
								};
							})();
							textLoader[0].addEventListener("ioError",tmp2);
							textLoader[0].dataFormat = 1;
							var tmp3 = basePath + "/" + Std.string(asset[0].path);
							textLoader[0].load(new openfl_net_URLRequest(tmp3));
							break;
						default:
						}
					}
				}
				++loaded;
				checkLoaded();
			});
			loader1.addEventListener("ioError",function(e4) {
				_gthis.BitmapData_onError(e4);
			});
			loader1.dataFormat = 1;
			loader1.load(request);
		}
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_1) {
			openfl_display_BitmapData.fromFile(path,function(bitmapData1) {
				worker.sendComplete(bitmapData1);
			},function() {
				worker.sendError("ioError");
			});
		});
		worker.onError.add($bind(this,this.BitmapData_onError));
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,loadBytes: function(buffer,context) {
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_) {
			openfl_display_BitmapData.fromBytes(buffer,null,function(bitmapData) {
				worker.sendComplete(bitmapData);
			});
		});
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl_events_Event("unload");
			event.currentTarget = this;
			this.__dispatchEvent(event);
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) {
			gc = true;
		}
		openfl_Lib.notImplemented({ fileName : "Loader.hx", lineNumber : 321, className : "openfl.display.Loader", methodName : "unloadAndStop"});
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl_display_Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.content);
		var event = new openfl_events_Event("complete");
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function(_) {
		var event = new openfl_events_IOErrorEvent("ioError");
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) {
		loaderInfo.loader = loader;
	} else {
		loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	}
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,contentType: null
	,frameRate: null
	,height: null
	,loader: null
	,loaderURL: null
	,parameters: null
	,parentAllowsChild: null
	,sameDomain: null
	,sharedEvents: null
	,uncaughtErrorEvents: null
	,url: null
	,width: null
	,__completed: null
	,__complete: function() {
		if(!this.__completed) {
			if(this.bytesLoaded < this.bytesTotal) {
				this.bytesLoaded = this.bytesTotal;
			}
			this.__update(this.bytesLoaded,this.bytesTotal);
			this.__completed = true;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__update: function(bytesLoaded,bytesTotal) {
		this.bytesLoaded = bytesLoaded;
		this.bytesTotal = bytesTotal;
		this.dispatchEvent(new openfl_events_ProgressEvent("progress",false,false,bytesLoaded,bytesTotal));
	}
	,__class__: openfl_display_LoaderInfo
});
var openfl_display__$MovieClip_TimelineObject = function(id,depth,displayObject) {
	this.id = id;
	this.depth = depth;
	this.displayObject = displayObject;
};
$hxClasses["openfl.display._MovieClip.TimelineObject"] = openfl_display__$MovieClip_TimelineObject;
openfl_display__$MovieClip_TimelineObject.__name__ = ["openfl","display","_MovieClip","TimelineObject"];
openfl_display__$MovieClip_TimelineObject.prototype = {
	depth: null
	,displayObject: null
	,id: null
	,__class__: openfl_display__$MovieClip_TimelineObject
};
var openfl_display_OpenGLView = function() {
	openfl_display_DirectRenderer.call(this,"OpenGLView");
};
$hxClasses["openfl.display.OpenGLView"] = openfl_display_OpenGLView;
openfl_display_OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl_display_OpenGLView.__properties__ = {get_isSupported:"get_isSupported"}
openfl_display_OpenGLView.get_isSupported = function() {
	if(!window.WebGLRenderingContext) {
		return false;
	}
	if(lime_graphics_opengl_GL.context != null) {
		return true;
	} else {
		var canvas = window.document.createElement("canvas");
		var context = canvas.getContext("webgl");
		if(context == null) {
			context = canvas.getContext("experimental-webgl");
		}
		return context != null;
	}
};
openfl_display_OpenGLView.__super__ = openfl_display_DirectRenderer;
openfl_display_OpenGLView.prototype = $extend(openfl_display_DirectRenderer.prototype,{
	__added: null
	,__initialized: null
	,__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.__scrollRect == null) {
					rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight);
				} else {
					rect = new openfl_geom_Rectangle(this.get_x() + this.__scrollRect.x,this.get_y() + this.__scrollRect.y,this.__scrollRect.width,this.__scrollRect.height);
				}
				if(this.__render != null) {
					this.__render(rect);
				}
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.__scrollRect == null) {
				rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight);
			} else {
				rect = new openfl_geom_Rectangle(this.get_x() + this.__scrollRect.x,this.get_y() + this.__scrollRect.y,this.__scrollRect.width,this.__scrollRect.height);
			}
			renderSession.shaderManager.setShader(null);
			renderSession.blendModeManager.setBlendMode(null);
			if(this.__render != null) {
				this.__render(rect);
			}
		}
	}
	,__class__: openfl_display_OpenGLView
});
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) {
		fastCompression = false;
	}
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl_display_PNGEncoderOptions.prototype = {
	fastCompression: null
	,__class__: openfl_display_PNGEncoderOptions
};
var openfl_display__$PixelSnapping_PixelSnapping_$Impl_$ = {};
$hxClasses["openfl.display._PixelSnapping.PixelSnapping_Impl_"] = openfl_display__$PixelSnapping_PixelSnapping_$Impl_$;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.__name__ = ["openfl","display","_PixelSnapping","PixelSnapping_Impl_"];
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "auto":
		return 1;
	case "never":
		return 2;
	default:
		return null;
	}
};
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "always";
	case 1:
		return "auto";
	case 2:
		return "never";
	default:
		return null;
	}
};
var openfl_display_Preloader = function(display) {
	lime_app_Preloader.call(this);
	this.display = display;
	if(display != null) {
		display.addEventListener("complete",$bind(this,this.display_onComplete),false,-1000);
		openfl_Lib.current.addChild(display);
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.__super__ = lime_app_Preloader;
openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype,{
	display: null
	,ready: null
	,start: function() {
		this.ready = true;
		openfl_Lib.current.get_loaderInfo().__complete();
		if(this.display != null) {
			this.display.dispatchEvent(new openfl_events_Event("complete",true,true));
		} else {
			lime_app_Preloader.prototype.start.call(this);
		}
	}
	,update: function(loaded,total) {
		openfl_Lib.current.get_loaderInfo().__update(loaded,total);
		if(this.display != null) {
			this.display.dispatchEvent(new openfl_events_ProgressEvent("progress",true,true,loaded,total));
		}
	}
	,display_onComplete: function(event) {
		if(event.isDefaultPrevented()) {
			return;
		}
		if(this.display != null) {
			this.display.removeEventListener("complete",$bind(this,this.display_onComplete));
			if(this.display.parent == openfl_Lib.current) {
				openfl_Lib.current.removeChild(this.display);
			}
			openfl_Lib.current.stage.set_focus(null);
			this.display = null;
		}
		if(this.ready) {
			lime_app_Preloader.prototype.start.call(this);
		}
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_Shader = function(code) {
	this.__data = new openfl_display_ShaderData(null);
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color * vAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}";
	}
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
	this.__numPasses = 1;
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = ["openfl","display","Shader"];
openfl_display_Shader.prototype = {
	byteCode: null
	,glProgram: null
	,precisionHint: null
	,gl: null
	,__data: null
	,__glFragmentSource: null
	,__glSourceDirty: null
	,__glVertexSource: null
	,__isUniform: null
	,__inputBitmapData: null
	,__numPasses: null
	,__paramBool: null
	,__paramFloat: null
	,__paramInt: null
	,__uniformMatrix2: null
	,__uniformMatrix3: null
	,__uniformMatrix4: null
	,__disable: function() {
		if(this.glProgram != null) {
			this.__disableGL();
		}
	}
	,__disableGL: function() {
		if(this.get_data().uImage0 != null) {
			this.get_data().uImage0.input = null;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			this.gl.disableVertexAttribArray(parameter.index);
		}
		var _g2 = 0;
		var _g11 = this.__paramFloat;
		while(_g2 < _g11.length) {
			var parameter1 = _g11[_g2];
			++_g2;
			this.gl.disableVertexAttribArray(parameter1.index);
		}
		var _g3 = 0;
		var _g12 = this.__paramInt;
		while(_g3 < _g12.length) {
			var parameter2 = _g12[_g3];
			++_g3;
			this.gl.disableVertexAttribArray(parameter2.index);
		}
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);
		this.gl.bindTexture(this.gl.TEXTURE_2D,null);
	}
	,__enable: function() {
		this.__init();
		if(this.glProgram != null) {
			this.__enableGL();
		}
	}
	,__enableGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			this.gl.uniform1i(input.index,textureCount);
			++textureCount;
		}
	}
	,__init: function() {
		if(this.__data == null) {
			this.__data = new openfl_display_ShaderData(null);
		}
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.glProgram == null || this.__glSourceDirty)) {
			this.__initGL();
		}
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__isUniform == null) {
			this.__glSourceDirty = false;
			this.glProgram = null;
			this.__isUniform = new haxe_ds_StringMap();
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			this.__uniformMatrix2 = new Float32Array(4);
			this.__uniformMatrix3 = new Float32Array(9);
			this.__uniformMatrix4 = new Float32Array(16);
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.gl != null && this.glProgram == null) {
			var fragment = "#ifdef GL_ES\n\t\t\t\tprecision " + (this.precisionHint == 1?"mediump":"lowp") + " float;\n\t\t\t\t#endif\n\t\t\t\t" + this.get_glFragmentSource();
			this.glProgram = lime_utils_GLUtils.createProgram(this.get_glVertexSource(),fragment);
			if(this.glProgram != null) {
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					var _this = this.__isUniform;
					var key = input.name;
					if(__map_reserved[key] != null?_this.getReserved(key):_this.h[key]) {
						input.index = this.gl.getUniformLocation(this.glProgram,input.name);
					} else {
						input.index = this.gl.getAttribLocation(this.glProgram,input.name);
					}
				}
				var _g2 = 0;
				var _g11 = this.__paramBool;
				while(_g2 < _g11.length) {
					var parameter = _g11[_g2];
					++_g2;
					var _this1 = this.__isUniform;
					var key1 = parameter.name;
					if(__map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1]) {
						parameter.index = this.gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = this.gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g3 = 0;
				var _g12 = this.__paramFloat;
				while(_g3 < _g12.length) {
					var parameter1 = _g12[_g3];
					++_g3;
					var _this2 = this.__isUniform;
					var key2 = parameter1.name;
					if(__map_reserved[key2] != null?_this2.getReserved(key2):_this2.h[key2]) {
						parameter1.index = this.gl.getUniformLocation(this.glProgram,parameter1.name);
					} else {
						parameter1.index = this.gl.getAttribLocation(this.glProgram,parameter1.name);
					}
				}
				var _g4 = 0;
				var _g13 = this.__paramInt;
				while(_g4 < _g13.length) {
					var parameter2 = _g13[_g4];
					++_g4;
					var _this3 = this.__isUniform;
					var key3 = parameter2.name;
					if(__map_reserved[key3] != null?_this3.getReserved(key3):_this3.h[key3]) {
						parameter2.index = this.gl.getUniformLocation(this.glProgram,parameter2.name);
					} else {
						parameter2.index = this.gl.getAttribLocation(this.glProgram,parameter2.name);
					}
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				this.__inputBitmapData.push(input);
				this.get_data()[name] = input;
			} else {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.name = name;
					parameter.type = parameterType;
					this.__paramBool.push(parameter);
					this.get_data()[name] = parameter;
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.name = name;
					parameter1.type = parameterType;
					this.__paramInt.push(parameter1);
					this.get_data()[name] = parameter1;
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.name = name;
					parameter2.type = parameterType;
					this.__paramFloat.push(parameter2);
					this.get_data()[name] = parameter2;
				}
			}
			var _this = this.__isUniform;
			var value = storageType == "uniform";
			if(__map_reserved[name] != null) {
				_this.setReserved(name,value);
			} else {
				_this.h[name] = value;
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.glProgram != null) {
			this.__updateGL();
		}
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(input.input != null) {
				this.gl.activeTexture(this.gl.TEXTURE0 + textureCount);
				this.gl.bindTexture(this.gl.TEXTURE_2D,input.input.getTexture(this.gl));
				if(input.smoothing) {
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
				} else {
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
				}
			}
			++textureCount;
		}
		var index = 0;
		var _g2 = 0;
		var _g11 = this.__paramBool;
		while(_g2 < _g11.length) {
			var parameter = _g11[_g2];
			++_g2;
			var value = parameter.value;
			index = parameter.index;
			if(value != null) {
				switch(parameter.type) {
				case 0:
					this.gl.uniform1i(index,value[0]?1:0);
					break;
				case 1:
					this.gl.uniform2i(index,value[0]?1:0,value[1]?1:0);
					break;
				case 2:
					this.gl.uniform3i(index,value[0]?1:0,value[1]?1:0,value[2]?1:0);
					break;
				case 3:
					this.gl.uniform4i(index,value[0]?1:0,value[1]?1:0,value[2]?1:0,value[3]?1:0);
					break;
				default:
				}
			} else {
				var _this = this.__isUniform;
				var key = parameter.name;
				if(!(__map_reserved[key] != null?_this.getReserved(key):_this.h[key])) {
					this.gl.enableVertexAttribArray(parameter.index);
				}
			}
		}
		var _g3 = 0;
		var _g12 = this.__paramFloat;
		while(_g3 < _g12.length) {
			var parameter1 = _g12[_g3];
			++_g3;
			var value1 = parameter1.value;
			index = parameter1.index;
			if(value1 != null) {
				switch(parameter1.type) {
				case 4:
					this.gl.uniform1f(index,value1[0]);
					break;
				case 5:
					this.gl.uniform2f(index,value1[0],value1[1]);
					break;
				case 6:
					this.gl.uniform3f(index,value1[0],value1[1],value1[2]);
					break;
				case 7:
					this.gl.uniform4f(index,value1[0],value1[1],value1[2],value1[3]);
					break;
				case 12:
					var _g21 = 0;
					while(_g21 < 4) {
						var i = _g21++;
						this.__uniformMatrix2[i] = value1[i];
					}
					this.gl.uniformMatrix2fv(index,false,this.__uniformMatrix2);
					break;
				case 16:
					var _g22 = 0;
					while(_g22 < 9) {
						var i1 = _g22++;
						this.__uniformMatrix3[i1] = value1[i1];
					}
					this.gl.uniformMatrix3fv(index,false,this.__uniformMatrix3);
					break;
				case 20:
					var _g23 = 0;
					while(_g23 < 16) {
						var i2 = _g23++;
						this.__uniformMatrix4[i2] = value1[i2];
					}
					this.gl.uniformMatrix4fv(index,false,this.__uniformMatrix4);
					break;
				default:
				}
			} else {
				var _this1 = this.__isUniform;
				var key1 = parameter1.name;
				if(!(__map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1])) {
					this.gl.enableVertexAttribArray(parameter1.index);
				}
			}
		}
		var _g4 = 0;
		var _g13 = this.__paramInt;
		while(_g4 < _g13.length) {
			var parameter2 = _g13[_g4];
			++_g4;
			var value2 = parameter2.value;
			if(value2 != null) {
				switch(parameter2.type) {
				case 8:
					this.gl.uniform1i(index,value2[0]);
					break;
				case 9:
					this.gl.uniform2i(index,value2[0],value2[1]);
					break;
				case 10:
					this.gl.uniform3i(index,value2[0],value2[1],value2[2]);
					break;
				case 11:
					this.gl.uniform4i(index,value2[0],value2[1],value2[2],value2[3]);
					break;
				default:
				}
			} else {
				var _this2 = this.__isUniform;
				var key2 = parameter2.name;
				if(!(__map_reserved[key2] != null?_this2.getReserved(key2):_this2.h[key2])) {
					this.gl.enableVertexAttribArray(parameter2.index);
				}
			}
		}
	}
	,get_data: function() {
		if(this.__glSourceDirty || this.__data == null) {
			this.__init();
		}
		return this.__data;
	}
	,set_data: function(value) {
		return this.__data = value;
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,set_glFragmentSource: function(value) {
		if(value != this.__glFragmentSource) {
			this.__glSourceDirty = true;
		}
		return this.__glFragmentSource = value;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,set_glVertexSource: function(value) {
		if(value != this.__glFragmentSource) {
			this.__glSourceDirty = true;
		}
		return this.__glFragmentSource = value;
	}
	,__class__: openfl_display_Shader
	,__properties__: {set_glVertexSource:"set_glVertexSource",get_glVertexSource:"get_glVertexSource",set_glFragmentSource:"set_glFragmentSource",get_glFragmentSource:"get_glFragmentSource",set_data:"set_data",get_data:"get_data"}
};
var openfl_display_ShaderData = function(byteArray) {
};
$hxClasses["openfl.display.ShaderData"] = openfl_display_ShaderData;
openfl_display_ShaderData.__name__ = ["openfl","display","ShaderData"];
openfl_display_ShaderData.prototype = {
	aAlpha: null
	,aPosition: null
	,aTexCoord: null
	,uImage0: null
	,uMatrix: null
	,__class__: openfl_display_ShaderData
};
var openfl_display_ShaderInput = function() {
	this.channels = 0;
	this.height = 0;
	this.index = 0;
	this.width = 0;
};
$hxClasses["openfl.display.ShaderInput"] = openfl_display_ShaderInput;
openfl_display_ShaderInput.__name__ = ["openfl","display","ShaderInput"];
openfl_display_ShaderInput.prototype = {
	channels: null
	,height: null
	,index: null
	,input: null
	,name: null
	,smoothing: null
	,width: null
	,__class__: openfl_display_ShaderInput
};
var openfl_display_ShaderParameter = function() {
	this.index = 0;
};
$hxClasses["openfl.display.ShaderParameter"] = openfl_display_ShaderParameter;
openfl_display_ShaderParameter.__name__ = ["openfl","display","ShaderParameter"];
openfl_display_ShaderParameter.prototype = {
	index: null
	,name: null
	,type: null
	,value: null
	,__class__: openfl_display_ShaderParameter
};
var openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$ = {};
$hxClasses["openfl.display._ShaderParameterType.ShaderParameterType_Impl_"] = openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.__name__ = ["openfl","display","_ShaderParameterType","ShaderParameterType_Impl_"];
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bool":
		return 0;
	case "bool2":
		return 1;
	case "bool3":
		return 1;
	case "bool4":
		return 1;
	case "float":
		return 4;
	case "float2":
		return 5;
	case "float3":
		return 6;
	case "float4":
		return 7;
	case "int":
		return 8;
	case "int2":
		return 9;
	case "int3":
		return 10;
	case "int4":
		return 11;
	case "matrix2x2":
		return 12;
	case "matrix2x3":
		return 13;
	case "matrix2x4":
		return 14;
	case "matrix3x2":
		return 15;
	case "matrix3x3":
		return 16;
	case "matrix3x4":
		return 17;
	case "matrix4x2":
		return 18;
	case "matrix4x3":
		return 19;
	case "matrix4x4":
		return 20;
	default:
		return null;
	}
};
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bool";
	case 1:
		return "bool2";
	case 2:
		return "bool3";
	case 3:
		return "bool4";
	case 4:
		return "float";
	case 5:
		return "float2";
	case 6:
		return "float3";
	case 7:
		return "float4";
	case 8:
		return "int";
	case 9:
		return "int2";
	case 10:
		return "int3";
	case 11:
		return "int4";
	case 12:
		return "matrix2x2";
	case 13:
		return "matrix2x3";
	case 14:
		return "matrix2x4";
	case 15:
		return "matrix3x2";
	case 16:
		return "matrix3x3";
	case 17:
		return "matrix3x4";
	case 18:
		return "matrix4x2";
	case 19:
		return "matrix4x3";
	case 20:
		return "matrix4x4";
	default:
		return null;
	}
};
var openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$ = {};
$hxClasses["openfl.display._ShaderPrecision.ShaderPrecision_Impl_"] = openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.__name__ = ["openfl","display","_ShaderPrecision","ShaderPrecision_Impl_"];
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fast":
		return 0;
	case "full":
		return 1;
	default:
		return null;
	}
};
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fast";
	case 1:
		return "full";
	default:
		return null;
	}
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl_display_InteractiveObject.call(this);
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.set_upState(upState != null?upState:new openfl_display_DisplayObject());
	this.set_overState(overState);
	this.set_downState(downState);
	this.set_hitTestState(hitTestState != null?hitTestState:new openfl_display_DisplayObject());
	this.addEventListener("mouseDown",$bind(this,this.__this_onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.__this_onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.__this_onMouseOver));
	this.addEventListener("mouseUp",$bind(this,this.__this_onMouseUp));
	this.set___currentState(this.upState);
	if(openfl_display_SimpleButton.__initSymbol != null) {
		var swf = openfl_display_SimpleButton.__initSWF;
		this.__symbol = openfl_display_SimpleButton.__initSymbol;
		openfl_display_SimpleButton.__initSWF = null;
		openfl_display_SimpleButton.__initSymbol = null;
		this.__fromSymbol(swf,this.__symbol);
	}
};
$hxClasses["openfl.display.SimpleButton"] = openfl_display_SimpleButton;
openfl_display_SimpleButton.__name__ = ["openfl","display","SimpleButton"];
openfl_display_SimpleButton.__super__ = openfl_display_InteractiveObject;
openfl_display_SimpleButton.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	downState: null
	,enabled: null
	,hitTestState: null
	,overState: null
	,trackAsMenu: null
	,upState: null
	,useHandCursor: null
	,__currentState: null
	,__ignoreEvent: null
	,__previousStates: null
	,__soundTransform: null
	,__symbol: null
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		if(symbol.downState != null) {
			this.set_downState(symbol.downState.__createObject(swf));
		}
		if(symbol.hitState != null) {
			this.set_hitTestState(symbol.hitState.__createObject(swf));
		}
		if(symbol.overState != null) {
			this.set_overState(symbol.overState.__createObject(swf));
		}
		if(symbol.upState != null) {
			this.set_upState(symbol.upState.__createObject(swf));
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		this.__currentState.__getBounds(rect,this.__currentState.__worldTransform);
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		this.__currentState.__getRenderBounds(rect,this.__currentState.__worldTransform);
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getCursor: function() {
		if(this.useHandCursor && !this.__ignoreEvent) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		var hitTest = false;
		if(this.hitTestState != null) {
			var cacheTransform = this.__updateTransform(this.hitTestState);
			if(this.hitTestState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				if(stack != null) {
					stack[stack.length - 1] = hitObject;
				}
				hitTest = true;
			}
			this.__resetTransform(this.hitTestState,cacheTransform);
		} else if(this.__currentState != null) {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			var cacheTransform1 = this.__updateTransform(this.__currentState);
			if(this.__currentState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				hitTest = interactiveOnly;
			}
			this.__resetTransform(this.__currentState,cacheTransform1);
		}
		if(stack != null) {
			while(stack.length > 1 && stack[stack.length - 1] == stack[stack.length - 2]) stack.pop();
		}
		return hitTest;
	}
	,__hitTestMask: function(x,y) {
		var hitTest = false;
		var cacheTransform = this.__updateTransform(this.__currentState);
		if(this.__currentState.__hitTestMask(x,y)) {
			hitTest = true;
		}
		this.__resetTransform(this.__currentState,cacheTransform);
		return hitTest;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderCairo(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderCairoMask: function(renderSession) {
		this.__currentState.__renderCairoMask(renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderCanvas(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
		this.__currentState.__renderCanvasMask(renderSession);
	}
	,__renderDOM: function(renderSession) {
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__previousStates;
		while(_g < _g1.get_length()) {
			var previousState = _g1.get(_g);
			++_g;
			previousState.__renderDOM(renderSession);
		}
		this.__previousStates.set_length(0);
		this.__currentState.__renderDOM(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderGL(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__resetTransform: function(state,cacheTransform) {
		state.__updateTransforms(cacheTransform);
		state.__updateChildren(false);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__currentState != null) {
			this.__currentState.__setStageReference(stage);
		}
	}
	,__updateTransform: function(state) {
		var local = state.__transform;
		var parentTransform = this.__worldTransform;
		var overrideTransform = openfl_geom_Matrix.__temp;
		overrideTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
		overrideTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
		overrideTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
		overrideTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
		overrideTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
		overrideTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		var cacheTransform = state.__transform;
		state.__transform = overrideTransform;
		state.__update(false,true);
		state.__transform = cacheTransform;
		return cacheTransform;
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		this.__updateTransform(this.__currentState);
	}
	,set_downState: function(downState) {
		if(this.downState != null && this.__currentState == this.downState) {
			this.set___currentState(downState);
		}
		return this.downState = downState;
	}
	,set_hitTestState: function(hitTestState) {
		return this.hitTestState = hitTestState;
	}
	,set_overState: function(overState) {
		if(this.overState != null && this.__currentState == this.overState) {
			this.set___currentState(overState);
		}
		return this.overState = overState;
	}
	,get_soundTransform: function() {
		if(this.__soundTransform == null) {
			this.__soundTransform = new openfl_media_SoundTransform();
		}
		return new openfl_media_SoundTransform(this.__soundTransform.volume,this.__soundTransform.pan);
	}
	,set_soundTransform: function(value) {
		this.__soundTransform = new openfl_media_SoundTransform(value.volume,value.pan);
		return value;
	}
	,set_upState: function(upState) {
		if(this.upState != null && this.__currentState == this.upState) {
			this.set___currentState(upState);
		}
		return this.upState = upState;
	}
	,set___currentState: function(value) {
		if(this.__currentState != null) {
			this.__currentState.__renderParent = null;
		}
		if(value.parent != null) {
			value.parent.removeChild(value);
		}
		value.__renderParent = this;
		return this.__currentState = value;
	}
	,__this_onMouseDown: function(event) {
		if(this.downState != null) {
			this.set___currentState(this.downState);
		}
	}
	,__this_onMouseOut: function(event) {
		this.__ignoreEvent = false;
		if(this.upState != this.__currentState) {
			this.set___currentState(this.upState);
		}
	}
	,__this_onMouseOver: function(event) {
		if(event.buttonDown) {
			this.__ignoreEvent = true;
		}
		if(this.overState != this.__currentState && this.overState != null && !this.__ignoreEvent) {
			this.set___currentState(this.overState);
		}
	}
	,__this_onMouseUp: function(event) {
		this.__ignoreEvent = false;
		if(this.overState != null) {
			this.set___currentState(this.overState);
		} else {
			this.set___currentState(this.upState);
		}
	}
	,__class__: openfl_display_SimpleButton
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set___currentState:"set___currentState",set_upState:"set_upState",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_overState:"set_overState",set_hitTestState:"set_hitTestState",set_downState:"set_downState"})
});
var openfl_display__$SpreadMethod_SpreadMethod_$Impl_$ = {};
$hxClasses["openfl.display._SpreadMethod.SpreadMethod_Impl_"] = openfl_display__$SpreadMethod_SpreadMethod_$Impl_$;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.__name__ = ["openfl","display","_SpreadMethod","SpreadMethod_Impl_"];
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "pad":
		return 0;
	case "reflect":
		return 1;
	case "repeat":
		return 2;
	default:
		return null;
	}
};
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "pad";
	case 1:
		return "reflect";
	case 2:
		return "repeat";
	default:
		return null;
	}
};
var openfl_display_Stage = function(window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.application = window.application;
	this.window = window;
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else {
		this.set_color(color);
	}
	this.set_name(null);
	this.__deltaTime = 0;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.__logicalWidth = 0;
	this.__logicalHeight = 0;
	this.__displayMatrix = new openfl_geom_Matrix();
	this.stage3Ds = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.stage3Ds.push(new openfl_display_Stage3D());
	this.__resize();
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = false;
	this.allowsFullScreenInteractive = false;
	this.quality = 1;
	this.scaleMode = 2;
	this.showDefaultContextMenu = true;
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__rollOutStack = [];
	if(openfl_Lib.current.stage == null) {
		this.stage.addChild(openfl_Lib.current);
	}
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,allowsFullScreenInteractive: null
	,application: null
	,quality: null
	,scaleMode: null
	,showDefaultContextMenu: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,window: null
	,__cacheFocus: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__deltaTime: null
	,__dirty: null
	,__displayMatrix: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__fullscreen: null
	,__invalidated: null
	,__lastClickTime: null
	,__logicalWidth: null
	,__logicalHeight: null
	,__macKeyboard: null
	,__mouseDownLeft: null
	,__mouseDownMiddle: null
	,__mouseDownRight: null
	,__mouseOverTarget: null
	,__mouseX: null
	,__mouseY: null
	,__primaryTouch: null
	,__renderer: null
	,__rendering: null
	,__rollOutStack: null
	,__stack: null
	,__transparent: null
	,__wasDirty: null
	,addRenderer: function(renderer) {
		var f = $bind(this,this.render);
		var a1 = renderer;
		renderer.onRender.add(function() {
			f(a1);
		});
		var f1 = $bind(this,this.onRenderContextLost);
		var a11 = renderer;
		renderer.onContextLost.add(function() {
			f1(a11);
		});
		var f2 = $bind(this,this.onRenderContextRestored);
		var a12 = renderer;
		renderer.onContextRestored.add(function(a2) {
			f2(a12,a2);
		});
	}
	,addWindow: function(window) {
		if(this.window != window) {
			return;
		}
		var f = $bind(this,this.onWindowActivate);
		var a1 = window;
		window.onActivate.add(function() {
			f(a1);
		});
		var f1 = $bind(this,this.onWindowClose);
		var a11 = window;
		window.onClose.add(function() {
			f1(a11);
		});
		var f2 = $bind(this,this.onWindowCreate);
		var a12 = window;
		window.onCreate.add(function() {
			f2(a12);
		});
		var f3 = $bind(this,this.onWindowDeactivate);
		var a13 = window;
		window.onDeactivate.add(function() {
			f3(a13);
		});
		var f4 = $bind(this,this.onWindowDropFile);
		var a14 = window;
		window.onDropFile.add(function(a2) {
			f4(a14,a2);
		});
		var f5 = $bind(this,this.onWindowEnter);
		var a15 = window;
		window.onEnter.add(function() {
			f5(a15);
		});
		var f6 = $bind(this,this.onWindowFocusIn);
		var a16 = window;
		window.onFocusIn.add(function() {
			f6(a16);
		});
		var f7 = $bind(this,this.onWindowFocusOut);
		var a17 = window;
		window.onFocusOut.add(function() {
			f7(a17);
		});
		var f8 = $bind(this,this.onWindowFullscreen);
		var a18 = window;
		window.onFullscreen.add(function() {
			f8(a18);
		});
		var f9 = $bind(this,this.onKeyDown);
		var a19 = window;
		window.onKeyDown.add(function(a21,a3) {
			f9(a19,a21,a3);
		});
		var f10 = $bind(this,this.onKeyUp);
		var a110 = window;
		window.onKeyUp.add(function(a22,a31) {
			f10(a110,a22,a31);
		});
		var f11 = $bind(this,this.onWindowLeave);
		var a111 = window;
		window.onLeave.add(function() {
			f11(a111);
		});
		var f12 = $bind(this,this.onWindowMinimize);
		var a112 = window;
		window.onMinimize.add(function() {
			f12(a112);
		});
		var f13 = $bind(this,this.onMouseDown);
		var a113 = window;
		window.onMouseDown.add(function(x,y,a23) {
			f13(a113,x,y,a23);
		});
		var f14 = $bind(this,this.onMouseMove);
		var a114 = window;
		window.onMouseMove.add(function(x1,y1) {
			f14(a114,x1,y1);
		});
		var f15 = $bind(this,this.onMouseMoveRelative);
		var a115 = window;
		window.onMouseMoveRelative.add(function(x2,y2) {
			f15(a115,x2,y2);
		});
		var f16 = $bind(this,this.onMouseUp);
		var a116 = window;
		window.onMouseUp.add(function(x3,y3,a24) {
			f16(a116,x3,y3,a24);
		});
		var f17 = $bind(this,this.onMouseWheel);
		var a117 = window;
		window.onMouseWheel.add(function(a25,a32) {
			f17(a117,a25,a32);
		});
		var f18 = $bind(this,this.onWindowMove);
		var a118 = window;
		window.onMove.add(function(x4,y4) {
			f18(a118,x4,y4);
		});
		var f19 = $bind(this,this.onWindowResize);
		var a119 = window;
		window.onResize.add(function(a26,a33) {
			f19(a119,a26,a33);
		});
		var f20 = $bind(this,this.onWindowRestore);
		var a120 = window;
		window.onRestore.add(function() {
			f20(a120);
		});
		var f21 = $bind(this,this.onTextEdit);
		var a121 = window;
		window.onTextEdit.add(function(a27,a34,a4) {
			f21(a121,a27,a34,a4);
		});
		var f22 = $bind(this,this.onTextInput);
		var a122 = window;
		window.onTextInput.add(function(a28) {
			f22(a122,a28);
		});
		if(window.id > -1) {
			this.onWindowCreate(window);
		}
	}
	,registerModule: function(application) {
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onUpdate.add($bind(this,this.update));
		var tmp = lime_ui_Gamepad.devices.iterator();
		while(tmp.hasNext()) this.__onGamepadConnect(tmp.next());
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,removeRenderer: function(renderer) {
	}
	,removeWindow: function(window) {
	}
	,setPreloader: function(preloader) {
	}
	,unregisterModule: function(application) {
		application.onExit.remove($bind(this,this.onModuleExit));
		application.onUpdate.remove($bind(this,this.update));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
	}
	,globalToLocal: function(pos) {
		return pos.clone();
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos.clone();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		try {
			openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadConnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadConnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__onKey("keyDown",keyCode,modifier);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onKeyUp: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__onKey("keyUp",keyCode,modifier);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onModuleExit: function(code) {
		if(this.window != null) {
			try {
				this.__broadcastEvent(new openfl_events_Event("deactivate"));
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.__handleError(e);
			}
		}
	}
	,onMouseDown: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			var type;
			switch(button) {
			case 1:
				type = "middleMouseDown";
				break;
			case 2:
				type = "rightMouseDown";
				break;
			default:
				type = "mouseDown";
			}
			this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseMove: function(window,x,y) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__onMouse("mouseMove",x * window.__scale | 0,y * window.__scale | 0,0);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			var type;
			switch(button) {
			case 1:
				type = "middleMouseUp";
				break;
			case 2:
				type = "rightMouseUp";
				break;
			default:
				type = "mouseUp";
			}
			this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
			if(!this.showDefaultContextMenu && button == 2) {
				window.onMouseUp.cancel();
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__onMouseWheel(deltaX * window.__scale | 0,deltaY * window.__scale | 0);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			var stack = [];
			if(this.__focus == null) {
				this.__getInteractive(stack);
			} else {
				this.__focus.__getInteractive(stack);
			}
			var event = new openfl_events_TextEvent("textInput",true,false,text);
			if(stack.length > 0) {
				stack.reverse();
				this.__fireEvent(event,stack);
			} else {
				this.__dispatchEvent(event);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onTouchMove: function(touch) {
		try {
			this.__onTouch("touchMove",touch);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onTouchEnd: function(touch) {
		try {
			if(this.__primaryTouch == touch) {
				this.__primaryTouch = null;
			}
			this.__onTouch("touchEnd",touch);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onTouchStart: function(touch) {
		try {
			if(this.__primaryTouch == null) {
				this.__primaryTouch = touch;
			}
			this.__onTouch("touchBegin",touch);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowActivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__broadcastEvent(new openfl_events_Event("activate"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowClose: function(window) {
		if(this.window == window) {
			this.window = null;
		}
	}
	,onWindowCreate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			if(window.renderer != null) {
				var _g = window.renderer.context;
				switch(_g[1]) {
				case 0:
					this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this,_g[2]);
					break;
				case 1:
					this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this,_g[2]);
					break;
				case 2:
					this.__renderer = new openfl__$internal_renderer_dom_DOMRenderer(this,_g[2]);
					break;
				case 4:
					break;
				case 5:
					break;
				default:
				}
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowDeactivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__primaryTouch = null;
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.set_focus(this.__cacheFocus);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowFocusOut: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			var currentFocus = this.get_focus();
			this.set_focus(null);
			this.__cacheFocus = currentFocus;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowFullscreen: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__resize();
			if(this.__displayState == 2) {
				this.__displayState = 1;
				this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowLeave: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__dispatchEvent(new openfl_events_Event("mouseLeave"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowMinimize: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__primaryTouch = null;
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowResize: function(window,width,height) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__resize();
			if(this.__displayState != 2 && !window.__fullscreen) {
				this.__displayState = 2;
				this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowRestore: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__broadcastEvent(new openfl_events_Event("activate"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,render: function(renderer) {
		if(renderer.window == null || renderer.window != this.window) {
			return;
		}
		try {
			if(this.application != null && this.application.__windows.length > 0) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					openfl_display_DisplayObject.__worldRenderDirty++;
				}
			}
			if(this.__rendering) {
				return;
			}
			this.__rendering = true;
			if(this.__renderer != null) {
				this.__renderer.clear();
			}
			this.__broadcastEvent(new openfl_events_Event("enterFrame"));
			this.__broadcastEvent(new openfl_events_Event("exitFrame"));
			if(this.__invalidated) {
				this.__invalidated = false;
				this.__broadcastEvent(new openfl_events_Event("render"));
			}
			this.__renderable = true;
			this.__enterFrame(this.__deltaTime);
			this.__deltaTime = 0;
			this.__update(false,true);
			if(this.__renderer != null) {
				if(renderer.type == lime_graphics_RendererType.CAIRO) {
					var _g = renderer.context;
					if(_g[1] == 4) {
						var cairo = _g[2];
						(js_Boot.__cast(this.__renderer , openfl__$internal_renderer_cairo_CairoRenderer)).cairo = cairo;
						this.__renderer.renderSession.cairo = cairo;
					}
				}
				this.__renderer.render();
			}
			this.__rendering = false;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,update: function(deltaTime) {
		this.__deltaTime = deltaTime;
	}
	,__broadcastEvent: function(event) {
		var _this = openfl_display_DisplayObject.__broadcastEvents;
		var key = event.type;
		if(__map_reserved[key] != null?_this.existsReserved(key):_this.h.hasOwnProperty(key)) {
			var _this1 = openfl_display_DisplayObject.__broadcastEvents;
			var key1 = event.type;
			var dispatchers = __map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1];
			var _g = 0;
			while(_g < dispatchers.length) {
				var dispatcher = dispatchers[_g];
				++_g;
				dispatcher.__dispatch(event);
			}
		}
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) {
			var _this = parent.__getWorldTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				mouse.x = -_this.tx;
				mouse.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
				mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
				mouse.x = px;
			}
		}
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) {
				x = this.__dragBounds.x;
			} else if(x > this.__dragBounds.get_right()) {
				x = this.__dragBounds.get_right();
			}
			if(y < this.__dragBounds.y) {
				y = this.__dragBounds.y;
			} else if(y > this.__dragBounds.get_bottom()) {
				y = this.__dragBounds.get_bottom();
			}
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var target;
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = 2;
			target = event.target;
			target.__dispatch(event);
		} else {
			event.eventPhase = 1;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				stack[_g1++].__dispatch(event);
				if(event.__isCanceled) {
					return;
				}
			}
			event.eventPhase = 2;
			target = event.target;
			target.__dispatch(event);
			if(event.__isCanceled) {
				return;
			}
			if(event.bubbles) {
				event.eventPhase = 3;
				var i = length - 2;
				while(i >= 0) {
					stack[i].__dispatch(event);
					if(event.__isCanceled) {
						return;
					}
					--i;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
		}
		return true;
	}
	,__handleError: function(e) {
		var event = new openfl_events_UncaughtErrorEvent("uncaughtError",true,true,e);
		openfl_Lib.current.__loaderInfo.uncaughtErrorEvents.dispatchEvent(event);
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 108;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var event = new openfl_events_KeyboardEvent(type,true,false,openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)),keyCode1,keyLocation,this.__macKeyboard?lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier):lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__fireEvent(event,stack);
			if(event.__preventDefault) {
				if(type == "keyDown") {
					this.window.onKeyDown.cancel();
				} else {
					this.window.onKeyUp.cancel();
				}
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		gamepad.onAxisMove.add(function(a2,a3) {
			f(a1,a2,a3);
		});
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		gamepad.onButtonDown.add(function(a21) {
			f1(a11,a21);
		});
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		gamepad.onButtonUp.add(function(a22) {
			f2(a12,a22);
		});
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		gamepad.onDisconnect.add(function() {
			f3(a13);
		});
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) {
			return;
		}
		var targetPoint = new openfl_geom_Point(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		this.__mouseX = targetPoint.x;
		this.__mouseY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var clickType = null;
		switch(type) {
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) {
				clickType = "middleClick";
			}
			this.__mouseDownMiddle = null;
			break;
		case "mouseDown":
			if(target.get_tabEnabled()) {
				this.set_focus(target);
			} else {
				this.set_focus(null);
			}
			this.__mouseDownLeft = target;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft == target) {
				clickType = "click";
			}
			this.__mouseDownLeft = null;
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) {
				clickType = "rightClick";
			}
			this.__mouseDownRight = null;
			break;
		default:
		}
		this.__fireEvent(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
		if(clickType != null) {
			this.__fireEvent(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
			if(type == "mouseUp" && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__fireEvent(openfl_events_MouseEvent.__create("doubleClick",button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else {
					this.__lastClickTime = currentTime;
				}
			}
		}
		if(openfl_ui_Mouse.__cursor == "auto") {
			var cursor = null;
			if(this.__mouseDownLeft != null) {
				cursor = this.__mouseDownLeft.__getCursor();
			} else {
				var _g = 0;
				while(_g < stack.length) {
					var target1 = stack[_g];
					++_g;
					cursor = target1.__getCursor();
					if(cursor != null) {
						lime_ui_Mouse.set_cursor(cursor);
						break;
					}
				}
			}
			if(cursor == null) {
				lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
			}
		}
		var event;
		var localPoint;
		if(target != this.__mouseOverTarget) {
			if(this.__mouseOverTarget != null) {
				if(this.__mouseOverTarget == this) {
					localPoint = targetPoint;
				} else {
					localPoint = this.__mouseOverTarget.globalToLocal(targetPoint);
				}
				event = openfl_events_MouseEvent.__create("mouseOut",button,this.__mouseX,this.__mouseY,localPoint,this.__mouseOverTarget);
				this.__mouseOverTarget.__dispatchEvent(event);
			}
		}
		var _g1 = 0;
		var _g11 = this.__rollOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(stack.indexOf(target2) == -1) {
				HxOverrides.remove(this.__rollOutStack,target2);
				localPoint = this.__mouseOverTarget.globalToLocal(targetPoint);
				event = openfl_events_MouseEvent.__create("rollOut",button,this.__mouseX,this.__mouseY,localPoint,this.__mouseOverTarget);
				event.bubbles = false;
				target2.__dispatchEvent(event);
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(this.__rollOutStack.indexOf(target3) == -1) {
				if(target3.hasEventListener("rollOver")) {
					localPoint = target3.globalToLocal(targetPoint);
					event = openfl_events_MouseEvent.__create("rollOver",button,this.__mouseX,this.__mouseY,localPoint,target3);
					event.bubbles = false;
					target3.__dispatchEvent(event);
				}
				if(target3.hasEventListener("rollOut")) {
					this.__rollOutStack.push(target3);
				}
			}
		}
		if(target != this.__mouseOverTarget) {
			if(target != null) {
				if(target == this) {
					localPoint = targetPoint;
				} else {
					localPoint = target.globalToLocal(targetPoint);
				}
				event = openfl_events_MouseEvent.__create("mouseOver",button,this.__mouseX,this.__mouseY,localPoint,target);
				event.bubbles = true;
				target.__dispatchEvent(event);
			}
			this.__mouseOverTarget = target;
		}
		if(this.__dragObject != null) {
			this.__drag(targetPoint);
			var dropTarget = null;
			if(this.__mouseOverTarget == this.__dragObject) {
				var cacheMouseEnabled = this.__dragObject.mouseEnabled;
				var cacheMouseChildren = this.__dragObject.mouseChildren;
				this.__dragObject.mouseEnabled = false;
				this.__dragObject.mouseChildren = false;
				var stack1 = [];
				if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack1,true,this)) {
					dropTarget = stack1[stack1.length - 1];
				}
				this.__dragObject.mouseEnabled = cacheMouseEnabled;
				this.__dragObject.mouseChildren = cacheMouseChildren;
			} else if(this.__mouseOverTarget != this) {
				dropTarget = this.__mouseOverTarget;
			}
			this.__dragObject.dropTarget = dropTarget;
		}
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var targetPoint = new openfl_geom_Point(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		this.__fireEvent(openfl_events_MouseEvent.__create("mouseWheel",0,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target,deltaY | 0),stack);
	}
	,__onTouch: function(type,touch) {
		var point = new openfl_geom_Point(Math.round(touch.x * this.window.__width * this.window.__scale),Math.round(touch.y * this.window.__height * this.window.__scale));
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			point.x = -_this.tx;
			point.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
			point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
			point.x = px;
		}
		var touchX = point.x;
		var touchY = point.y;
		var __stack = [];
		if(this.__hitTest(touchX,touchY,false,__stack,true,this)) {
			var target = __stack[__stack.length - 1];
			if(target == null) {
				target = this;
			}
			var touchEvent = openfl_events_TouchEvent.__create(type,null,touchX,touchY,target.globalToLocal(point),target);
			touchEvent.touchPointID = touch.id;
			touchEvent.isPrimaryTouchPoint = this.__primaryTouch == touch;
			this.__fireEvent(touchEvent,__stack);
		} else {
			var touchEvent1 = openfl_events_TouchEvent.__create(type,null,touchX,touchY,point,this);
			touchEvent1.touchPointID = touch.id;
			touchEvent1.isPrimaryTouchPoint = this.__primaryTouch == touch;
			this.__fireEvent(touchEvent1,[this.stage]);
		}
	}
	,__resize: function() {
		var cacheWidth = this.stageWidth;
		var cacheHeight = this.stageHeight;
		var windowWidth = this.window.__width * this.window.__scale | 0;
		var windowHeight = this.window.__height * this.window.__scale | 0;
		this.__logicalWidth = this.window.__width;
		this.__logicalHeight = this.window.__height;
		this.__displayMatrix.identity();
		if(this.__logicalWidth == 0 && this.__logicalHeight == 0) {
			this.stageWidth = windowWidth;
			this.stageHeight = windowHeight;
		} else {
			this.stageWidth = this.__logicalWidth;
			this.stageHeight = this.__logicalHeight;
			var targetScale = Math.min(windowWidth / this.stageWidth,windowHeight / this.stageHeight);
			var offsetX = Math.round((windowWidth - this.stageWidth * targetScale) / 2);
			var offsetY = Math.round((windowHeight - this.stageHeight * targetScale) / 2);
			this.__displayMatrix.scale(targetScale,targetScale);
			this.__displayMatrix.translate(offsetX,offsetY);
		}
		var _g = 0;
		var _g1 = this.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__resize(this.stageWidth,this.stageHeight);
		}
		if(this.__renderer != null) {
			this.__renderer.resize(windowWidth,windowHeight);
		}
		if(this.stageWidth != cacheWidth || this.stageHeight != cacheHeight) {
			this.__dispatchEvent(new openfl_events_Event("resize"));
		}
	}
	,__setLogicalSize: function(width,height) {
		this.__logicalWidth = width;
		this.__logicalHeight = height;
		this.__resize();
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		this.__dragBounds = bounds == null?null:bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = 0;
				this.__dragOffsetY = 0;
			} else {
				var mouse = new openfl_geom_Point(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) {
					var _this = parent.__getWorldTransform();
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						mouse.x = -_this.tx;
						mouse.y = -_this.ty;
					} else {
						var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
						mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
						mouse.x = px;
					}
				}
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren,maskGrahpics) {
		if(transformOnly) {
			if(openfl_display_DisplayObject.__worldTransformDirty > 0) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGrahpics);
				if(updateChildren) {
					openfl_display_DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl_display_DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl_display_DisplayObject.__worldRenderDirty > 0) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) {
				openfl_display_DisplayObject.__worldTransformDirty = 0;
				openfl_display_DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		}
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		this.__colorSplit = [((value & 16711680) >>> 16) / 255,((value & 65280) >>> 8) / 255,(value & 255) / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(this.window != null) {
			if(value == 2) {
				if(this.window.__fullscreen) {
					this.window.set_fullscreen(false);
				}
			} else if(!this.window.__fullscreen) {
				this.window.set_fullscreen(true);
			}
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			this.__cacheFocus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,this.__focus,false,0);
				var stack = [];
				oldFocus.__getInteractive(stack);
				stack.reverse();
				this.__fireEvent(event,stack);
			}
			if(this.__focus != null) {
				var event1 = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				var stack1 = [];
				value.__getInteractive(stack1);
				stack1.reverse();
				this.__fireEvent(event1,stack1);
			}
		}
		return this.__focus;
	}
	,get_frameRate: function() {
		if(this.application != null) {
			return this.application.backend.getFrameRate();
		}
		return 0;
	}
	,set_frameRate: function(value) {
		if(this.application != null) {
			return this.application.backend.setFrameRate(value);
		}
		return value;
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",set_color:"set_color",get_color:"get_color"})
});
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
	this.set_x(0);
	this.set_y(0);
	this.visible = true;
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,x: null
	,y: null
	,__contextRequested: null
	,__canvas: null
	,__style: null
	,__webgl: null
	,requestContext3D: function(context3DRenderMode,profile) {
		if(profile == null) {
			profile = 0;
		}
		if(context3DRenderMode == null) {
			context3DRenderMode = 0;
		}
		this.__contextRequested = true;
		if(this.context3D != null) {
			haxe_Timer.delay($bind(this,this.__dispatchCreate),1);
		}
	}
	,requestContext3DMatchingProfiles: function(profiles) {
		this.requestContext3D();
	}
	,__createContext: function(stage,renderSession) {
		if(renderSession.gl != null) {
			this.context3D = new openfl_display3D_Context3D(this,renderSession);
			this.__dispatchCreate();
		} else {
			this.__canvas = window.document.createElement("canvas");
			this.__canvas.width = stage.stageWidth;
			this.__canvas.height = stage.stageHeight;
			var $window = stage.window;
			this.__webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.__canvas,{ alpha : Object.prototype.hasOwnProperty.call($window.config,"background") && $window.config.background == null, antialias : Object.prototype.hasOwnProperty.call($window.config,"antialiasing") && $window.config.antialiasing > 0, depth : Object.prototype.hasOwnProperty.call($window.config,"depthBuffer")?$window.config.depthBuffer:true, premultipliedAlpha : true, stencil : Object.prototype.hasOwnProperty.call($window.config,"stencilBuffer") && $window.config.stencilBuffer, preserveDrawingBuffer : false});
			if(this.__webgl != null) {
				lime_graphics_opengl_GL.context = this.__webgl;
				this.context3D = new openfl_display3D_Context3D(this,renderSession);
				renderSession.element.appendChild(this.__canvas);
				this.__style = this.__canvas.style;
				this.__style.setProperty("position","absolute",null);
				this.__style.setProperty("top","0",null);
				this.__style.setProperty("left","0",null);
				this.__style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
				this.__style.setProperty("z-index","-1",null);
				this.__dispatchCreate();
			} else {
				this.__dispatchError();
			}
		}
	}
	,__dispatchError: function() {
		this.__contextRequested = false;
		this.dispatchEvent(new openfl_events_ErrorEvent("error",false,false,"Context3D not available"));
	}
	,__dispatchCreate: function() {
		if(this.__contextRequested) {
			this.__contextRequested = false;
			this.dispatchEvent(new openfl_events_Event("context3DCreate"));
		}
	}
	,__renderCairo: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested) {
			this.__dispatchError();
			this.__contextRequested = false;
		}
	}
	,__renderCanvas: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested) {
			this.__dispatchError();
			this.__contextRequested = false;
		}
	}
	,__renderDOM: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested && this.context3D == null) {
			this.__createContext(stage,renderSession);
		}
		if(this.context3D != null) {
			lime_graphics_opengl_GL.context = this.__webgl;
			this.__resetContext3DStates();
		}
	}
	,__renderGL: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested && this.context3D == null) {
			this.__createContext(stage,renderSession);
		}
		if(this.context3D != null) {
			this.__resetContext3DStates();
			if(this.context3D != null) {
				renderSession.gl.depthMask(true);
				renderSession.blendModeManager.setBlendMode(null);
				if(renderSession.shaderManager.currentShader != null) {
					renderSession.shaderManager.setShader(null);
					if(this.context3D.__program != null) {
						this.context3D.__program.__use();
					}
				}
			}
		}
	}
	,__resize: function(width,height) {
		if(this.__canvas != null) {
			this.__canvas.width = width;
			this.__canvas.height = height;
		}
	}
	,__resetContext3DStates: function() {
		this.context3D.__updateBlendFactors();
		this.context3D.__updateBackbufferViewport();
	}
	,set_x: function(value) {
		this.x = value;
		if(this.context3D != null) {
			this.context3D.__updateBackbufferViewport();
		}
		return value;
	}
	,set_y: function(value) {
		this.y = value;
		if(this.context3D != null) {
			this.context3D.__updateBackbufferViewport();
		}
		return value;
	}
	,__class__: openfl_display_Stage3D
	,__properties__: {set_y:"set_y",set_x:"set_x"}
});
var openfl_display__$StageAlign_StageAlign_$Impl_$ = {};
$hxClasses["openfl.display._StageAlign.StageAlign_Impl_"] = openfl_display__$StageAlign_StageAlign_$Impl_$;
openfl_display__$StageAlign_StageAlign_$Impl_$.__name__ = ["openfl","display","_StageAlign","StageAlign_Impl_"];
openfl_display__$StageAlign_StageAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bottom":
		return 0;
	case "bottomLeft":
		return 1;
	case "bottomRight":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "top":
		return 5;
	case "topLeft":
		return 6;
	case "topRight":
		return 7;
	default:
		return null;
	}
};
openfl_display__$StageAlign_StageAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bottom";
	case 1:
		return "bottomLeft";
	case 2:
		return "bottomRight";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "top";
	case 6:
		return "topLeft";
	case 7:
		return "topRight";
	default:
		return null;
	}
};
var openfl_display__$StageDisplayState_StageDisplayState_$Impl_$ = {};
$hxClasses["openfl.display._StageDisplayState.StageDisplayState_Impl_"] = openfl_display__$StageDisplayState_StageDisplayState_$Impl_$;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.__name__ = ["openfl","display","_StageDisplayState","StageDisplayState_Impl_"];
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fullScreen":
		return 0;
	case "fullScreenInteractive":
		return 1;
	case "normal":
		return 2;
	default:
		return null;
	}
};
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fullScreen";
	case 1:
		return "fullScreenInteractive";
	case 2:
		return "normal";
	default:
		return null;
	}
};
var openfl_display__$StageQuality_StageQuality_$Impl_$ = {};
$hxClasses["openfl.display._StageQuality.StageQuality_Impl_"] = openfl_display__$StageQuality_StageQuality_$Impl_$;
openfl_display__$StageQuality_StageQuality_$Impl_$.__name__ = ["openfl","display","_StageQuality","StageQuality_Impl_"];
openfl_display__$StageQuality_StageQuality_$Impl_$.fromString = function(value) {
	switch(value) {
	case "best":
		return 0;
	case "high":
		return 1;
	case "low":
		return 2;
	case "medium":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageQuality_StageQuality_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "best";
	case 1:
		return "high";
	case 2:
		return "low";
	case 3:
		return "medium";
	default:
		return null;
	}
};
var openfl_display__$StageScaleMode_StageScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._StageScaleMode.StageScaleMode_Impl_"] = openfl_display__$StageScaleMode_StageScaleMode_$Impl_$;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.__name__ = ["openfl","display","_StageScaleMode","StageScaleMode_Impl_"];
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "exactFit":
		return 0;
	case "noBorder":
		return 1;
	case "noScale":
		return 2;
	case "showAll":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "exactFit";
	case 1:
		return "noBorder";
	case 2:
		return "noScale";
	case 3:
		return "showAll";
	default:
		return null;
	}
};
var openfl_display_Tile = function(id,x,y,scaleX,scaleY,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(scaleY == null) {
		scaleY = 1;
	}
	if(scaleX == null) {
		scaleX = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(id == null) {
		id = 0;
	}
	this.set_id(id);
	this.set_matrix(new openfl_geom_Matrix());
	if(x != 0) {
		this.set_x(x);
	}
	if(y != 0) {
		this.set_y(y);
	}
	if(scaleX != 1) {
		this.set_scaleX(scaleX);
	}
	if(scaleY != 1) {
		this.set_scaleY(scaleY);
	}
	if(rotation != 0) {
		this.set_rotation(rotation);
	}
	this.set_alpha(1);
	this.visible = true;
	this.__alphaDirty = true;
	this.__sourceDirty = true;
	this.__transformDirty = true;
	this.__transform = [];
};
$hxClasses["openfl.display.Tile"] = openfl_display_Tile;
openfl_display_Tile.__name__ = ["openfl","display","Tile"];
openfl_display_Tile.prototype = {
	alpha: null
	,data: null
	,id: null
	,matrix: null
	,tileset: null
	,visible: null
	,__alphaDirty: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__sourceDirty: null
	,__transform: null
	,__transformDirty: null
	,clone: function() {
		var tile = new openfl_display_Tile(this.id);
		tile.set_matrix(this.matrix.clone());
		tile.set_tileset(this.tileset);
		return tile;
	}
	,set_alpha: function(value) {
		this.__alphaDirty = true;
		return this.alpha = value;
	}
	,set_id: function(value) {
		this.__sourceDirty = true;
		return this.id = value;
	}
	,set_matrix: function(value) {
		this.__rotation = null;
		this.__transformDirty = true;
		return this.matrix = value;
	}
	,get_rotation: function() {
		if(this.__rotation == null) {
			if(this.matrix.b == 0 && this.matrix.c == 0) {
				this.__rotation = 0;
				this.__rotationSine = 0;
				this.__rotationCosine = 1;
			} else {
				var radians = Math.atan2(this.matrix.d,this.matrix.c) - Math.PI / 2;
				this.__rotation = radians * (180 / Math.PI);
				this.__rotationSine = Math.sin(radians);
				this.__rotationCosine = Math.cos(radians);
			}
		}
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = value * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			var __scaleX = this.get_scaleX();
			var __scaleY = this.get_scaleY();
			this.matrix.a = this.__rotationCosine * __scaleX;
			this.matrix.b = this.__rotationSine * __scaleX;
			this.matrix.c = -this.__rotationSine * __scaleY;
			this.matrix.d = this.__rotationCosine * __scaleY;
			this.__transformDirty = true;
		}
		return value;
	}
	,get_scaleX: function() {
		if(this.matrix.b == 0) {
			return this.matrix.a;
		} else {
			return Math.sqrt(this.matrix.a * this.matrix.a + this.matrix.b * this.matrix.b);
		}
	}
	,set_scaleX: function(value) {
		if(this.matrix.b == 0) {
			this.matrix.a = value;
		} else {
			this.get_rotation();
			var a = this.__rotationCosine * value;
			var b = this.__rotationSine * value;
			this.matrix.a = a;
			this.matrix.b = b;
		}
		this.__transformDirty = true;
		return value;
	}
	,get_scaleY: function() {
		if(this.matrix.c == 0) {
			return this.matrix.d;
		} else {
			return Math.sqrt(this.matrix.c * this.matrix.c + this.matrix.d * this.matrix.d);
		}
	}
	,set_scaleY: function(value) {
		if(this.matrix.c == 0) {
			this.matrix.d = value;
		} else {
			this.get_rotation();
			var c = -this.__rotationSine * value;
			var d = this.__rotationCosine * value;
			this.matrix.c = c;
			this.matrix.d = d;
		}
		this.__transformDirty = true;
		return value;
	}
	,set_tileset: function(value) {
		this.__sourceDirty = true;
		return this.tileset = value;
	}
	,get_x: function() {
		return this.matrix.tx;
	}
	,get_y: function() {
		return this.matrix.ty;
	}
	,set_x: function(value) {
		this.__transformDirty = true;
		return this.matrix.tx = value;
	}
	,set_y: function(value) {
		this.__transformDirty = true;
		return this.matrix.ty = value;
	}
	,__class__: openfl_display_Tile
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_tileset:"set_tileset",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",set_matrix:"set_matrix",set_id:"set_id",set_alpha:"set_alpha"}
};
var openfl_display_Tilemap = function(width,height,tileset,smoothing) {
	if(smoothing == null) {
		smoothing = true;
	}
	openfl_display_DisplayObject.call(this);
	this.set_tileset(tileset);
	this.smoothing = smoothing;
	this.__tiles = [];
	this.numTiles = 0;
	this.__width = width;
	this.__height = height;
};
$hxClasses["openfl.display.Tilemap"] = openfl_display_Tilemap;
openfl_display_Tilemap.__name__ = ["openfl","display","Tilemap"];
openfl_display_Tilemap.__super__ = openfl_display_DisplayObject;
openfl_display_Tilemap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	numTiles: null
	,tileset: null
	,smoothing: null
	,__buffer: null
	,__bufferData: null
	,__cacheAlpha: null
	,__dirty: null
	,__tiles: null
	,__height: null
	,__width: null
	,addTile: function(tile) {
		this.__tiles.push(tile);
		this.__dirty = true;
		this.numTiles++;
		return tile;
	}
	,addTiles: function(tiles) {
		this.__tiles = this.__tiles.concat(tiles);
		this.__dirty = true;
		this.numTiles = this.__tiles.length;
		return tiles;
	}
	,addTileAt: function(tile,index) {
		HxOverrides.remove(this.__tiles,tile);
		this.__tiles.splice(index,0,tile);
		this.__dirty = true;
		this.numTiles = this.__tiles.length;
		return tile;
	}
	,contains: function(tile) {
		return this.__tiles.indexOf(tile) > -1;
	}
	,getTileAt: function(index) {
		if(index >= 0 && index < this.numTiles) {
			return this.__tiles[index];
		}
		return null;
	}
	,getTileIndex: function(tile) {
		var _g1 = 0;
		var _g = this.__tiles.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__tiles[i] == tile) {
				return i;
			}
		}
		return -1;
	}
	,removeTile: function(tile) {
		HxOverrides.remove(this.__tiles,tile);
		this.__dirty = true;
		this.numTiles = this.__tiles.length;
		return tile;
	}
	,removeTileAt: function(index) {
		if(index >= 0 && index < this.numTiles) {
			return this.removeTile(this.__tiles[index]);
		}
		return null;
	}
	,removeTiles: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(beginIndex < 0) {
			beginIndex = 0;
		}
		if(endIndex > this.__tiles.length - 1) {
			endIndex = this.__tiles.length - 1;
		}
		this.__tiles.splice(beginIndex,endIndex - beginIndex + 1);
		this.__dirty = true;
		this.numTiles = this.__tiles.length;
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__temp;
		bounds.setTo(0,0,this.__width,this.__height);
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0?-_this.tx:1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0?-_this1.ty:1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.__width && py <= this.__height) {
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(!(!this.__renderable || this.__tiles.length == 0 || this.__worldAlpha <= 0)) {
			var cairo = renderSession.cairo;
			renderSession.maskManager.pushObject(this);
			var rect = openfl_geom_Rectangle.__temp;
			rect.setTo(0,0,this.__width,this.__height);
			renderSession.maskManager.pushRect(rect,this.__renderTransform);
			var transform = this.__renderTransform;
			var roundPixels = renderSession.roundPixels;
			var defaultTileset = this.tileset;
			var cacheBitmapData = null;
			var surface = null;
			var pattern = null;
			var tiles;
			var count;
			var tile;
			var alpha;
			var visible;
			var tileset;
			var tileData;
			var bitmapData;
			tiles = this.__tiles;
			count = tiles.length;
			var matrix = new lime_math_Matrix3();
			var tileTransform = openfl_geom_Matrix.__temp;
			var _g1 = 0;
			while(_g1 < count) {
				tile = tiles[_g1++];
				alpha = tile.alpha;
				visible = tile.visible;
				if(!visible || alpha <= 0) {
					continue;
				}
				if(tile.tileset != null) {
					tileset = tile.tileset;
				} else {
					tileset = defaultTileset;
				}
				if(tileset == null) {
					continue;
				}
				tileData = tileset.__data[tile.id];
				if(tileData == null) {
					continue;
				}
				bitmapData = tileset.bitmapData;
				if(bitmapData == null) {
					continue;
				}
				if(bitmapData != cacheBitmapData) {
					surface = bitmapData.getSurface();
					pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
					lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,renderSession.allowSmoothing && this.smoothing?1:3);
					cairo.set_source(pattern);
					cacheBitmapData = bitmapData;
				}
				tileTransform.copyFrom(tile.matrix);
				tileTransform.concat(transform);
				if(roundPixels) {
					tileTransform.tx = Math.round(tileTransform.tx);
					tileTransform.ty = Math.round(tileTransform.ty);
				}
				cairo.set_matrix(tileTransform.__toMatrix3());
				matrix.tx = tileData.x;
				matrix.ty = tileData.y;
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(pattern,matrix);
				cairo.set_source(pattern);
				cairo.save();
				cairo.newPath();
				cairo.rectangle(0,0,tileData.width,tileData.height);
				cairo.clip();
				if(this.__worldAlpha == 1 && alpha == 1) {
					cairo.paint();
				} else {
					cairo.paintWithAlpha(this.__worldAlpha * alpha);
				}
				cairo.restore();
			}
			renderSession.maskManager.popRect();
			renderSession.maskManager.popObject(this);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!(!this.__renderable || this.__tiles.length == 0 || this.__worldAlpha <= 0)) {
			var context = renderSession.context;
			renderSession.maskManager.pushObject(this);
			var rect = openfl_geom_Rectangle.__temp;
			rect.setTo(0,0,this.__width,this.__height);
			renderSession.maskManager.pushRect(rect,this.__renderTransform);
			var transform = this.__renderTransform;
			var roundPixels = renderSession.roundPixels;
			if(!renderSession.allowSmoothing || !this.smoothing) {
				context.mozImageSmoothingEnabled = false;
				context.msImageSmoothingEnabled = false;
				context.imageSmoothingEnabled = false;
			}
			var defaultTileset = this.tileset;
			var cacheBitmapData = null;
			var source = null;
			var tiles;
			var count;
			var tile;
			var alpha;
			var visible;
			var tileset;
			var tileData;
			var bitmapData;
			tiles = this.__tiles;
			count = tiles.length;
			var tileTransform = openfl_geom_Matrix.__temp;
			var _g1 = 0;
			while(_g1 < count) {
				tile = tiles[_g1++];
				alpha = tile.alpha;
				visible = tile.visible;
				if(!visible || alpha <= 0) {
					continue;
				}
				if(tile.tileset != null) {
					tileset = tile.tileset;
				} else {
					tileset = defaultTileset;
				}
				if(tileset == null) {
					continue;
				}
				tileData = tileset.__data[tile.id];
				if(tileData == null) {
					continue;
				}
				bitmapData = tileset.bitmapData;
				if(bitmapData == null) {
					continue;
				}
				if(bitmapData != cacheBitmapData) {
					if(bitmapData.image.buffer.__srcImage == null) {
						lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmapData.image);
					}
					source = bitmapData.image.get_src();
					cacheBitmapData = bitmapData;
				}
				context.globalAlpha = this.__worldAlpha * alpha;
				tileTransform.copyFrom(tile.matrix);
				tileTransform.concat(transform);
				if(roundPixels) {
					context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,tileTransform.tx | 0,tileTransform.ty | 0);
				} else {
					context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,tileTransform.tx,tileTransform.ty);
				}
				context.drawImage(source,tileData.x,tileData.y,tileData.width,tileData.height,0,0,tileData.width,tileData.height);
			}
			if(!renderSession.allowSmoothing || !this.smoothing) {
				context.mozImageSmoothingEnabled = true;
				context.msImageSmoothingEnabled = true;
				context.imageSmoothingEnabled = true;
			}
			renderSession.maskManager.popRect();
			renderSession.maskManager.popObject(this);
		}
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.__tiles.length > 0) {
			if(this.__canvas == null) {
				this.__canvas = window.document.createElement("canvas");
				this.__context = this.__canvas.getContext("2d");
				openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			this.__canvas.width = this.__width;
			this.__canvas.height = this.__height;
			this.__context.globalAlpha = this.__worldAlpha;
			renderSession.context = this.__context;
			if(!(!this.__renderable || this.__tiles.length == 0 || this.__worldAlpha <= 0)) {
				var context = renderSession.context;
				renderSession.maskManager.pushObject(this);
				var rect = openfl_geom_Rectangle.__temp;
				rect.setTo(0,0,this.__width,this.__height);
				renderSession.maskManager.pushRect(rect,this.__renderTransform);
				var transform = this.__renderTransform;
				var roundPixels = renderSession.roundPixels;
				if(!renderSession.allowSmoothing || !this.smoothing) {
					context.mozImageSmoothingEnabled = false;
					context.msImageSmoothingEnabled = false;
					context.imageSmoothingEnabled = false;
				}
				var defaultTileset = this.tileset;
				var cacheBitmapData = null;
				var source = null;
				var tiles;
				var count;
				var tile;
				var alpha;
				var visible;
				var tileset;
				var tileData;
				var bitmapData;
				tiles = this.__tiles;
				count = tiles.length;
				var tileTransform = openfl_geom_Matrix.__temp;
				var _g1 = 0;
				var _g = count;
				while(_g1 < _g) {
					tile = tiles[_g1++];
					alpha = tile.alpha;
					visible = tile.visible;
					if(!visible || alpha <= 0) {
						continue;
					}
					if(tile.tileset != null) {
						tileset = tile.tileset;
					} else {
						tileset = defaultTileset;
					}
					if(tileset == null) {
						continue;
					}
					tileData = tileset.__data[tile.id];
					if(tileData == null) {
						continue;
					}
					bitmapData = tileset.bitmapData;
					if(bitmapData == null) {
						continue;
					}
					if(bitmapData != cacheBitmapData) {
						if(bitmapData.image.buffer.__srcImage == null) {
							lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmapData.image);
						}
						source = bitmapData.image.get_src();
						cacheBitmapData = bitmapData;
					}
					context.globalAlpha = this.__worldAlpha * alpha;
					tileTransform.copyFrom(tile.matrix);
					tileTransform.concat(transform);
					if(roundPixels) {
						context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,tileTransform.tx | 0,tileTransform.ty | 0);
					} else {
						context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,tileTransform.tx,tileTransform.ty);
					}
					context.drawImage(source,tileData.x,tileData.y,tileData.width,tileData.height,0,0,tileData.width,tileData.height);
				}
				if(!renderSession.allowSmoothing || !this.smoothing) {
					context.mozImageSmoothingEnabled = true;
					context.msImageSmoothingEnabled = true;
					context.imageSmoothingEnabled = true;
				}
				renderSession.maskManager.popRect();
				renderSession.maskManager.popObject(this);
			}
			renderSession.context = null;
			openfl__$internal_renderer_dom_DOMRenderer.updateClip(this,renderSession);
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(this,renderSession,true,false,true);
		} else if(this.__canvas != null) {
			renderSession.element.removeChild(this.__canvas);
			this.__canvas = null;
			this.__style = null;
		}
	}
	,__renderFlash: function() {
	}
	,__renderGL: function(renderSession) {
		openfl__$internal_renderer_opengl_GLTilemap.render(this,renderSession);
	}
	,get_height: function() {
		return this.__height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		this.__height = value | 0;
		return this.__height * Math.abs(this.get_scaleY());
	}
	,set_tileset: function(value) {
		this.__dirty = true;
		return this.tileset = value;
	}
	,get_width: function() {
		return this.__width * Math.abs(this.get_scaleX());
	}
	,set_width: function(value) {
		this.__width = value | 0;
		return this.__width * Math.abs(this.get_scaleX());
	}
	,__class__: openfl_display_Tilemap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tileset:"set_tileset"})
});
var openfl_display_Tileset = function(bitmapData,rects) {
	this.__data = [];
	this.set_bitmapData(bitmapData);
	if(rects != null) {
		var _g = 0;
		while(_g < rects.length) {
			var rect = rects[_g];
			++_g;
			this.addRect(rect);
		}
	}
};
$hxClasses["openfl.display.Tileset"] = openfl_display_Tileset;
openfl_display_Tileset.__name__ = ["openfl","display","Tileset"];
openfl_display_Tileset.prototype = {
	bitmapData: null
	,__data: null
	,addRect: function(rect) {
		if(rect == null) {
			return -1;
		}
		var tileData = new openfl_display__$Tileset_TileData(rect);
		tileData.__update(this.bitmapData);
		this.__data.push(tileData);
		return this.__data.length - 1;
	}
	,clone: function() {
		var tileset = new openfl_display_Tileset(this.bitmapData,null);
		var rect = new openfl_geom_Rectangle();
		var _g = 0;
		var _g1 = this.__data;
		while(_g < _g1.length) {
			var tileData = _g1[_g];
			++_g;
			rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
			tileset.addRect(rect);
		}
		return tileset;
	}
	,getRect: function(id) {
		if(id < this.__data.length && id >= 0) {
			return new openfl_geom_Rectangle(this.__data[id].x,this.__data[id].y,this.__data[id].width,this.__data[id].height);
		}
		return null;
	}
	,set_bitmapData: function(value) {
		this.bitmapData = value;
		var _g = 0;
		var _g1 = this.__data;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			data.__update(this.bitmapData);
		}
		return value;
	}
	,__class__: openfl_display_Tileset
	,__properties__: {set_bitmapData:"set_bitmapData"}
};
var openfl_display__$Tileset_TileData = function(rect) {
	if(rect != null) {
		this.x = rect.x | 0;
		this.y = rect.y | 0;
		this.width = rect.width | 0;
		this.height = rect.height | 0;
	}
};
$hxClasses["openfl.display._Tileset.TileData"] = openfl_display__$Tileset_TileData;
openfl_display__$Tileset_TileData.__name__ = ["openfl","display","_Tileset","TileData"];
openfl_display__$Tileset_TileData.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,__bitmapData: null
	,__uvHeight: null
	,__uvWidth: null
	,__uvX: null
	,__uvY: null
	,__update: function(bitmapData) {
		if(bitmapData != null) {
			this.__uvX = this.x / bitmapData.width;
			this.__uvY = this.y / bitmapData.height;
			this.__uvWidth = (this.x + this.width) / bitmapData.width;
			this.__uvHeight = (this.y + this.height) / bitmapData.height;
		}
	}
	,__class__: openfl_display__$Tileset_TileData
};
var openfl_display__$TriangleCulling_TriangleCulling_$Impl_$ = {};
$hxClasses["openfl.display._TriangleCulling.TriangleCulling_Impl_"] = openfl_display__$TriangleCulling_TriangleCulling_$Impl_$;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.__name__ = ["openfl","display","_TriangleCulling","TriangleCulling_Impl_"];
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.fromString = function(value) {
	switch(value) {
	case "negative":
		return 0;
	case "none":
		return 1;
	case "positive":
		return 2;
	default:
		return null;
	}
};
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "negative";
	case 1:
		return "none";
	case 2:
		return "positive";
	default:
		return null;
	}
};
var openfl_display_Window = function(config) {
	lime_ui_Window.call(this,config);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = ["openfl","display","Window"];
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	create: function(application) {
		lime_ui_Window.prototype.create.call(this,application);
		this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(this.config,"background")?this.config.background:16777215);
		if(Object.prototype.hasOwnProperty.call(this.config,"resizable") && !this.config.resizable) {
			this.stage.__setLogicalSize(this.config.width,this.config.height);
		}
		application.addModule(this.stage);
	}
	,__class__: openfl_display_Window
});
var openfl_display3D_Context3D = function(stage3D,renderSession) {
	this.totalGPUMemory = 0;
	this.profile = 0;
	this.enableErrorChecking = false;
	this.driverInfo = "OpenGL (Direct blitting)";
	this.backBufferWidth = 0;
	this.backBufferHeight = 0;
	openfl_events_EventDispatcher.call(this);
	this.__stage3D = stage3D;
	this.__renderSession = renderSession;
	this.__vertexConstants = new Float32Array(512);
	this.__fragmentConstants = new Float32Array(512);
	var array = [1.0,1.0,1.0,1.0];
	this.__positionScale = array != null?new Float32Array(array):null;
	this.__samplerDirty = 0;
	this.__samplerTextures = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this.__samplerStates = [];
	var _g = 0;
	while(_g < 8) this.__samplerStates[_g++] = new openfl__$internal_stage3D_SamplerState(9729,9729,33071,33071);
	this.maxBackBufferHeight = this.maxBackBufferWidth = lime_graphics_opengl_GL.context.getParameter(3386);
	this.__backBufferAntiAlias = 0;
	this.__backBufferEnableDepthAndStencil = true;
	this.__backBufferWantsBestResolution = false;
	this.__frameCount = 0;
	this.__rttDepthAndStencil = false;
	this.__samplerDirty = 0;
	this.__stencilCompareMode = 0;
	this.__stencilRef = 0;
	this.__stencilReadMask = 255;
	this.__supportsPackedDepthStencil = true;
	this.__stats = openfl__$Vector_Vector_$Impl_$.toIntVector(null,11);
	this.__statsCache = openfl__$Vector_Vector_$Impl_$.toIntVector(null,11);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var vendor = lime_graphics_opengl_GL.context.getParameter(7936);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var version = lime_graphics_opengl_GL.context.getParameter(7938);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var renderer = lime_graphics_opengl_GL.context.getParameter(7937);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var glslVersion = lime_graphics_opengl_GL.context.getParameter(35724);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	this.driverInfo = "OpenGL" + " Vendor=" + vendor + " Version=" + version + " Renderer=" + renderer + " GLSL=" + glslVersion;
	var _g1 = 0;
	var _g2 = this.__stats.get_length();
	while(_g1 < _g2) this.__stats.set(_g1++,0);
	openfl_display3D_Context3D.__stateCache.clearSettings();
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl_display3D_Context3D.__super__ = openfl_events_EventDispatcher;
openfl_display3D_Context3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	backBufferHeight: null
	,backBufferWidth: null
	,driverInfo: null
	,enableErrorChecking: null
	,maxBackBufferHeight: null
	,maxBackBufferWidth: null
	,profile: null
	,totalGPUMemory: null
	,__backBufferAntiAlias: null
	,__backBufferEnableDepthAndStencil: null
	,__backBufferWantsBestResolution: null
	,__depthRenderBuffer: null
	,__depthStencilRenderBuffer: null
	,__fragmentConstants: null
	,__framebuffer: null
	,__frameCount: null
	,__positionScale: null
	,__program: null
	,__renderSession: null
	,__renderToTexture: null
	,__rttDepthAndStencil: null
	,__samplerDirty: null
	,__samplerTextures: null
	,__samplerStates: null
	,__scissorRectangle: null
	,__stage3D: null
	,__stats: null
	,__statsCache: null
	,__stencilCompareMode: null
	,__stencilRef: null
	,__stencilReadMask: null
	,__stencilRenderBuffer: null
	,__supportsPackedDepthStencil: null
	,__vertexConstants: null
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = 7;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(blue == null) {
			blue = 0;
		}
		if(green == null) {
			green = 0;
		}
		if(red == null) {
			red = 0;
		}
		var clearMask = 0;
		if((mask & 1) != 0) {
			clearMask = 16384;
			lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		if((mask & 2) != 0) {
			clearMask |= 256;
			lime_graphics_opengl_GL.context.clearDepth(depth);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		if((mask & 4) != 0) {
			clearMask |= 1024;
			lime_graphics_opengl_GL.context.clearStencil(stencil);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		lime_graphics_opengl_GL.context.clear(clearMask);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom) {
		if(wantsBestResolutionOnBrowserZoom == null) {
			wantsBestResolutionOnBrowserZoom = false;
		}
		if(wantsBestResolution == null) {
			wantsBestResolution = false;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = true;
		}
		this.__updateBackbufferViewport();
		this.backBufferWidth = width;
		this.backBufferHeight = height;
		this.__backBufferAntiAlias = antiAlias;
		this.__backBufferEnableDepthAndStencil = enableDepthAndStencil;
		this.__backBufferWantsBestResolution = wantsBestResolution;
		openfl_display3D_Context3D.__stateCache.clearSettings();
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_CubeTexture(this,size,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createIndexBuffer: function(numIndices,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_IndexBuffer3D(this,numIndices,openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString(bufferUsage));
	}
	,createProgram: function() {
		return new openfl_display3D_Program3D(this);
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		return new openfl_display3D_textures_RectangleTexture(this,width,height,openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString(format),optimizeForRenderToTexture);
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_Texture(this,width,height,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createVertexBuffer: function(numVertices,data32PerVertex,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_VertexBuffer3D(this,numVertices,data32PerVertex,openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString(bufferUsage));
	}
	,createVideoTexture: function() {
		return new openfl_display3D_textures_VideoTexture(this);
	}
	,dispose: function() {
	}
	,drawToBitmapData: function(destination) {
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) {
			numTriangles = -1;
		}
		if(firstIndex == null) {
			firstIndex = 0;
		}
		if(this.__program == null) {
			return;
		}
		this.__flushSamplerState();
		this.__program.__flush();
		var count = numTriangles == -1?indexBuffer.__numIndices:numTriangles * 3;
		lime_graphics_opengl_GL.context.bindBuffer(34963,indexBuffer.__id);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.drawElements(4,count,indexBuffer.__elementType,firstIndex);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		this.__statsIncrement(0);
	}
	,present: function() {
		this.__statsSendToTelemetry();
		this.__statsClear(0);
		this.__frameCount++;
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		var updateSrc = openfl_display3D_Context3D.__stateCache.updateBlendSrcFactor(sourceFactor);
		var updateDest = openfl_display3D_Context3D.__stateCache.updateBlendDestFactor(destinationFactor);
		if(updateSrc || updateDest) {
			this.__updateBlendFactors();
		}
	}
	,setColorMask: function(red,green,blue,alpha) {
		lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		if(openfl_display3D_Context3D.__stateCache.updateCullingMode(triangleFaceToCull)) {
			switch(triangleFaceToCull) {
			case 0:
				lime_graphics_opengl_GL.context.enable(2884);
				lime_graphics_opengl_GL.context.cullFace(1028);
				break;
			case 1:
				lime_graphics_opengl_GL.context.enable(2884);
				lime_graphics_opengl_GL.context.cullFace(1029);
				break;
			case 2:
				lime_graphics_opengl_GL.context.enable(2884);
				lime_graphics_opengl_GL.context.cullFace(1032);
				break;
			case 3:
				lime_graphics_opengl_GL.context.disable(2884);
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
		}
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		var depthTestEnabled = this.__backBufferEnableDepthAndStencil;
		if(openfl_display3D_Context3D.__stateCache.updateDepthTestEnabled(depthTestEnabled)) {
			if(depthTestEnabled) {
				lime_graphics_opengl_GL.context.enable(2929);
			} else {
				lime_graphics_opengl_GL.context.disable(2929);
			}
		}
		if(openfl_display3D_Context3D.__stateCache.updateDepthTestMask(depthMask)) {
			lime_graphics_opengl_GL.context.depthMask(depthMask);
		}
		if(openfl_display3D_Context3D.__stateCache.updateDepthCompareMode(passCompareMode)) {
			switch(passCompareMode) {
			case 0:
				lime_graphics_opengl_GL.context.depthFunc(519);
				break;
			case 1:
				lime_graphics_opengl_GL.context.depthFunc(514);
				break;
			case 2:
				lime_graphics_opengl_GL.context.depthFunc(516);
				break;
			case 3:
				lime_graphics_opengl_GL.context.depthFunc(518);
				break;
			case 4:
				lime_graphics_opengl_GL.context.depthFunc(513);
				break;
			case 5:
				lime_graphics_opengl_GL.context.depthFunc(515);
				break;
			case 6:
				lime_graphics_opengl_GL.context.depthFunc(512);
				break;
			case 7:
				lime_graphics_opengl_GL.context.depthFunc(517);
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
		}
	}
	,setProgram: function(program) {
		if(program == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		if(openfl_display3D_Context3D.__stateCache.updateProgram3D(program)) {
			program.__use();
			program.__setPositionScale(this.__positionScale);
			this.__program = program;
			this.__samplerDirty |= this.__program.__samplerUsageMask;
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				var tmp = this.__program.__getSamplerState(i);
				this.__samplerStates[i].copyFrom(tmp);
			}
		}
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		if(numRegisters == 0) {
			return;
		}
		if(numRegisters == -1) {
			numRegisters = (openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data) >> 2) - byteArrayOffset;
		}
		var isVertex = programType == 1;
		var dest = isVertex?this.__vertexConstants:this.__fragmentConstants;
		var bytes = openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(data);
		var len = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
		var floatData = len == null?new Float32Array(bytes.b.bufferValue,0):new Float32Array(bytes.b.bufferValue,0,len);
		var outOffset = firstRegister * 4;
		var inOffset = _$UInt_UInt_$Impl_$.toFloat(byteArrayOffset) / _$UInt_UInt_$Impl_$.toFloat(4) | 0;
		var _g1 = 0;
		var _g = numRegisters * 4;
		while(_g1 < _g) {
			var i = _g1++;
			dest[outOffset + i] = floatData[inOffset + i];
		}
		if(this.__program != null) {
			this.__program.__markDirty(isVertex,firstRegister,numRegisters);
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) {
			transposedMatrix = false;
		}
		var isVertex = programType == 1;
		var dest = isVertex?this.__vertexConstants:this.__fragmentConstants;
		var source = matrix.rawData;
		var i = firstRegister * 4;
		if(transposedMatrix) {
			dest[i++] = source.get(0);
			dest[i++] = source.get(4);
			dest[i++] = source.get(8);
			dest[i++] = source.get(12);
			dest[i++] = source.get(1);
			dest[i++] = source.get(5);
			dest[i++] = source.get(9);
			dest[i++] = source.get(13);
			dest[i++] = source.get(2);
			dest[i++] = source.get(6);
			dest[i++] = source.get(10);
			dest[i++] = source.get(14);
			dest[i++] = source.get(3);
			dest[i++] = source.get(7);
			dest[i++] = source.get(11);
			dest[i++] = source.get(15);
		} else {
			dest[i++] = source.get(0);
			dest[i++] = source.get(1);
			dest[i++] = source.get(2);
			dest[i++] = source.get(3);
			dest[i++] = source.get(4);
			dest[i++] = source.get(5);
			dest[i++] = source.get(6);
			dest[i++] = source.get(7);
			dest[i++] = source.get(8);
			dest[i++] = source.get(9);
			dest[i++] = source.get(10);
			dest[i++] = source.get(11);
			dest[i++] = source.get(12);
			dest[i++] = source.get(13);
			dest[i++] = source.get(14);
			dest[i++] = source.get(15);
		}
		if(this.__program != null) {
			this.__program.__markDirty(isVertex,firstRegister,4);
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) {
			numRegisters = -1;
		}
		if(numRegisters == 0) {
			return;
		}
		if(numRegisters == -1) {
			numRegisters = data.get_length() >> 2;
		}
		var isVertex = programType == 1;
		var dest = isVertex?this.__vertexConstants:this.__fragmentConstants;
		var sourceIndex = 0;
		var destIndex = firstRegister * 4;
		var _g1 = 0;
		var _g = numRegisters;
		while(_g1 < _g) {
			++_g1;
			dest[destIndex++] = data.get(sourceIndex++);
			dest[destIndex++] = data.get(sourceIndex++);
			dest[destIndex++] = data.get(sourceIndex++);
			dest[destIndex++] = data.get(sourceIndex++);
		}
		if(this.__program != null) {
			this.__program.__markDirty(isVertex,firstRegister,numRegisters);
		}
	}
	,setRenderToBackBuffer: function() {
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		this.__renderToTexture = null;
		this.__scissorRectangle = null;
		this.__updateBackbufferViewport();
		this.__updateScissorRectangle();
		this.__updateDepthAndStencilState();
		this.__positionScale[1] = 1.0;
		if(this.__program != null) {
			this.__program.__setPositionScale(this.__positionScale);
		}
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) {
			surfaceSelector = 0;
		}
		if(antiAlias == null) {
			antiAlias = 0;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
		var width = 0;
		var height = 0;
		if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
			var texture2D = texture;
			width = texture2D.__width;
			height = texture2D.__height;
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
			var rectTexture = texture;
			width = rectTexture.__width;
			height = rectTexture.__height;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Invalid texture"));
		}
		if(this.__framebuffer == null) {
			this.__framebuffer = lime_graphics_opengl_GL.context.createFramebuffer();
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,this.__framebuffer);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.framebufferTexture2D(36160,36064,3553,texture.__textureID,0);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(enableDepthAndStencil) {
			if(this.__supportsPackedDepthStencil) {
				if(this.__depthStencilRenderBuffer == null) {
					this.__depthStencilRenderBuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.__depthStencilRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.renderbufferStorage(36161,34041,width,height);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,33306,36161,this.__depthStencilRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			} else {
				if(this.__depthRenderBuffer == null) {
					this.__depthRenderBuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				if(this.__stencilRenderBuffer == null) {
					this.__stencilRenderBuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.__depthRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.renderbufferStorage(36161,33189,width,height);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.__stencilRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.renderbufferStorage(36161,36168,width,height);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,36096,36161,this.__depthRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,36128,36161,this.__stencilRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		this.__setViewport(0,0,width,height);
		if(this.enableErrorChecking) {
			if(lime_graphics_opengl_GL.context.checkFramebufferStatus(36160) != 36053) {
				haxe_Log.trace("Error: Context3D.setRenderToTexture status:${code} width:${texture2D.__width} height:${texture2D.__height}",{ fileName : "Context3D.hx", lineNumber : 726, className : "openfl.display3D.Context3D", methodName : "setRenderToTexture"});
			}
		}
		this.__positionScale[1] = -1.0;
		if(this.__program != null) {
			this.__program.__setPositionScale(this.__positionScale);
		}
		this.__renderToTexture = texture;
		this.__scissorRectangle = null;
		this.__rttDepthAndStencil = enableDepthAndStencil;
		this.__updateScissorRectangle();
		this.__updateDepthAndStencilState();
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(sampler < 0 || sampler > 8) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("sampler out of range"));
		}
		var state = this.__samplerStates[sampler];
		switch(wrap) {
		case 0:
			state.wrapModeS = 33071;
			state.wrapModeT = 33071;
			break;
		case 1:
			state.wrapModeS = 33071;
			state.wrapModeT = 10497;
			break;
		case 2:
			state.wrapModeS = 10497;
			state.wrapModeT = 10497;
			break;
		case 3:
			state.wrapModeS = 10497;
			state.wrapModeT = 33071;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("wrap bad enum"));
		}
		switch(filter) {
		case 0:
			state.magFilter = 9729;
			break;
		case 1:
			state.magFilter = 9729;
			break;
		case 2:
			state.magFilter = 9729;
			break;
		case 3:
			state.magFilter = 9729;
			break;
		case 4:
			state.magFilter = 9729;
			break;
		case 5:
			state.magFilter = 9728;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("filter bad enum"));
		}
		switch(mipfilter) {
		case 0:
			state.minFilter = 9987;
			break;
		case 1:
			state.minFilter = 9984;
			break;
		case 2:
			state.minFilter = filter == 5?9728:9729;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("mipfiter bad enum"));
		}
	}
	,setScissorRectangle: function(rectangle) {
		this.__scissorRectangle = rectangle != null?rectangle.clone():null;
		this.__updateScissorRectangle();
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		if(actionOnDepthPassStencilFail == null) {
			actionOnDepthPassStencilFail = 5;
		}
		if(actionOnDepthFail == null) {
			actionOnDepthFail = 5;
		}
		if(actionOnBothPass == null) {
			actionOnBothPass = 5;
		}
		if(compareMode == null) {
			compareMode = 0;
		}
		if(triangleFace == null) {
			triangleFace = 2;
		}
		this.__stencilCompareMode = compareMode;
		lime_graphics_opengl_GL.context.stencilOp(this.__getGLStencilAction(actionOnDepthFail),this.__getGLStencilAction(actionOnDepthPassStencilFail),this.__getGLStencilAction(actionOnBothPass));
		lime_graphics_opengl_GL.context.stencilFunc(this.__getGLCompareMode(this.__stencilCompareMode),this.__stencilRef,this.__stencilReadMask);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		this.__stencilReadMask = readMask;
		this.__stencilRef = referenceValue;
		lime_graphics_opengl_GL.context.stencilFunc(this.__getGLCompareMode(this.__stencilCompareMode),this.__stencilRef,this.__stencilReadMask);
		lime_graphics_opengl_GL.context.stencilMask(writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		if(this.__samplerTextures.get(sampler) != texture) {
			this.__samplerTextures.set(sampler,texture);
			this.__samplerDirty |= 1 << sampler;
		}
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(format == null) {
			format = 4;
		}
		if(bufferOffset == null) {
			bufferOffset = 0;
		}
		if(buffer == null) {
			lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.bindBuffer(34962,null);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			return;
		}
		lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bindBuffer(34962,buffer.__id);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var byteOffset = bufferOffset * 4;
		switch(format) {
		case 0:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,4,5121,true,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		case 1:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,1,5126,false,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		case 2:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,2,5126,false,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		case 3:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,3,5126,false,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		case 4:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,4,5126,false,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
	}
	,__flushSamplerState: function() {
		var sampler = 0;
		while(this.__samplerDirty != 0) {
			if((this.__samplerDirty & 1 << sampler) != 0) {
				if(openfl_display3D_Context3D.__stateCache.updateActiveTextureSample(sampler)) {
					lime_graphics_opengl_GL.context.activeTexture(33984 + sampler);
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				var texture = this.__samplerTextures.get(sampler);
				if(texture != null) {
					lime_graphics_opengl_GL.context.bindTexture(texture.__textureTarget,texture.__getTexture());
					openfl__$internal_stage3D_GLUtils.CheckGLError();
					texture.__setSamplerState(this.__samplerStates[sampler]);
				} else {
					lime_graphics_opengl_GL.context.bindTexture(3553,null);
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				this.__samplerDirty &= ~(1 << sampler);
			}
			++sampler;
		}
	}
	,__getGLCompareMode: function(compareMode) {
		switch(compareMode) {
		case 0:
			return 519;
		case 1:
			return 514;
		case 2:
			return 516;
		case 3:
			return 518;
		case 4:
			return 513;
		case 5:
			return 515;
		case 6:
			return 512;
		case 7:
			return 517;
		default:
			return 514;
		}
	}
	,__getGLStencilAction: function(stencilAction) {
		switch(stencilAction) {
		case 0:
			return 7683;
		case 1:
			return 34056;
		case 2:
			return 7682;
		case 3:
			return 34055;
		case 4:
			return 5386;
		case 5:
			return 7680;
		case 6:
			return 7681;
		case 7:
			return 0;
		default:
			return 7680;
		}
	}
	,__hasGLExtension: function(name) {
		return lime_graphics_opengl_GL.context.getSupportedExtensions().indexOf(name) != -1;
	}
	,__setViewport: function(originX,originY,width,height) {
		if(openfl_display3D_Context3D.__stateCache.updateViewport(originX,originY,width,height)) {
			lime_graphics_opengl_GL.context.viewport(originX,originY,width,height);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	,__statsAdd: function(stat,value) {
		this.__stats.set(stat,this.__stats.get(stat) + value);
		return this.__stats.get(stat);
	}
	,__statsClear: function(stat) {
		this.__stats.set(stat,0);
	}
	,__statsDecrement: function(stat) {
		this.__stats.set(stat,this.__stats.get(stat) - 1);
	}
	,__statsIncrement: function(stat) {
		this.__stats.set(stat,this.__stats.get(stat) + 1);
	}
	,__statsSendToTelemetry: function() {
	}
	,__statsSubtract: function(stat,value) {
		this.__stats.set(stat,this.__stats.get(stat) - value);
		return this.__stats.get(stat);
	}
	,__updateDepthAndStencilState: function() {
		if(this.__renderToTexture != null?this.__rttDepthAndStencil:this.__backBufferEnableDepthAndStencil) {
			lime_graphics_opengl_GL.context.enable(2929);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.enable(2960);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			lime_graphics_opengl_GL.context.disable(2929);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.disable(2960);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	,__updateBlendFactors: function() {
		if(openfl_display3D_Context3D.__stateCache._srcBlendFactor == null || openfl_display3D_Context3D.__stateCache._destBlendFactor == null) {
			return;
		}
		var src = 1;
		var dest = 0;
		switch(openfl_display3D_Context3D.__stateCache._srcBlendFactor) {
		case 0:
			src = 772;
			break;
		case 1:
			src = 774;
			break;
		case 2:
			src = 1;
			break;
		case 3:
			src = 773;
			break;
		case 4:
			src = 775;
			break;
		case 5:
			src = 771;
			break;
		case 7:
			src = 770;
			break;
		case 9:
			src = 0;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		switch(openfl_display3D_Context3D.__stateCache._destBlendFactor) {
		case 0:
			dest = 772;
			break;
		case 2:
			dest = 1;
			break;
		case 3:
			dest = 773;
			break;
		case 5:
			dest = 771;
			break;
		case 6:
			dest = 769;
			break;
		case 7:
			dest = 770;
			break;
		case 8:
			dest = 768;
			break;
		case 9:
			dest = 0;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		lime_graphics_opengl_GL.context.enable(3042);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.blendFunc(src,dest);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	,__updateScissorRectangle: function() {
		if(this.__scissorRectangle == null) {
			lime_graphics_opengl_GL.context.disable(3089);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			return;
		}
		lime_graphics_opengl_GL.context.enable(3089);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var height = 0;
		if(this.__renderToTexture != null) {
			if(js_Boot.__instanceof(this.__renderToTexture,openfl_display3D_textures_Texture)) {
				height = this.__renderToTexture.__height;
			} else if(js_Boot.__instanceof(this.__renderToTexture,openfl_display3D_textures_RectangleTexture)) {
				height = this.__renderToTexture.__height;
			}
		} else {
			height = this.backBufferHeight;
		}
		lime_graphics_opengl_GL.context.scissor(this.__scissorRectangle.x | 0,height - (this.__scissorRectangle.y | 0) - (this.__scissorRectangle.height | 0) | 0,this.__scissorRectangle.width | 0,this.__scissorRectangle.height | 0);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	,__updateBackbufferViewport: function() {
		if(this.__renderToTexture == null) {
			this.__setViewport(this.__stage3D.x | 0,this.__stage3D.y | 0,this.backBufferWidth,this.backBufferHeight);
		}
	}
	,set_enableErrorChecking: function(value) {
		return this.enableErrorChecking = openfl__$internal_stage3D_GLUtils.debug = value;
	}
	,__class__: openfl_display3D_Context3D
	,__properties__: {set_enableErrorChecking:"set_enableErrorChecking"}
});
var openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3D.Context3DTelemetry_Impl_"] = openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.__name__ = ["openfl","display3D","_Context3D","Context3DTelemetry_Impl_"];
var openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_"] = openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.__name__ = ["openfl","display3D","_Context3DBlendFactor","Context3DBlendFactor_Impl_"];
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.fromString = function(value) {
	switch(value) {
	case "destinationAlpha":
		return 0;
	case "destinationColor":
		return 1;
	case "one":
		return 2;
	case "oneMinusDestinationAlpha":
		return 3;
	case "oneMinusDestinationColor":
		return 4;
	case "oneMinusSourceAlpha":
		return 5;
	case "oneMinusSourceColor":
		return 6;
	case "sourceAlpha":
		return 7;
	case "sourceColor":
		return 8;
	case "zero":
		return 9;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "destinationAlpha";
	case 1:
		return "destinationColor";
	case 2:
		return "one";
	case 3:
		return "oneMinusDestinationAlpha";
	case 4:
		return "oneMinusDestinationColor";
	case 5:
		return "oneMinusSourceAlpha";
	case 6:
		return "oneMinusSourceColor";
	case 7:
		return "sourceAlpha";
	case 8:
		return "sourceColor";
	case 9:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DBufferUsage.Context3DBufferUsage_Impl_"] = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.__name__ = ["openfl","display3D","_Context3DBufferUsage","Context3DBufferUsage_Impl_"];
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamicDraw":
		return 0;
	case "staticDraw":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamicDraw";
	case 1:
		return "staticDraw";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"] = openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DCompareMode","Context3DCompareMode_Impl_"];
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "equal":
		return 1;
	case "greater":
		return 2;
	case "greaterEqual":
		return 3;
	case "less":
		return 4;
	case "lessEqual":
		return 5;
	case "never":
		return 6;
	case "notEqual":
		return 7;
	default:
		return null;
	}
};
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "always";
	case 1:
		return "equal";
	case 2:
		return "greater";
	case 3:
		return "greaterEqual";
	case 4:
		return "less";
	case 5:
		return "lessEqual";
	case 6:
		return "never";
	case 7:
		return "notEqual";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DMipFilter.Context3DMipFilter_Impl_"] = openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.__name__ = ["openfl","display3D","_Context3DMipFilter","Context3DMipFilter_Impl_"];
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.fromString = function(value) {
	switch(value) {
	case "miplinear":
		return 0;
	case "mipnearest":
		return 1;
	case "mipnone":
		return 2;
	default:
		return null;
	}
};
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "miplinear";
	case 1:
		return "mipnearest";
	case 2:
		return "mipnone";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DProfile.Context3DProfile_Impl_"] = openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.__name__ = ["openfl","display3D","_Context3DProfile","Context3DProfile_Impl_"];
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.fromString = function(value) {
	switch(value) {
	case "baseline":
		return 0;
	case "baselineConstrained":
		return 1;
	case "baselineExtended":
		return 2;
	case "standard":
		return 3;
	case "standardConstrained":
		return 4;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "baseline";
	case 1:
		return "baselineConstrained";
	case 2:
		return "baselineExtended";
	case 3:
		return "standard";
	case 4:
		return "standardConstrained";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DProgramType.Context3DProgramType_Impl_"] = openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.__name__ = ["openfl","display3D","_Context3DProgramType","Context3DProgramType_Impl_"];
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fragment":
		return 0;
	case "vertex":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fragment";
	case 1:
		return "vertex";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DRenderMode.Context3DRenderMode_Impl_"] = openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DRenderMode","Context3DRenderMode_Impl_"];
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "auto":
		return 0;
	case "software":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "auto";
	case 1:
		return "software";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_"] = openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.__name__ = ["openfl","display3D","_Context3DStencilAction","Context3DStencilAction_Impl_"];
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.fromString = function(value) {
	switch(value) {
	case "decrementSaturate":
		return 0;
	case "decrementWrap":
		return 1;
	case "incrementSaturate":
		return 2;
	case "incrementWrap":
		return 3;
	case "invert":
		return 4;
	case "keep":
		return 5;
	case "set":
		return 6;
	case "zero":
		return 7;
	default:
		return null;
	}
};
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "decrementSaturate";
	case 1:
		return "decrementWrap";
	case 2:
		return "incrementSaturate";
	case 3:
		return "incrementWrap";
	case 4:
		return "invert";
	case 5:
		return "keep";
	case 6:
		return "set";
	case 7:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFilter.Context3DTextureFilter_Impl_"] = openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFilter","Context3DTextureFilter_Impl_"];
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.fromString = function(value) {
	switch(value) {
	case "anisotropic16x":
		return 0;
	case "anisotropic2x":
		return 1;
	case "anisotropic4x":
		return 2;
	case "anisotropic8x":
		return 3;
	case "linear":
		return 4;
	case "nearest":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "anisotropic16x";
	case 1:
		return "anisotropic2x";
	case 2:
		return "anisotropic4x";
	case 3:
		return "anisotropic8x";
	case 4:
		return "linear";
	case 5:
		return "nearest";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFormat.Context3DTextureFormat_Impl_"] = openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFormat","Context3DTextureFormat_Impl_"];
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bgrPacked565":
		return 0;
	case "bgra":
		return 1;
	case "bgraPacked4444":
		return 2;
	case "compressed":
		return 3;
	case "compressedAlpha":
		return 4;
	case "rgbaHalfFloat":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bgrPacked565";
	case 1:
		return "bgra";
	case 2:
		return "bgraPacked4444";
	case 3:
		return "compressed";
	case 4:
		return "compressedAlpha";
	case 5:
		return "rgbaHalfFloat";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromString = function(value) {
	switch(value) {
	case "back":
		return 0;
	case "front":
		return 1;
	case "frontAndBack":
		return 2;
	case "none":
		return 3;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "back";
	case 1:
		return "front";
	case 2:
		return "frontAndBack";
	case 3:
		return "none";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DVertexBufferFormat.Context3DVertexBufferFormat_Impl_"] = openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DVertexBufferFormat","Context3DVertexBufferFormat_Impl_"];
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bytes4":
		return 0;
	case "float1":
		return 1;
	case "float2":
		return 2;
	case "float3":
		return 3;
	case "float4":
		return 4;
	default:
		return null;
	}
};
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bytes4";
	case 1:
		return "float1";
	case 2:
		return "float2";
	case 3:
		return "float3";
	case 4:
		return "float4";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DWrapMode.Context3DWrapMode_Impl_"] = openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DWrapMode","Context3DWrapMode_Impl_"];
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "clamp":
		return 0;
	case "clamp_u_repeat_y":
		return 1;
	case "repeat":
		return 2;
	case "repeat_u_clamp_y":
		return 3;
	default:
		return null;
	}
};
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "clamp";
	case 1:
		return "clamp_u_repeat_y";
	case 2:
		return "repeat";
	case 3:
		return "repeat_u_clamp_y";
	default:
		return null;
	}
};
var openfl_display3D_IndexBuffer3D = function(context3D,numIndices,bufferUsage) {
	this.__context = context3D;
	this.__numIndices = numIndices;
	this.__elementType = 5123;
	this.__id = lime_graphics_opengl_GL.context.createBuffer();
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	this.__usage = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString(bufferUsage) == 0?35048:35044;
	this.__context.__statsIncrement(1);
	this.__memoryUsage = 0;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl_display3D_IndexBuffer3D.prototype = {
	__context: null
	,__elementType: null
	,__id: null
	,__memoryUsage: null
	,__numIndices: null
	,__usage: null
	,dispose: function() {
		lime_graphics_opengl_GL.context.deleteBuffer(this.__id);
		this.__context.__statsDecrement(1);
		this.__context.__statsSubtract(6,this.__memoryUsage);
		this.__memoryUsage = 0;
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startOffset,count) {
		var offset = byteArrayOffset + startOffset * 2;
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		this.uploadFromTypedArray(buffer != null?count == null?new Int16Array(buffer,offset):new Int16Array(buffer,offset,count):null);
	}
	,uploadFromTypedArray: function(data) {
		if(data == null) {
			return;
		}
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.__id);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bufferData(34963,data,this.__usage);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(data.byteLength != this.__memoryUsage) {
			this.__context.__statsAdd(6,data.byteLength - this.__memoryUsage);
			this.__memoryUsage = data.byteLength;
		}
	}
	,uploadFromVector: function(data,startOffset,count) {
		var length = startOffset + count;
		var buffer = count != null?new Int16Array(count):null;
		var _g1 = startOffset;
		while(_g1 < length) {
			var i = _g1++;
			buffer[i - startOffset] = data.get(i);
		}
		this.uploadFromTypedArray(buffer);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(context3D) {
	this.__context = context3D;
	this.__memUsage = 0;
	this.__samplerUsageMask = 0;
	this.__uniforms = new List();
	this.__samplerUniforms = new List();
	this.__alphaSamplerUniforms = new List();
	this.__samplerStates = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl_display3D_Program3D.prototype = {
	__alphaSamplerUniforms: null
	,__context: null
	,__fragmentShaderID: null
	,__fragmentSource: null
	,__fragmentUniformMap: null
	,__memUsage: null
	,__positionScale: null
	,__programID: null
	,__samplerStates: null
	,__samplerUniforms: null
	,__samplerUsageMask: null
	,__uniforms: null
	,__vertexShaderID: null
	,__vertexSource: null
	,__vertexUniformMap: null
	,dispose: function() {
		this.__deleteShaders();
	}
	,upload: function(vertexProgram,fragmentProgram) {
		var samplerStates = [];
		this.__uploadFromGLSL(openfl__$internal_stage3D_AGALConverter.convertToGLSL(vertexProgram,null),openfl__$internal_stage3D_AGALConverter.convertToGLSL(fragmentProgram,samplerStates));
		var _g1 = 0;
		var _g = samplerStates.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.__setSamplerState(i,samplerStates[i]);
		}
	}
	,__buildUniformList: function() {
		this.__uniforms.clear();
		this.__samplerUniforms.clear();
		this.__alphaSamplerUniforms.clear();
		this.__samplerUsageMask = 0;
		var numActive = 0;
		numActive = lime_graphics_opengl_GL.context.getProgramParameter(this.__programID,35718);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var vertexUniforms = new List();
		var fragmentUniforms = new List();
		var _g1 = 0;
		var _g = numActive;
		while(_g1 < _g) {
			var i = _g1++;
			var info = lime_graphics_opengl_GL.context.getActiveUniform(this.__programID,i);
			var name = info.name;
			var size = info.size;
			var uniformType = info.type;
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			var uniform = new openfl_display3D__$Program3D_Uniform();
			uniform.name = name;
			uniform.size = size;
			uniform.type = uniformType;
			uniform.location = lime_graphics_opengl_GL.context.getUniformLocation(this.__programID,uniform.name);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			var indexBracket = uniform.name.indexOf("[");
			if(indexBracket >= 0) {
				uniform.name = uniform.name.substring(0,indexBracket);
			}
			switch(uniform.type) {
			case 35674:
				uniform.regCount = 2;
				break;
			case 35675:
				uniform.regCount = 3;
				break;
			case 35676:
				uniform.regCount = 4;
				break;
			default:
				uniform.regCount = 1;
			}
			uniform.regCount *= uniform.size;
			this.__uniforms.add(uniform);
			if(uniform.name == "vcPositionScale") {
				this.__positionScale = uniform;
			} else if(StringTools.startsWith(uniform.name,"vc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__vertexConstants;
				vertexUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"fc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__fragmentConstants;
				fragmentUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"sampler") && !StringTools.endsWith(uniform.name,"_alpha")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7));
				this.__samplerUniforms.add(uniform);
				var _g4 = 0;
				var _g3 = uniform.regCount;
				while(_g4 < _g3) this.__samplerUsageMask |= 1 << uniform.regIndex + _g4++;
			} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alpha")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7,7 + (uniform.name.indexOf("_") - 7))) + 4;
				this.__alphaSamplerUniforms.add(uniform);
			}
			if(openfl_display3D_Program3D.verbose) {
				haxe_Log.trace("" + i + " name:" + uniform.name + " type:" + uniform.type + " size:" + uniform.size + " location:" + Std.string(uniform.location),{ fileName : "Program3D.hx", lineNumber : 174, className : "openfl.display3D.Program3D", methodName : "__buildUniformList"});
			}
		}
		this.__vertexUniformMap = new openfl_display3D__$Program3D_UniformMap(Lambda.array(vertexUniforms));
		this.__fragmentUniformMap = new openfl_display3D__$Program3D_UniformMap(Lambda.array(fragmentUniforms));
	}
	,__deleteShaders: function() {
		if(this.__programID != null) {
			this.__programID = null;
		}
		if(this.__vertexShaderID != null) {
			lime_graphics_opengl_GL.context.deleteShader(this.__vertexShaderID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			this.__vertexShaderID = null;
		}
		if(this.__fragmentShaderID != null) {
			lime_graphics_opengl_GL.context.deleteShader(this.__fragmentShaderID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			this.__fragmentShaderID = null;
		}
		if(this.__memUsage != 0) {
			this.__context.__statsDecrement(5);
			this.__context.__statsSubtract(10,this.__memUsage);
			this.__memUsage = 0;
		}
	}
	,__flush: function() {
		this.__vertexUniformMap.flush();
		this.__fragmentUniformMap.flush();
	}
	,__getSamplerState: function(sampler) {
		return this.__samplerStates.get(sampler);
	}
	,__markDirty: function(isVertex,index,count) {
		if(isVertex) {
			this.__vertexUniformMap.markDirty(index,count);
		} else {
			this.__fragmentUniformMap.markDirty(index,count);
		}
	}
	,__setPositionScale: function(positionScale) {
		if(this.__positionScale != null) {
			lime_graphics_opengl_GL.context.uniform4fv(this.__positionScale.location,positionScale);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	,__setSamplerState: function(sampler,state) {
		this.__samplerStates.set(sampler,state);
	}
	,__uploadFromGLSL: function(vertexShaderSource,fragmentShaderSource) {
		this.__deleteShaders();
		if(openfl_display3D_Program3D.verbose) {
			haxe_Log.trace(vertexShaderSource,{ fileName : "Program3D.hx", lineNumber : 278, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
			haxe_Log.trace(fragmentShaderSource,{ fileName : "Program3D.hx", lineNumber : 279, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__vertexSource = vertexShaderSource;
		this.__fragmentSource = fragmentShaderSource;
		this.__vertexShaderID = lime_graphics_opengl_GL.context.createShader(35633);
		lime_graphics_opengl_GL.context.shaderSource(this.__vertexShaderID,vertexShaderSource);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.compileShader(this.__vertexShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var shaderCompiled = lime_graphics_opengl_GL.context.getShaderParameter(this.__vertexShaderID,35713);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(shaderCompiled == 0) {
			var vertexInfoLog = lime_graphics_opengl_GL.context.getShaderInfoLog(this.__vertexShaderID);
			if(vertexInfoLog != null && vertexInfoLog.length != 0) {
				haxe_Log.trace("vertex: " + vertexInfoLog,{ fileName : "Program3D.hx", lineNumber : 303, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
			}
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error compiling vertex shader: " + vertexInfoLog));
		}
		this.__fragmentShaderID = lime_graphics_opengl_GL.context.createShader(35632);
		lime_graphics_opengl_GL.context.shaderSource(this.__fragmentShaderID,fragmentShaderSource);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.compileShader(this.__fragmentShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(lime_graphics_opengl_GL.context.getShaderParameter(this.__fragmentShaderID,35713) == 0) {
			var fragmentInfoLog = lime_graphics_opengl_GL.context.getShaderInfoLog(this.__fragmentShaderID);
			if(fragmentInfoLog != null && fragmentInfoLog.length != 0) {
				haxe_Log.trace("fragment: " + fragmentInfoLog,{ fileName : "Program3D.hx", lineNumber : 326, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
			}
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error compiling fragment shader: " + fragmentInfoLog));
		}
		this.__programID = lime_graphics_opengl_GL.context.createProgram();
		lime_graphics_opengl_GL.context.attachShader(this.__programID,this.__vertexShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.attachShader(this.__programID,this.__fragmentShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var name = "va" + i;
			if(vertexShaderSource.indexOf(" " + name) != -1) {
				lime_graphics_opengl_GL.context.bindAttribLocation(this.__programID,i,name);
			}
		}
		lime_graphics_opengl_GL.context.linkProgram(this.__programID);
		var infoLog = lime_graphics_opengl_GL.context.getProgramInfoLog(this.__programID);
		if(infoLog != null && infoLog.length != 0) {
			haxe_Log.trace("program: ${infoLog}",{ fileName : "Program3D.hx", lineNumber : 359, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__buildUniformList();
		this.__memUsage = 1;
		this.__context.__statsIncrement(5);
		this.__context.__statsAdd(10,this.__memUsage);
	}
	,__use: function() {
		var program = this.__programID;
		lime_graphics_opengl_GL.__currentProgram = program;
		lime_graphics_opengl_GL.context.useProgram(program);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		this.__vertexUniformMap.markAllDirty();
		this.__fragmentUniformMap.markAllDirty();
		var _g_head = this.__samplerUniforms.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			if(val.regCount == 1) {
				lime_graphics_opengl_GL.context.uniform1i(val.location,val.regIndex);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			} else {
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
			}
		}
		var _g_head1 = this.__alphaSamplerUniforms.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			if(val1.regCount == 1) {
				lime_graphics_opengl_GL.context.uniform1i(val1.location,val1.regIndex);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			} else {
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
			}
		}
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D__$Program3D_Uniform = function() {
	this.isDirty = true;
};
$hxClasses["openfl.display3D._Program3D.Uniform"] = openfl_display3D__$Program3D_Uniform;
openfl_display3D__$Program3D_Uniform.__name__ = ["openfl","display3D","_Program3D","Uniform"];
openfl_display3D__$Program3D_Uniform.prototype = {
	name: null
	,location: null
	,type: null
	,size: null
	,regData: null
	,regIndex: null
	,regCount: null
	,isDirty: null
	,flush: function() {
		var index = this.regIndex * 4;
		switch(this.type) {
		case 35664:
			lime_graphics_opengl_GL.context.uniform2fv(this.location,this.__getRegisters(index,this.regCount * 2));
			break;
		case 35665:
			lime_graphics_opengl_GL.context.uniform3fv(this.location,this.__getRegisters(index,this.regCount * 3));
			break;
		case 35666:
			lime_graphics_opengl_GL.context.uniform4fv(this.location,this.__getRegisters(index,this.regCount * 4));
			break;
		case 35674:
			lime_graphics_opengl_GL.context.uniformMatrix2fv(this.location,false,this.__getRegisters(index,this.size * 2 * 2));
			break;
		case 35675:
			lime_graphics_opengl_GL.context.uniformMatrix3fv(this.location,false,this.__getRegisters(index,this.size * 3 * 3));
			break;
		case 35676:
			lime_graphics_opengl_GL.context.uniformMatrix4fv(this.location,false,this.__getRegisters(index,this.size * 4 * 4));
			break;
		default:
			lime_graphics_opengl_GL.context.uniform4fv(this.location,this.__getRegisters(index,this.regCount * 4));
		}
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	,__getRegisters: function(index,size) {
		return this.regData.subarray(index,index + size);
	}
	,__class__: openfl_display3D__$Program3D_Uniform
};
var openfl_display3D__$Program3D_UniformMap = function(list) {
	this.__uniforms = list;
	this.__uniforms.sort(function(a,b) {
		return Reflect.compare(a.regIndex,b.regIndex);
	});
	var total = 0;
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		if(uniform.regIndex + uniform.regCount > total) {
			total = uniform.regIndex + uniform.regCount;
		}
	}
	this.__registerLookup = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,total);
	var _g2 = 0;
	var _g11 = this.__uniforms;
	while(_g2 < _g11.length) {
		var uniform1 = _g11[_g2];
		++_g2;
		var _g3 = 0;
		var _g21 = uniform1.regCount;
		while(_g3 < _g21) this.__registerLookup.set(uniform1.regIndex + _g3++,uniform1);
	}
	this.__anyDirty = this.__allDirty = true;
};
$hxClasses["openfl.display3D._Program3D.UniformMap"] = openfl_display3D__$Program3D_UniformMap;
openfl_display3D__$Program3D_UniformMap.__name__ = ["openfl","display3D","_Program3D","UniformMap"];
openfl_display3D__$Program3D_UniformMap.prototype = {
	__allDirty: null
	,__anyDirty: null
	,__registerLookup: null
	,__uniforms: null
	,flush: function() {
		if(this.__anyDirty) {
			var _g = 0;
			var _g1 = this.__uniforms;
			while(_g < _g1.length) {
				var uniform = _g1[_g];
				++_g;
				if(this.__allDirty || uniform.isDirty) {
					uniform.flush();
					uniform.isDirty = false;
				}
			}
			this.__anyDirty = this.__allDirty = false;
		}
	}
	,markAllDirty: function() {
		this.__allDirty = true;
		this.__anyDirty = true;
	}
	,markDirty: function(start,count) {
		if(this.__allDirty) {
			return;
		}
		var end = start + count;
		if(end > this.__registerLookup.get_length()) {
			end = this.__registerLookup.get_length();
		}
		var index = start;
		while(index < end) {
			var uniform = this.__registerLookup.get(index);
			if(uniform != null) {
				uniform.isDirty = true;
				this.__anyDirty = true;
				index = uniform.regIndex + uniform.regCount;
			} else {
				++index;
			}
		}
	}
	,__class__: openfl_display3D__$Program3D_UniformMap
};
var openfl_display3D_VertexBuffer3D = function(context3D,numVertices,dataPerVertex,bufferUsage) {
	this.__context = context3D;
	this.__numVertices = numVertices;
	this.__vertexSize = dataPerVertex;
	this.__id = lime_graphics_opengl_GL.context.createBuffer();
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	this.__stride = this.__vertexSize * 4;
	this.__memoryUsage = 0;
	this.__usage = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString(bufferUsage) == 0?35048:35044;
	this.__context.__statsIncrement(2);
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl_display3D_VertexBuffer3D.prototype = {
	__context: null
	,__data: null
	,__id: null
	,__memoryUsage: null
	,__numVertices: null
	,__stride: null
	,__usage: null
	,__vertexSize: null
	,dispose: function() {
		lime_graphics_opengl_GL.context.deleteBuffer(this.__id);
		this.__context.__statsDecrement(2);
		this.__context.__statsSubtract(7,this.__memoryUsage);
		this.__memoryUsage = 0;
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startVertex,numVertices) {
		var offset = byteArrayOffset + startVertex * this.__stride;
		var length = numVertices * this.__vertexSize;
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		this.uploadFromTypedArray(buffer != null?length == null?new Float32Array(buffer,offset):new Float32Array(buffer,offset,length):null);
	}
	,uploadFromTypedArray: function(data) {
		if(data == null) {
			return;
		}
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.__id);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bufferData(34962,data,this.__usage);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(data.byteLength != this.__memoryUsage) {
			this.__context.__statsAdd(7,data.byteLength - this.__memoryUsage);
			this.__memoryUsage = data.byteLength;
		}
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		var start = startVertex * this.__vertexSize;
		var count = numVertices * this.__vertexSize;
		var length = start + count;
		var buffer = count != null?new Float32Array(count):null;
		var _g1 = start;
		while(_g1 < length) {
			var i = _g1++;
			buffer[i - start] = data.get(i);
		}
		this.uploadFromTypedArray(buffer);
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D_textures_TextureBase = function(context,target) {
	this.__outputTextureMemoryUsage = false;
	openfl_events_EventDispatcher.call(this);
	this.__context = context;
	this.__textureTarget = target;
	this.__textureID = lime_graphics_opengl_GL.context.createTexture();
	this.__internalFormat = 6408;
	this.__format = 6408;
	this.__memoryUsage = 0;
	this.__compressedMemoryUsage = 0;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__alphaTexture: null
	,__compressedMemoryUsage: null
	,__context: null
	,__format: null
	,__height: null
	,__internalFormat: null
	,__memoryUsage: null
	,__optimizeForRenderToTexture: null
	,__outputTextureMemoryUsage: null
	,__samplerState: null
	,__streamingLevels: null
	,__textureID: null
	,__textureTarget: null
	,__width: null
	,dispose: function() {
		if(this.__alphaTexture != null) {
			this.__alphaTexture.dispose();
		}
		lime_graphics_opengl_GL.context.deleteTexture(this.__textureID);
		if(this.__compressedMemoryUsage > 0) {
			this.__context.__statsDecrement(4);
			var currentCompressedMemory = this.__context.__statsSubtract(9,this.__compressedMemoryUsage);
			if(this.__outputTextureMemoryUsage) {
				haxe_Log.trace(" - Texture Compressed GPU Memory (-" + this.__compressedMemoryUsage + ") - Current Compressed Memory : " + currentCompressedMemory,{ fileName : "TextureBase.hx", lineNumber : 96, className : "openfl.display3D.textures.TextureBase", methodName : "dispose"});
			}
			this.__compressedMemoryUsage = 0;
		}
		if(this.__memoryUsage > 0) {
			this.__context.__statsDecrement(3);
			var currentMemory = this.__context.__statsSubtract(8,this.__memoryUsage);
			if(this.__outputTextureMemoryUsage) {
				haxe_Log.trace(" - Texture GPU Memory (-" + this.__memoryUsage + ") - Current Memory : " + currentMemory,{ fileName : "TextureBase.hx", lineNumber : 113, className : "openfl.display3D.textures.TextureBase", methodName : "dispose"});
			}
			this.__memoryUsage = 0;
		}
	}
	,__getImage: function(bitmapData) {
		var image = bitmapData.image;
		if(!bitmapData.__isValid || image == null) {
			return null;
		}
		lime_graphics_utils_ImageCanvasUtil.sync(image,false);
		if(image.type != lime_graphics_ImageType.DATA && !image.get_premultiplied()) {
			lime_graphics_opengl_GL.context.pixelStorei(37441,1);
		} else if(!image.get_premultiplied() && image.get_transparent()) {
			lime_graphics_opengl_GL.context.pixelStorei(37441,0);
			image = image.clone();
			image.set_premultiplied(true);
		}
		if(image.get_format() != 0) {
			image = image.clone();
			image.set_format(0);
			image.buffer.premultiplied = true;
		}
		return image;
	}
	,__getTexture: function() {
		return this.__textureID;
	}
	,__setSamplerState: function(state) {
		if(!state.equals(this.__samplerState)) {
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texParameteri(this.__textureTarget,10241,state.minFilter);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texParameteri(this.__textureTarget,10240,state.magFilter);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texParameteri(this.__textureTarget,10242,state.wrapModeS);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texParameteri(this.__textureTarget,10243,state.wrapModeT);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			this.__samplerState = state;
		}
	}
	,__trackCompressedMemoryUsage: function(memory) {
		if(this.__compressedMemoryUsage == 0) {
			this.__context.__statsIncrement(4);
		}
		this.__compressedMemoryUsage += memory;
		var currentCompressedMemory = this.__context.__statsAdd(9,memory);
		if(this.__outputTextureMemoryUsage) {
			haxe_Log.trace(" + Texture Compressed GPU Memory (+" + memory + ") - Current Compressed Memory : " + currentCompressedMemory,{ fileName : "TextureBase.hx", lineNumber : 235, className : "openfl.display3D.textures.TextureBase", methodName : "__trackCompressedMemoryUsage"});
		}
		this.__trackMemoryUsage(memory);
	}
	,__trackMemoryUsage: function(memory) {
		if(this.__memoryUsage == 0) {
			this.__context.__statsIncrement(3);
		}
		this.__memoryUsage += memory;
		var currentMemory = this.__context.__statsAdd(8,memory);
		if(this.__outputTextureMemoryUsage) {
			haxe_Log.trace(" + Texture GPU Memory (+" + memory + ") - Current Memory : " + currentMemory,{ fileName : "TextureBase.hx", lineNumber : 259, className : "openfl.display3D.textures.TextureBase", methodName : "__trackMemoryUsage"});
		}
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,size,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context,34067);
	this.__size = size;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	this.__uploadedSides = 0;
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__size: null
	,__uploadedSides: null
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
	}
	,uploadFromBitmapData: function(source,side,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
		switch(side) {
		case 0:
			break;
		case 1:
			break;
		case 2:
			break;
		case 3:
			break;
		case 4:
			break;
		case 5:
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		this.__uploadedSides |= 1 << side;
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,width,height,format,optimizeForRenderToTexture) {
	openfl_display3D_textures_TextureBase.call(this,context,3553);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.uploadFromTypedArray(null);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadFromBitmapData: function(source) {
		if(source == null) {
			return;
		}
		var image = this.__getImage(source);
		if(image == null) {
			return;
		}
		this.uploadFromTypedArray(image.get_data());
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b);
			return;
		}
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		this.uploadFromTypedArray(buffer != null?new Uint8Array(buffer,byteArrayOffset):null);
	}
	,uploadFromTypedArray: function(data) {
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.texImage2D(this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,5121,data);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		this.__trackMemoryUsage(this.__width * this.__height * 4);
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,width,height,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context,3553);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	lime_graphics_opengl_GL.context.texImage2D(this.__textureTarget,0,this.__internalFormat,width,height,0,this.__format,5121,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
	this.uploadFromTypedArray(null);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl_display3D_textures_Texture.__getATFVersion = function(data) {
	if(data.readUTFBytes(3) != "ATF") {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF signature not found"));
	}
	var position = data.position;
	var version = 0;
	if(_$UInt_UInt_$Impl_$.gte(data.length - data.position,5)) {
		if(openfl_display3D_textures_Texture.__readUInt32(data) == 255) {
			version = data.readUnsignedByte();
		} else {
			data.position = position;
		}
	}
	return version;
};
openfl_display3D_textures_Texture.__readUInt24 = function(data) {
	var value = data.readUnsignedByte() << 16;
	value = value | data.readUnsignedByte() << 8;
	value = value | data.readUnsignedByte();
	return value;
};
openfl_display3D_textures_Texture.__readUInt32 = function(data) {
	var value = data.readUnsignedByte() << 24;
	value = value | data.readUnsignedByte() << 16;
	value = value | data.readUnsignedByte() << 8;
	value = value | data.readUnsignedByte();
	return value;
};
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
		var _gthis = this;
		data.position = byteArrayOffset;
		var signature = data.readUTFBytes(3);
		data.position = byteArrayOffset;
		if(signature == "ATF") {
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			this.__uploadATFTextureFromByteArray(data,byteArrayOffset);
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		if(async) {
			haxe_Timer.delay(function() {
				_gthis.dispatchEvent(new openfl_events_Event("textureReady"));
			},1);
		}
	}
	,uploadFromBitmapData: function(source,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		if(source == null) {
			return;
		}
		var width = this.__width >> miplevel;
		var height = this.__height >> miplevel;
		if(source.width != width || source.height != height) {
			var copy = new openfl_display_BitmapData(width,height,true,0);
			copy.draw(source);
			source = copy;
		}
		this.uploadFromTypedArray(this.__getImage(source).get_data(),miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b);
			return;
		}
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		this.uploadFromTypedArray(buffer != null?new Uint8Array(buffer,byteArrayOffset):null,miplevel);
	}
	,uploadFromTypedArray: function(data,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(data == null) {
			return;
		}
		var width = this.__width >> miplevel;
		var height = this.__height >> miplevel;
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.texImage2D(this.__textureTarget,miplevel,this.__internalFormat,width,height,0,this.__format,5121,data);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		this.__trackMemoryUsage(width * height * 4);
	}
	,__uploadATFTextureFromByteArray: function(data,byteArrayOffset) {
		data.position = byteArrayOffset;
		var version = openfl_display3D_textures_Texture.__getATFVersion(data);
		if(js_Boot.__cast(byteArrayOffset + (version == 0?openfl_display3D_textures_Texture.__readUInt24(data):openfl_display3D_textures_Texture.__readUInt32(data)) , Int) > openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF length exceeds byte array length"));
		}
		if(data.readUnsignedByte() >> 7 != 0) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF Cube maps are not supported"));
		}
		var width = 1 << data.readUnsignedByte();
		var height = 1 << data.readUnsignedByte();
		if(width != this.__width || height != this.__height) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF width and height dont match"));
		}
		var mipCount = data.readUnsignedByte();
		var _g1 = 0;
		while(_g1 < mipCount) {
			++_g1;
			var _g2 = 0;
			while(_g2 < 3) {
				var gpuFormat = _g2++;
				var blockLength = version == 0?openfl_display3D_textures_Texture.__readUInt24(data):openfl_display3D_textures_Texture.__readUInt32(data);
				_$UInt_UInt_$Impl_$.gt(blockLength,0);
				data.position = data.position + blockLength;
			}
		}
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_display3D_textures_VideoTexture = function(context) {
	openfl_display3D_textures_TextureBase.call(this,context,3553);
};
$hxClasses["openfl.display3D.textures.VideoTexture"] = openfl_display3D_textures_VideoTexture;
openfl_display3D_textures_VideoTexture.__name__ = ["openfl","display3D","textures","VideoTexture"];
openfl_display3D_textures_VideoTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_VideoTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	videoHeight: null
	,videoWidth: null
	,__netStream: null
	,attachNetStream: function(netStream) {
		var _gthis = this;
		this.__netStream = netStream;
		if(this.__netStream.__video.readyState == 4) {
			haxe_Timer.delay(function() {
				_gthis.__textureReady();
			},0);
		} else {
			this.__netStream.__video.addEventListener("canplay",function(_) {
				_gthis.__textureReady();
			},false);
		}
	}
	,__getTexture: function() {
		if(!this.__netStream.__video.paused) {
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,6408,5121,this.__netStream.__video);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		return this.__textureID;
	}
	,__textureReady: function() {
		this.videoWidth = this.__netStream.__video.videoWidth;
		this.videoHeight = this.__netStream.__video.videoHeight;
		this.dispatchEvent(new openfl_events_Event("textureReady"));
	}
	,__class__: openfl_display3D_textures_VideoTexture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) {
			return this.message;
		} else {
			return "Error";
		}
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function() {
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = ["openfl","errors","EOFError"];
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_IllegalOperationError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "IllegalOperationError";
};
$hxClasses["openfl.errors.IllegalOperationError"] = openfl_errors_IllegalOperationError;
openfl_errors_IllegalOperationError.__name__ = ["openfl","errors","IllegalOperationError"];
openfl_errors_IllegalOperationError.__super__ = openfl_errors_Error;
openfl_errors_IllegalOperationError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IllegalOperationError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = ["openfl","errors","RangeError"];
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = ["openfl","errors","TypeError"];
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,__preventDefault: null
	,clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,formatToString: function(className,p1,p2,p3,p4,p5) {
		var parameters = [];
		if(p1 != null) {
			parameters.push(p1);
		}
		if(p2 != null) {
			parameters.push(p2);
		}
		if(p3 != null) {
			parameters.push(p3);
		}
		if(p4 != null) {
			parameters.push(p4);
		}
		if(p5 != null) {
			parameters.push(p5);
		}
		return $bind(this,this.__formatToString).apply(this,[className,parameters]);
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) {
			this.__preventDefault = true;
		}
	}
	,stopImmediatePropagation: function() {
		this.__isCanceled = true;
		this.__isCanceledNow = true;
	}
	,stopPropagation: function() {
		this.__isCanceled = true;
	}
	,toString: function() {
		return this.__formatToString("Event",["type","bubbles","cancelable"]);
	}
	,__formatToString: function(className,parameters) {
		var output = "[" + className;
		var arg = null;
		var _g = 0;
		while(_g < parameters.length) {
			var param = parameters[_g];
			++_g;
			arg = Reflect.field(this,param);
			if(typeof(arg) == "string") {
				output += " " + param + "=\"" + Std.string(arg) + "\"";
			} else {
				output += " " + param + "=" + Std.string(arg);
			}
		}
		output += "]";
		return output;
	}
	,__class__: openfl_events_Event
};
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) {
		activating = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = ["openfl","events","ActivityEvent"];
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	activating: null
	,clone: function() {
		var event = new openfl_events_ActivityEvent(this.type,this.bubbles,this.cancelable,this.activating);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ActivityEvent",["type","bubbles","cancelable","activating"]);
	}
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,clone: function() {
		var event = new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TextEvent",["type","bubbles","cancelable","text"]);
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_DataEvent = function(type,bubbles,cancelable,data) {
	if(data == null) {
		data = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable);
	this.data = data;
};
$hxClasses["openfl.events.DataEvent"] = openfl_events_DataEvent;
openfl_events_DataEvent.__name__ = ["openfl","events","DataEvent"];
openfl_events_DataEvent.__super__ = openfl_events_TextEvent;
openfl_events_DataEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	data: null
	,clone: function() {
		var event = new openfl_events_DataEvent(this.type,this.bubbles,this.cancelable,this.data);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("DataEvent",["type","bubbles","cancelable","data"]);
	}
	,__class__: openfl_events_DataEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,clone: function() {
		var event = new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_DispatchIterator = function(list) {
	this.list = list;
	this.index = list.length;
};
$hxClasses["openfl.events._EventDispatcher.DispatchIterator"] = openfl_events__$EventDispatcher_DispatchIterator;
openfl_events__$EventDispatcher_DispatchIterator.__name__ = ["openfl","events","_EventDispatcher","DispatchIterator"];
openfl_events__$EventDispatcher_DispatchIterator.prototype = {
	active: null
	,index: null
	,isCopy: null
	,list: null
	,copy: function() {
		if(this.index < this.list.length && !this.isCopy) {
			this.list = this.list.slice();
			this.isCopy = true;
		}
	}
	,hasNext: function() {
		if(this.index < this.list.length) {
			return true;
		} else {
			this.active = false;
			return false;
		}
	}
	,next: function() {
		return this.list[this.index++];
	}
	,remove: function(listener,listIndex) {
		if(this.active) {
			if(!this.isCopy) {
				if(listIndex < this.index) {
					this.index--;
				}
			} else {
				var _g1 = this.index;
				var _g = this.list.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this.list[i] == listener) {
						this.list.splice(i,1);
						break;
					}
				}
			}
		}
	}
	,reset: function(list) {
		this.list = list;
		this.active = true;
		this.index = 0;
	}
	,__class__: openfl_events__$EventDispatcher_DispatchIterator
};
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		if(Reflect.compareMethods(this.callback,callback)) {
			return this.useCapture == useCapture;
		} else {
			return false;
		}
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) {
		keyCode = 0;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FocusEvent",["type","bubbles","cancelable","relatedObject","shiftKey","keyCode"]);
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) {
		interactive = false;
	}
	if(fullScreen == null) {
		fullScreen = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = ["openfl","events","FullScreenEvent"];
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	fullScreen: null
	,interactive: null
	,clone: function() {
		var event = new openfl_events_FullScreenEvent(this.type,this.bubbles,this.cancelable,this.fullScreen,this.interactive);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FullscreenEvent",["type","bubbles","cancelable","fullscreen","interactive"]);
	}
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,clone: function() {
		var event = new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("GameInputEvent",["type","bubbles","cancelable","device"]);
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) {
		redirected = false;
	}
	if(status == null) {
		status = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	redirected: null
	,responseHeaders: null
	,responseURL: null
	,status: null
	,clone: function() {
		var event = new openfl_events_HTTPStatusEvent(this.type,this.bubbles,null,this.status,this.redirected);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("HTTPStatusEvent",["type","bubbles","cancelable","status","redirected"]);
	}
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("IOErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) {
		commandKeyValue = false;
	}
	if(controlKeyValue == null) {
		controlKeyValue = false;
	}
	if(shiftKeyValue == null) {
		shiftKeyValue = false;
	}
	if(altKeyValue == null) {
		altKeyValue = false;
	}
	if(ctrlKeyValue == null) {
		ctrlKeyValue = false;
	}
	if(keyCodeValue == null) {
		keyCodeValue = 0;
	}
	if(charCodeValue == null) {
		charCodeValue = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	this.keyLocation = keyLocationValue != null?keyLocationValue:0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("KeyboardEvent",["type","bubbles","cancelable","charCode","keyCode","keyLocation","ctrlKey","altKey","shiftKey"]);
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) {
		clickCount = 0;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(delta == null) {
		delta = 0;
	}
	if(buttonDown == null) {
		buttonDown = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) {
		delta = 0;
	}
	switch(type) {
	case "mouseDown":
		openfl_events_MouseEvent.__buttonDown = true;
		break;
	case "mouseUp":
		openfl_events_MouseEvent.__buttonDown = false;
		break;
	default:
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,clone: function() {
		var event = new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("MouseEvent",["type","bubbles","cancelable","localX","localY","relatedObject","ctrlKey","altKey","shiftKey","buttonDown","delta"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.info = info;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = ["openfl","events","NetStatusEvent"];
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	info: null
	,clone: function() {
		var event = new openfl_events_NetStatusEvent(this.type,this.bubbles,this.cancelable,this.info);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("NetStatusEvent",["type","bubbles","cancelable","info"]);
	}
	,__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) {
		bytesTotal = 0;
	}
	if(bytesLoaded == null) {
		bytesLoaded = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,clone: function() {
		var event = new openfl_events_ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ProgressEvent",["type","bubbles","cancelable","bytesLoaded","bytesTotal"]);
	}
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SecurityErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TimerEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.TimerEvent"] = openfl_events_TimerEvent;
openfl_events_TimerEvent.__name__ = ["openfl","events","TimerEvent"];
openfl_events_TimerEvent.__super__ = openfl_events_Event;
openfl_events_TimerEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_TimerEvent(this.type,this.bubbles,this.cancelable);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TimerEvent",["type","bubbles","cancelable"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TimerEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) {
		isTouchPointCanceled = false;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(controlKey == null) {
		controlKey = false;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(pressure == null) {
		pressure = 0;
	}
	if(sizeY == null) {
		sizeY = 0;
	}
	if(sizeX == null) {
		sizeX = 0;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(isPrimaryTouchPoint == null) {
		isPrimaryTouchPoint = false;
	}
	if(touchPointID == null) {
		touchPointID = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,delta: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,clone: function() {
		var event = new openfl_events_TouchEvent(this.type,this.bubbles,this.cancelable,this.touchPointID,this.isPrimaryTouchPoint,this.localX,this.localY,this.sizeX,this.sizeY,this.pressure,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.commandKey,this.controlKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TouchEvent",["type","bubbles","cancelable","touchPointID","isPrimaryTouchPoint","localX","localY","sizeX","sizeY","pressure","relatedObject","ctrlKey","altKey","shiftKey","commandKey","controlKey"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_events_UncaughtErrorEvent = function(type,bubbles,cancelable,error) {
	if(cancelable == null) {
		cancelable = true;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable);
	this.error = error;
};
$hxClasses["openfl.events.UncaughtErrorEvent"] = openfl_events_UncaughtErrorEvent;
openfl_events_UncaughtErrorEvent.__name__ = ["openfl","events","UncaughtErrorEvent"];
openfl_events_UncaughtErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_UncaughtErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	error: null
	,clone: function() {
		var event = new openfl_events_UncaughtErrorEvent(this.type,this.bubbles,this.cancelable,this.error);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("UncaughtErrorEvent",["type","bubbles","cancelable","error"]);
	}
	,__class__: openfl_events_UncaughtErrorEvent
});
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_external_ExternalInterface = function() { };
$hxClasses["openfl.external.ExternalInterface"] = openfl_external_ExternalInterface;
openfl_external_ExternalInterface.__name__ = ["openfl","external","ExternalInterface"];
openfl_external_ExternalInterface.addCallback = function(functionName,closure) {
	if(openfl_Lib.application.__windows[0].backend.element != null) {
		openfl_Lib.application.__windows[0].backend.element[functionName] = closure;
	}
};
openfl_external_ExternalInterface.call = function(functionName,p1,p2,p3,p4,p5) {
	var callResponse = null;
	var thisArg = functionName.split(".").slice(0,-1).join(".");
	if(thisArg.length > 0) {
		functionName += ".bind(" + thisArg + ")";
	}
	if(p1 == null) {
		callResponse = eval(functionName)();
	} else if(p2 == null) {
		callResponse = eval(functionName)(p1);
	} else if(p3 == null) {
		callResponse = eval(functionName)(p1,p2);
	} else if(p4 == null) {
		callResponse = eval(functionName)(p1,p2,p3);
	} else if(p5 == null) {
		callResponse = eval(functionName)(p1,p2,p3,p4);
	} else {
		callResponse = eval(functionName)(p1,p2,p3,p4,p5);
	}
	return callResponse;
};
var openfl_filters_BitmapFilter = function() {
	this.__numPasses = 0;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.prototype = {
	__cacheObject: null
	,__numPasses: null
	,clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(sourceBitmapData,destBitmapData,sourceRect,destPoint) {
	}
	,__initShader: function(renderSession,pass) {
		return renderSession.shaderManager.defaultShader;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters__$BlurFilter_BlurShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 sum = vec4(0.0);\n\t\t\tsum += texture2D(uImage0, vBlurCoords[0]) * 0.00443;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[1]) * 0.05399;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[2]) * 0.24197;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[3]) * 0.39894;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[4]) * 0.24197;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[5]) * 0.05399;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[6]) * 0.00443;\n\t\t\t\n\t\t\tgl_FragColor = sum;\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\tuniform vec2 uTextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t\tvec2 r = uRadius / uTextureSize;\n\t\t\tvBlurCoords[0] = aTexCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = aTexCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = aTexCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = aTexCoord;\n\t\t\tvBlurCoords[4] = aTexCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = aTexCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = aTexCoord + r * 1.0;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.get_data().uRadius.value = [0,0];
};
$hxClasses["openfl.filters._BlurFilter.BlurShader"] = openfl_filters__$BlurFilter_BlurShader;
openfl_filters__$BlurFilter_BlurShader.__name__ = ["openfl","filters","_BlurFilter","BlurShader"];
openfl_filters__$BlurFilter_BlurShader.__super__ = openfl_display_Shader;
openfl_filters__$BlurFilter_BlurShader.prototype = $extend(openfl_display_Shader.prototype,{
	__update: function() {
		this.get_data().uTextureSize.value = [this.get_data().uImage0.input.width,this.get_data().uImage0.input.height];
		openfl_display_Shader.prototype.__update.call(this);
	}
	,__class__: openfl_filters__$BlurFilter_BlurShader
});
var openfl_filters_BlurFilter = function(blurX,blurY,quality) {
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.blurX = blurX;
	this.blurY = blurY;
	this.set_quality(quality);
};
$hxClasses["openfl.filters.BlurFilter"] = openfl_filters_BlurFilter;
openfl_filters_BlurFilter.__name__ = ["openfl","filters","BlurFilter"];
openfl_filters_BlurFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_BlurFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	blurX: null
	,blurY: null
	,quality: null
	,horizontalPasses: null
	,verticalPasses: null
	,clone: function() {
		return new openfl_filters_BlurFilter(this.blurX,this.blurY,this.quality);
	}
	,__initShader: function(renderSession,pass) {
		var data = openfl_filters_BlurFilter.__blurShader.get_data();
		if(pass <= this.horizontalPasses) {
			var scale = Math.pow(0.5,pass >> 1);
			data.uRadius.value[0] = this.blurX * scale;
			data.uRadius.value[1] = 0;
		} else {
			var scale1 = Math.pow(0.5,pass - this.horizontalPasses >> 1);
			data.uRadius.value[0] = 0;
			data.uRadius.value[1] = this.blurY * scale1;
		}
		return openfl_filters_BlurFilter.__blurShader;
	}
	,set_quality: function(value) {
		this.horizontalPasses = this.blurX <= 0?0:Math.round(this.blurX * (value / 4)) + 1;
		this.verticalPasses = this.blurY <= 0?0:Math.round(this.blurY * (value / 4)) + 1;
		this.__numPasses = this.horizontalPasses + this.verticalPasses;
		return this.quality = value;
	}
	,__class__: openfl_filters_BlurFilter
	,__properties__: {set_quality:"set_quality"}
});
var openfl_filters__$ColorMatrixFilter_ColorMatrixShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tuniform mat4 uMultipliers;\n\t\tuniform vec4 uOffsets;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tcolor = uOffsets + color * uMultipliers;\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * vAlpha, color.a * vAlpha);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.get_data().uMultipliers.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	this.get_data().uOffsets.value = [0,0,0,0];
};
$hxClasses["openfl.filters._ColorMatrixFilter.ColorMatrixShader"] = openfl_filters__$ColorMatrixFilter_ColorMatrixShader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__name__ = ["openfl","filters","_ColorMatrixFilter","ColorMatrixShader"];
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__super__ = openfl_display_Shader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.prototype = $extend(openfl_display_Shader.prototype,{
	init: function(matrix) {
		var multipliers = this.get_data().uMultipliers.value;
		var offsets = this.get_data().uOffsets.value;
		multipliers[0] = matrix[0];
		multipliers[1] = matrix[1];
		multipliers[2] = matrix[2];
		multipliers[3] = matrix[3];
		multipliers[4] = matrix[5];
		multipliers[5] = matrix[6];
		multipliers[6] = matrix[7];
		multipliers[7] = matrix[8];
		multipliers[8] = matrix[10];
		multipliers[9] = matrix[11];
		multipliers[10] = matrix[12];
		multipliers[11] = matrix[13];
		multipliers[12] = matrix[15];
		multipliers[13] = matrix[16];
		multipliers[14] = matrix[17];
		multipliers[15] = matrix[18];
		offsets[0] = matrix[4] / 255.0;
		offsets[1] = matrix[9] / 255.0;
		offsets[2] = matrix[14] / 255.0;
		offsets[3] = matrix[19] / 255.0;
	}
	,__class__: openfl_filters__$ColorMatrixFilter_ColorMatrixShader
});
var openfl_filters_ColorMatrixFilter = function(matrix) {
	openfl_filters_BitmapFilter.call(this);
	this.set_matrix(matrix);
	this.__numPasses = 0;
};
$hxClasses["openfl.filters.ColorMatrixFilter"] = openfl_filters_ColorMatrixFilter;
openfl_filters_ColorMatrixFilter.__name__ = ["openfl","filters","ColorMatrixFilter"];
openfl_filters_ColorMatrixFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ColorMatrixFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	matrix: null
	,clone: function() {
		return new openfl_filters_ColorMatrixFilter(this.matrix);
	}
	,__applyFilter: function(sourceBitmapData,destBitmapData,sourceRect,destPoint) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceBitmapData.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(sourceBitmapData.image);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(destBitmapData.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(destBitmapData.image);
		var source = sourceBitmapData.image.get_data();
		var target = destBitmapData.image.get_data();
		var offsetX = destPoint.x - sourceRect.x | 0;
		var offsetY = destPoint.y - sourceRect.y | 0;
		var sourceStride = sourceBitmapData.width * 4;
		var targetStride = destBitmapData.width * 4;
		var sourceOffset;
		var targetOffset;
		var _g1 = sourceRect.y | 0;
		var _g = sourceRect.height | 0;
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = sourceRect.x | 0;
			var _g2 = sourceRect.width | 0;
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				targetOffset = (row + offsetX) * targetStride + (column + offsetY) * 4;
				var srcR = source[sourceOffset];
				var srcG = source[sourceOffset + 1];
				var srcB = source[sourceOffset + 2];
				var srcA = source[sourceOffset + 3];
				target[targetOffset] = _$UInt_UInt_$Impl_$.toFloat(srcR) * this.matrix[0] + _$UInt_UInt_$Impl_$.toFloat(srcG) * this.matrix[1] + _$UInt_UInt_$Impl_$.toFloat(srcB) * this.matrix[2] + _$UInt_UInt_$Impl_$.toFloat(srcA) * this.matrix[3] + this.matrix[4] | 0;
				target[targetOffset + 1] = _$UInt_UInt_$Impl_$.toFloat(srcR) * this.matrix[5] + _$UInt_UInt_$Impl_$.toFloat(srcG) * this.matrix[6] + _$UInt_UInt_$Impl_$.toFloat(srcB) * this.matrix[7] + _$UInt_UInt_$Impl_$.toFloat(srcA) * this.matrix[8] + this.matrix[9] | 0;
				target[targetOffset + 2] = _$UInt_UInt_$Impl_$.toFloat(srcR) * this.matrix[10] + _$UInt_UInt_$Impl_$.toFloat(srcG) * this.matrix[11] + _$UInt_UInt_$Impl_$.toFloat(srcB) * this.matrix[12] + _$UInt_UInt_$Impl_$.toFloat(srcA) * this.matrix[13] + this.matrix[14] | 0;
				target[targetOffset + 3] = _$UInt_UInt_$Impl_$.toFloat(srcR) * this.matrix[15] + _$UInt_UInt_$Impl_$.toFloat(srcG) * this.matrix[16] + _$UInt_UInt_$Impl_$.toFloat(srcB) * this.matrix[17] + _$UInt_UInt_$Impl_$.toFloat(srcA) * this.matrix[18] + this.matrix[19] | 0;
			}
		}
		destBitmapData.image.dirty = true;
	}
	,__initShader: function(renderSession,pass) {
		openfl_filters_ColorMatrixFilter.__colorMatrixShader.init(this.matrix);
		return openfl_filters_ColorMatrixFilter.__colorMatrixShader;
	}
	,set_matrix: function(value) {
		if(value == null) {
			value = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0];
		}
		return this.matrix = value;
	}
	,__class__: openfl_filters_ColorMatrixFilter
	,__properties__: {set_matrix:"set_matrix"}
});
var openfl_filters_DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) {
		hideObject = false;
	}
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	if(angle == null) {
		angle = 45;
	}
	if(distance == null) {
		distance = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.distance = distance;
	this.angle = angle;
	this.color = color;
	this.alpha = alpha;
	this.blurX = blurX;
	this.blurY = blurY;
	this.strength = strength;
	this.set_quality(quality);
	this.inner = inner;
	this.set_knockout(knockout);
	this.set_hideObject(hideObject);
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl_filters_DropShadowFilter;
openfl_filters_DropShadowFilter.__name__ = ["openfl","filters","DropShadowFilter"];
openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DropShadowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	alpha: null
	,angle: null
	,blurX: null
	,blurY: null
	,color: null
	,distance: null
	,hideObject: null
	,inner: null
	,knockout: null
	,quality: null
	,strength: null
	,clone: function() {
		return new openfl_filters_DropShadowFilter(this.distance,this.angle,this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout,this.hideObject);
	}
	,set_knockout: function(value) {
		return this.knockout = value;
	}
	,set_hideObject: function(value) {
		return this.hideObject = value;
	}
	,set_quality: function(value) {
		return this.quality = value;
	}
	,__class__: openfl_filters_DropShadowFilter
	,__properties__: {set_quality:"set_quality",set_knockout:"set_knockout",set_hideObject:"set_hideObject"}
});
var openfl_filters__$GlowFilter_GlowShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tuniform vec4 uColor;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tfloat a = 0.0;\n\t\t\ta += texture2D(uImage0, vBlurCoords[0]).a * 0.00443;\n\t\t\ta += texture2D(uImage0, vBlurCoords[1]).a * 0.05399;\n\t\t\ta += texture2D(uImage0, vBlurCoords[2]).a * 0.24197;\n\t\t\ta += texture2D(uImage0, vBlurCoords[3]).a * 0.39894;\n\t\t\ta += texture2D(uImage0, vBlurCoords[4]).a * 0.24197;\n\t\t\ta += texture2D(uImage0, vBlurCoords[5]).a * 0.05399;\n\t\t\ta += texture2D(uImage0, vBlurCoords[6]).a * 0.00443;\n\t\t\ta *= uColor.a;\n\t\t\t\n\t\t\tgl_FragColor = vec4(uColor.rgb * a, a);\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\tuniform vec2 uTextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t\tvec2 r = uRadius / uTextureSize;\n\t\t\tvBlurCoords[0] = aTexCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = aTexCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = aTexCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = aTexCoord;\n\t\t\tvBlurCoords[4] = aTexCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = aTexCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = aTexCoord + r * 1.0;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.get_data().uRadius.value = [0,0];
	this.get_data().uColor.value = [0,0,0,0];
};
$hxClasses["openfl.filters._GlowFilter.GlowShader"] = openfl_filters__$GlowFilter_GlowShader;
openfl_filters__$GlowFilter_GlowShader.__name__ = ["openfl","filters","_GlowFilter","GlowShader"];
openfl_filters__$GlowFilter_GlowShader.__super__ = openfl_display_Shader;
openfl_filters__$GlowFilter_GlowShader.prototype = $extend(openfl_display_Shader.prototype,{
	__update: function() {
		this.get_data().uTextureSize.value = [this.get_data().uImage0.input.width,this.get_data().uImage0.input.height];
		openfl_display_Shader.prototype.__update.call(this);
	}
	,__class__: openfl_filters__$GlowFilter_GlowShader
});
var openfl_filters_GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 2;
	}
	if(blurY == null) {
		blurY = 6;
	}
	if(blurX == null) {
		blurX = 6;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16711680;
	}
	openfl_filters_BitmapFilter.call(this);
	this.color = color;
	this.alpha = alpha;
	this.blurX = blurX;
	this.blurY = blurY;
	this.strength = strength;
	this.set_quality(quality);
	this.inner = inner;
	this.set_knockout(knockout);
	this.__cacheObject = true;
};
$hxClasses["openfl.filters.GlowFilter"] = openfl_filters_GlowFilter;
openfl_filters_GlowFilter.__name__ = ["openfl","filters","GlowFilter"];
openfl_filters_GlowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_GlowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	alpha: null
	,blurX: null
	,blurY: null
	,color: null
	,inner: null
	,knockout: null
	,quality: null
	,strength: null
	,horizontalPasses: null
	,verticalPasses: null
	,clone: function() {
		return new openfl_filters_GlowFilter(this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout);
	}
	,__initShader: function(renderSession,pass) {
		var data = openfl_filters_GlowFilter.__glowShader.get_data();
		if(pass <= this.horizontalPasses) {
			var scale = Math.pow(0.5,pass >> 1);
			data.uRadius.value[0] = this.blurX * scale;
			data.uRadius.value[1] = 0;
		} else {
			var scale1 = Math.pow(0.5,pass - this.horizontalPasses >> 1);
			data.uRadius.value[0] = 0;
			data.uRadius.value[1] = this.blurY * scale1;
		}
		data.uColor.value[0] = (this.color >> 16 & 255) / 255;
		data.uColor.value[1] = (this.color >> 8 & 255) / 255;
		data.uColor.value[2] = (this.color & 255) / 255;
		data.uColor.value[3] = this.alpha;
		return openfl_filters_GlowFilter.__glowShader;
	}
	,set_knockout: function(value) {
		return this.knockout = value;
	}
	,set_quality: function(value) {
		this.horizontalPasses = this.blurX <= 0?0:Math.round(this.blurX * (value / 4)) + 1;
		this.verticalPasses = this.blurY <= 0?0:Math.round(this.blurY * (value / 4)) + 1;
		this.__numPasses = this.horizontalPasses + this.verticalPasses;
		return this.quality = value;
	}
	,__class__: openfl_filters_GlowFilter
	,__properties__: {set_quality:"set_quality",set_knockout:"set_knockout"}
});
var openfl_filters__$BlurShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._BlurShader_ShaderData"] = openfl_filters__$BlurShader_$ShaderData;
openfl_filters__$BlurShader_$ShaderData.__name__ = ["openfl","filters","_BlurShader_ShaderData"];
openfl_filters__$BlurShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$BlurShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uRadius: null
	,uTextureSize: null
	,__class__: openfl_filters__$BlurShader_$ShaderData
});
var openfl_filters__$ColorMatrixShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._ColorMatrixShader_ShaderData"] = openfl_filters__$ColorMatrixShader_$ShaderData;
openfl_filters__$ColorMatrixShader_$ShaderData.__name__ = ["openfl","filters","_ColorMatrixShader_ShaderData"];
openfl_filters__$ColorMatrixShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$ColorMatrixShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uMultipliers: null
	,uOffsets: null
	,__class__: openfl_filters__$ColorMatrixShader_$ShaderData
});
var openfl_filters__$GlowShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._GlowShader_ShaderData"] = openfl_filters__$GlowShader_$ShaderData;
openfl_filters__$GlowShader_$ShaderData.__name__ = ["openfl","filters","_GlowShader_ShaderData"];
openfl_filters__$GlowShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$GlowShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uRadius: null
	,uTextureSize: null
	,uColor: null
	,__class__: openfl_filters__$GlowShader_$ShaderData
});
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.get_length() == 16) {
		this.rawData = v;
	} else {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.rawData = vector;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(scale == null) {
		scale = 1;
	}
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var a = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	var a1 = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a1.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a1[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	var a = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var tmp = (toMat.rawData.get(i) - thisMat.rawData.get(i)) * percent;
		m.rawData.set(i,thisMat.rawData.get(i) + tmp);
	}
	return m;
};
openfl_geom_Matrix3D.__getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	m.rawData.set(0,c + a1.x * a1.x * t);
	m.rawData.set(5,c + a1.y * a1.y * t);
	m.rawData.set(10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	m.rawData.set(4,tmp1 + tmp2);
	m.rawData.set(1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	m.rawData.set(8,tmp1 - tmp2);
	m.rawData.set(2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	m.rawData.set(9,tmp1 + tmp2);
	m.rawData.set(6,tmp1 - tmp2);
	return m;
};
openfl_geom_Matrix3D.prototype = {
	rawData: null
	,append: function(lhs) {
		var m111 = this.rawData.get(0);
		var m121 = this.rawData.get(4);
		var m131 = this.rawData.get(8);
		var m141 = this.rawData.get(12);
		var m112 = this.rawData.get(1);
		var m122 = this.rawData.get(5);
		var m132 = this.rawData.get(9);
		var m142 = this.rawData.get(13);
		var m113 = this.rawData.get(2);
		var m123 = this.rawData.get(6);
		var m133 = this.rawData.get(10);
		var m143 = this.rawData.get(14);
		var m114 = this.rawData.get(3);
		var m124 = this.rawData.get(7);
		var m134 = this.rawData.get(11);
		var m144 = this.rawData.get(15);
		var m211 = lhs.rawData.get(0);
		var m221 = lhs.rawData.get(4);
		var m231 = lhs.rawData.get(8);
		var m241 = lhs.rawData.get(12);
		var m212 = lhs.rawData.get(1);
		var m222 = lhs.rawData.get(5);
		var m232 = lhs.rawData.get(9);
		var m242 = lhs.rawData.get(13);
		var m213 = lhs.rawData.get(2);
		var m223 = lhs.rawData.get(6);
		var m233 = lhs.rawData.get(10);
		var m243 = lhs.rawData.get(14);
		var m214 = lhs.rawData.get(3);
		var m224 = lhs.rawData.get(7);
		var m234 = lhs.rawData.get(11);
		var m244 = lhs.rawData.get(15);
		this.rawData.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var tx;
		var ty;
		var tz = 0;
		ty = tz;
		tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.set(0,x2 + (y2 + z2) * cos);
		d.set(1,x * y * ccos + z * sin);
		d.set(2,x * z * ccos - y * sin);
		d.set(4,x * y * ccos - z * sin);
		d.set(5,y2 + (x2 + z2) * cos);
		d.set(6,y * z * ccos + x * sin);
		d.set(8,x * z * ccos + y * sin);
		d.set(9,y * z * ccos - x * sin);
		d.set(10,z2 + (x2 + y2) * cos);
		d.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		var a = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.append(new openfl_geom_Matrix3D(vector));
	}
	,appendTranslation: function(x,y,z) {
		this.rawData.set(12,this.rawData.get(12) + x);
		this.rawData.set(13,this.rawData.get(13) + y);
		this.rawData.set(14,this.rawData.get(14) + z);
	}
	,clone: function() {
		return new openfl_geom_Matrix3D(this.rawData.copy());
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			this.rawData.set(0,vector3D.x);
			this.rawData.set(1,vector3D.y);
			this.rawData.set(2,vector3D.z);
			this.rawData.set(3,vector3D.w);
			break;
		case 1:
			this.rawData.set(4,vector3D.x);
			this.rawData.set(5,vector3D.y);
			this.rawData.set(6,vector3D.z);
			this.rawData.set(7,vector3D.w);
			break;
		case 2:
			this.rawData.set(8,vector3D.x);
			this.rawData.set(9,vector3D.y);
			this.rawData.set(10,vector3D.z);
			this.rawData.set(11,vector3D.w);
			break;
		case 3:
			this.rawData.set(12,vector3D.x);
			this.rawData.set(13,vector3D.y);
			this.rawData.set(14,vector3D.z);
			this.rawData.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.get(0);
			vector3D.y = this.rawData.get(1);
			vector3D.z = this.rawData.get(2);
			vector3D.w = this.rawData.get(3);
			break;
		case 1:
			vector3D.x = this.rawData.get(4);
			vector3D.y = this.rawData.get(5);
			vector3D.z = this.rawData.get(6);
			vector3D.w = this.rawData.get(7);
			break;
		case 2:
			vector3D.x = this.rawData.get(8);
			vector3D.y = this.rawData.get(9);
			vector3D.z = this.rawData.get(10);
			vector3D.w = this.rawData.get(11);
			break;
		case 3:
			vector3D.x = this.rawData.get(12);
			vector3D.y = this.rawData.get(13);
			vector3D.z = this.rawData.get(14);
			vector3D.w = this.rawData.get(15);
			break;
		default:
		}
	}
	,copyFrom: function(other) {
		this.rawData = other.rawData.copy();
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var length = vector.get_length() - index;
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			this.rawData.set(i,vector.get(i + index));
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var _g1 = 0;
		var _g = this.rawData.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i + index,this.rawData.get(i));
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			this.rawData.set(0,vector3D.x);
			this.rawData.set(4,vector3D.y);
			this.rawData.set(8,vector3D.z);
			this.rawData.set(12,vector3D.w);
			break;
		case 1:
			this.rawData.set(1,vector3D.x);
			this.rawData.set(5,vector3D.y);
			this.rawData.set(9,vector3D.z);
			this.rawData.set(13,vector3D.w);
			break;
		case 2:
			this.rawData.set(2,vector3D.x);
			this.rawData.set(6,vector3D.y);
			this.rawData.set(10,vector3D.z);
			this.rawData.set(14,vector3D.w);
			break;
		case 3:
			this.rawData.set(3,vector3D.x);
			this.rawData.set(7,vector3D.y);
			this.rawData.set(11,vector3D.z);
			this.rawData.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.get(0);
			vector3D.y = this.rawData.get(4);
			vector3D.z = this.rawData.get(8);
			vector3D.w = this.rawData.get(12);
			break;
		case 1:
			vector3D.x = this.rawData.get(1);
			vector3D.y = this.rawData.get(5);
			vector3D.z = this.rawData.get(9);
			vector3D.w = this.rawData.get(13);
			break;
		case 2:
			vector3D.x = this.rawData.get(2);
			vector3D.y = this.rawData.get(6);
			vector3D.z = this.rawData.get(10);
			vector3D.w = this.rawData.get(14);
			break;
		case 3:
			vector3D.x = this.rawData.get(3);
			vector3D.y = this.rawData.get(7);
			vector3D.z = this.rawData.get(11);
			vector3D.w = this.rawData.get(15);
			break;
		default:
		}
	}
	,copyToMatrix3D: function(other) {
		other.rawData = this.rawData.copy();
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		var vec = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var mr = this.clone().rawData.copy();
		var pos = new openfl_geom_Vector3D(mr.get(12),mr.get(13),mr.get(14));
		mr.set(12,0);
		mr.set(13,0);
		mr.set(14,0);
		var scale = new openfl_geom_Vector3D();
		scale.x = Math.sqrt(mr.get(0) * mr.get(0) + mr.get(1) * mr.get(1) + mr.get(2) * mr.get(2));
		scale.y = Math.sqrt(mr.get(4) * mr.get(4) + mr.get(5) * mr.get(5) + mr.get(6) * mr.get(6));
		scale.z = Math.sqrt(mr.get(8) * mr.get(8) + mr.get(9) * mr.get(9) + mr.get(10) * mr.get(10));
		var tmp = mr.get(5) * mr.get(10) - mr.get(6) * mr.get(9);
		var tmp1 = mr.get(0) * tmp;
		var tmp2 = mr.get(4) * mr.get(10) - mr.get(6) * mr.get(8);
		var tmp3 = tmp1 - mr.get(1) * tmp2;
		var tmp4 = mr.get(4) * mr.get(9) - mr.get(5) * mr.get(8);
		if(tmp3 + mr.get(2) * tmp4 < 0) {
			scale.z = -scale.z;
		}
		mr.set(0,mr.get(0) / scale.x);
		mr.set(1,mr.get(1) / scale.x);
		mr.set(2,mr.get(2) / scale.x);
		mr.set(4,mr.get(4) / scale.y);
		mr.set(5,mr.get(5) / scale.y);
		mr.set(6,mr.get(6) / scale.y);
		mr.set(8,mr.get(8) / scale.z);
		mr.set(9,mr.get(9) / scale.z);
		mr.set(10,mr.get(10) / scale.z);
		var rot = new openfl_geom_Vector3D();
		switch(orientationStyle) {
		case 0:
			rot.w = Math.acos((mr.get(0) + mr.get(5) + mr.get(10) - 1) / 2);
			var len = Math.sqrt((mr.get(6) - mr.get(9)) * (mr.get(6) - mr.get(9)) + (mr.get(8) - mr.get(2)) * (mr.get(8) - mr.get(2)) + (mr.get(1) - mr.get(4)) * (mr.get(1) - mr.get(4)));
			if(len != 0) {
				rot.x = (mr.get(6) - mr.get(9)) / len;
				rot.y = (mr.get(8) - mr.get(2)) / len;
				rot.z = (mr.get(1) - mr.get(4)) / len;
			} else {
				rot.x = rot.y = rot.z = 0;
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.get(2));
			if(mr.get(2) != 1 && mr.get(2) != -1) {
				rot.x = Math.atan2(mr.get(6),mr.get(10));
				rot.z = Math.atan2(mr.get(1),mr.get(0));
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.get(4),mr.get(5));
			}
			break;
		case 2:
			var tr = mr.get(0) + mr.get(5) + mr.get(10);
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.get(6) - mr.get(9)) / (4 * rot.w);
				rot.y = (mr.get(8) - mr.get(2)) / (4 * rot.w);
				rot.z = (mr.get(1) - mr.get(4)) / (4 * rot.w);
			} else if(mr.get(0) > mr.get(5) && mr.get(0) > mr.get(10)) {
				rot.x = Math.sqrt(1 + mr.get(0) - mr.get(5) - mr.get(10)) / 2;
				rot.w = (mr.get(6) - mr.get(9)) / (4 * rot.x);
				rot.y = (mr.get(1) + mr.get(4)) / (4 * rot.x);
				rot.z = (mr.get(8) + mr.get(2)) / (4 * rot.x);
			} else if(mr.get(5) > mr.get(10)) {
				rot.y = Math.sqrt(1 + mr.get(5) - mr.get(0) - mr.get(10)) / 2;
				rot.x = (mr.get(1) + mr.get(4)) / (4 * rot.y);
				rot.w = (mr.get(8) - mr.get(2)) / (4 * rot.y);
				rot.z = (mr.get(6) + mr.get(9)) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.get(10) - mr.get(0) - mr.get(5)) / 2;
				rot.x = (mr.get(8) + mr.get(2)) / (4 * rot.z);
				rot.y = (mr.get(6) + mr.get(9)) / (4 * rot.z);
				rot.w = (mr.get(1) - mr.get(4)) / (4 * rot.z);
			}
			break;
		}
		vec.push(pos);
		vec.push(rot);
		vec.push(scale);
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(3),x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(7),x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(11),0);
	}
	,identity: function() {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.rawData = vector;
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var tmp = (toMat.rawData.get(i) - this.rawData.get(i)) * percent;
			this.rawData.set(i,this.rawData.get(i) + tmp);
		}
	}
	,invert: function() {
		var d = this.get_determinant();
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.get(0);
			var m21 = this.rawData.get(4);
			var m31 = this.rawData.get(8);
			var m41 = this.rawData.get(12);
			var m12 = this.rawData.get(1);
			var m22 = this.rawData.get(5);
			var m32 = this.rawData.get(9);
			var m42 = this.rawData.get(13);
			var m13 = this.rawData.get(2);
			var m23 = this.rawData.get(6);
			var m33 = this.rawData.get(10);
			var m43 = this.rawData.get(14);
			var m14 = this.rawData.get(3);
			var m24 = this.rawData.get(7);
			var m34 = this.rawData.get(11);
			var m44 = this.rawData.get(15);
			this.rawData.set(0,d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24)));
			this.rawData.set(1,-d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14)));
			this.rawData.set(2,d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14)));
			this.rawData.set(3,-d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14)));
			this.rawData.set(4,-d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24)));
			this.rawData.set(5,d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14)));
			this.rawData.set(6,-d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14)));
			this.rawData.set(7,d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14)));
			this.rawData.set(8,d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24)));
			this.rawData.set(9,-d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14)));
			this.rawData.set(10,d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14)));
			this.rawData.set(11,-d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14)));
			this.rawData.set(12,-d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23)));
			this.rawData.set(13,d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13)));
			this.rawData.set(14,-d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13)));
			this.rawData.set(15,d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) {
			at = new openfl_geom_Vector3D(0,0,-1);
		}
		if(up == null) {
			up = new openfl_geom_Vector3D(0,-1,0);
		}
		var dir = at.subtract(pos);
		var vup = up.clone();
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = dir.clone();
		dir2.scaleBy(vup.dotProduct(dir));
		vup = vup.subtract(dir2);
		if(vup.get_length() > 0) {
			vup.normalize();
		} else if(dir.x != 0) {
			vup = new openfl_geom_Vector3D(-dir.y,dir.x,0);
		} else {
			vup = new openfl_geom_Vector3D(1,0,0);
		}
		right = vup.crossProduct(dir);
		right.normalize();
		this.rawData.set(0,right.x);
		this.rawData.set(4,right.y);
		this.rawData.set(8,right.z);
		this.rawData.set(12,0.0);
		this.rawData.set(1,vup.x);
		this.rawData.set(5,vup.y);
		this.rawData.set(9,vup.z);
		this.rawData.set(13,0.0);
		this.rawData.set(2,dir.x);
		this.rawData.set(6,dir.y);
		this.rawData.set(10,dir.z);
		this.rawData.set(14,0.0);
		this.rawData.set(3,pos.x);
		this.rawData.set(7,pos.y);
		this.rawData.set(11,pos.z);
		this.rawData.set(15,1.0);
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.get(0);
		var m121 = rhs.rawData.get(4);
		var m131 = rhs.rawData.get(8);
		var m141 = rhs.rawData.get(12);
		var m112 = rhs.rawData.get(1);
		var m122 = rhs.rawData.get(5);
		var m132 = rhs.rawData.get(9);
		var m142 = rhs.rawData.get(13);
		var m113 = rhs.rawData.get(2);
		var m123 = rhs.rawData.get(6);
		var m133 = rhs.rawData.get(10);
		var m143 = rhs.rawData.get(14);
		var m114 = rhs.rawData.get(3);
		var m124 = rhs.rawData.get(7);
		var m134 = rhs.rawData.get(11);
		var m144 = rhs.rawData.get(15);
		var m211 = this.rawData.get(0);
		var m221 = this.rawData.get(4);
		var m231 = this.rawData.get(8);
		var m241 = this.rawData.get(12);
		var m212 = this.rawData.get(1);
		var m222 = this.rawData.get(5);
		var m232 = this.rawData.get(9);
		var m242 = this.rawData.get(13);
		var m213 = this.rawData.get(2);
		var m223 = this.rawData.get(6);
		var m233 = this.rawData.get(10);
		var m243 = this.rawData.get(14);
		var m214 = this.rawData.get(3);
		var m224 = this.rawData.get(7);
		var m234 = this.rawData.get(11);
		var m244 = this.rawData.get(15);
		this.rawData.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var tx;
		var ty;
		var tz = 0;
		ty = tz;
		tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.set(0,x2 + (y2 + z2) * cos);
		d.set(1,x * y * ccos + z * sin);
		d.set(2,x * z * ccos - y * sin);
		d.set(4,x * y * ccos - z * sin);
		d.set(5,y2 + (x2 + z2) * cos);
		d.set(6,y * z * ccos + x * sin);
		d.set(8,x * z * ccos + y * sin);
		d.set(9,y * z * ccos - x * sin);
		d.set(10,z2 + (x2 + y2) * cos);
		d.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		var a = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.prepend(new openfl_geom_Matrix3D(vector));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.get_length() < 3 || components.get(2).x == 0 || components.get(2).y == 0 || components.get(2).z == 0) {
			return false;
		}
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.get(2).x;
		scale[4] = scale[5] = scale[6] = components.get(2).y;
		scale[8] = scale[9] = scale[10] = components.get(2).z;
		if(orientationStyle == null) {
			var x = components.get(1).x;
			var y = components.get(1).y;
			var z = components.get(1).z;
			var w = components.get(1).w;
			if(orientationStyle == 0) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			this.rawData.set(0,(1 - 2 * y * y - 2 * z * z) * scale[0]);
			this.rawData.set(1,(2 * x * y + 2 * w * z) * scale[1]);
			this.rawData.set(2,(2 * x * z - 2 * w * y) * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(2 * x * y - 2 * w * z) * scale[4]);
			this.rawData.set(5,(1 - 2 * x * x - 2 * z * z) * scale[5]);
			this.rawData.set(6,(2 * y * z + 2 * w * x) * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(2 * x * z + 2 * w * y) * scale[8]);
			this.rawData.set(9,(2 * y * z - 2 * w * x) * scale[9]);
			this.rawData.set(10,(1 - 2 * x * x - 2 * y * y) * scale[10]);
			this.rawData.set(11,0);
			this.rawData.set(12,components.get(0).x);
			this.rawData.set(13,components.get(0).y);
			this.rawData.set(14,components.get(0).z);
			this.rawData.set(15,1);
		} else if(orientationStyle == 1) {
			var cx = Math.cos(components.get(1).x);
			var cy = Math.cos(components.get(1).y);
			var cz = Math.cos(components.get(1).z);
			var sx = Math.sin(components.get(1).x);
			var sy = Math.sin(components.get(1).y);
			var sz = Math.sin(components.get(1).z);
			this.rawData.set(0,cy * cz * scale[0]);
			this.rawData.set(1,cy * sz * scale[1]);
			this.rawData.set(2,-sy * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(sx * sy * cz - cx * sz) * scale[4]);
			this.rawData.set(5,(sx * sy * sz + cx * cz) * scale[5]);
			this.rawData.set(6,sx * cy * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(cx * sy * cz + sx * sz) * scale[8]);
			this.rawData.set(9,(cx * sy * sz - sx * cz) * scale[9]);
			this.rawData.set(10,cx * cy * scale[10]);
			this.rawData.set(11,0);
			this.rawData.set(12,components.get(0).x);
			this.rawData.set(13,components.get(0).y);
			this.rawData.set(14,components.get(0).z);
			this.rawData.set(15,1);
		} else {
			var x1 = components.get(1).x;
			var y1 = components.get(1).y;
			var z1 = components.get(1).z;
			var w1 = components.get(1).w;
			if(orientationStyle == 0) {
				x1 *= Math.sin(w1 / 2);
				y1 *= Math.sin(w1 / 2);
				z1 *= Math.sin(w1 / 2);
				w1 = Math.cos(w1 / 2);
			}
			this.rawData.set(0,(1 - 2 * y1 * y1 - 2 * z1 * z1) * scale[0]);
			this.rawData.set(1,(2 * x1 * y1 + 2 * w1 * z1) * scale[1]);
			this.rawData.set(2,(2 * x1 * z1 - 2 * w1 * y1) * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(2 * x1 * y1 - 2 * w1 * z1) * scale[4]);
			this.rawData.set(5,(1 - 2 * x1 * x1 - 2 * z1 * z1) * scale[5]);
			this.rawData.set(6,(2 * y1 * z1 + 2 * w1 * x1) * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(2 * x1 * z1 + 2 * w1 * y1) * scale[8]);
			this.rawData.set(9,(2 * y1 * z1 - 2 * w1 * x1) * scale[9]);
			this.rawData.set(10,(1 - 2 * x1 * x1 - 2 * y1 * y1) * scale[10]);
			this.rawData.set(11,0);
			this.rawData.set(12,components.get(0).x);
			this.rawData.set(13,components.get(0).y);
			this.rawData.set(14,components.get(0).z);
			this.rawData.set(15,1);
		}
		if(components.get(2).x == 0) {
			this.rawData.set(0,1e-15);
		}
		if(components.get(2).y == 0) {
			this.rawData.set(5,1e-15);
		}
		if(components.get(2).z == 0) {
			this.rawData.set(10,1e-15);
		}
		return !(components.get(2).x == 0 || components.get(2).y == 0 || components.get(2).y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(12),x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(13),x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(14),x * this.rawData.get(3) + y * this.rawData.get(7) + z * this.rawData.get(11) + this.rawData.get(15));
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		var x;
		var y;
		var z;
		while(i + 3 <= vin.get_length()) {
			x = vin.get(i);
			y = vin.get(i + 1);
			z = vin.get(i + 2);
			vout.set(i,x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(12));
			vout.set(i + 1,x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(13));
			vout.set(i + 2,x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(14));
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData = this.rawData.copy();
		this.rawData.set(1,oRawData.get(4));
		this.rawData.set(2,oRawData.get(8));
		this.rawData.set(3,oRawData.get(12));
		this.rawData.set(4,oRawData.get(1));
		this.rawData.set(6,oRawData.get(9));
		this.rawData.set(7,oRawData.get(13));
		this.rawData.set(8,oRawData.get(2));
		this.rawData.set(9,oRawData.get(6));
		this.rawData.set(11,oRawData.get(14));
		this.rawData.set(12,oRawData.get(3));
		this.rawData.set(13,oRawData.get(7));
		this.rawData.set(14,oRawData.get(11));
	}
	,get_determinant: function() {
		return (this.rawData.get(0) * this.rawData.get(5) - this.rawData.get(4) * this.rawData.get(1)) * (this.rawData.get(10) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(11)) - (this.rawData.get(0) * this.rawData.get(9) - this.rawData.get(8) * this.rawData.get(1)) * (this.rawData.get(6) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(7)) + (this.rawData.get(0) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(1)) * (this.rawData.get(6) * this.rawData.get(11) - this.rawData.get(10) * this.rawData.get(7)) + (this.rawData.get(4) * this.rawData.get(9) - this.rawData.get(8) * this.rawData.get(5)) * (this.rawData.get(2) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(3)) - (this.rawData.get(4) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(5)) * (this.rawData.get(2) * this.rawData.get(11) - this.rawData.get(10) * this.rawData.get(3)) + (this.rawData.get(8) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(9)) * (this.rawData.get(2) * this.rawData.get(7) - this.rawData.get(6) * this.rawData.get(3));
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.get(12),this.rawData.get(13),this.rawData.get(14));
	}
	,set_position: function(val) {
		this.rawData.set(12,val.x);
		this.rawData.set(13,val.y);
		this.rawData.set(14,val.z);
		return val;
	}
	,__class__: openfl_geom_Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var openfl_geom__$Orientation3D_Orientation3D_$Impl_$ = {};
$hxClasses["openfl.geom._Orientation3D.Orientation3D_Impl_"] = openfl_geom__$Orientation3D_Orientation3D_$Impl_$;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.__name__ = ["openfl","geom","_Orientation3D","Orientation3D_Impl_"];
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.fromString = function(value) {
	switch(value) {
	case "axisAngle":
		return 0;
	case "eulerAngles":
		return 1;
	case "quaternion":
		return 2;
	default:
		return null;
	}
};
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "axisAngle";
	case 1:
		return "eulerAngles";
	case 2:
		return "quaternion";
	default:
		return null;
	}
};
var openfl_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	x: null
	,y: null
	,add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) {
			openfl_geom_Point.__limeVector2 = new lime_math_Vector2();
		}
		var _this = openfl_geom_Point.__limeVector2;
		var xa = this.x;
		var ya = this.y;
		_this.x = xa;
		_this.y = ya;
		return openfl_geom_Point.__limeVector2;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x?toIntersect.x:this.x;
		var x1 = this.get_right() > toIntersect.get_right()?toIntersect.get_right():this.get_right();
		if(x1 <= x0) {
			return new openfl_geom_Rectangle();
		}
		var y0 = this.y < toIntersect.y?toIntersect.y:this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom()?toIntersect.get_bottom():this.get_bottom();
		if(y1 <= y0) {
			return new openfl_geom_Rectangle();
		}
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x?toIntersect.x:this.x;
		if((this.get_right() > toIntersect.get_right()?toIntersect.get_right():this.get_right()) <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y?toIntersect.y:this.y;
		return (this.get_bottom() > toIntersect.get_bottom()?toIntersect.get_bottom():this.get_bottom()) > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x?toUnion.x:this.x;
		var x1 = this.get_right() < toUnion.get_right()?toUnion.get_right():this.get_right();
		var y0 = this.y > toUnion.y?toUnion.y:this.y;
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,(this.get_bottom() < toUnion.get_bottom()?toUnion.get_bottom():this.get_bottom()) - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		var offsetX = 0.0;
		var offsetY = 0.0;
		var offsetRight = 0.0;
		var offsetBottom = 0.0;
		if(this.x < x) {
			offsetX = x - this.x;
		}
		if(this.y < y) {
			offsetY = y - this.y;
		}
		if(this.get_right() > x + width) {
			offsetRight = x + width - this.get_right();
		}
		if(this.get_bottom() > y + height) {
			offsetBottom = y + height - this.get_bottom();
		}
		this.x += offsetX;
		this.y += offsetY;
		this.width += offsetRight - offsetX;
		this.height += offsetBottom - offsetY;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) {
			openfl_geom_Rectangle.__limeRectangle = new lime_math_Rectangle();
		}
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value)) {
			this.__colorTransform = value;
			if(value != null) {
				this.__displayObject.set_alpha(value.alphaMultiplier);
			}
			var _this = this.__displayObject;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__colorTransform;
	}
	,get_concatenatedMatrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__getWorldTransform().clone();
		}
		return null;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__transform.clone();
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			var rotation = 180 / Math.PI * Math.atan2(value.d,value.c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.copyFrom(value);
			var _this = this.__displayObject;
			if(!_this.__transformDirty) {
				_this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = this.__displayObject.__transform;
			var a = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
			var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.set(i,a[i]);
			}
			return new openfl_geom_Matrix3D(vector);
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		if(this.__displayObject != null) {
			var rotation = 180 / Math.PI * Math.atan2(value.rawData.get(5),value.rawData.get(4)) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.a = value.rawData.get(0);
			this.__displayObject.__transform.b = value.rawData.get(1);
			this.__displayObject.__transform.c = value.rawData.get(5);
			this.__displayObject.__transform.d = value.rawData.get(6);
			this.__displayObject.__transform.tx = value.rawData.get(12);
			this.__displayObject.__transform.ty = value.rawData.get(13);
			var _this = this.__displayObject;
			if(!_this.__transformDirty) {
				_this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",get_concatenatedMatrix:"get_concatenatedMatrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function(x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl_geom_Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var la = a.get_length();
	var lb = b.get_length();
	var dot = a.dotProduct(b);
	if(la != 0) {
		dot /= la;
	}
	if(lb != 0) {
		dot /= lb;
	}
	return Math.acos(dot);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = this.get_length();
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl_media_ID3Info.prototype = {
	album: null
	,artist: null
	,comment: null
	,genre: null
	,songName: null
	,track: null
	,year: null
	,__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_audio_AudioBuffer.fromFile(path));
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,close: function() {
		if(this.__buffer != null) {
			this.__buffer.dispose();
		}
	}
	,load: function(stream,context) {
		var _gthis = this;
		this.url = stream.url;
		var defaultLibrary = lime_utils_Assets.getLibrary("default");
		var tmp;
		if(defaultLibrary != null) {
			var _this = defaultLibrary.cachedAudioBuffers;
			var key = this.url;
			if(__map_reserved[key] != null) {
				tmp = _this.existsReserved(key);
			} else {
				tmp = _this.h.hasOwnProperty(key);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = defaultLibrary.cachedAudioBuffers;
			var key1 = this.url;
			this.AudioBuffer_onURLLoad(__map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1]);
		} else {
			lime_audio_AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
				_gthis.AudioBuffer_onURLLoad(null);
			});
		}
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength,forcePlayAsMusic) {
		if(forcePlayAsMusic == null) {
			forcePlayAsMusic = false;
		}
		this.__buffer = lime_audio_AudioBuffer.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
		this.__buffer = lime_audio_AudioBuffer.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0.0;
		}
		if(openfl_media_SoundMixer.__soundChannels.length >= 32) {
			return null;
		}
		if(sndTransform == null) {
			sndTransform = new openfl_media_SoundTransform();
		} else {
			sndTransform = sndTransform.clone();
		}
		var pan = openfl_media_SoundMixer.__soundTransform.pan + sndTransform.pan;
		if(pan > 1) {
			pan = 1;
		}
		if(pan < -1) {
			pan = -1;
		}
		var volume = openfl_media_SoundMixer.__soundTransform.volume * sndTransform.volume;
		var source = new lime_audio_AudioSource(this.__buffer);
		source.offset = startTime | 0;
		if(loops > 1) {
			source.set_loops(loops - 1);
		}
		source.set_gain(volume);
		var position = source.get_position();
		position.x = pan;
		position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
		source.set_position(position);
		return new openfl_media_SoundChannel(source,sndTransform);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) {
			return this.__buffer.get_src().duration() * 1000 | 0;
		}
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var openfl_media_SoundChannel = function(source,soundTransform) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundTransform != null) {
		this.__soundTransform = soundTransform;
	} else {
		this.__soundTransform = new openfl_media_SoundTransform();
	}
	if(source != null) {
		this.__source = source;
		this.__source.onComplete.add($bind(this,this.source_onComplete));
		this.__isValid = true;
		this.__source.play();
	}
	openfl_media_SoundMixer.__registerSoundChannel(this);
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__soundTransform: null
	,__source: null
	,stop: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		if(!this.__isValid) {
			return;
		}
		this.__source.stop();
		this.__dispose();
	}
	,__dispose: function() {
		if(!this.__isValid) {
			return;
		}
		this.__source.dispose();
		this.__isValid = false;
	}
	,__updateTransform: function() {
		this.set_soundTransform(this.get_soundTransform());
	}
	,get_position: function() {
		if(!this.__isValid) {
			return 0;
		}
		return this.__source.get_currentTime() + this.__source.offset;
	}
	,set_position: function(value) {
		if(!this.__isValid) {
			return 0;
		}
		this.__source.set_currentTime((value | 0) - this.__source.offset);
		return value;
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			var pan = openfl_media_SoundMixer.__soundTransform.pan + this.__soundTransform.pan;
			if(pan < -1) {
				pan = -1;
			}
			if(pan > 1) {
				pan = 1;
			}
			var volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
			if(this.__isValid) {
				this.__source.set_gain(volume);
				var position = this.__source.get_position();
				position.x = pan;
				position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
				this.__source.set_position(position);
				return value;
			}
		}
		return value;
	}
	,source_onComplete: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	if(bufferTime == null) {
		bufferTime = 1000;
	}
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl_media_SoundLoaderContext.prototype = {
	bufferTime: null
	,checkPolicyFile: null
	,__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) {
		panning = 0;
	}
	if(vol == null) {
		vol = 1;
	}
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_media_SoundMixer = function() { };
$hxClasses["openfl.media.SoundMixer"] = openfl_media_SoundMixer;
openfl_media_SoundMixer.__name__ = ["openfl","media","SoundMixer"];
openfl_media_SoundMixer.__properties__ = {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform"}
openfl_media_SoundMixer.areSoundsInaccessible = function() {
	return false;
};
openfl_media_SoundMixer.stopAll = function() {
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.stop();
	}
};
openfl_media_SoundMixer.__registerSoundChannel = function(soundChannel) {
	openfl_media_SoundMixer.__soundChannels.push(soundChannel);
};
openfl_media_SoundMixer.__unregisterSoundChannel = function(soundChannel) {
	HxOverrides.remove(openfl_media_SoundMixer.__soundChannels,soundChannel);
};
openfl_media_SoundMixer.get_soundTransform = function() {
	return openfl_media_SoundMixer.__soundTransform;
};
openfl_media_SoundMixer.set_soundTransform = function(value) {
	openfl_media_SoundMixer.__soundTransform = value.clone();
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.__updateTransform();
	}
	return value;
};
var openfl_net_NetConnection = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
openfl_net_NetConnection.__name__ = ["openfl","net","NetConnection"];
openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	connect: function(command,_,_1,_2,_3,_4) {
		if(command != null) {
			throw new js__$Boot_HaxeError("Error: Can only connect in \"HTTP streaming\" mode");
		}
		this.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,true,{ code : "connectSuccess"}));
	}
	,__class__: openfl_net_NetConnection
});
var openfl_net_NetStream = function(connection,peerID) {
	openfl_events_EventDispatcher.call(this);
	this.__connection = connection;
	this.__video = window.document.createElement("video");
	this.__video.addEventListener("error",$bind(this,this.video_onError),false);
	this.__video.addEventListener("waiting",$bind(this,this.video_onWaiting),false);
	this.__video.addEventListener("ended",$bind(this,this.video_onEnd),false);
	this.__video.addEventListener("pause",$bind(this,this.video_onPause),false);
	this.__video.addEventListener("seeking",$bind(this,this.video_onSeeking),false);
	this.__video.addEventListener("playing",$bind(this,this.video_onPlaying),false);
	this.__video.addEventListener("timeupdate",$bind(this,this.video_onTimeUpdate),false);
	this.__video.addEventListener("loadstart",$bind(this,this.video_onLoadStart),false);
	this.__video.addEventListener("stalled",$bind(this,this.video_onStalled),false);
	this.__video.addEventListener("durationchanged",$bind(this,this.video_onDurationChanged),false);
	this.__video.addEventListener("canplay",$bind(this,this.video_onCanPlay),false);
	this.__video.addEventListener("canplaythrough",$bind(this,this.video_onCanPlayThrough),false);
	this.__video.addEventListener("loadedmetadata",$bind(this,this.video_onLoadMetaData),false);
};
$hxClasses["openfl.net.NetStream"] = openfl_net_NetStream;
openfl_net_NetStream.__name__ = ["openfl","net","NetStream"];
openfl_net_NetStream.__super__ = openfl_events_EventDispatcher;
openfl_net_NetStream.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	audioCodec: null
	,bufferLength: null
	,bufferTime: null
	,bytesLoaded: null
	,bytesTotal: null
	,checkPolicyFile: null
	,client: null
	,currentFPS: null
	,decodedFrames: null
	,liveDelay: null
	,objectEncoding: null
	,soundTransform: null
	,time: null
	,videoCode: null
	,__connection: null
	,__timer: null
	,__video: null
	,close: function() {
		this.__video.pause();
		this.__video.src = "";
		this.time = 0;
	}
	,pause: function() {
		this.__video.pause();
	}
	,play: function(url,_,_1,_2,_3,_4) {
		this.__video.src = url;
		this.__video.play();
	}
	,requestVideoStatus: function() {
		var _gthis = this;
		if(this.__timer == null) {
			this.__timer = new haxe_Timer(1);
		}
		this.__timer.run = function() {
			if(_gthis.__video.paused) {
				_gthis.__playStatus("NetStream.Play.pause");
			} else {
				_gthis.__playStatus("NetStream.Play.playing");
			}
			_gthis.__timer.stop();
		};
	}
	,resume: function() {
		this.__video.play();
	}
	,seek: function(time) {
		if(time < 0) {
			time = 0;
		} else if(time > this.__video.duration) {
			time = this.__video.duration;
		}
		this.__video.currentTime = time;
	}
	,togglePause: function() {
		if(this.__video.paused) {
			this.__video.play();
		} else {
			this.__video.pause();
		}
	}
	,__playStatus: function(code) {
		if(this.client != null) {
			try {
				var handler = this.client.onPlayStatus;
				handler({ code : code, duration : this.__video.duration, position : this.__video.currentTime, speed : this.__video.playbackRate, start : this.__video.startTime});
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
	}
	,video_onCanPlay: function(event) {
		this.__playStatus("NetStream.Play.canplay");
	}
	,video_onCanPlayThrough: function(event) {
		this.__playStatus("NetStream.Play.canplaythrough");
	}
	,video_onDurationChanged: function(event) {
		this.__playStatus("NetStream.Play.durationchanged");
	}
	,video_onEnd: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.Complete");
	}
	,video_onError: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.error");
	}
	,video_onLoadMetaData: function(event) {
		if(this.client != null) {
			try {
				var handler = this.client.onMetaData;
				handler({ width : this.__video.videoWidth, height : this.__video.videoHeight, duration : this.__video.duration});
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
	}
	,video_onLoadStart: function(event) {
		this.__playStatus("NetStream.Play.loadstart");
	}
	,video_onPause: function(event) {
		this.__playStatus("NetStream.Play.pause");
	}
	,video_onPlaying: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Start"}));
		this.__playStatus("NetStream.Play.playing");
	}
	,video_onSeeking: function(event) {
		this.__playStatus("NetStream.Play.seeking");
	}
	,video_onStalled: function(event) {
		this.__playStatus("NetStream.Play.stalled");
	}
	,video_onTimeUpdate: function(event) {
		this.time = this.__video.currentTime;
		this.__playStatus("NetStream.Play.timeupdate");
	}
	,video_onWaiting: function(event) {
		this.__playStatus("NetStream.Play.waiting");
	}
	,get_speed: function() {
		return this.__video.playbackRate;
	}
	,set_speed: function(value) {
		return this.__video.playbackRate = value;
	}
	,__class__: openfl_net_NetStream
	,__properties__: {set_speed:"set_speed",get_speed:"get_speed"}
});
var openfl_net_SharedObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.client = this;
	this.objectEncoding = 3;
};
$hxClasses["openfl.net.SharedObject"] = openfl_net_SharedObject;
openfl_net_SharedObject.__name__ = ["openfl","net","SharedObject"];
openfl_net_SharedObject.getLocal = function(name,localPath,secure) {
	if(secure == null) {
		secure = false;
	}
	if(localPath == null) {
		localPath = window.location.href;
	}
	if(openfl_net_SharedObject.__sharedObjects == null) {
		openfl_net_SharedObject.__sharedObjects = new haxe_ds_StringMap();
		openfl_Lib.application.onExit.add(openfl_net_SharedObject.application_onExit);
	}
	var id = localPath + "/" + name;
	var _this = openfl_net_SharedObject.__sharedObjects;
	if(!(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id))) {
		var sharedObject = new openfl_net_SharedObject();
		sharedObject.data = { };
		sharedObject.__localPath = localPath;
		sharedObject.__name = name;
		var encodedData = null;
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				encodedData = storage.getItem(localPath + ":" + name);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
		}
		if(encodedData != null && encodedData != "") {
			try {
				var unserializer = new haxe_Unserializer(encodedData);
				unserializer.setResolver({ resolveEnum : Type.resolveEnum, resolveClass : openfl_net_SharedObject.__resolveClass});
				sharedObject.data = unserializer.unserialize();
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
			}
		}
		var _this1 = openfl_net_SharedObject.__sharedObjects;
		if(__map_reserved[id] != null) {
			_this1.setReserved(id,sharedObject);
		} else {
			_this1.h[id] = sharedObject;
		}
	}
	var _this2 = openfl_net_SharedObject.__sharedObjects;
	return __map_reserved[id] != null?_this2.getReserved(id):_this2.h[id];
};
openfl_net_SharedObject.getRemote = function(name,remotePath,persistence,secure) {
	if(secure == null) {
		secure = false;
	}
	if(persistence == null) {
		persistence = false;
	}
	openfl_Lib.notImplemented({ fileName : "SharedObject.hx", lineNumber : 230, className : "openfl.net.SharedObject", methodName : "getRemote"});
	return null;
};
openfl_net_SharedObject.__mkdir = function(directory) {
};
openfl_net_SharedObject.__resolveClass = function(name) {
	if(name != null) {
		if(StringTools.startsWith(name,"neash.")) {
			name = StringTools.replace(name,"neash.","openfl.");
		}
		if(StringTools.startsWith(name,"native.")) {
			name = StringTools.replace(name,"native.","openfl.");
		}
		if(StringTools.startsWith(name,"flash.")) {
			name = StringTools.replace(name,"flash.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._v2.")) {
			name = StringTools.replace(name,"openfl._v2.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._legacy.")) {
			name = StringTools.replace(name,"openfl._legacy.","openfl.");
		}
		return Type.resolveClass(name);
	}
	return null;
};
openfl_net_SharedObject.application_onExit = function(_) {
	var _this = openfl_net_SharedObject.__sharedObjects;
	var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(tmp.hasNext()) tmp.next().flush();
};
openfl_net_SharedObject.__super__ = openfl_events_EventDispatcher;
openfl_net_SharedObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	client: null
	,data: null
	,fps: null
	,objectEncoding: null
	,__localPath: null
	,__name: null
	,clear: function() {
		this.data = { };
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
		}
	}
	,close: function() {
	}
	,connect: function(myConnection,params) {
		openfl_Lib.notImplemented({ fileName : "SharedObject.hx", lineNumber : 96, className : "openfl.net.SharedObject", methodName : "connect"});
	}
	,flush: function(minDiskSpace) {
		if(minDiskSpace == null) {
			minDiskSpace = 0;
		}
		if(Reflect.fields(this.data).length == 0) {
			return 0;
		}
		var encodedData = haxe_Serializer.run(this.data);
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
				storage.setItem(this.__localPath + ":" + this.__name,encodedData);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return 1;
		}
		return 0;
	}
	,send: function($arguments) {
		openfl_Lib.notImplemented({ fileName : "SharedObject.hx", lineNumber : 239, className : "openfl.net.SharedObject", methodName : "send"});
	}
	,setDirty: function(propertyName) {
	}
	,setProperty: function(propertyName,value) {
		if(this.data != null) {
			this.data[propertyName] = value;
		}
	}
	,get_size: function() {
		try {
			return haxe_io_Bytes.ofString(haxe_Serializer.run(this.data)).length;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return 0;
		}
	}
	,__class__: openfl_net_SharedObject
	,__properties__: {get_size:"get_size"}
});
var openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$ = {};
$hxClasses["openfl.net._SharedObjectFlushStatus.SharedObjectFlushStatus_Impl_"] = openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$;
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.__name__ = ["openfl","net","_SharedObjectFlushStatus","SharedObjectFlushStatus_Impl_"];
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.fromString = function(value) {
	switch(value) {
	case "flushed":
		return 0;
	case "pending":
		return 1;
	default:
		return null;
	}
};
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "flushed";
	case 1:
		return "pending";
	default:
		return null;
	}
};
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.dataFormat = 1;
	if(request != null) {
		this.load(request);
	}
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,__httpRequest: null
	,close: function() {
		if(this.__httpRequest != null) {
			this.__httpRequest.cancel();
		}
	}
	,load: function(request) {
		var _gthis = this;
		if(this.dataFormat == 0) {
			var httpRequest = new lime_net__$HTTPRequest_$openfl_$utils_$ByteArray();
			this.__prepareRequest(httpRequest,request);
			httpRequest.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_gthis.data = data;
				_gthis.dispatchEvent(new openfl_events_Event("complete"));
			});
		} else {
			var httpRequest1 = new lime_net__$HTTPRequest_$String();
			this.__prepareRequest(httpRequest1,request);
			httpRequest1.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data1) {
				_gthis.data = data1;
				_gthis.dispatchEvent(new openfl_events_Event("complete"));
			});
		}
	}
	,__prepareRequest: function(httpRequest,request) {
		this.__httpRequest = httpRequest;
		this.__httpRequest.uri = request.url;
		var _g = request.method;
		var tmp;
		switch(_g) {
		case "DELETE":
			tmp = "DELETE";
			break;
		case "HEAD":
			tmp = "HEAD";
			break;
		case "OPTIONS":
			tmp = "OPTIONS";
			break;
		case "POST":
			tmp = "POST";
			break;
		case "PUT":
			tmp = "PUT";
			break;
		default:
			tmp = "GET";
		}
		this.__httpRequest.method = tmp;
		if(request.data != null) {
			if(js_Boot.__instanceof(request.data,openfl_net_URLVariables)) {
				var fields = Reflect.fields(request.data);
				var _g1 = 0;
				while(_g1 < fields.length) {
					var field = fields[_g1];
					++_g1;
					var value = Reflect.field(request.data,field);
					var _this = this.__httpRequest.formData;
					if(__map_reserved[field] != null) {
						_this.setReserved(field,value);
					} else {
						_this.h[field] = value;
					}
				}
			} else if(js_Boot.__instanceof(request.data,haxe_io_Bytes)) {
				this.__httpRequest.data = request.data;
			} else {
				this.__httpRequest.data = haxe_io_Bytes.ofString(Std.string(request.data));
			}
		}
		this.__httpRequest.contentType = request.contentType;
		if(request.requestHeaders != null) {
			var _g11 = 0;
			var _g2 = request.requestHeaders;
			while(_g11 < _g2.length) {
				var header = _g2[_g11];
				++_g11;
				this.__httpRequest.headers.push(new lime_net_HTTPRequestHeader(header.name,header.value));
			}
		}
		this.__httpRequest.userAgent = request.userAgent;
	}
	,httpRequest_onError: function(error) {
		if(error == 403) {
			this.dispatchEvent(new openfl_events_SecurityErrorEvent("securityError"));
		} else {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		}
	}
	,httpRequest_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.dispatchEvent(event);
	}
	,__class__: openfl_net_URLLoader
});
var openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$ = {};
$hxClasses["openfl.net._URLLoaderDataFormat.URLLoaderDataFormat_Impl_"] = openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.__name__ = ["openfl","net","_URLLoaderDataFormat","URLLoaderDataFormat_Impl_"];
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "binary":
		return 0;
	case "text":
		return 1;
	case "variables":
		return 2;
	default:
		return null;
	}
};
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "binary";
	case 1:
		return "text";
	case 2:
		return "variables";
	default:
		return null;
	}
};
var openfl_net_URLRequest = function(url) {
	if(url != null) {
		this.url = url;
	}
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl_net_URLRequestHeader
};
var openfl_net_URLVariables = function(source) {
	if(source != null) {
		this.decode(source);
	}
};
$hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
openfl_net_URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl_net_URLVariables.prototype = {
	decode: function(source) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = source.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) {
				var s = HxOverrides.substr(f1,0,eq);
				var field = decodeURIComponent(s.split("+").join(" "));
				var s1 = HxOverrides.substr(f1,eq + 1,null);
				this[field] = decodeURIComponent(s1.split("+").join(" "));
			} else if(eq != 0) {
				this[decodeURIComponent(f1.split("+").join(" "))] = "";
			}
		}
	}
	,toString: function() {
		var result = [];
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			var tmp = encodeURIComponent(f) + "=";
			var s = Reflect.field(this,f);
			result.push(tmp + encodeURIComponent(s));
		}
		return result.join("&");
	}
	,__class__: openfl_net_URLVariables
};
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) {
		this.parentDomain = parentDomain;
	} else {
		this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
	}
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_system_LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl_system_LoaderContext.prototype = {
	allowCodeImport: null
	,allowLoadBytesCodeExecution: null
	,applicationDomain: null
	,checkPolicyFile: null
	,securityDomain: null
	,__class__: openfl_system_LoaderContext
};
var openfl_system_Security = function() { };
$hxClasses["openfl.system.Security"] = openfl_system_Security;
openfl_system_Security.__name__ = ["openfl","system","Security"];
openfl_system_Security.allowDomain = function(p1,p2,p3,p4,p5) {
};
openfl_system_Security.allowInsecureDomain = function(p1,p2,p3,p4,p5) {
};
openfl_system_Security.loadPolicyFile = function(url) {
};
var openfl_system_SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_system_System = function() { };
$hxClasses["openfl.system.System"] = openfl_system_System;
openfl_system_System.__name__ = ["openfl","system","System"];
openfl_system_System.__properties__ = {get_vmVersion:"get_vmVersion",get_totalMemory:"get_totalMemory"}
openfl_system_System.exit = function(code) {
	lime_system_System.exit(code);
};
openfl_system_System.gc = function() {
};
openfl_system_System.pause = function() {
	openfl_Lib.notImplemented({ fileName : "System.hx", lineNumber : 40, className : "openfl.system.System", methodName : "pause"});
};
openfl_system_System.resume = function() {
	openfl_Lib.notImplemented({ fileName : "System.hx", lineNumber : 47, className : "openfl.system.System", methodName : "resume"});
};
openfl_system_System.setClipboard = function(string) {
	lime_system_Clipboard.set_text(string);
};
openfl_system_System.get_totalMemory = function() {
	return (window.performance && window.performance.memory) ? window.performance.memory.usedJSHeapSize : 0;
};
openfl_system_System.get_vmVersion = function() {
	return "1.0.0";
};
var openfl_text__$AntiAliasType_AntiAliasType_$Impl_$ = {};
$hxClasses["openfl.text._AntiAliasType.AntiAliasType_Impl_"] = openfl_text__$AntiAliasType_AntiAliasType_$Impl_$;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.__name__ = ["openfl","text","_AntiAliasType","AntiAliasType_Impl_"];
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "advanced":
		return 0;
	case "normal":
		return 1;
	default:
		return null;
	}
};
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "advanced";
	case 1:
		return "normal";
	default:
		return null;
	}
};
var openfl_text__$FontStyle_FontStyle_$Impl_$ = {};
$hxClasses["openfl.text._FontStyle.FontStyle_Impl_"] = openfl_text__$FontStyle_FontStyle_$Impl_$;
openfl_text__$FontStyle_FontStyle_$Impl_$.__name__ = ["openfl","text","_FontStyle","FontStyle_Impl_"];
openfl_text__$FontStyle_FontStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bold":
		return 0;
	case "boldItalic":
		return 1;
	case "italic":
		return 2;
	case "regular":
		return 3;
	default:
		return null;
	}
};
openfl_text__$FontStyle_FontStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bold";
	case 1:
		return "boldItalic";
	case 2:
		return "italic";
	case 3:
		return "regular";
	default:
		return null;
	}
};
var openfl_text__$FontType_FontType_$Impl_$ = {};
$hxClasses["openfl.text._FontType.FontType_Impl_"] = openfl_text__$FontType_FontType_$Impl_$;
openfl_text__$FontType_FontType_$Impl_$.__name__ = ["openfl","text","_FontType","FontType_Impl_"];
openfl_text__$FontType_FontType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "device":
		return 0;
	case "embedded":
		return 1;
	case "embeddedCFF":
		return 2;
	default:
		return null;
	}
};
openfl_text__$FontType_FontType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "device";
	case 1:
		return "embedded";
	case 2:
		return "embeddedCFF";
	default:
		return null;
	}
};
var openfl_text__$GridFitType_GridFitType_$Impl_$ = {};
$hxClasses["openfl.text._GridFitType.GridFitType_Impl_"] = openfl_text__$GridFitType_GridFitType_$Impl_$;
openfl_text__$GridFitType_GridFitType_$Impl_$.__name__ = ["openfl","text","_GridFitType","GridFitType_Impl_"];
openfl_text__$GridFitType_GridFitType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "pixel":
		return 1;
	case "subpixel":
		return 2;
	default:
		return null;
	}
};
openfl_text__$GridFitType_GridFitType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "pixel";
	case 2:
		return "subpixel";
	default:
		return null;
	}
};
var openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldAutoSize.TextFieldAutoSize_Impl_"] = openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.__name__ = ["openfl","text","_TextFieldAutoSize","TextFieldAutoSize_Impl_"];
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "left":
		return 1;
	case "none":
		return 2;
	case "right":
		return 3;
	default:
		return null;
	}
};
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "left";
	case 2:
		return "none";
	case 3:
		return "right";
	default:
		return null;
	}
};
var openfl_text__$TextFieldType_TextFieldType_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldType.TextFieldType_Impl_"] = openfl_text__$TextFieldType_TextFieldType_$Impl_$;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.__name__ = ["openfl","text","_TextFieldType","TextFieldType_Impl_"];
openfl_text__$TextFieldType_TextFieldType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamic":
		return 0;
	case "input":
		return 1;
	default:
		return null;
	}
};
openfl_text__$TextFieldType_TextFieldType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamic";
	case 1:
		return "input";
	default:
		return null;
	}
};
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) {
			this.font = format.font;
		}
		if(format.size != null) {
			this.size = format.size;
		}
		if(format.color != null) {
			this.color = format.color;
		}
		if(format.bold != null) {
			this.bold = format.bold;
		}
		if(format.italic != null) {
			this.italic = format.italic;
		}
		if(format.underline != null) {
			this.underline = format.underline;
		}
		if(format.url != null) {
			this.url = format.url;
		}
		if(format.target != null) {
			this.target = format.target;
		}
		if(format.align != null) {
			this.align = format.align;
		}
		if(format.leftMargin != null) {
			this.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.indent = format.indent;
		}
		if(format.leading != null) {
			this.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.tabStops = format.tabStops;
		}
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$ = {};
$hxClasses["openfl.text._TextFormatAlign.TextFormatAlign_Impl_"] = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.__name__ = ["openfl","text","_TextFormatAlign","TextFormatAlign_Impl_"];
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "end":
		return 1;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "start":
		return 5;
	default:
		return null;
	}
};
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "end";
	case 2:
		return "justify";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "start";
	default:
		return null;
	}
};
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl_text_TextLineMetrics.prototype = {
	ascent: null
	,descent: null
	,height: null
	,leading: null
	,width: null
	,x: null
	,__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(index >= 0 && index < openfl_ui_GameInput.__deviceList.length) {
		return openfl_ui_GameInput.__deviceList[index];
	}
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) {
		return null;
	}
	if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] == null) {
		var device = new openfl_ui_GameInputDevice(lime_ui_Joystick.__getDeviceData()[gamepad.id].id,lime_ui_Joystick.__getDeviceData()[gamepad.id].id);
		openfl_ui_GameInput.__deviceList.push(device);
		openfl_ui_GameInput.__devices.set(gamepad,device);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var tmp;
			switch(axis) {
			case 0:
				tmp = "LEFT_X";
				break;
			case 1:
				tmp = "LEFT_Y";
				break;
			case 2:
				tmp = "RIGHT_X";
				break;
			case 3:
				tmp = "RIGHT_Y";
				break;
			case 4:
				tmp = "TRIGGER_LEFT";
				break;
			case 5:
				tmp = "TRIGGER_RIGHT";
				break;
			default:
				tmp = "UNKNOWN (" + axis + ")";
			}
			var control = new openfl_ui_GameInputControl(device,"AXIS_" + tmp,-1,1);
			device.__axis.h[axis] = control;
			device.__controls.push(control);
		}
		var control1 = device.__axis.h[axis];
		control1.value = value;
		control1.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var tmp;
			switch(button) {
			case 0:
				tmp = "A";
				break;
			case 1:
				tmp = "B";
				break;
			case 2:
				tmp = "X";
				break;
			case 3:
				tmp = "Y";
				break;
			case 4:
				tmp = "BACK";
				break;
			case 5:
				tmp = "GUIDE";
				break;
			case 6:
				tmp = "START";
				break;
			case 7:
				tmp = "LEFT_STICK";
				break;
			case 8:
				tmp = "RIGHT_STICK";
				break;
			case 9:
				tmp = "LEFT_SHOULDER";
				break;
			case 10:
				tmp = "RIGHT_SHOULDER";
				break;
			case 11:
				tmp = "DPAD_UP";
				break;
			case 12:
				tmp = "DPAD_DOWN";
				break;
			case 13:
				tmp = "DPAD_LEFT";
				break;
			case 14:
				tmp = "DPAD_RIGHT";
				break;
			default:
				tmp = "UNKNOWN (" + button + ")";
			}
			var control = new openfl_ui_GameInputControl(device,"BUTTON_" + tmp,0,1);
			device.__button.h[button] = control;
			device.__controls.push(control);
		}
		var control1 = device.__button.h[button];
		control1.value = 1;
		control1.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var tmp;
			switch(button) {
			case 0:
				tmp = "A";
				break;
			case 1:
				tmp = "B";
				break;
			case 2:
				tmp = "X";
				break;
			case 3:
				tmp = "Y";
				break;
			case 4:
				tmp = "BACK";
				break;
			case 5:
				tmp = "GUIDE";
				break;
			case 6:
				tmp = "START";
				break;
			case 7:
				tmp = "LEFT_STICK";
				break;
			case 8:
				tmp = "RIGHT_STICK";
				break;
			case 9:
				tmp = "LEFT_SHOULDER";
				break;
			case 10:
				tmp = "RIGHT_SHOULDER";
				break;
			case 11:
				tmp = "DPAD_UP";
				break;
			case 12:
				tmp = "DPAD_DOWN";
				break;
			case 13:
				tmp = "DPAD_LEFT";
				break;
			case 14:
				tmp = "DPAD_RIGHT";
				break;
			default:
				tmp = "UNKNOWN (" + button + ")";
			}
			var control = new openfl_ui_GameInputControl(device,"BUTTON_" + tmp,0,1);
			device.__button.h[button] = control;
			device.__controls.push(control);
		}
		var control1 = device.__button.h[button];
		control1.value = 0;
		control1.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,openfl_ui_GameInput.__devices.h[gamepad.__id__]);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) {
		value = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,sampleInterval: null
	,__axis: null
	,__button: null
	,__controls: null
	,__gamepad: null
	,getCachedSamples: function(data,append) {
		if(append == null) {
			append = false;
		}
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) {
			return this.__controls[i];
		}
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 108;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) {
		shift = false;
	}
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) {
			return key - 48 + 48;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 97;
		}
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 65;
		}
	}
	if(key >= 96 && key <= 105) {
		return key - 96 + 48;
	}
	switch(key) {
	case 8:
		return 8;
	case 13:
		return 13;
	case 46:
		return 127;
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	default:
		return 0;
	}
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = ["openfl","ui","Mouse"];
openfl_ui_Mouse.__properties__ = {set_cursor:"set_cursor",get_cursor:"get_cursor"}
openfl_ui_Mouse.hide = function() {
	lime_ui_Mouse.hide();
};
openfl_ui_Mouse.show = function() {
	lime_ui_Mouse.show();
};
openfl_ui_Mouse.get_cursor = function() {
	return openfl_ui_Mouse.__cursor;
};
openfl_ui_Mouse.set_cursor = function(value) {
	switch(value) {
	case "arrow":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		break;
	case "button":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.POINTER);
		break;
	case "hand":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.MOVE);
		break;
	case "ibeam":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.TEXT);
		break;
	default:
	}
	return openfl_ui_Mouse.__cursor = value;
};
var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = ["openfl","utils","_ByteArray","ByteArray_Impl_"];
openfl_utils__$ByteArray_ByteArray_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length"}
openfl_utils__$ByteArray_ByteArray_$Impl_$._new = function(length) {
	if(length == null) {
		length = 0;
	}
	return new openfl_utils_ByteArrayData(length);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get = function(this1,index) {
	return this1.b[index];
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set = function(this1,index,value) {
	this1.__resize(index + 1);
	this1.b[index] = value & 255;
	return value;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(buffer));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	if(js_Boot.__instanceof(bytes,openfl_utils_ByteArrayData)) {
		return bytes;
	} else {
		return openfl_utils_ByteArrayData.fromBytes(bytes);
	}
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(bytesData));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromFile = function(path) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromLimeBytes = function(bytes) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytesData = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toLimeBytes = function(byteArray) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(byteArray)));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function(this1) {
	return this1.length;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length = function(this1,value) {
	if(value > 0) {
		this1.__resize(value);
	}
	this1.length = value;
	return value;
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = ["openfl","utils","IDataOutput"];
openfl_utils_IDataOutput.prototype = {
	get_endian: null
	,set_endian: null
	,objectEncoding: null
	,writeBoolean: null
	,writeByte: null
	,writeBytes: null
	,writeDouble: null
	,writeFloat: null
	,writeInt: null
	,writeMultiByte: null
	,writeShort: null
	,writeUTF: null
	,writeUTFBytes: null
	,writeUnsignedInt: null
	,__class__: openfl_utils_IDataOutput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian"}
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = ["openfl","utils","IDataInput"];
openfl_utils_IDataInput.prototype = {
	get_bytesAvailable: null
	,get_endian: null
	,set_endian: null
	,objectEncoding: null
	,readBoolean: null
	,readByte: null
	,readBytes: null
	,readDouble: null
	,readFloat: null
	,readInt: null
	,readMultiByte: null
	,readShort: null
	,readUnsignedByte: null
	,readUnsignedInt: null
	,readUnsignedShort: null
	,readUTF: null
	,readUTFBytes: null
	,__class__: openfl_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) {
		length = 0;
	}
	haxe_io_Bytes.call(this,new haxe_io_Bytes(new ArrayBuffer(length)).b.buffer);
	this.__length = length;
	this.__endian = 0;
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = ["openfl","utils","ByteArrayData"];
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	objectEncoding: null
	,position: null
	,__endian: null
	,__length: null
	,clear: function() {
		this.length = 0;
		this.position = 0;
	}
	,compress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_compress_Deflate.compress(this);
			break;
		case 1:
			bytes = lime_utils_compress_LZMA.compress(this);
			break;
		default:
			bytes = lime_utils_compress_Zlib.compress(this);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
			this.position = this.length;
		}
	}
	,deflate: function() {
		this.compress(0);
	}
	,inflate: function() {
		this.uncompress(0);
	}
	,readBoolean: function() {
		if(this.position < this.length) {
			return this.b[this.position++] != 0;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) {
			return value - 256;
		} else {
			return value;
		}
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(length == 0) {
			length = this.length - this.position;
		}
		if(this.position + length > this.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		if(bytes.length < offset + length) {
			bytes.__resize(offset + length);
		}
		bytes.blit(offset,this,this.position,length);
		this.position += length;
	}
	,readDouble: function() {
		var ch1 = this.readInt();
		var ch2 = this.readInt();
		if(this.__endian == 1) {
			return haxe_io_FPHelper.i64ToDouble(ch1,ch2);
		} else {
			return haxe_io_FPHelper.i64ToDouble(ch2,ch1);
		}
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt());
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var value = this.__endian == 1?ch2 << 8 | ch1:ch1 << 8 | ch2;
		if((value & 32768) != 0) {
			return value - 65536;
		} else {
			return value;
		}
	}
	,readUnsignedByte: function() {
		if(this.position < this.length) {
			return this.b[this.position++];
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return (ch2 << 8) + ch1;
		} else {
			return ch1 << 8 | ch2;
		}
	}
	,readUTF: function() {
		return this.readUTFBytes(this.readUnsignedShort());
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,uncompress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_compress_Deflate.decompress(this);
			break;
		case 1:
			bytes = lime_utils_compress_LZMA.decompress(this);
			break;
		default:
			bytes = lime_utils_compress_Zlib.decompress(this);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
			this.position = this.__length;
		}
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.b[this.position++] = value & 255 & 255;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) == 0) {
			return;
		}
		if(length == 0) {
			length = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeDouble: function(value) {
		var int64 = haxe_io_FPHelper.doubleToI64(value);
		if(this.__endian == 1) {
			this.writeInt(int64.low);
			this.writeInt(int64.high);
		} else {
			this.writeInt(int64.high);
			this.writeInt(int64.low);
		}
	}
	,writeFloat: function(value) {
		this.writeInt(haxe_io_FPHelper.floatToI32(value));
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255 & 255;
			this.b[this.position++] = value >> 8 & 255 & 255;
			this.b[this.position++] = value >> 16 & 255 & 255;
			this.b[this.position++] = value >> 24 & 255 & 255;
		} else {
			this.b[this.position++] = value >> 24 & 255 & 255;
			this.b[this.position++] = value >> 16 & 255 & 255;
			this.b[this.position++] = value >> 8 & 255 & 255;
			this.b[this.position++] = value & 255 & 255;
		}
	}
	,writeMultiByte: function(value,charSet) {
		this.writeUTFBytes(value);
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255;
			this.b[this.position++] = value >> 8 & 255;
		} else {
			this.b[this.position++] = value >> 8 & 255;
			this.b[this.position++] = value & 255;
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeUTF: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeShort(bytes.length);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	}
	,writeUTFBytes: function(value) {
		haxe_io_Bytes.ofString(value);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(haxe_io_Bytes.ofString(value)));
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
		this.length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.__length) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer((size + 1) * 3 >> 1));
			var cacheLength = this.length;
			this.length = this.__length;
			bytes.blit(0,this,0,this.__length);
			this.length = cacheLength;
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
		}
		if(this.length < size) {
			this.length = size;
		}
	}
	,__setData: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		return this.__endian = value;
	}
	,__class__: openfl_utils_ByteArrayData
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
});
var openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$ = {};
$hxClasses["openfl.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_"] = openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.__name__ = ["openfl","utils","_CompressionAlgorithm","CompressionAlgorithm_Impl_"];
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.fromString = function(value) {
	switch(value) {
	case "deflate":
		return 0;
	case "lzma":
		return 1;
	case "zlib":
		return 2;
	default:
		return null;
	}
};
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "deflate";
	case 1:
		return "lzma";
	case 2:
		return "zlib";
	default:
		return null;
	}
};
var openfl_utils__$Dictionary_Dictionary_$Impl_$ = {};
$hxClasses["openfl.utils._Dictionary.Dictionary_Impl_"] = openfl_utils__$Dictionary_Dictionary_$Impl_$;
openfl_utils__$Dictionary_Dictionary_$Impl_$.__name__ = ["openfl","utils","_Dictionary","Dictionary_Impl_"];
openfl_utils__$Dictionary_Dictionary_$Impl_$.exists = function(this1,key) {
	return this1.exists(key);
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.get = function(this1,key) {
	return this1.get(key);
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.remove = function(this1,key) {
	return this1.remove(key);
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.set = function(this1,key,value) {
	this1.set(key,value);
	return value;
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.iterator = function(this1) {
	return this1.keys();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toStringMap = function(t,weakKeys) {
	return new haxe_ds_StringMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toIntMap = function(t,weakKeys) {
	return new haxe_ds_IntMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toEnumValueMapMap = function(t,weakKeys) {
	return new haxe_ds_EnumValueMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toObjectMap = function(t,weakKeys) {
	return new haxe_ds_ObjectMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toClassMap = function(t,weakKeys) {
	return new openfl_utils__$Dictionary_ClassMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.fromStringMap = function(map) {
	return map;
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.fromIntMap = function(map) {
	return map;
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.fromObjectMap = function(map) {
	return map;
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.fromClassMap = function(map) {
	return map;
};
var openfl_utils__$Dictionary_ClassMap = function() {
	this.types = new haxe_ds_StringMap();
	this.values = new haxe_ds_StringMap();
};
$hxClasses["openfl.utils._Dictionary.ClassMap"] = openfl_utils__$Dictionary_ClassMap;
openfl_utils__$Dictionary_ClassMap.__name__ = ["openfl","utils","_Dictionary","ClassMap"];
openfl_utils__$Dictionary_ClassMap.__interfaces__ = [haxe_IMap];
openfl_utils__$Dictionary_ClassMap.prototype = {
	types: null
	,values: null
	,exists: function(key) {
		var key1 = Type.getClassName(key);
		var _this = this.types;
		if(__map_reserved[key1] != null) {
			return _this.existsReserved(key1);
		} else {
			return _this.h.hasOwnProperty(key1);
		}
	}
	,get: function(key) {
		var key1 = Type.getClassName(key);
		var _this = this.values;
		if(__map_reserved[key1] != null) {
			return _this.getReserved(key1);
		} else {
			return _this.h[key1];
		}
	}
	,keys: function() {
		var _this = this.types;
		return new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	}
	,iterator: function() {
		var _this = this.values;
		return new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	}
	,remove: function(key) {
		var name = Type.getClassName(key);
		if(!this.types.remove(name)) {
			return this.values.remove(name);
		} else {
			return true;
		}
	}
	,set: function(key,value) {
		var name = Type.getClassName(key);
		var _this = this.types;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,key);
		} else {
			_this.h[name] = key;
		}
		var _this1 = this.values;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,value);
		} else {
			_this1.h[name] = value;
		}
	}
	,toString: function() {
		return this.values.toString();
	}
	,__class__: openfl_utils__$Dictionary_ClassMap
};
var openfl_utils__$Endian_Endian_$Impl_$ = {};
$hxClasses["openfl.utils._Endian.Endian_Impl_"] = openfl_utils__$Endian_Endian_$Impl_$;
openfl_utils__$Endian_Endian_$Impl_$.__name__ = ["openfl","utils","_Endian","Endian_Impl_"];
openfl_utils__$Endian_Endian_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bigEndian":
		return 0;
	case "littleEndian":
		return 1;
	default:
		return null;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bigEndian";
	case 1:
		return "littleEndian";
	default:
		return null;
	}
};
var openfl_utils__$Object_Object_$Impl_$ = {};
$hxClasses["openfl.utils._Object.Object_Impl_"] = openfl_utils__$Object_Object_$Impl_$;
openfl_utils__$Object_Object_$Impl_$.__name__ = ["openfl","utils","_Object","Object_Impl_"];
openfl_utils__$Object_Object_$Impl_$._new = function() {
	var this1 = { };
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.hasOwnProperty = function(this1,name) {
	if(this1 != null) {
		return Object.prototype.hasOwnProperty.call(this1,name);
	} else {
		return false;
	}
};
openfl_utils__$Object_Object_$Impl_$.isPrototypeOf = function(this1,theClass) {
	var c = this1 == null?null:js_Boot.getClass(this1);
	while(c != null) {
		if(c == theClass) {
			return true;
		}
		c = Type.getSuperClass(c);
	}
	return false;
};
openfl_utils__$Object_Object_$Impl_$.iterator = function(this1) {
	var fields = Reflect.fields(this1);
	if(fields == null) {
		fields = [];
	}
	return HxOverrides.iter(fields);
};
openfl_utils__$Object_Object_$Impl_$.propertyIsEnumerable = function(this1,name) {
	if(this1 != null && Object.prototype.hasOwnProperty.call(this1,name)) {
		return js_Boot.__instanceof(Reflect.field(this1,name),haxe_lang_Iterable);
	} else {
		return false;
	}
};
openfl_utils__$Object_Object_$Impl_$.toLocaleString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.toString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.valueOf = function(this1) {
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.__get = function(this1,key) {
	return Reflect.field(this1,key);
};
openfl_utils__$Object_Object_$Impl_$.__set = function(this1,key,value) {
	this1[key] = value;
	return value;
};
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = ["haxe","lang","Iterator"];
haxe_lang_Iterator.prototype = {
	hasNext: null
	,next: null
	,__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = ["haxe","lang","Iterable"];
haxe_lang_Iterable.prototype = {
	iterator: null
	,__class__: haxe_lang_Iterable
};
var spritesheet_Spritesheet = function(image,frames,behaviors,imageAlpha) {
	this.sourceImage = image;
	this.sourceImageAlpha = imageAlpha;
	if(frames == null) {
		this.frames = [];
		this.totalFrames = 0;
	} else {
		this.frames = frames;
		this.totalFrames = frames.length;
	}
	if(behaviors == null) {
		this.behaviors = new haxe_ds_StringMap();
	} else {
		this.behaviors = behaviors;
	}
};
$hxClasses["spritesheet.Spritesheet"] = spritesheet_Spritesheet;
spritesheet_Spritesheet.__name__ = ["spritesheet","Spritesheet"];
spritesheet_Spritesheet.prototype = {
	behaviors: null
	,name: null
	,totalFrames: null
	,frames: null
	,sourceImage: null
	,sourceImageAlpha: null
	,addBehavior: function(behavior) {
		var _this = this.behaviors;
		var key = behavior.name;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,behavior);
		} else {
			_this.h[key] = behavior;
		}
	}
	,addFrame: function(frame) {
		this.frames.push(frame);
		this.totalFrames++;
	}
	,generateBitmaps: function() {
		var _g1 = 0;
		var _g = this.totalFrames;
		while(_g1 < _g) this.generateBitmap(_g1++);
	}
	,generateBitmap: function(index) {
		var frame = this.frames[index];
		var bitmapData = new openfl_display_BitmapData(frame.width,frame.height,true);
		var sourceRectangle = new openfl_geom_Rectangle(frame.x,frame.y,frame.width,frame.height);
		var targetPoint = new openfl_geom_Point();
		bitmapData.copyPixels(this.sourceImage,sourceRectangle,targetPoint);
		if(this.sourceImageAlpha != null) {
			bitmapData.copyChannel(this.sourceImageAlpha,sourceRectangle,targetPoint,2,8);
		}
		frame.bitmapData = bitmapData;
	}
	,fillBitmaps: function() {
		var _g1 = 0;
		var _g = this.totalFrames;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.frames[i].bitmapData == null) {
				this.generateBitmap(i);
			}
		}
		this.sourceImage = null;
	}
	,getFrame: function(index,autoGenerate) {
		if(autoGenerate == null) {
			autoGenerate = true;
		}
		var frame = this.frames[index];
		if(frame != null && frame.bitmapData == null && autoGenerate) {
			this.generateBitmap(index);
		}
		return frame;
	}
	,getFrameIDs: function() {
		var ids = [];
		var _g1 = 0;
		var _g = this.totalFrames;
		while(_g1 < _g) ids.push(_g1++);
		return ids;
	}
	,getFrames: function() {
		return this.frames.slice();
	}
	,merge: function(spritesheet1) {
		var cacheTotalFrames = this.totalFrames;
		var _g1 = 0;
		var _g = spritesheet1.frames.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(spritesheet1.frames[i].bitmapData == null && (spritesheet1.sourceImage != this.sourceImage || spritesheet1.sourceImageAlpha != this.sourceImageAlpha)) {
				spritesheet1.generateBitmap(i);
			}
			this.addFrame(spritesheet1.frames[i]);
		}
		var _this = spritesheet1.behaviors;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var behavior = tmp.next();
			var _this1 = this.behaviors;
			var key = behavior.name;
			if(!(__map_reserved[key] != null?_this1.existsReserved(key):_this1.h.hasOwnProperty(key))) {
				behavior.clone().name = behavior.name;
				var _g11 = 0;
				var _g2 = behavior.frames.length;
				while(_g11 < _g2) behavior.frames[_g11++] += cacheTotalFrames;
				this.addBehavior(behavior);
			}
		}
		var ids = [];
		var _g12 = cacheTotalFrames;
		var _g3 = this.totalFrames;
		while(_g12 < _g3) ids.push(_g12++);
		return ids;
	}
	,updateImage: function(image,imageAlpha) {
		this.sourceImage = image;
		this.sourceImageAlpha = imageAlpha;
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			if(frame.bitmapData != null) {
				frame.bitmapData = null;
			}
		}
	}
	,clear: function() {
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			if(frame.bitmapData != null) {
				frame.bitmapData = null;
			}
		}
	}
	,__class__: spritesheet_Spritesheet
};
var spritesheet_data_BehaviorData = function(name,frames,loop,frameRate,originX,originY) {
	if(originY == null) {
		originY = 0;
	}
	if(originX == null) {
		originX = 0;
	}
	if(frameRate == null) {
		frameRate = 30;
	}
	if(loop == null) {
		loop = false;
	}
	if(name == null) {
		name = "";
	}
	if(name == "") {
		name = "behavior" + spritesheet_data_BehaviorData.uniqueID++;
	}
	if(frames == null) {
		frames = [];
	}
	this.name = name;
	this.frames = frames;
	this.loop = loop;
	this.frameRate = frameRate;
	this.originX = originX;
	this.originY = originY;
	this.frameData = [];
	var _g1 = 0;
	var _g = this.frames.length;
	while(_g1 < _g) {
		++_g1;
		this.frameData.push(null);
	}
};
$hxClasses["spritesheet.data.BehaviorData"] = spritesheet_data_BehaviorData;
spritesheet_data_BehaviorData.__name__ = ["spritesheet","data","BehaviorData"];
spritesheet_data_BehaviorData.prototype = {
	frameData: null
	,frameRate: null
	,frames: null
	,loop: null
	,name: null
	,originX: null
	,originY: null
	,clone: function() {
		return new spritesheet_data_BehaviorData("behavior" + spritesheet_data_BehaviorData.uniqueID++,this.frames.slice(),this.loop,this.frameRate,this.originX,this.originY);
	}
	,__class__: spritesheet_data_BehaviorData
};
var spritesheet_data_SpritesheetFrame = function(x,y,width,height,offsetX,offsetY) {
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
};
$hxClasses["spritesheet.data.SpritesheetFrame"] = spritesheet_data_SpritesheetFrame;
spritesheet_data_SpritesheetFrame.__name__ = ["spritesheet","data","SpritesheetFrame"];
spritesheet_data_SpritesheetFrame.prototype = {
	bitmapData: null
	,height: null
	,offsetX: null
	,offsetY: null
	,width: null
	,x: null
	,y: null
	,__class__: spritesheet_data_SpritesheetFrame
};
var spritesheet_importers_BitmapImporter = function() { };
$hxClasses["spritesheet.importers.BitmapImporter"] = spritesheet_importers_BitmapImporter;
spritesheet_importers_BitmapImporter.__name__ = ["spritesheet","importers","BitmapImporter"];
spritesheet_importers_BitmapImporter.create = function(bitmapData,columns,rows,tileWidth,tileHeight,adjustLength,scale) {
	if(scale == null) {
		scale = 1;
	}
	if(adjustLength == null) {
		adjustLength = 0;
	}
	var frames = [];
	var totalLength = rows * columns + adjustLength;
	var _g1 = 0;
	while(_g1 < rows) {
		var row = _g1++;
		var _g3 = 0;
		while(_g3 < columns) {
			var column = _g3++;
			if(frames.length < totalLength) {
				var x = tileWidth * column;
				var y = tileHeight * row;
				var frame = new spritesheet_data_SpritesheetFrame(x,y,tileWidth,tileHeight,0,0);
				if(scale != 1) {
					var sourceBitmapData = new openfl_display_BitmapData(tileWidth,tileHeight,true,0);
					sourceBitmapData.copyPixels(bitmapData,new openfl_geom_Rectangle(x,y,tileWidth,tileHeight),new openfl_geom_Point());
					var bitmap = new openfl_display_Bitmap(sourceBitmapData);
					bitmap.smoothing = true;
					var matrix = new openfl_geom_Matrix();
					matrix.scale(scale,scale);
					var bitmapData1 = new openfl_display_BitmapData(Math.round(tileWidth * scale),Math.round(tileHeight * scale),true,0);
					bitmapData1.draw(bitmap,matrix);
					frame.bitmapData = bitmapData1;
				}
				frames.push(frame);
			}
		}
	}
	while(frames.length < totalLength) frames.push(new spritesheet_data_SpritesheetFrame());
	return new spritesheet_Spritesheet(bitmapData,frames);
};
var spritesheet_importers_SparrowImporter = function() { };
$hxClasses["spritesheet.importers.SparrowImporter"] = spritesheet_importers_SparrowImporter;
spritesheet_importers_SparrowImporter.__name__ = ["spritesheet","importers","SparrowImporter"];
spritesheet_importers_SparrowImporter.parse = function(data,assetDirectory) {
	if(assetDirectory == null) {
		assetDirectory = "";
	}
	var frames = [];
	var behaviors = new haxe_ds_StringMap();
	var frameIndex = new haxe_ds_StringMap();
	var spriteSheetNode = Xml.parse(data).firstElement();
	var behaviorFrames = [];
	var firstFrameName = "";
	var i = 0;
	var tmp = spriteSheetNode.elements();
	while(tmp.hasNext()) {
		var behaviorNodeFast = new haxe_xml_Fast(tmp.next());
		var frame = new spritesheet_data_SpritesheetFrame(Std.parseInt(behaviorNodeFast.att.resolve("x")),Std.parseInt(behaviorNodeFast.att.resolve("y")),Std.parseInt(behaviorNodeFast.att.resolve("width")),Std.parseInt(behaviorNodeFast.att.resolve("height")),Std.parseInt(behaviorNodeFast.att.resolve("frameX")) * -1,Std.parseInt(behaviorNodeFast.att.resolve("frameY")) * -1);
		var key = behaviorNodeFast.att.resolve("name");
		if(__map_reserved[key] != null) {
			frameIndex.setReserved(key,i);
		} else {
			frameIndex.h[key] = i;
		}
		frames.push(frame);
		behaviorFrames.push(i);
		if(i == 0) {
			firstFrameName = behaviorNodeFast.att.resolve("name");
		}
		++i;
	}
	var behavior = new spritesheet_data_BehaviorData(firstFrameName,behaviorFrames);
	if(__map_reserved[firstFrameName] != null) {
		behaviors.setReserved(firstFrameName,behavior);
	} else {
		behaviors.h[firstFrameName] = behavior;
	}
	var spriteSheetNodeFast = new haxe_xml_Fast(spriteSheetNode);
	var spriteSheet = new spritesheet_Spritesheet(null,frames,behaviors);
	spriteSheet.updateImage(openfl_Assets.getBitmapData(assetDirectory + "/" + spriteSheetNodeFast.att.resolve("imagePath"),false));
	return spriteSheet;
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
if(Math.imul != null) {
	haxe__$Int32_Int32_$Impl_$.mul = Math.imul;
}
haxe_Resource.content = [{ name : "__ASSET__:bitmap_com_redpeakgames_cloud9_dialog_CircleBg", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUVBQUFBQkFDQU1BQUFDZHQ0SHNBQUFBQVhOU1IwSUFyczRjNlFBQUFBUm5RVTFCQUFDeGp3djhZUVVBQUFBSmNFaFpjd0FBRHNNQUFBN0RBY2R2cUdRQUFBTUFVRXhVUlFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQmtaR1FFQkFTWW1KZ0FBQUJJU0VnOFBEd0FBQUVSRVJBQUFBQWtKQ1FFQkFVcEtTbFpXVmlZbUpqazVPV05qWXdBQUFGMWRYUW9LQ25GeGNRRUJBU1ltSmpRME5IeDhmRDQrUGdFQkFRb0tDbWhvYUJvYUdpVWxKWU9EZ3hFUkVXUmtaSktTa2xsWldSOGZIM2QzZDQ2T2poVVZGV3hzYkNnb0tFUkVSQkVSRWFlbnB6YzNONkNnb0xhMnRwT1RrN0t5c2lJaUlqczdPNysvdjB0TFMzMTlmWmFXbGlzcksxVlZWWnljbkQwOVBZbUppYkN3c0RVMU5XUmtaTUxDd2toSVNFNU9UbDVlWGtORFEybHBhYzNOelZ0Yld6NCtQcWFtcG5wNmVxMnRyYkt5c3BpWW1jREF3TmpZMmxCUVVXdHNjSE56ZG9DQWdvZUlpZFRVMVNFbk9TVXNRU2N2UmlvdFBpb3lTeXcwVGkwMVR5NHlSQzQxU2k4M1VERTVVak04VlRVNFZEVStWelkyTnpZMlRqWTlVamcvVnpsQ1dqbzdWanM5V3p0RFhUMCtSVDFIWHo0L1hqNUNWejlBVEVCQ1lFQkdXMEJKWWtKQ1lrSkhZMEpMWkVSRFpVUkxaMFJPWjBaRVpVZElXa2hHYUVoSlRrbFFhMHBNWkV0SGFrNUtiRTVRVzA5TmFWTlFjVk5ZYVZSY2MxWlhZRmhZZTFsYVlGcFhkVnRnZkZ4Z2RsMWdibDVhZkdGZWdHRmhoV05saFdSamRHUmthV1ZoaEdWa2lHVmxabWRsaVdoa2htbGxpV2x0aEdwbGlXcHJlV3RtaTJ0dGoyMXBqbTV5aFc5MGluQnNrWE41am5SdmxYUjJnM1Z4bUhaMWxYaCtrbmwwbkhsNmZYbDhpSHQ0bm4yRGxuNTVvb0Y4cG9HQmlZR0JvSVIvcVlhS25vZUNySWVJa1lpTnBJbUVyb3FGc0l1TGpZeUdzcENRa3BHVHBKS1hxcFNWbFphV3NKaVlucGljcTUyZ3RaNmZvS0NncEtPa3A2U2twS2VxdTZtcHFxeXNyYTZ5d0xTenQ3VzR4cnE2dmJxOXlzREF5OERFME1QRHc4VEoxTWJHeDhqTTFzbkp5OHpNenN6TzJjN1Eycy9QMGR6YzM5L2Y0ZW5xN2ZyNit0WENmSE1BQUFCNGRGSk9Vd0FCQWdNRkJ3a05FUlVYR3g4a0tTNHpOenMrUVVaS1VGUlpYbU5uYlhONGZZT0hpb3lQbEphYm5LS2xwNnVzcmJLeXNyTzV2THk5dmI3RHhNZkp5Y3ZNek03T3p0RFQwOVhXMXRuWjJ0cmQzZC9nNE9IaTR1VGs1dWZvNk92cjYrenM4UEh5OHZQejgvVDE5L3I3L1AzOS9mNysvdjcrL2t3N2dLd0FBQWUzU1VSQlZGakQ3VmR0akZ4VkdYN2U5NXo3TlRNN08vdlJkb2R0UzZYdFVnd290TFFFNUtOR1ROQVlUU1FrL3NCZmdxUUJUUXdxS2hHeGtJQWhoQjlZRTJKTURHbzBRWW1hU0JUOEJhWktrYlJZS0MydGRVdDN0OTIyczdzek8zUHYzSHZQT2E4L1pyczcwOTFpL1d1OHYrYk95WG51Ky9rODd3djgvNkdMbnhBeEVRQVJFU2YvSlFDelVxeElNVUhFT3VlTXN5S1hDa0NzUE8xNU92UkNyV0ZNTzgyTnlZeXhSaTRGZ0ZqN2ZoQU5qUXp2K2ZaRDZZL3U5UXFSdm45bVlqNU8wOHdzaDFnR3dKNGZob09iZnZXZ3Y3MnBpeDZRcCtkS3BZMGJveStjbUcwbnFiSHlnUUNrdmFBNHRHM1BPMitoT2hpU0FxeTRkdHBvSmFXdDYrNzd4MHlTcEhrdmd1cTk3NFdsZ1cwdjcvMW52T0h5L3BBMUVTbUM0ckJRd3ZnN3JVM0JQQUc5d2V3QllEL3FxMzdtMFZmV1hMWW04aFNUWW1ZR2dZWFlEM2xvOUN2amMwSzlPVlU5N2tmbExUZTdtNjZ2cERyUURFVkVSQVFTRVFKN0VRN1BibXJIY04wSTNHMS9WTjcydTd0NFJCb0FBRTNNeklBQ0tZOFZzNG9HYnJqbGoyTjl4VUN0RkVUeW92SjFWK2dmc0p3Y1Z6clVIb0VCT0JobkpiZk9XZWVjeFBLcHp4MmRiNlp1dVF0ZTJMZmwxK2t1YlNiSHdjd0tSQVE0aUlpQTRFUUlUTnFPUC9LSHByUExBVlJRcXU0NHQ2cHk3bkJOaUVGTWlweXh4anF4Z0lnVGdZQklwZFAxZXR1NDh3aDZzUURDdnR0dVAyY1BaZXg4QjRaWUx2ZHBPQWJTK1pwZGlsbWg4ZVZrM2xobmUyT2dvOHFOMWJWalByUmpEZmE0dU82SnIzMjNuYlRBaGNIZzZabnhIQXRtTzl2NCtMMEg2czFNdWdFb0tLLzk1T2hJNkRIZzJHZTErVWx2NHYxNm1qdVFEa3JyTHd2dit4Y0RqaDNEcGU2T1cwN1dZOXZ0Z3ZMREhiWVFBcDJ2cUczeDdMRmFLOHVOQXltdlhqdSthVlgvbXdwdzdBQ3ZOVFZXYTJlMjI0S2d2Rzd2TXh0RHIvTld1T25yeDhjYlNUdTNUa0RFWGhBVkxydG05MStEenJFenlXZHZQbG1QM1ZJV09DeDlkUFBNb01ja3hqcTU5WnZIajgzTnQ5TGNPaEhuckRYR0plMURkeC9UUWdCSWJHWGY2Y3k0SlJlVWpuNjVaN1FNYmFRSnVhRjEvTmhjczZ2dHJMUFduYVRDcGhPZUE4RHdENDlFTFdWa3NaU1Z2Nm9tUStXaC9uS2hqNGFISGp4ZWI3YXpyb0lYazdhYUUvZGNtY2V0Vml1Mm9Ka25LcjZtSlJlQzRwV0hycnU4WEloQ1NHdjdvMyt2emJmelhxSVFKOXg0OTY0ak5zL3ptRFRLKzA1MWZOQUFvSlFlRzkwODRER01VbG54K0d5UzVoY3lsYzFpLzBRMURRQmdQaTVORG9VZEM3akR3ZnJ4NGtEays3NWZpRFpNbjA3YStYTDZORmw3UEJuSlJVVEVOazk1V3ZFaUFPbGlZeURRbmxaYXU3N0haOVBjTGFkZk1XbnIvbzF1NFhmeVdLaVlGZ0hZMzcxR0t3Q0s0N0NlWkhZbENiQW1QMVZzR21NQW9Ha0tSSXRwSkNvRUZRWUU0SmFkdGRhdEpDSE9tbGpsam1FQWpTU2dKVVlpZ3B6djYvVGhwcE1WQWVCY3ZOZkFPUURHL3FtYjBvUzhMelljQUd1ZGZBOXlNU0VVZXhUV3dnSE85bkFpQ2YrOG5hWFdBbzVlajRoV1ZreGlId0FzbkxOcG9adFFST0tyYWprY0F5WjR3KytFZHlYRkhRcXRWYkNBbFg3VERlQmFCNitJQ3dxd2VUNnd5dGZLcm5CZktiMUdPMWdGQUt1eFVDcWRHTmcyN05SczBrN2l1dk9HQTErdFpJTFM0ZTVhQUZnQWR2VGxyQ01QdXBPZ3JMMytaRkwyRUNlTk9SbHArQ1pmN29BWHJuMjJwQUJZd0s1dXh0WjF1V0RPL21WMU8vU1JTVE8vSVQrVjVzdEtnYlJmK1BEVjU4N1hWREZMTzFLL1lJR1oyQkNmOFNMWXpObXBMeDF0WlRhN0lKYzZLRzR1SEJ2cGhNQldNWjBaMnhXRGZNNWQyMnpXYW5OeE8yKysrK09SVXVSenIyd0hwWkdmVml0cXdZQ3RSMmZ5TGhkZ3MyVGk2amVnUUNEd2tYMWJFMUNTTDZXQ2RWQmFkZU5yYVFYUUFsajAvNktSZFZ6b1FJcnk4UG41V1JHQ0FCUzRhaXZqUmMxZ0hZUjlxMjY3WS8rd1ltWm1aNjkvZm1LeWxYV1JLb2hsNnU0M0Z4UVE1TGtmN20wcHhhd1VhODhQaS8xWC9WYjJqeWdRa2E4azJmblNPL054MXFPTnJOdDNtck1Fa0JCQS91eXU2ZHhwMy9QOU1DcjJyOTI1KzhYM1I0aEE4TUtvY1F1OU9ObE1iVGVBRU12UmUvWTdBa2lFd0RQN2R6eHdacmpzRjhzRDZ6NXl6Wk40UlEwUmc2VDhvY3Z6ZE52amJ6ZmlYbW1EQ3ZzSGQ5Ny9NNmJPWHdxUXRGcDkvVDdHYzI3N1pLMnZxRUVNWEhFdHo3MTA1OU4vbTVocjViM3FiUFBZZXp1Ni9jOU1KQ0JZQU43Wk05NVBvQW84cmdkOUFIQzgvZm1kemRjK0VSODVFNmZtd2dtRmdsSmx5M092SGx6b3hBN242MElKRmdrY2ZHam9PMFpoWHR3ODhvMjNaaHVKWFRhaENDZzVzQ3VlSmhBSXBMMVNwVkwwQWJIV0FRcHU2TllxTlg4L052cWRRelBOUlFONkFNVFY5Ky9xTzZuOXFEaFlPVDlLV1pzNUswUTh1cTJjVC8vbXB0WGZPbmltVzNhNis5WUwrL3JITm56MUJiRG5xd1hvem4wVG9McCtFRWRtUC8zazJTTm5HMGxYbzZnZStYS3VFWjk2SUo2RU1SYld3dGpVNXBrem9pa3FUQjNZOHJIZDQrL1Y1cnZ2OTg3S3BJTkNjWGpzS1huMVBWS2FvR0NST3dFWUNIRFZqdnlSSTJkYXZiSjc0YkN0L2JCWVdyM2xNWE40WDd1enJsZ0JRZmw5TjY1ejM1K1lxaVh4QmRNMkxlT2RJSXFLdzJ0M2w1UEo4Uk9ka1hYTitvM0QzbE16MDFQMU9Hbm5GNmpXTXZJanJmMG9LSlNIcTVYOFllVDVNdzk1RWo4N1Z6ODlHNmZ0TkRmdVA2ODhyTFFYK0o0ZkZJcVJCcENZTEluVFBFdnozTnBMVzdwSUthMjFWZ3lRZERnek4yWmx5YnpZMnNmTXZLUXZ6bDFzYWZ1QXZYSHBUUDdIZCtkL0EwV2w0c0dkWnRJREFBQUFBRWxGVGtTdVFtQ0M"},{ name : "__ASSET__:bitmap_com_redpeakgames_cloud9_game_Progressbar", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQVFNQUFBQWlDQVlBQUFCYlZyenNBQUFBQVhOU1IwSUFyczRjNlFBQUFBUm5RVTFCQUFDeGp3djhZUVVBQUFBSmNFaFpjd0FBRHNNQUFBN0RBY2R2cUdRQUFCQ09TVVJCVkhqYTdWMUxyRjNYV2Y2K3RjNDUxNzYrdmpkeGs4YVBRaG9VbGFwR0dYUUFHVEZBUW1FQ2dRb3hRUWkxYVFkVkpTUkV4WXdaUS9wUTFaU0hWSVFZSVZHYTBCbFJacFMyd29nQmxSb3BPRGd2eDVidEpIYnMrejU3L1F6VzYxLy9YdWZheUZlTTlwS3V6dGw3cjczMjN1dXM3L3UvLzdGdGlnaW1OcldwVGMxTlV6QzFxVTF0SW9PcFRXMXFFeGxNYldwVG04aGdhbE9iMmtRR1U1dmExQ1l5bU5yVXBqYVJ3ZFNtTnJXSkRLWTJ0YWs5WUpzOVNLZGJ0MjVCUkxCWUxIRHAwaVg4MVl2ZlBybCs1LzB2UE9ueFcyY1hzOCtzZS85eDcvMENKRUFYLzVDL00zNEg0MGZobi94Sjlkbjc3Z0JCSEVkb3puR3J0OFdjM3oybmQwM1c4L01ZcEJxamQ1N3JQNE1jTVg1cFBPTFo3ZmVqOW1IRnVPMzJ1TVNNRUJCcGtvSDBUWStYdDRWNnU0NHR6VG1JNDdIMkUwcWNDNDc3QmowT3pXZlRUMDJydWk5UjkxQ3ZxWTdwK3dBZzVUa0ZRcTQ0VDgwRnpYMm9xUkoxMzFKUGFlL0w5Ry9teVR6bmVCN1Zma2wvZW4vYURpRmd1VndlN083ZnVYRnY5NzJmN2V5OTlZUE5SK1Z2di9TbEYzYWZmZlpaaEJDd1dDeXd0YlYxSk03NUlCV0lWNjlleGRyYUdsNTk5Vlc4L05jdlB2K3I4K0hGQzZkT1hqaTl0b2ExK1J4elA0UHp2aEpCSVFIMVdRaUJsU2dLeUYwZk5LSklaTlNuZDQ1VHMyeU9TMmViNWpvOVFxQTl2dUs2b3U1TEh2QSt1OWZFaW5ONjRGNUZxTFpmS3dSRjcydkFaY0hPRm13am9PZkhaa01Rb1N4MGpoYTNnR093TTUxVHlLTmVTeURtdmhJZ080QVg5VHg2ZnpEUEVGYUF0cmt2TmVhSXdGWUFPNU9DL3ZtbFIxcUdRQnJRczRJZkpFVEVrQURqWEtYOUVHQUlBY3N3WUZnZVltZC9COXZiSCtEV2g1ZXZmclQ3SDEvNS9BdS8rOC9QUGZjY1FnaTRjT0hDd3lzREVjRnJyNzJHVi83eVczLzh1WFg1Mm9YVHAvakUram8yTjlheG1LL0IreG5nZkFRT1BlQWNBRjhYckZZS2VySFNnQWdhQ0s0REZOY1NTdEJnZFoweE91T0k2eWdQMVUrY0laL09XR0szTmFrQkVHL0dzT01Zb2hoZGt3OUlJUGRSSnAyK1VzaFZXY3MwaDhMV3Vsc1FpbElINEpoQVJzQUVFTmlPb3dFWExiTkE0TkpuVlF1VktPcDlCUXNtRFZicVR6WnFJcVI3RFpTRzdDU3JBNHFhaXhYakd0SVNkc2hFUDc4Q2ViQ0V5REZCNlBPRHRHUlZ5Q0hQZ2NRK1VSWEU3U0VFRE1NaGR2ZDJjUHZ1VFN6bVd4ZjhyYzJYdnZzMzMvK1RNMmZPZk9PWlo1NjVMODRmU0JuY3VIRURmL3FIdi8vOGJ4eCs4TkluTnpmNDFPWUdOaDk5RkxQRkd1Z2M2SDFja0M1L3VyaXdNeWxRdXdqV1RYQXJnRzhYdWVxZlFRZXZyTGZyeUhNOXJ1K1FqWEZCeEJ1bFlzWWRFWlZib1NxOGVRNURVSlpvQ2pnN1pHYWZqZXdvS3EyZWxCcm91VllrUkRTUXFjQ2hRT2ppUFludDE0Q05TaHF6a2VQVmdyS1Z6SllRa3FWcnhtQVA0RXBaS0dEbXlTdlhZZ0s0bGUxVTE4dmdaendhaXNXVnFud2tUbWVQZkVJUDJFWU5oSTRLQ0RScWdWWWRTU0ZsclFaRWphSGRoWkJKUWFMQkRpSVlob0Q5ZzIxODhPRTF2UFBlbTdoMjg2Y3krRXVmKzhZMy8vemxpeGN2UHJ3eStORVAvM1g5c3g5ZC84NjV6Wk04UDNmWWNvTDVxUVdjbXdHT0lMU0w0QUduQUVGbDlaenJTR2RMQkFaZ1djNkxKUWt0NVowaGdHeWh6YmxkRUN2ckxyNHpkZy8wYnZYOU51ckJyYkRzZmd6K0ppNWlDSWhHeVRUV09mZUJVVm1LWkJvQ29WcUVWQlkrS1RWb0FsQkRadVVnVERLYjhXZUdKWXdxNjUwQ1lBRW0yU3h3S0d1ZXo3V1d1N0hJeGhWb3graUJOWUk4ejBmdEo0V0FzbHZqakhRWHRvRFY0K2RZZ0hVdnNndml0RXVpK3padVZIdWU3OFFQeXIxS0lqRUJnakNSUVhZaG9qc3hESUxaek1QTk4zREdQWUgzUDl6REk2ZDMrT2JWZDE3ODhZOS84c3JGaXhkM0hwb01mdks5Zi9qOHN6TTVmMjdoOEpnWHpKY0hjTE1aNkYxVkFsa0JhSGVBTHM1d2NCVVhoYkVWa0dIOGJiSWpvM3V5SG4zM1FJNEFaaE1IOEFhZ1BRbXZKRGRkTlJmbE81TVZWYVFrNmJsdHJFTFV2VExkUnpBdWhyUHhDaGlWY0VTQWtleG9QellLb1V5dlZIQkFtUEZlcmtjWFYyM3gvVjI5SDBMSFZXbENFNnlQbFc4TFVnS0ZUQXVBeXZjbU0vUWo0WVFNQnhKY1llRjFYRmZBZUg2Nkg2Ym5DSVVMMlZqczZKMnlMRVVhSVBjc3ZwYnh6bHByVjRIclRJekFLZEVYMHZtK0UzZHdlV2xMalR0VVltSWFtK1c1Z2pDT1Uvb1RmaGFmeGcvQTNHOWkvY1E1YkMvdVlQUFVMNXgvNVY5KzlJVXZmdkdGYno4MEdjemZ2dnpiR3pQQkpnTG15ME80RU1DZGJlQ1JMUlVvVE02TWx6Wm1oYnpQZFN3WVZ5Z0UrNnVqZFFHeUc5SlliMVlnMHNqMlZlUlNyS1Z2KzRsSGl4d2oyMmtrZXhNWFlVc2l0TEVGdEVEM3ZuVW5hSjZKUm5VUTl3OHVkdDBERlJUVTg4azJzaFU1S2ExR2p3U3pCR0xHUmNkczRhVUdFS2xqOEl3TFY2VDY0czVJNHNoN2JPUi9PWmMxV2g3UzlEaUJVU1lveEpHSkpOK0RhRXV2bG8xSU96V0ZIS2lBbkVIcUZDaEhzWTdWd2NHQTl1Zlg1enAxRGp2dWgzYWhnbzQzc0kwWnVLUVdzcXNRNXlxNlNDRUF6aFA3ZXg0TzYzRHVOTllXSDhNN2I5NTdIc0REazhIRy92WXZ1dGtjRU1GeU9VQW80SlczNGM1K0hIeGtDMXhiQTJZTHdQdjhrOVpwWW40RXFrZFIreHJ3R0tMZ0tCUmRTU2VQUlFNd212Q3VkaUVrSHhkbDZkbHhRNlFDMkZFNWU3NlRYVmlSa1dnc3VMSkJ3WFdPdzJRVDFEMVJoNjFEcXl4d2xGSkFWMG1VNmN2ekd5bzZxVTB3QVVtb1l4UDlsN282bWM0UlVZb0RKU2FSeDJNaWp2SklPZE1vRW9ON05JbkVQUDBndkxLVVdZVTVRWUUvU3lZanF3OEJYVTBqU2tLNmx2eVM0eUV1M3Nzb0lHbmRCRkZ1UWI1VEdTc0h5NjNDZnRCUXVDTHdLT2JuRnpTS1RaRG1UaXNLVm1JUUNRZ0IyTjBQZU8rOUpZWkJBSGlRTSt6dnp6OTFMSFVHczJINDJDQXpMQ1ZnUHhEZUVSd0c0TjFyNEx2WHl5SmtBaGZob2pSVDRHQ1M5OVIrY2JMdXpESlplcExmVlVuZStPZmVCQUwxZDlmeHpWMTdYcm1XTXdFOXZjK05BNDc2L0tJd2JCK094OVY5NmNaQnhMSmZaV0I2c1k0alU1T3VuNjVVZnpMS0xMRG1zWk82RVdYNTBmajRUQmFJVFJxd0JPQlViQ0Uwd1Q0V0dTNzZ1Qms3OHBJa1B6N1hBdVNNaE00K1JQODVqeC9LL3RvM3E0ZkFHaGlNd1VXZEVVakhXRE1ZbWdoQ04xTWg2bDZyLzEvT2tUN3dnNHBWQ0duNjFQc0xKbVlSUk9wNVdqbElDbjJtZXdwSkdlUllTSkNBcFN3UjVCQVNsZ2lEZSt4WXlPRDJjdmhnZHdqck84dUF1Zk53eTFEOXptYXhTU0tCQUtaRnpiSndwYTB2Z0lBbDVKczBHVU9iWmhPbnJLRUdNbE5mSGNDeklDZUFZUXg4aEphTW12aUI3V3NEaGE2Nk8rTEdBVWtMYUh2ZldFVWNoaFNhTE1LSzlPYUlFTzVQQkRwekVJSE10b0NGZXI5TkhiS3BIU2lBUUN2MWd5S0tvSU45eFRycjd3bUVQZkFvZ3FuWmd4UU1WT2NGUlJLbGZ3YUlHanNIUFVNaERaTzN6K2Nvb0lZalVvMlZiRHJCUzBNU3VqYWhPWmJtWVJTckVGbVpnZ3daN0NWR0lrYUo1T0RpRXNOd2dPWGhMZzZIUFJ3YzNuMy9XTWpnNXV6azZ4OGRMajl4NTNDSnVYUHdJQnhkMFhNaU1sWUJUUG9Pa29KQTBtcEVyZnRsNkZnL2FZR3JvNDlOT2pFRGMyZ0JKdDVrRzF3bm9LaUpaS2xpQnl2VUFucFppODQrNmFVMWJhSFRtQlNpNUhXUlNMa0s0SWdLVEpPQnFleXNzcHhIRkNSbFVMdFJtbEduOEhRMlFLUUdKUE5QSHEybmExS0pNQldHMWZLaFdNVTJCY2NhMVplMk1qQTBpaVRGRWRKYUdJVHFHa2tGaE9pUGFLc2VDbEcxYWlhSUFJNHhSVWZ0NzJmcnp3TEFYS3ZReXdnRUhTU1UxcjBJdll4RXA2Q3BGNXZJeENlR0NHbzlnclNwWGRZc1RKQ0F2WU83MkQrNGc3Mzkyd0R2dkg0c1pMRHorUG1YYjkxNDQ5YzI5endjSFRabU03Z1NCeGhVbmo0dmxKQVdySzdURkxPdG5TSm5ZckZzL1d3RTFVZTdHV0VzcHd2SVFpYzE2Y2Q5NlJJWlVZVnR0QXF3YW9OOVltRlVRZEtrRzEzeXFWVWxwclJaRUtyZ0puWHFrSmxVR2NlZ0lvS3l6d0NlVHNWYXVhSk0yWTJxRTdzRlJpb09JNlBTWkJPRVZCbE1YWThRMS9LNEdwTEpzbE5ISzVLZENJMDdFR2NsbEtwSGdpNkZDb1ZaNTJWTkdzMFFnY0c2TjRWSWtqS1E2aGFFSVI0YjBrOC9OQzVOQmVpQUdyZ01Cc1RCVmlIaXFEcUpmclZpbnhoU0twRW9BWm1peGlTVG5pSUlsNHEzUkhBNDdPTGV6azNzN043RTNYdFhzZm1JL09CWXlBQ1BuLzI3Sys5ZS9yTVQvdUJ4RWVEOFNXRGhIRnhhL0ZIV3NFMmhNWXpMYTBXRDFHUUJvRkoyVmtZL1NKM0FLckEyWXkzSGhVVkIrK3pEaW11TkM2UWE2eXkrQVR6VnMxQmxHdlE1WkJzdm9TSUFKblhDSEtsWGY1RUFYTnF1QUN5a1lFRGFwaHVQZmxkQlZ5ZVNsU1NvQWx6VW4rbTMwVkZ5NktCWGhycHdKSG5KbUI1ek5qNmNzZ1VsZjY3dWpVYXBVS3I2SUdxOGdybU1seFdkT1RjdklJSkVVQVZHVlRzazl5WUlNS1NpcFpMTFowM2xCVk5HSEhyeXZ3TitOSVFodGFaaVJjbXpqS29ZTStGSzQxTGtIeWFVRkd3MHhBTUNkdmR1NGQ3Mk5kemR2b3E3MjI5YysvUlRXOTg5SGpKdy91N3VMLzN5bDkvNjJiLy9vMThEblFqT3pEMU9sTVVlQVNFbHVlTnF4RnFEWEk0cXZqbWlxQWRPVlc4NFV5UGdxcnp2VlFIcWFzV0dYSHhudk5RM2FGOC9nOWEzZFE1VVZyOEF2VXA0bHFBcXEwcWlCcTBDZUlxNDUyT09OVGVlSGE4SWZFbjlZbnpGRlhKUUZyajVNQmtaY0hYSnVUazIzcll2TitFK0x5MVIxZGhqVk15azMwWFFOUUgxdkdyWmc2UllSUGF4dFh1Z2dTclJWUmhTakNJZ3V3RHBNNVU5RDNBeFdBYzJJQStKaUtLN0FSV2tKSWFVZlFqS21nK3ViOVZoNGczTnV4ZW1nTW9TUUZDRnBLUE1BMW9Wa2w4Q3k0bzB1Z2NIMkQzNENFRnVZQml1NC9iZDErV3BweGQvdExGeGF2dFl5R0J0YlEzejA2Zi82Y09ubi9ucWYxLytyNzhJSnhiY0EzSGEreGhEY0I0SXJNSEMvQURhTHc0SmtFNkRUYVhzR3NMUTRGMFJTVzhJd0p0citSWGx3Wm9nOGpVVklUVVZpRW9GTkM5YytVUk1yZ1JEbVFxdWNvYU1LV0ZObGJxaWtub1IxRklzZStQRkYwc3ZUVmxETmZ4UysxRTY5bDR3UmpIeGYyMXlCSGxJVjJYVThnUW9sWkJ6NEkzcmdkYnFGOHVuK29teTVKSVdWQTVFUXBJL3p6YnpFZWpxdXdtNTdEcG5uOG5paUZGcWtEVG9iRWVKUGVpWHJscmlHYks2VUsvVjVPOWh4Y3RRVFh5QnBrTFNGQ1hsakFSb0FvKzJjbEVwdmtFQ1FNRXlIT0p3dVF2Z0RwYkROVnkvK1ZONS9PejJWMy8reWJQZkN5SGdXTWhnc1ZpQUpFNSs4dW12YjI5c1h2bTNTei84enBPbkZtZWYyRHFGMHlkUFlPNzEwbkNxV3NJcllDTk81ZExIejZEQk9oaWcyeXhDTDBBWFZOOWxKM2dJOHo2Q3F5QWVSZm56UGZ0YU1UbnFCNk5zZlBsUnFONVVwQzVHY3FGVWkwVHdxMUtTWmp1U1ExbHliSDcrUkFTbWtwL212VG4yYmZqeHR3NUJ5RGcyMGJxTjlXV290dC80M1lpRzF0Z0dQVVduUjVsUTY5UTdGU29ZS3JwcUZDcFRZcS9MTmxXYUswQXo4QUVpT0RiRlJLRmtEVGl5K0FYVXhwcVhYOVNaR0lOOUt6S3BHQjBXZ3dNR1ZkSnNZK2xBZkM5aDcyQWJ0Ky9keHJVYmIrUDYrMjljLzlSbnRyN3lpWjk3OHZzaEJEam5qb2NNWnJNWlpyTVpTT0xVdVFzdmJmem03NzF5L2NvYmYzRDVyZi81bllNcjczeFdEZzhlODNwQ3BXTkJkSTI4U1Z1dGZoOGZLeFpRNzdoYjZSYzMxWXVqQ3NqZWR6VGhyVkUwWHhWTFpXbFBHTisrQkxSY1VnQ3VPZTdLZDVSdDdTTGtZN2xTTHdjTHFZd0NWeHB2NHYramlha1RFbWxWZ1gzdnZqbHU5a3RuRExzL3FIM05kOXRQVkRaQjJtcSswWGdhcURMMjRRUFFlUTE3eGI4N3dNNCt0Qzh3OWVpNjZTT3QxUjlkaCsyL1BaRzNoN0NFODh0YnA3ZjhmNTQ5dC83U3IvL0twLzkrTnZNN0lnTG4zQU9SQWFmL1VXbHFVNXVhelROTmJXcFRtOGhnYWxPYjJrUUdVNXZhMUtZMmtjSFVwamExaVF5bU5yV3BUV1F3dGFsTmJTS0RxVTF0YWl2YS93SWlrcDhDa1h1R1RBQUFBQUJKUlU1RXJrSmdnZz09"},{ name : "__ASSET__:bitmap_com_redpeakgames_cloud9_dialog_CircleCore", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUVBQUFBQkFDQU1BQUFDZHQ0SHNBQUFBQVhOU1IwSUFyczRjNlFBQUFBUm5RVTFCQUFDeGp3djhZUVVBQUFBSmNFaFpjd0FBRHNNQUFBN0RBY2R2cUdRQUFBTDlVRXhVUlFBQUFBbW8vNWJyOEFtby80TjRnWkx2K1FLbC8zN2wrcHJ5K01TRVB3V20vNW55K1FDai81UHYrUUNqLzVyeStBdXEvOGwvUEFDai81cnkrQVdtLzNQZytwbnkrQTJxLzgyQ09ZZnArVGJCL1FLbC81ZngrY3VKUUFhbi93Q2ovOHVGUHdDai81VHcrYytHUFFDai93Q2ovd0NqLzRmcCtoNjAvczZLUHdDai80R1FuNXJ5K0FDai85T0pQUUNqLzVyeStDKzkvUUNrLzVyeStBQ2ovOWlQUXdDai81angrQUNqL3dDai81cnkrQUNqLzJUWStvenMrUUdrL3krdzh3Q2ovOTZaVUFDai81cnkrQUNqL3puQy9keVdTcHJ5K0FDai81cnkrQUNqL3dDai8xWE4rWnJ5K042YVV3Q2ovd0NqLzVyeStBQ2oveDIwL25yaitwT25yNWJ3K09HaVlBU20vd0NqLzZEczdsTFAreVM0L3ByeStIdmsrUUdrL3dDai8zZmgrdUNqWjVyeStBQ2ovN25TdlpyeStKangrQUNrLzFETyt4NjAvcHJ5K09HcWJ3R2svd09sLytXbmFacnkrTUtvalFTbS94NjAvcHJ5K0dQWSs1cnkrQTJyL3VLb2JacnkrQTJxL3ByeStBNnMvam5DL0hmaSt0UERuWnJ5K09Xc2VkTERuelhCL1I2MC9wcnkrT2EyZWgyMC9qQysvWnJ5K0I2MS9uamkraUsyL2l5Ny9aangrTm1oY3l5Ny9jdXlrRXJML05XaGRUZkMvWkh1K0pyeStDNjkvVEMrL1hiaCtvL3UrWnJ5K05pdGlqckQvRWZJL0R2RC9FdksvSnJ5K0lUbytacnkrRkhQKzkrL2dsSFArMlhaK2xIUCs0cnErYktXZ0pyeStNeUpjTm0zajVyeStHVFkrMmJaK28vdStabnkrTnVhZHVDMGxzdHpXNXJ5K0hmaStvWG8rZUs4aDNyaytyMmRpcG55K0lEbStacnkrSVhvK2VmRXRvbnErZWJDaThwOWNacnkrSzk4ZWRxWmdKRHUrZXZRbDVIdStKcnkrSlh3K0pyeStKYngrSmp5K0pyeStMcHljY2QwY05paGt1UzNwcHJ5K01SN2Y4U0VrY1dRazhoR090QmxWZEJyYWRGTVA5U0hodFNqb05XaGx0Wm5XTmRqV05oaVU5cCtmZDExWk45dlh1QmNVK0IzYStDQ2NlTnNYZU82c3VSeWJ1V2RrK1dzbitlUWplakhyK2xrV3VuR3BPcUNmK3h5YnZCM2NmR1FpUEhZcFBKNWRQT3ZsZk83cFBTSGdQU1hqUFhLdy9YaXpQam4zL3p5Nll3cEdXY0FBQURVZEZKT1V3QUJBUUlDQWdNREJBUUZCUVlIQ0FnSkNRb0xEQXdORGc0UEVCSVNFeFFWRlJjWUdCa2RIeDhnSUNJbEpTWW5LQ2txTEM4eE16VTJPVG83UEQ0L1FFRkNSa2RJU1VwUVVWUldWMWxhVzF4ZVkyTmtaV3RyYkd4dGNYRjBkWFYyZDNoNWVYeDlmWUNCZzRTSGg0ZUpqWTJPa1pPVGxaZVltWm1hbmFDaXBLYW1wNmVvcTZ5c3JhNnlzN1MwdGJXNnU3eTh2YjIvdjcvQndjSEV4c2JIeWN6UDBOTFQxZGZZMk5uYTI5N2UzK0RqNCtibjUranA2dTN0N2UvdjhQSHo5UFgyOXZmNCtQajUrZnI3L1B6OS92NysvdjcrNXQ3SXhnQUFCREZKUkVGVVdNTmpZQmdGd3gwd01yT3hjYkV4TTVLbG1abFBXczNJd3NISnljSENTRTJhajVsRXEva1VUVHppaTFxbXpGdXdZTjZVbHFKNER4TkZQdUlkd2lpZzVwTFN2bVQ3eVN0UWNITDdrdllVRnpVQklvM2dVbkhKbmJ2cjNCVVVjRzdYM0Z3WEZTNWlyQmN4U1ppeDl3b1dzSGRHZ29rSVFVY3d5N2xVYlRoM0JTczR0NkhLUlk1QWFESXJldmZzUjJnNWUvemd3ZU5uRWZ6OVBkNkt6UGoxKzA4L0NmZjFpZ2sxUmJtNVJUVVRWc0JENU9SMGYzd21NTXA1VHo4TnRYdDlWNGEzaGI2cWlxS3F2b1ZYUnRmNjArZkI0UFIwYnpuYzRTRGkwZ08xZjN0WHBLV0tBQnRZS1NPYmdJcEZaTmYyTTJCd3ZNZEpCR2Y4bVZSQi9IOXVXWjZEUEJleVJWenlkcmxMam9EQmpuSVRITEhKcUpLd0FlTDgrWkg2Nk9tT2tVODNZc3FlZlNDd1BGSUZ1eWNFWEdhQXcrcmMvQWcxTEhad3FRWk0yYlFOQkRvYytMQTZRQzBYa242V1JhcXhZVlBBcGhJMGFUVUlMRXBReGVZRVBwZTVrUERMMDhmaFJ6YXR5SmtMZ1dCeHJUVVBGbW5GbEYzZ0FPakM3a0FRNERISjZwc0dCTjMrMGxqU2tFazdPQVRXUjhyampHZEdjWmZTVmhDSTBjSk1UWHdlUzREYXo1L3Bzc0NUNWRpMGdrdEtTc3JLTXJIRXBIVDg5aXZuejUvWmxhR0NMOE9KMk1VbHA2V2xKMW9MWVVpcEZaMEU2aisxeEVNQWIxbWg1Uk1GQkdGMjRoamVNMm9CYWo5eXBOZU1EWjhCTE5xaDlSTW5OcVhhWXhqQWJERUZxSC9mbm5KZHZFV0djdEthd3hjdkhGMVZxTTJDSGp4Mjg0NEE5Vy9NVU1Hblh6Qjg2OE1IdDY1ZXY3YzdSd0hkY3c3ejl1M1p0bWxsdkJ3ZS9VeW1jNTQ4ZWZIcTQrdkxIOVk2Y3FLNXdHRWVVUC9xUlpINERCQk1PdkRreGZ2UFgzNy8rSE1pUndMTkFPdEptOWF0WGp3clFoNlBBUXFOYng3ZmZ2cnQxOThmLzc2MkthTUZvbG56NnNVTFovZEY0RXNHeW8xdmJ0NTQrdm5ucisrWUJqRHFGeStjUGEyekFWc2loUU9KL012M2J6ejk5dlBMajc4bjh0Rzh3S0FTUDdXdnRib2syZ2hQU3VaMDIvTDgyZE5QSDkrK2ZMY1VQUkFaeEwzckdpb0wwa1BNOEtSRUZ1WDhZeStldlhwMDdlNmhIRm1NckdxUldaS2RIQlpvTDQwbkVEajE4amMvZjNUbjBzNEtQU2FNcEtnV25CNGI2T3R1bzRxdkFtUlJkcXZvbjF6aHA4bUpLU2R1SFJMbzZXeHJyaUdFeHdtTXJKeXltcG9LZ2t6WThycWFxN3V6bGJHQnVqZ1hIdjFNSU1DSW8xbzJzalUzMWxGWGtzTFpIR0ZrWk1KakFBT2JuQ0ZJdjR5WUFCY2pPZnFCRWFHb0R0SXZ6TStGdlYwRjFjK0VwMmtqcnlRaktjelB5ODJPeFFTWS9VeDR3cGhaUUJwc0FBYzdLeU1qRHV1WjhCWTRiRUpTTW1KQUZ3Qk5RRFVDcmgzVFpBd1RKR0VtQU5YQ0FGdzdJZjBnRThRbHhZU2hKakNoQVZaV0lscXRiSHppVW1MZ2dHUkhOUUZvSUN0UnJWNW1IaEVrYnlCcFp5ZTIxY3pJeGljaUlvcmlEWWgyNGx2ZFFDTUVCQVI0dWNIZWdBQm1adElhN1l6TVhFREF4Z2EwRmdJWVNXL3pNekpDTklMQWFOZHBGQkFBQUhnbnZLN0FESUdmQUFBQUFFbEZUa1N1UW1DQw"}];
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
var this1 = new Uint32Array(256);
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = Math.ceil(i * 257.00392156862745);
}
var this2 = new Uint8Array(510);
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
lime_system_CFFI.available = false;
lime_system_CFFI.enabled = false;
lime_utils_Log.level = 4;
if(typeof console == "undefined") {
	console = {}
}
if(console.log == null) {
	console.log = function() {
	};
}
openfl_display_DisplayObject.__broadcastEvents = new haxe_ds_StringMap();
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__worldRenderDirty = 0;
openfl_display_DisplayObject.__worldTransformDirty = 0;
openfl_text_Font.__registeredFonts = [];
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
com_redpeakgames_cloud9_Constants.TopMenuHeight = 114;
com_redpeakgames_cloud9_Constants.MinWidth = 760;
com_redpeakgames_cloud9_Constants.MaxWidth = 1920;
com_redpeakgames_cloud9_Constants.NotResponse = -1;
com_redpeakgames_cloud9_Constants.WinSymbolDrawing = 1000;
com_redpeakgames_cloud9_Constants.WonFreespin = 1000;
com_redpeakgames_cloud9_Constants.FreespinCounter = 500;
com_redpeakgames_cloud9_Constants.FreespinResult = 2000;
com_redpeakgames_cloud9_Constants.ChangeSymbol = 0;
com_redpeakgames_cloud9_Constants.BigWin = 1;
com_redpeakgames_cloud9_Constants.PostBigWin = 2;
com_redpeakgames_cloud9_Constants.Winline = 3;
com_redpeakgames_cloud9_Constants.PostWin = 4;
com_redpeakgames_cloud9_Constants.Payline00 = 5;
com_redpeakgames_cloud9_Constants.Payline01 = 6;
com_redpeakgames_cloud9_Constants.Payline02 = 7;
com_redpeakgames_cloud9_Constants.Payline03 = 8;
com_redpeakgames_cloud9_Constants.Payline04 = 9;
com_redpeakgames_cloud9_Constants.Payline05 = 10;
com_redpeakgames_cloud9_Constants.Payline06 = 11;
com_redpeakgames_cloud9_Constants.Payline07 = 12;
com_redpeakgames_cloud9_Constants.Payline08 = 13;
com_redpeakgames_cloud9_Constants.Payline09 = 14;
com_redpeakgames_cloud9_Constants.Payline10 = 15;
com_redpeakgames_cloud9_Constants.Payline11 = 16;
com_redpeakgames_cloud9_Constants.Payline12 = 17;
com_redpeakgames_cloud9_Constants.Payline13 = 18;
com_redpeakgames_cloud9_Constants.Payline14 = 19;
com_redpeakgames_cloud9_Constants.Payline15 = 20;
com_redpeakgames_cloud9_Constants.Payline16 = 21;
com_redpeakgames_cloud9_Constants.Payline17 = 22;
com_redpeakgames_cloud9_Constants.Payline18 = 23;
com_redpeakgames_cloud9_Constants.Payline19 = 24;
com_redpeakgames_cloud9_Constants.ExtraSpin = 25;
com_redpeakgames_cloud9_Constants.FreespinStart = 26;
com_redpeakgames_cloud9_Constants.FreespinEnd = 27;
com_redpeakgames_cloud9_Constants.PostEffect = 28;
com_redpeakgames_cloud9_Constants.GrandTotal = 29;
com_redpeakgames_cloud9_Constants.Idle = 30;
com_redpeakgames_cloud9_Constants.Warmup = 31;
com_redpeakgames_cloud9_ErrorCode.NoError = 0;
com_redpeakgames_cloud9_ErrorCode.NotEnoughCoin = 20000;
com_redpeakgames_cloud9_Global.mute = false;
com_redpeakgames_cloud9_Global.muteBgm = false;
com_redpeakgames_cloud9_Lobby.cols = 4;
com_redpeakgames_cloud9_Lobby.rows = 2;
com_redpeakgames_cloud9_TopMenu.salesExpiredTime = HxOverrides.strDate("2018-06-21 07:00:00").getTime();
com_redpeakgames_cloud9_TopMenu.timezoneOffset = (function($this) {
	var $r;
	var o = new Date();
	$r = Object.prototype.hasOwnProperty.call(o,"timezoneOffset")?Reflect.field(new Date(),"timezoneOffset"):0;
	return $r;
}(this));
com_redpeakgames_cloud9_TopMenu.salesMaxSpinCount = 100;
com_redpeakgames_cloud9_TopMenu.getCoinOpenAvailable = false;
com_redpeakgames_cloud9_WheelBase.RAD = 0.01745329252;
com_redpeakgames_cloud9_WheelBase.DEGREE = 57.295779513;
com_redpeakgames_cloud9_dialog_CircleCore.resourceType = "image/png";
com_redpeakgames_cloud9_dialog_CircleCore.resourceName = "__ASSET__:bitmap_com_redpeakgames_cloud9_dialog_CircleCore";
com_redpeakgames_cloud9_dialog_CircleBg.resourceType = "image/png";
com_redpeakgames_cloud9_dialog_CircleBg.resourceName = "__ASSET__:bitmap_com_redpeakgames_cloud9_dialog_CircleBg";
com_redpeakgames_cloud9_dialog_Gift.Christy = "999999";
com_redpeakgames_cloud9_dialog_Gift.Bronze = "999998";
com_redpeakgames_cloud9_dialog_Gift.Silver = "999992";
com_redpeakgames_cloud9_dialog_Gift.Gold = "999993";
com_redpeakgames_cloud9_dialog_Gift.Emerald = "999994";
com_redpeakgames_cloud9_dialog_Gift.Sapphire = "999995";
com_redpeakgames_cloud9_dialog_Gift.Ruby = "999996";
com_redpeakgames_cloud9_dialog_Gift.Diamond = "999997";
com_redpeakgames_cloud9_dialog_Gift.WeeklyWin = "999990";
com_redpeakgames_cloud9_dialog_Gift.WeeklyLike = "999991";
com_redpeakgames_cloud9_game_Game.LongWait = 500000000;
com_redpeakgames_cloud9_game_Game.DefaultBettingIndex = 1;
com_redpeakgames_cloud9_dialog_SalesRandomBox.isOpenned = false;
com_redpeakgames_cloud9_game_GameEvent.Mute = "ge.mute";
com_redpeakgames_cloud9_game_GameEvent.MuteBgm = "ge.mute.bgm";
com_redpeakgames_cloud9_game_GameEvent.StatusChange = "ge.status.change";
com_redpeakgames_cloud9_game_GameEvent.BalanceChanged = "ge.balance.changed";
com_redpeakgames_cloud9_game_GameEvent.AddCoin = "ge.add.coin";
com_redpeakgames_cloud9_game_GameEvent.AddDia = "ge.add.dia";
com_redpeakgames_cloud9_game_GameEvent.DiaDelayedRefresh = "ge.refresh.dia.delayed";
com_redpeakgames_cloud9_game_GameEvent.SlotCoinChanged = "ge.slot.coin.changed";
com_redpeakgames_cloud9_game_GameEvent.SlotDiaChanged = "ge.slot.dia.changed";
com_redpeakgames_cloud9_game_GameEvent.TopCoinChanged = "ge.topmenu.coin.changed";
com_redpeakgames_cloud9_game_GameEvent.TopDiaChanged = "ge.topmenu.dia.changed";
com_redpeakgames_cloud9_game_GameEvent.BigwinEnd = "ge.bigwin.end";
com_redpeakgames_cloud9_game_GameEvent.DailyWheelClose = "ge.dailywheel.close";
com_redpeakgames_cloud9_game_GameEvent.DailyWheelTimeChanged = "ge.dailywheel.time.changed";
com_redpeakgames_cloud9_game_GameEvent.OpenDiaWheel = "ge.open.diawheel";
com_redpeakgames_cloud9_game_GameEvent.OpenLuckySpin = "ge.open.luckyspin";
com_redpeakgames_cloud9_game_GameEvent.LuckySpinClose = "ge.luckyspin.close";
com_redpeakgames_cloud9_game_GameEvent.LuckySpinSpinned = "ge.spin.luckyspin";
com_redpeakgames_cloud9_game_GameEvent.ClosePaytable = "ge.close.paytable";
com_redpeakgames_cloud9_game_GameEvent.OpenCollect = "ge.open.collect";
com_redpeakgames_cloud9_game_GameEvent.CloseGift = "ge.close.gift";
com_redpeakgames_cloud9_game_GameEvent.Reload = "ge.reload";
com_redpeakgames_cloud9_game_GameEvent.NetError = "ge.net.error";
com_redpeakgames_cloud9_game_GameEvent.BetChanged = "ge.bet.changed";
com_redpeakgames_cloud9_game_GameEvent.ToLobby = "ge.to.lobby";
com_redpeakgames_cloud9_game_GameEvent.ToNormalScreen = "ge.to.normalscreen";
com_redpeakgames_cloud9_game_GameEvent.GeneralClose = "ge.general.close";
com_redpeakgames_cloud9_game_GameEvent.CloseLevelup = "ge.close.levelup";
com_redpeakgames_cloud9_game_GameEvent.CloseVoucher = "ge.close.voucher";
com_redpeakgames_cloud9_game_GameEvent.ChooseAutoNum = "ge.choose.autonum";
com_redpeakgames_cloud9_game_GameEvent.OpenAdjustBet = "ge.open.adjustbet";
com_redpeakgames_cloud9_game_GameEvent.OpenShop = "ge.open.shop";
com_redpeakgames_cloud9_game_GameEvent.OpenBankrupt = "ge.open.bankrupt";
com_redpeakgames_cloud9_game_GameEvent.HitTheFive = "ge.open.hitthefive";
com_redpeakgames_cloud9_game_GameEvent.SelectSlot = "ge.selected.slot";
com_redpeakgames_cloud9_game_GameEvent.LoadedSlot = "ge.loaded.slot";
com_redpeakgames_cloud9_game_GameEvent.StartFreespin = "ge.start.freespin";
com_redpeakgames_cloud9_game_GameEvent.EndFreespin = "ge.end.freespin";
com_redpeakgames_cloud9_game_GameEvent.PlayerRefresh = "ge.player.refresh";
com_redpeakgames_cloud9_game_GameEvent.ParticipateTournament = "ge.participation.tournament";
com_redpeakgames_cloud9_game_GameEvent.EmptyTournament = "ge.open.empty.tournament";
com_redpeakgames_cloud9_game_GameEvent.OpenNewSlot = "ge.open.newslot";
com_redpeakgames_cloud9_game_GameEvent.OpenRCongrats = "ge.open.rcongrats";
com_redpeakgames_cloud9_game_GameEvent.CloseRMembers = "ge.close.rmembers";
com_redpeakgames_cloud9_game_GameEvent.OpenRMembers = "ge.open.rmembers";
com_redpeakgames_cloud9_game_GameEvent.UpdateConditionalData = "ge.update.condideal";
com_redpeakgames_cloud9_game_GameEvent.RequestConditionalData = "ge.request.condideal";
com_redpeakgames_cloud9_game_GameEvent.CloseConditionalDeal = "ge.close.condideal";
com_redpeakgames_cloud9_game_GameEvent.OpenRewardPopup = "ge.open.reward.popup";
com_redpeakgames_cloud9_game_GameEvent.RewardCountChange = "ge.reward.countchange";
com_redpeakgames_cloud9_game_GameEvent.DisableSpin = "ge.disable.spin";
com_redpeakgames_cloud9_game_GameEvent.EnableKeyboardSpin = "ge.enable.keyboardspin";
com_redpeakgames_cloud9_game_GameEvent.SharePost = "ge.post.share";
com_redpeakgames_cloud9_game_GameEvent.OpenProfile = "ge.open.profile";
com_redpeakgames_cloud9_game_GameEvent.CloseProfile = "ge.close.profile";
com_redpeakgames_cloud9_game_GameEvent.ChangeSlot = "ge.change.slot";
com_redpeakgames_cloud9_game_GameEvent.OpenPurchase = "get.open.purchage";
com_redpeakgames_cloud9_game_GameEvent.SkipPurchaseResult = "ge.skip.purchaseresult";
com_redpeakgames_cloud9_game_GameEvent.GetReward = "ge.get.reward";
com_redpeakgames_cloud9_game_GameEvent.CloseMysteryBox = "ge.close.mystery";
com_redpeakgames_cloud9_game_GameEvent.OpenLeaderBoard = "ge.open.leaderboard";
com_redpeakgames_cloud9_game_GameEvent.OpenTournamentList = "ge.open.tournamentlist";
com_redpeakgames_cloud9_game_GameEvent.OpenTournamentResult = "ge.result.tournament";
com_redpeakgames_cloud9_game_GameEvent.ChangeGiftNumber = "ge.change.giftnumber";
com_redpeakgames_cloud9_game_GameEvent.CloseExternalLoader = "ge.close.externalloader";
com_redpeakgames_cloud9_game_GameEvent.ReceivedEventResponse = "ge.get.event";
com_redpeakgames_cloud9_game_GameEvent.ReceivedSalesFromSlot = "ge.get.salesfromslot";
com_redpeakgames_cloud9_game_GameEvent.SpinCount = "ge.spin.game";
com_redpeakgames_cloud9_game_GameEvent.OpenDoubleUp = "ge.open.doubleup";
com_redpeakgames_cloud9_game_GameEvent.CloseDoubleUp = "ge.close.doubleup";
com_redpeakgames_cloud9_game_GameEvent.RefreshCoinTree = "ge.refresh.cointree";
com_redpeakgames_cloud9_game_GameEvent.UpgradeCoinTree = "ge.upgrade.cointree";
com_redpeakgames_cloud9_game_GameEvent.CloseCoinTree = "ge.close.cointree";
com_redpeakgames_cloud9_game_GameEvent.OpenSuperBoostPopup = "ge.open.superboostpopup";
com_redpeakgames_cloud9_game_GameEvent.OffSuperBoost = "ge.off.superboost";
com_redpeakgames_cloud9_game_GameEvent.OpenTournamentPackagePopup = "ge.open.tournamentpackagepopup";
com_redpeakgames_cloud9_game_GameEvent.GamePause = "ge.game.pause";
com_redpeakgames_cloud9_game_GameEvent.GameResume = "ge.game.resume";
com_redpeakgames_cloud9_game_GameEvent.OnSpin = "ge.game.spin";
com_redpeakgames_cloud9_game_NearWin.magic = 3;
com_redpeakgames_cloud9_game_Progressbar.resourceType = "image/png";
com_redpeakgames_cloud9_game_Progressbar.resourceName = "__ASSET__:bitmap_com_redpeakgames_cloud9_game_Progressbar";
com_redpeakgames_cloud9_game_Reel.PRELOAD = 2;
com_redpeakgames_cloud9_game_Reel.MAX_PRELOAD = 3;
com_redpeakgames_cloud9_game_Reel.NEARWIN_EXTEND = 2000;
com_redpeakgames_cloud9_game_Se.SpinH = "spin_h";
com_redpeakgames_cloud9_game_Se.SpinS = "spin_s";
com_redpeakgames_cloud9_game_Se.Spin00 = "spin00";
com_redpeakgames_cloud9_game_Se.Spin01 = "spin01";
com_redpeakgames_cloud9_game_Se.Spin02 = "spin02";
com_redpeakgames_cloud9_game_Se.SpinC = "spin_c";
com_redpeakgames_cloud9_game_Se.Bsbg00 = "bg00";
com_redpeakgames_cloud9_game_Se.Bsbg01 = "bg01";
com_redpeakgames_cloud9_game_Se.Fsbg00 = "fsbg";
com_redpeakgames_cloud9_game_Se.Bnbg00 = "bnbg";
com_redpeakgames_cloud9_game_Se.Win = "win00";
com_redpeakgames_cloud9_game_Se.Win1 = "win01";
com_redpeakgames_cloud9_game_Se.Win2 = "win02";
com_redpeakgames_cloud9_game_Se.fsmovie00 = "freespin_movie00";
com_redpeakgames_cloud9_game_Se.fsmovie01 = "freespin_movie01";
com_redpeakgames_cloud9_game_Se.fsmovie02 = "freespin_movie02";
com_redpeakgames_cloud9_game_Se.fsmovie03 = "freespin_movie03";
com_redpeakgames_cloud9_game_Se.fsmovie04 = "freespin_movie04";
com_redpeakgames_cloud9_game_Se.fsmovie05 = "freespin_movie05";
com_redpeakgames_cloud9_game_Se.fsmovie06 = "freespin_movie06";
com_redpeakgames_cloud9_game_Se.movie00 = "movie00";
com_redpeakgames_cloud9_game_Se.movie01 = "movie01";
com_redpeakgames_cloud9_game_Se.movie02 = "movie02";
com_redpeakgames_cloud9_game_Se.movie03 = "movie03";
com_redpeakgames_cloud9_game_Se.movie04 = "movie04";
com_redpeakgames_cloud9_game_Se.reelstop = "spinstop";
com_redpeakgames_cloud9_game_Se.Nearwin00 = "nearwin00";
com_redpeakgames_cloud9_game_Se.Nearwin01 = "nearwin01";
com_redpeakgames_cloud9_game_Se.Nearwin02 = "nearwin02";
com_redpeakgames_cloud9_game_Se.Nearwin03 = "nearwin03";
com_redpeakgames_cloud9_game_Se.Nearwin04 = "nearwin04";
com_redpeakgames_cloud9_game_Se.bwBGM = "bgm";
com_redpeakgames_cloud9_game_Se.BigCoin = "big_coin";
com_redpeakgames_cloud9_game_Se.SuperCoin = "super_coin";
com_redpeakgames_cloud9_game_Se.MegaCoin = "mega_coin";
com_redpeakgames_cloud9_game_Se.EpicCoin = "epic_coin";
com_redpeakgames_cloud9_game_Se.BigVoice = "bigwin";
com_redpeakgames_cloud9_game_Se.SuperVoice = "superwin";
com_redpeakgames_cloud9_game_Se.MegaVoice = "megawin";
com_redpeakgames_cloud9_game_Se.EpicVoice = "epicwin";
com_redpeakgames_cloud9_game_Se.BigWinEnd = "loop_end";
com_redpeakgames_cloud9_game_Se.TextEffect = "text_effect";
com_redpeakgames_cloud9_type_Banner.None = "";
com_redpeakgames_cloud9_type_Banner.Normal = "banner.normal";
com_redpeakgames_cloud9_type_Banner.Special = "banner.special";
com_redpeakgames_cloud9_ui_Dialog.WIDTH = 1922;
com_redpeakgames_cloud9_ui_Dialog.HEIGHT = 1082;
openfl_text_TextField.__regexAlign = new EReg("align=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl_text_TextField.__regexBlockIndent = new EReg("blockindent=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexBreakTag = new EReg("<br\\s*/?>","gi");
openfl_text_TextField.__regexEntities = [new EReg("&quot;","g"),new EReg("&apos;","g"),new EReg("&amp;","g"),new EReg("&lt;","g"),new EReg("&gt;","g")];
openfl_text_TextField.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexHTMLTag = new EReg("<.*?>","g");
openfl_text_TextField.__regexIndent = new EReg(" indent=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexLeading = new EReg("leading=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexLeftMargin = new EReg("leftmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexRightMargin = new EReg("rightmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexTabStops = new EReg("tabstops=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = new haxe__$Int64__$_$_$Int64(0,0);
haxe_io_FPHelper.LN2 = 0.6931471805599453;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved.lt != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved.gt != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved.amp != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved.quot != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved.apos != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
js_Boot.__toStr = { }.toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime__$backend_html5_HTML5Window.dummyCharacter = "";
lime__$backend_html5_HTML5Window.windowID = 0;
lime_audio_openal_AL.NONE = 0;
lime_audio_openal_AL.FALSE = 0;
lime_audio_openal_AL.TRUE = 1;
lime_audio_openal_AL.SOURCE_RELATIVE = 514;
lime_audio_openal_AL.CONE_INNER_ANGLE = 4097;
lime_audio_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_audio_openal_AL.PITCH = 4099;
lime_audio_openal_AL.POSITION = 4100;
lime_audio_openal_AL.DIRECTION = 4101;
lime_audio_openal_AL.VELOCITY = 4102;
lime_audio_openal_AL.LOOPING = 4103;
lime_audio_openal_AL.BUFFER = 4105;
lime_audio_openal_AL.GAIN = 4106;
lime_audio_openal_AL.MIN_GAIN = 4109;
lime_audio_openal_AL.MAX_GAIN = 4110;
lime_audio_openal_AL.ORIENTATION = 4111;
lime_audio_openal_AL.SOURCE_STATE = 4112;
lime_audio_openal_AL.INITIAL = 4113;
lime_audio_openal_AL.PLAYING = 4114;
lime_audio_openal_AL.PAUSED = 4115;
lime_audio_openal_AL.STOPPED = 4116;
lime_audio_openal_AL.BUFFERS_QUEUED = 4117;
lime_audio_openal_AL.BUFFERS_PROCESSED = 4118;
lime_audio_openal_AL.REFERENCE_DISTANCE = 4128;
lime_audio_openal_AL.ROLLOFF_FACTOR = 4129;
lime_audio_openal_AL.CONE_OUTER_GAIN = 4130;
lime_audio_openal_AL.MAX_DISTANCE = 4131;
lime_audio_openal_AL.SEC_OFFSET = 4132;
lime_audio_openal_AL.SAMPLE_OFFSET = 4133;
lime_audio_openal_AL.BYTE_OFFSET = 4134;
lime_audio_openal_AL.SOURCE_TYPE = 4135;
lime_audio_openal_AL.STATIC = 4136;
lime_audio_openal_AL.STREAMING = 4137;
lime_audio_openal_AL.UNDETERMINED = 4144;
lime_audio_openal_AL.FORMAT_MONO8 = 4352;
lime_audio_openal_AL.FORMAT_MONO16 = 4353;
lime_audio_openal_AL.FORMAT_STEREO8 = 4354;
lime_audio_openal_AL.FORMAT_STEREO16 = 4355;
lime_audio_openal_AL.FREQUENCY = 8193;
lime_audio_openal_AL.BITS = 8194;
lime_audio_openal_AL.CHANNELS = 8195;
lime_audio_openal_AL.SIZE = 8196;
lime_audio_openal_AL.NO_ERROR = 0;
lime_audio_openal_AL.INVALID_NAME = 40961;
lime_audio_openal_AL.INVALID_ENUM = 40962;
lime_audio_openal_AL.INVALID_VALUE = 40963;
lime_audio_openal_AL.INVALID_OPERATION = 40964;
lime_audio_openal_AL.OUT_OF_MEMORY = 40965;
lime_audio_openal_AL.VENDOR = 45057;
lime_audio_openal_AL.VERSION = 45058;
lime_audio_openal_AL.RENDERER = 45059;
lime_audio_openal_AL.EXTENSIONS = 45060;
lime_audio_openal_AL.DOPPLER_FACTOR = 49152;
lime_audio_openal_AL.SPEED_OF_SOUND = 49155;
lime_audio_openal_AL.DOPPLER_VELOCITY = 49153;
lime_audio_openal_AL.DISTANCE_MODEL = 53248;
lime_audio_openal_AL.INVERSE_DISTANCE = 53249;
lime_audio_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_audio_openal_AL.LINEAR_DISTANCE = 53251;
lime_audio_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_audio_openal_AL.EXPONENT_DISTANCE = 53253;
lime_audio_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_audio_openal_ALC.FALSE = 0;
lime_audio_openal_ALC.TRUE = 1;
lime_audio_openal_ALC.FREQUENCY = 4103;
lime_audio_openal_ALC.REFRESH = 4104;
lime_audio_openal_ALC.SYNC = 4105;
lime_audio_openal_ALC.MONO_SOURCES = 4112;
lime_audio_openal_ALC.STEREO_SOURCES = 4113;
lime_audio_openal_ALC.NO_ERROR = 0;
lime_audio_openal_ALC.INVALID_DEVICE = 40961;
lime_audio_openal_ALC.INVALID_CONTEXT = 40962;
lime_audio_openal_ALC.INVALID_ENUM = 40963;
lime_audio_openal_ALC.INVALID_VALUE = 40964;
lime_audio_openal_ALC.OUT_OF_MEMORY = 40965;
lime_audio_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_audio_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_audio_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_audio_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_audio_openal_ALC.EXTENSIONS = 4102;
lime_audio_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_audio_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_audio_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.FT_LOAD_FORCE_AUTOHINT = 32;
lime_graphics_opengl_ExtensionPackedDepthStencil.DEPTH24_STENCIL8_EXT = 35056;
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.BGR_EXT = 32992;
lime_graphics_opengl_GL.BGRA_EXT = 32993;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_system_BackgroundWorker.MESSAGE_COMPLETE = "__COMPLETE__";
lime_system_BackgroundWorker.MESSAGE_ERROR = "__ERROR__";
lime_system_System.__directories = new haxe_ds_IntMap();
lime_text__$TextDirection_TextDirection_$Impl_$.INVALID = 0;
lime_text__$TextDirection_TextDirection_$Impl_$.LEFT_TO_RIGHT = 4;
lime_text__$TextDirection_TextDirection_$Impl_$.RIGHT_TO_LEFT = 5;
lime_text__$TextDirection_TextDirection_$Impl_$.TOP_TO_BOTTOM = 6;
lime_text__$TextDirection_TextDirection_$Impl_$.BOTTOM_TO_TOP = 7;
lime_text__$TextScript_TextScript_$Impl_$.COMMON = "Zyyy";
lime_text__$TextScript_TextScript_$Impl_$.INHERITED = "Zinh";
lime_text__$TextScript_TextScript_$Impl_$.UNKNOWN = "Zzzz";
lime_text__$TextScript_TextScript_$Impl_$.ARABIC = "Arab";
lime_text__$TextScript_TextScript_$Impl_$.ARMENIAN = "Armn";
lime_text__$TextScript_TextScript_$Impl_$.BENGALI = "Beng";
lime_text__$TextScript_TextScript_$Impl_$.CYRILLIC = "Cyrl";
lime_text__$TextScript_TextScript_$Impl_$.DEVANAGARI = "Deva";
lime_text__$TextScript_TextScript_$Impl_$.GEORGIAN = "Geor";
lime_text__$TextScript_TextScript_$Impl_$.GREEK = "Grek";
lime_text__$TextScript_TextScript_$Impl_$.GUJARATI = "Gujr";
lime_text__$TextScript_TextScript_$Impl_$.GURMUKHI = "Guru";
lime_text__$TextScript_TextScript_$Impl_$.HANGUL = "Hang";
lime_text__$TextScript_TextScript_$Impl_$.HAN = "Hani";
lime_text__$TextScript_TextScript_$Impl_$.HEBREW = "Hebr";
lime_text__$TextScript_TextScript_$Impl_$.HIRAGANA = "Hira";
lime_text__$TextScript_TextScript_$Impl_$.KANNADA = "Knda";
lime_text__$TextScript_TextScript_$Impl_$.KATAKANA = "Kana";
lime_text__$TextScript_TextScript_$Impl_$.LAO = "Laoo";
lime_text__$TextScript_TextScript_$Impl_$.LATIN = "Latn";
lime_text__$TextScript_TextScript_$Impl_$.MALAYALAM = "Mlym";
lime_text__$TextScript_TextScript_$Impl_$.ORIYA = "Orya";
lime_text__$TextScript_TextScript_$Impl_$.TAMIL = "Taml";
lime_text__$TextScript_TextScript_$Impl_$.TELUGA = "Telu";
lime_text__$TextScript_TextScript_$Impl_$.THAI = "Thai";
lime_text__$TextScript_TextScript_$Impl_$.TIBETAN = "Tibt";
lime_text__$TextScript_TextScript_$Impl_$.BOPOMOFO = "Bopo";
lime_text__$TextScript_TextScript_$Impl_$.BRAILLE = "Brai";
lime_text__$TextScript_TextScript_$Impl_$.CANADIAN_SYLLABICS = "Cans";
lime_text__$TextScript_TextScript_$Impl_$.CHEROKEE = "Cher";
lime_text__$TextScript_TextScript_$Impl_$.ETHIOPIC = "Ethi";
lime_text__$TextScript_TextScript_$Impl_$.KHMER = "Khmr";
lime_text__$TextScript_TextScript_$Impl_$.MONGOLIAN = "Mong";
lime_text__$TextScript_TextScript_$Impl_$.MYANMAR = "Mymr";
lime_text__$TextScript_TextScript_$Impl_$.OGHAM = "Ogam";
lime_text__$TextScript_TextScript_$Impl_$.RUNIC = "Runr";
lime_text__$TextScript_TextScript_$Impl_$.SINHALA = "Sinh";
lime_text__$TextScript_TextScript_$Impl_$.SYRIAC = "Syrc";
lime_text__$TextScript_TextScript_$Impl_$.THAANA = "Thaa";
lime_text__$TextScript_TextScript_$Impl_$.YI = "Yiii";
lime_text__$TextScript_TextScript_$Impl_$.DESERET = "Dsrt";
lime_text__$TextScript_TextScript_$Impl_$.GOTHIC = "Goth";
lime_text__$TextScript_TextScript_$Impl_$.OLD_ITALIC = "Ital";
lime_text__$TextScript_TextScript_$Impl_$.BUHID = "Buhd";
lime_text__$TextScript_TextScript_$Impl_$.HANUNOO = "Hano";
lime_text__$TextScript_TextScript_$Impl_$.TAGALOG = "Tglg";
lime_text__$TextScript_TextScript_$Impl_$.TAGBANWA = "Tagb";
lime_text__$TextScript_TextScript_$Impl_$.CYPRIOT = "Cprt";
lime_text__$TextScript_TextScript_$Impl_$.LIMBU = "Limb";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_B = "Linb";
lime_text__$TextScript_TextScript_$Impl_$.OSMANYA = "Osma";
lime_text__$TextScript_TextScript_$Impl_$.SHAVIAN = "Shaw";
lime_text__$TextScript_TextScript_$Impl_$.TAI_LE = "Tale";
lime_text__$TextScript_TextScript_$Impl_$.UGARITIC = "Ugar";
lime_text__$TextScript_TextScript_$Impl_$.BUGINESE = "Bugi";
lime_text__$TextScript_TextScript_$Impl_$.COPTIC = "Copt";
lime_text__$TextScript_TextScript_$Impl_$.GLAGOLITIC = "Glag";
lime_text__$TextScript_TextScript_$Impl_$.KHAROSHTHI = "Khar";
lime_text__$TextScript_TextScript_$Impl_$.NEW_TAI_LUE = "Talu";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERSIAN = "Xpeo";
lime_text__$TextScript_TextScript_$Impl_$.SYLOTI_NAGRI = "Sylo";
lime_text__$TextScript_TextScript_$Impl_$.TIFINAGH = "Tfng";
lime_text__$TextScript_TextScript_$Impl_$.BALINESE = "Bali";
lime_text__$TextScript_TextScript_$Impl_$.CUNEIFORM = "Xsux";
lime_text__$TextScript_TextScript_$Impl_$.NKO = "Nkoo";
lime_text__$TextScript_TextScript_$Impl_$.PHAGS_PA = "Phag";
lime_text__$TextScript_TextScript_$Impl_$.PHOENICIAN = "Phnx";
lime_text__$TextScript_TextScript_$Impl_$.CARIAN = "Cari";
lime_text__$TextScript_TextScript_$Impl_$.CHAM = "Cham";
lime_text__$TextScript_TextScript_$Impl_$.KAYAH_LI = "Kali";
lime_text__$TextScript_TextScript_$Impl_$.LEPCHA = "Lepc";
lime_text__$TextScript_TextScript_$Impl_$.LYCIAN = "Lyci";
lime_text__$TextScript_TextScript_$Impl_$.LYDIAN = "Lydi";
lime_text__$TextScript_TextScript_$Impl_$.OL_CHIKI = "Olck";
lime_text__$TextScript_TextScript_$Impl_$.REJANG = "Rjng";
lime_text__$TextScript_TextScript_$Impl_$.SAURASHTRA = "Saur";
lime_text__$TextScript_TextScript_$Impl_$.SUNDANESE = "Sund";
lime_text__$TextScript_TextScript_$Impl_$.VAI = "Vaii";
lime_text__$TextScript_TextScript_$Impl_$.AVESTAN = "Avst";
lime_text__$TextScript_TextScript_$Impl_$.BAMUM = "Bamu";
lime_text__$TextScript_TextScript_$Impl_$.EGYPTIAN_HIEROGLYPHS = "Egyp";
lime_text__$TextScript_TextScript_$Impl_$.IMPERIAL_ARAMAIC = "Armi";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PAHLAVI = "Phli";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PARTHIAN = "Prti";
lime_text__$TextScript_TextScript_$Impl_$.JAVANESE = "Java";
lime_text__$TextScript_TextScript_$Impl_$.KAITHI = "Kthi";
lime_text__$TextScript_TextScript_$Impl_$.LISU = "Lisu";
lime_text__$TextScript_TextScript_$Impl_$.MEETEI_MAYEK = "Mtei";
lime_text__$TextScript_TextScript_$Impl_$.OLD_SOUTH_ARABIAN = "Sarb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_TURKIC = "Orkh";
lime_text__$TextScript_TextScript_$Impl_$.SAMARITAN = "Samr";
lime_text__$TextScript_TextScript_$Impl_$.TAI_THAM = "Lana";
lime_text__$TextScript_TextScript_$Impl_$.TAI_VIET = "Tavt";
lime_text__$TextScript_TextScript_$Impl_$.BATAK = "Batk";
lime_text__$TextScript_TextScript_$Impl_$.BRAHMI = "Brah";
lime_text__$TextScript_TextScript_$Impl_$.MANDAIC = "Mand";
lime_text__$TextScript_TextScript_$Impl_$.CHAKMA = "Cakm";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_CURSIVE = "Merc";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_HIEROGLYPHS = "Mero";
lime_text__$TextScript_TextScript_$Impl_$.MIAO = "Plrd";
lime_text__$TextScript_TextScript_$Impl_$.SHARADA = "Shrd";
lime_text__$TextScript_TextScript_$Impl_$.SORA_SOMPENG = "Sora";
lime_text__$TextScript_TextScript_$Impl_$.TAKRI = "Takr";
lime_text__$TextScript_TextScript_$Impl_$.BASSA_VAH = "Bass";
lime_text__$TextScript_TextScript_$Impl_$.CAUCASIAN_ALBANIAN = "Aghb";
lime_text__$TextScript_TextScript_$Impl_$.DUPLOYAN = "Dupl";
lime_text__$TextScript_TextScript_$Impl_$.ELBASAN = "Elba";
lime_text__$TextScript_TextScript_$Impl_$.GRANTHA = "Gran";
lime_text__$TextScript_TextScript_$Impl_$.KHOJKI = "Khoj";
lime_text__$TextScript_TextScript_$Impl_$.KHUDAWADI = "Sind";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_A = "Lina";
lime_text__$TextScript_TextScript_$Impl_$.MAHAJANI = "Mahj";
lime_text__$TextScript_TextScript_$Impl_$.MANICHAEAN = "Mani";
lime_text__$TextScript_TextScript_$Impl_$.MENDE_KIKAKUI = "Mend";
lime_text__$TextScript_TextScript_$Impl_$.MODI = "Modi";
lime_text__$TextScript_TextScript_$Impl_$.MRO = "Mroo";
lime_text__$TextScript_TextScript_$Impl_$.NABATAEAN = "Nbat";
lime_text__$TextScript_TextScript_$Impl_$.OLD_NORTH_ARABIAN = "Narb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERMIC = "Perm";
lime_text__$TextScript_TextScript_$Impl_$.PAHAWH_HMONG = "Hmng";
lime_text__$TextScript_TextScript_$Impl_$.PALMYRENE = "Palm";
lime_text__$TextScript_TextScript_$Impl_$.PAU_CIN_HAU = "Pauc";
lime_text__$TextScript_TextScript_$Impl_$.PSALTER_PAHLAVI = "Phlp";
lime_text__$TextScript_TextScript_$Impl_$.SIDDHAM = "Sidd";
lime_text__$TextScript_TextScript_$Impl_$.TIRHUTA = "Tirh";
lime_text__$TextScript_TextScript_$Impl_$.WARANG_CITI = "Wara";
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.CENTER = 0;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN = 4;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.LEFT = 8;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.RIGHT = 2;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP = 1;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_LEFT = 12;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_RIGHT = 6;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_LEFT = 9;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_RIGHT = 3;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNKNOWN = 0;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSPACE = 8;
lime_ui__$KeyCode_KeyCode_$Impl_$.TAB = 9;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN = 13;
lime_ui__$KeyCode_KeyCode_$Impl_$.ESCAPE = 27;
lime_ui__$KeyCode_KeyCode_$Impl_$.SPACE = 32;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXCLAMATION = 33;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUOTE = 34;
lime_ui__$KeyCode_KeyCode_$Impl_$.HASH = 35;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOLLAR = 36;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERCENT = 37;
lime_ui__$KeyCode_KeyCode_$Impl_$.AMPERSAND = 38;
lime_ui__$KeyCode_KeyCode_$Impl_$.SINGLE_QUOTE = 39;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_PARENTHESIS = 40;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_PARENTHESIS = 41;
lime_ui__$KeyCode_KeyCode_$Impl_$.ASTERISK = 42;
lime_ui__$KeyCode_KeyCode_$Impl_$.PLUS = 43;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMMA = 44;
lime_ui__$KeyCode_KeyCode_$Impl_$.MINUS = 45;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERIOD = 46;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLASH = 47;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_0 = 48;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_1 = 49;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_2 = 50;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_3 = 51;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_4 = 52;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_5 = 53;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_6 = 54;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_7 = 55;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_8 = 56;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_9 = 57;
lime_ui__$KeyCode_KeyCode_$Impl_$.COLON = 58;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEMICOLON = 59;
lime_ui__$KeyCode_KeyCode_$Impl_$.LESS_THAN = 60;
lime_ui__$KeyCode_KeyCode_$Impl_$.EQUALS = 61;
lime_ui__$KeyCode_KeyCode_$Impl_$.GREATER_THAN = 62;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUESTION = 63;
lime_ui__$KeyCode_KeyCode_$Impl_$.AT = 64;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_BRACKET = 91;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSLASH = 92;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_BRACKET = 93;
lime_ui__$KeyCode_KeyCode_$Impl_$.CARET = 94;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDERSCORE = 95;
lime_ui__$KeyCode_KeyCode_$Impl_$.GRAVE = 96;
lime_ui__$KeyCode_KeyCode_$Impl_$.A = 97;
lime_ui__$KeyCode_KeyCode_$Impl_$.B = 98;
lime_ui__$KeyCode_KeyCode_$Impl_$.C = 99;
lime_ui__$KeyCode_KeyCode_$Impl_$.D = 100;
lime_ui__$KeyCode_KeyCode_$Impl_$.E = 101;
lime_ui__$KeyCode_KeyCode_$Impl_$.F = 102;
lime_ui__$KeyCode_KeyCode_$Impl_$.G = 103;
lime_ui__$KeyCode_KeyCode_$Impl_$.H = 104;
lime_ui__$KeyCode_KeyCode_$Impl_$.I = 105;
lime_ui__$KeyCode_KeyCode_$Impl_$.J = 106;
lime_ui__$KeyCode_KeyCode_$Impl_$.K = 107;
lime_ui__$KeyCode_KeyCode_$Impl_$.L = 108;
lime_ui__$KeyCode_KeyCode_$Impl_$.M = 109;
lime_ui__$KeyCode_KeyCode_$Impl_$.N = 110;
lime_ui__$KeyCode_KeyCode_$Impl_$.O = 111;
lime_ui__$KeyCode_KeyCode_$Impl_$.P = 112;
lime_ui__$KeyCode_KeyCode_$Impl_$.Q = 113;
lime_ui__$KeyCode_KeyCode_$Impl_$.R = 114;
lime_ui__$KeyCode_KeyCode_$Impl_$.S = 115;
lime_ui__$KeyCode_KeyCode_$Impl_$.T = 116;
lime_ui__$KeyCode_KeyCode_$Impl_$.U = 117;
lime_ui__$KeyCode_KeyCode_$Impl_$.V = 118;
lime_ui__$KeyCode_KeyCode_$Impl_$.W = 119;
lime_ui__$KeyCode_KeyCode_$Impl_$.X = 120;
lime_ui__$KeyCode_KeyCode_$Impl_$.Y = 121;
lime_ui__$KeyCode_KeyCode_$Impl_$.Z = 122;
lime_ui__$KeyCode_KeyCode_$Impl_$.DELETE = 127;
lime_ui__$KeyCode_KeyCode_$Impl_$.CAPS_LOCK = 1073741881;
lime_ui__$KeyCode_KeyCode_$Impl_$.F1 = 1073741882;
lime_ui__$KeyCode_KeyCode_$Impl_$.F2 = 1073741883;
lime_ui__$KeyCode_KeyCode_$Impl_$.F3 = 1073741884;
lime_ui__$KeyCode_KeyCode_$Impl_$.F4 = 1073741885;
lime_ui__$KeyCode_KeyCode_$Impl_$.F5 = 1073741886;
lime_ui__$KeyCode_KeyCode_$Impl_$.F6 = 1073741887;
lime_ui__$KeyCode_KeyCode_$Impl_$.F7 = 1073741888;
lime_ui__$KeyCode_KeyCode_$Impl_$.F8 = 1073741889;
lime_ui__$KeyCode_KeyCode_$Impl_$.F9 = 1073741890;
lime_ui__$KeyCode_KeyCode_$Impl_$.F10 = 1073741891;
lime_ui__$KeyCode_KeyCode_$Impl_$.F11 = 1073741892;
lime_ui__$KeyCode_KeyCode_$Impl_$.F12 = 1073741893;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRINT_SCREEN = 1073741894;
lime_ui__$KeyCode_KeyCode_$Impl_$.SCROLL_LOCK = 1073741895;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAUSE = 1073741896;
lime_ui__$KeyCode_KeyCode_$Impl_$.INSERT = 1073741897;
lime_ui__$KeyCode_KeyCode_$Impl_$.HOME = 1073741898;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_UP = 1073741899;
lime_ui__$KeyCode_KeyCode_$Impl_$.END = 1073741901;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_DOWN = 1073741902;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT = 1073741903;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT = 1073741904;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOWN = 1073741905;
lime_ui__$KeyCode_KeyCode_$Impl_$.UP = 1073741906;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUM_LOCK = 1073741907;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DIVIDE = 1073741908;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MULTIPLY = 1073741909;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MINUS = 1073741910;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS = 1073741911;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_ENTER = 1073741912;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_1 = 1073741913;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_2 = 1073741914;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_3 = 1073741915;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_4 = 1073741916;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_5 = 1073741917;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_6 = 1073741918;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_7 = 1073741919;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_8 = 1073741920;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_9 = 1073741921;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_0 = 1073741922;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERIOD = 1073741923;
lime_ui__$KeyCode_KeyCode_$Impl_$.APPLICATION = 1073741925;
lime_ui__$KeyCode_KeyCode_$Impl_$.POWER = 1073741926;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EQUALS = 1073741927;
lime_ui__$KeyCode_KeyCode_$Impl_$.F13 = 1073741928;
lime_ui__$KeyCode_KeyCode_$Impl_$.F14 = 1073741929;
lime_ui__$KeyCode_KeyCode_$Impl_$.F15 = 1073741930;
lime_ui__$KeyCode_KeyCode_$Impl_$.F16 = 1073741931;
lime_ui__$KeyCode_KeyCode_$Impl_$.F17 = 1073741932;
lime_ui__$KeyCode_KeyCode_$Impl_$.F18 = 1073741933;
lime_ui__$KeyCode_KeyCode_$Impl_$.F19 = 1073741934;
lime_ui__$KeyCode_KeyCode_$Impl_$.F20 = 1073741935;
lime_ui__$KeyCode_KeyCode_$Impl_$.F21 = 1073741936;
lime_ui__$KeyCode_KeyCode_$Impl_$.F22 = 1073741937;
lime_ui__$KeyCode_KeyCode_$Impl_$.F23 = 1073741938;
lime_ui__$KeyCode_KeyCode_$Impl_$.F24 = 1073741939;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXECUTE = 1073741940;
lime_ui__$KeyCode_KeyCode_$Impl_$.HELP = 1073741941;
lime_ui__$KeyCode_KeyCode_$Impl_$.MENU = 1073741942;
lime_ui__$KeyCode_KeyCode_$Impl_$.SELECT = 1073741943;
lime_ui__$KeyCode_KeyCode_$Impl_$.STOP = 1073741944;
lime_ui__$KeyCode_KeyCode_$Impl_$.AGAIN = 1073741945;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDO = 1073741946;
lime_ui__$KeyCode_KeyCode_$Impl_$.CUT = 1073741947;
lime_ui__$KeyCode_KeyCode_$Impl_$.COPY = 1073741948;
lime_ui__$KeyCode_KeyCode_$Impl_$.PASTE = 1073741949;
lime_ui__$KeyCode_KeyCode_$Impl_$.FIND = 1073741950;
lime_ui__$KeyCode_KeyCode_$Impl_$.MUTE = 1073741951;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_UP = 1073741952;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_DOWN = 1073741953;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COMMA = 1073741957;
lime_ui__$KeyCode_KeyCode_$Impl_$.ALT_ERASE = 1073741977;
lime_ui__$KeyCode_KeyCode_$Impl_$.SYSTEM_REQUEST = 1073741978;
lime_ui__$KeyCode_KeyCode_$Impl_$.CANCEL = 1073741979;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR = 1073741980;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRIOR = 1073741981;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN2 = 1073741982;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEPARATOR = 1073741983;
lime_ui__$KeyCode_KeyCode_$Impl_$.OUT = 1073741984;
lime_ui__$KeyCode_KeyCode_$Impl_$.OPER = 1073741985;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR_AGAIN = 1073741986;
lime_ui__$KeyCode_KeyCode_$Impl_$.CRSEL = 1073741987;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXSEL = 1073741988;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_00 = 1073742000;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_000 = 1073742001;
lime_ui__$KeyCode_KeyCode_$Impl_$.THOUSAND_SEPARATOR = 1073742002;
lime_ui__$KeyCode_KeyCode_$Impl_$.DECIMAL_SEPARATOR = 1073742003;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_UNIT = 1073742004;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_SUBUNIT = 1073742005;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_TAB = 1073742010;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BACKSPACE = 1073742011;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_A = 1073742012;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_B = 1073742013;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_C = 1073742014;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_D = 1073742015;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_E = 1073742016;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_F = 1073742017;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_XOR = 1073742018;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_POWER = 1073742019;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERCENT = 1073742020;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LESS_THAN = 1073742021;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_GREATER_THAN = 1073742022;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AMPERSAND = 1073742023;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COLON = 1073742027;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HASH = 1073742028;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_SPACE = 1073742029;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AT = 1073742030;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EXCLAMATION = 1073742031;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_STORE = 1073742032;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_RECALL = 1073742033;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_ADD = 1073742035;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR = 1073742040;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BINARY = 1073742042;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_OCTAL = 1073742043;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DECIMAL = 1073742044;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_CTRL = 1073742048;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_SHIFT = 1073742049;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_ALT = 1073742050;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_META = 1073742051;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_CTRL = 1073742052;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_SHIFT = 1073742053;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_ALT = 1073742054;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_META = 1073742055;
lime_ui__$KeyCode_KeyCode_$Impl_$.MODE = 1073742081;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_NEXT = 1073742082;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PREVIOUS = 1073742083;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_STOP = 1073742084;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PLAY = 1073742085;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_MUTE = 1073742086;
lime_ui__$KeyCode_KeyCode_$Impl_$.MEDIA_SELECT = 1073742087;
lime_ui__$KeyCode_KeyCode_$Impl_$.WWW = 1073742088;
lime_ui__$KeyCode_KeyCode_$Impl_$.MAIL = 1073742089;
lime_ui__$KeyCode_KeyCode_$Impl_$.CALCULATOR = 1073742090;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMPUTER = 1073742091;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_SEARCH = 1073742092;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_HOME = 1073742093;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BACK = 1073742094;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_FORWARD = 1073742095;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_STOP = 1073742096;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_REFRESH = 1073742097;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_DOWN = 1073742099;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_UP = 1073742100;
lime_ui__$KeyCode_KeyCode_$Impl_$.DISPLAY_SWITCH = 1073742101;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_TOGGLE = 1073742102;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_DOWN = 1073742103;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_UP = 1073742104;
lime_ui__$KeyCode_KeyCode_$Impl_$.EJECT = 1073742105;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLEEP = 1073742106;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_utils_Assets.cache = new lime_utils_AssetCache();
lime_utils_Assets.libraries = new haxe_ds_StringMap();
lime_utils_Assets.onChange = new lime_app__$Event_$Void_$Void();
lime_utils__$Bytes_Bytes_$Impl_$.cffi_lime_bytes_from_data_pointer = lime_system_CFFI.load("lime","lime_bytes_from_data_pointer",2,false);
lime_utils__$Bytes_Bytes_$Impl_$.cffi_lime_bytes_get_data_pointer = lime_system_CFFI.load("lime","lime_bytes_get_data_pointer",1,false);
lime_utils__$Bytes_Bytes_$Impl_$.cffi_lime_bytes_read_file = lime_system_CFFI.load("lime","lime_bytes_read_file",2,false);
lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Int16Array_Int16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Log_LogLevel_$Impl_$.NONE = 0;
lime_utils__$Log_LogLevel_$Impl_$.ERROR = 1;
lime_utils__$Log_LogLevel_$Impl_$.WARN = 2;
lime_utils__$Log_LogLevel_$Impl_$.INFO = 3;
lime_utils__$Log_LogLevel_$Impl_$.DEBUG = 4;
lime_utils__$Log_LogLevel_$Impl_$.VERBOSE = 5;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
motion_actuators_SimpleActuator.actuators = [];
motion_actuators_SimpleActuator.actuatorsLength = 0;
motion_actuators_SimpleActuator.addedEvent = false;
motion_Actuate.defaultActuator = motion_actuators_SimpleActuator;
motion_Actuate.defaultEase = motion_easing_Expo.get_easeOut();
motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
openfl_Assets.cache = new openfl_AssetCache();
openfl_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__matrix3 = new lime_math_Matrix3();
openfl_geom_Matrix.__temp = new openfl_geom_Matrix();
openfl_Lib.current = new openfl_display_MovieClip();
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_renderer_DrawCommandBuffer.empty = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_opengl_GLTilemap.__skippedTiles = new haxe_ds_IntMap();
openfl__$internal_stage3D_AGALConverter.limitedProfile = true;
openfl__$internal_stage3D_Context3DStateCache.FLOATS_PER_REGISTER = 4;
openfl__$internal_stage3D_Context3DStateCache.MAX_NUM_REGISTERS = 1024;
openfl__$internal_stage3D_Context3DStateCache.disableCache = true;
openfl__$internal_stage3D_GLUtils.debug = false;
openfl__$internal_swf_SWFLite.instances = new haxe_ds_StringMap();
openfl__$internal_text_TextEngine.UTF8_TAB = 9;
openfl__$internal_text_TextEngine.UTF8_ENDLINE = 10;
openfl__$internal_text_TextEngine.UTF8_SPACE = 32;
openfl__$internal_text_TextEngine.UTF8_HYPHEN = 45;
openfl__$internal_text_TextEngine.__defaultFonts = new haxe_ds_StringMap();
openfl__$internal_utils_PerlinNoise.P = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];
openfl_display__$BlendMode_BlendMode_$Impl_$.ADD = 0;
openfl_display__$BlendMode_BlendMode_$Impl_$.ALPHA = 1;
openfl_display__$BlendMode_BlendMode_$Impl_$.DARKEN = 2;
openfl_display__$BlendMode_BlendMode_$Impl_$.DIFFERENCE = 3;
openfl_display__$BlendMode_BlendMode_$Impl_$.ERASE = 4;
openfl_display__$BlendMode_BlendMode_$Impl_$.HARDLIGHT = 5;
openfl_display__$BlendMode_BlendMode_$Impl_$.INVERT = 6;
openfl_display__$BlendMode_BlendMode_$Impl_$.LAYER = 7;
openfl_display__$BlendMode_BlendMode_$Impl_$.LIGHTEN = 8;
openfl_display__$BlendMode_BlendMode_$Impl_$.MULTIPLY = 9;
openfl_display__$BlendMode_BlendMode_$Impl_$.NORMAL = 10;
openfl_display__$BlendMode_BlendMode_$Impl_$.OVERLAY = 11;
openfl_display__$BlendMode_BlendMode_$Impl_$.SCREEN = 12;
openfl_display__$BlendMode_BlendMode_$Impl_$.SHADER = 13;
openfl_display__$BlendMode_BlendMode_$Impl_$.SUBTRACT = 14;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.NONE = 0;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.ROUND = 1;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.SQUARE = 2;
openfl_display__$GradientType_GradientType_$Impl_$.LINEAR = 0;
openfl_display__$GradientType_GradientType_$Impl_$.RADIAL = 1;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.EVEN_ODD = 0;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.NON_ZERO = 1;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.LINEAR_RGB = 0;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.RGB = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.BEVEL = 0;
openfl_display__$JointStyle_JointStyle_$Impl_$.MITER = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.ROUND = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.HORIZONTAL = 0;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NONE = 1;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NORMAL = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.VERTICAL = 3;
openfl_display_LoaderInfo.__rootURL = window.document.URL;
openfl_display_OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl_display_OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.ALWAYS = 0;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.AUTO = 1;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.NEVER = 2;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL = 0;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL2 = 1;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL3 = 2;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL4 = 3;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT = 4;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT2 = 5;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT3 = 6;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT4 = 7;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT = 8;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT2 = 9;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT3 = 10;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT4 = 11;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X2 = 12;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X3 = 13;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X4 = 14;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X2 = 15;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X3 = 16;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X4 = 17;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X2 = 18;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X3 = 19;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X4 = 20;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.FAST = 0;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.FULL = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.PAD = 0;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REFLECT = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REPEAT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM = 0;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_LEFT = 1;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_RIGHT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.LEFT = 3;
openfl_display__$StageAlign_StageAlign_$Impl_$.RIGHT = 4;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP = 5;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_LEFT = 6;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_RIGHT = 7;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN = 0;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN_INTERACTIVE = 1;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.NORMAL = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.BEST = 0;
openfl_display__$StageQuality_StageQuality_$Impl_$.HIGH = 1;
openfl_display__$StageQuality_StageQuality_$Impl_$.LOW = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.MEDIUM = 3;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.EXACT_FIT = 0;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_BORDER = 1;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_SCALE = 2;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.SHOW_ALL = 3;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NEGATIVE = 0;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NONE = 1;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.POSITIVE = 2;
openfl_display3D_Context3D.supportsVideoTexture = true;
openfl_display3D_Context3D.MAX_SAMPLERS = 8;
openfl_display3D_Context3D.MAX_ATTRIBUTES = 16;
openfl_display3D_Context3D.MAX_PROGRAM_REGISTERS = 128;
openfl_display3D_Context3D.__stateCache = new openfl__$internal_stage3D_Context3DStateCache();
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.DRAW_CALLS = 0;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_INDEX_BUFFER = 1;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_VERTEX_BUFFER = 2;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_TEXTURE = 3;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_TEXTURE_COMPRESSED = 4;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_PROGRAM = 5;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_INDEX_BUFFER = 6;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_VERTEX_BUFFER = 7;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_TEXTURE = 8;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_TEXTURE_COMPRESSED = 9;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_PROGRAM = 10;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.$length = 11;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_ALPHA = 0;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_COLOR = 1;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE = 2;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_ALPHA = 3;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_COLOR = 4;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_ALPHA = 5;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_COLOR = 6;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_ALPHA = 7;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_COLOR = 8;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ZERO = 9;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.DYNAMIC_DRAW = 0;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.STATIC_DRAW = 1;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.ALWAYS = 0;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.EQUAL = 1;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER = 2;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER_EQUAL = 3;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS = 4;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS_EQUAL = 5;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NEVER = 6;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NOT_EQUAL = 7;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPLINEAR = 0;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNEAREST = 1;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNONE = 2;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE = 0;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_CONSTRAINED = 1;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_EXTENDED = 2;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD = 3;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD_CONSTRAINED = 4;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.FRAGMENT = 0;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.VERTEX = 1;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.AUTO = 0;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.SOFTWARE = 1;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_SATURATE = 0;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_WRAP = 1;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_SATURATE = 2;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_WRAP = 3;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INVERT = 4;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.KEEP = 5;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.SET = 6;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.ZERO = 7;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC16X = 0;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC2X = 1;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC4X = 2;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC8X = 3;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.LINEAR = 4;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.NEAREST = 5;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGR_PACKED = 0;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA = 1;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA_PACKED = 2;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED = 3;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED_ALPHA = 4;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.RGBA_HALF_FLOAT = 5;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 0;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 2;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 3;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.BYTES_4 = 0;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_1 = 1;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_2 = 2;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_3 = 3;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_4 = 4;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP = 0;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP_U_REPEAT_V = 1;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT = 2;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT_U_CLAMP_V = 3;
openfl_display3D_Program3D.verbose = lime_utils_Log.level == 5;
openfl_display3D_textures_Texture.__lowMemoryMode = false;
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLEAR = "clear";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.COPY = "copy";
openfl_events_Event.CUT = "cut";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.EXIT_FRAME = "exitFrame";
openfl_events_Event.FRAME_CONSTRUCTED = "frameConstructed";
openfl_events_Event.FRAME_LABEL = "frameLabel";
openfl_events_Event.FULLSCREEN = "fullScreen";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.PASTE = "paste";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SELECT_ALL = "selectAll";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.TEXTURE_READY = "textureReady";
openfl_events_Event.UNLOAD = "unload";
openfl_events_ActivityEvent.ACTIVITY = "activity";
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_DataEvent.DATA = "data";
openfl_events_DataEvent.UPLOAD_COMPLETE_DATA = "uploadCompleteData";
openfl_events_ErrorEvent.ERROR = "error";
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_NetStatusEvent.NET_STATUS = "netStatus";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_events_TimerEvent.TIMER = "timer";
openfl_events_TimerEvent.TIMER_COMPLETE = "timerComplete";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_events_UncaughtErrorEvent.UNCAUGHT_ERROR = "uncaughtError";
openfl_external_ExternalInterface.available = true;
openfl_external_ExternalInterface.marshallExceptions = false;
openfl_filters_BlurFilter.__blurShader = new openfl_filters__$BlurFilter_BlurShader();
openfl_filters_ColorMatrixFilter.__colorMatrixShader = new openfl_filters__$ColorMatrixFilter_ColorMatrixShader();
openfl_filters_GlowFilter.__glowShader = new openfl_filters__$GlowFilter_GlowShader();
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.AXIS_ANGLE = 0;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.EULER_ANGLES = 1;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.QUATERNION = 2;
openfl_geom_Point.__temp = new openfl_geom_Point();
openfl_geom_Rectangle.__temp = new openfl_geom_Rectangle();
openfl_media_SoundMixer.MAX_ACTIVE_CHANNELS = 32;
openfl_media_SoundMixer.__soundChannels = [];
openfl_media_SoundMixer.__soundTransform = new openfl_media_SoundTransform();
openfl_net_NetConnection.CONNECT_SUCCESS = "connectSuccess";
openfl_net_SharedObject.defaultObjectEncoding = 3;
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.FLUSHED = 0;
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.PENDING = 1;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.BINARY = 0;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.TEXT = 1;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.VARIABLES = 2;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_system_Security.LOCAL_TRUSTED = "localTrusted";
openfl_system_Security.LOCAL_WITH_FILE = "localWithFile";
openfl_system_Security.LOCAL_WITH_NETWORK = "localWithNetwork";
openfl_system_Security.REMOTE = "remote";
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_system_System.useCodePage = false;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.ADVANCED = 0;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.NORMAL = 1;
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD = 0;
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD_ITALIC = 1;
openfl_text__$FontStyle_FontStyle_$Impl_$.ITALIC = 2;
openfl_text__$FontStyle_FontStyle_$Impl_$.REGULAR = 3;
openfl_text__$FontType_FontType_$Impl_$.DEVICE = 0;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED = 1;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED_CFF = 2;
openfl_text__$GridFitType_GridFitType_$Impl_$.NONE = 0;
openfl_text__$GridFitType_GridFitType_$Impl_$.PIXEL = 1;
openfl_text__$GridFitType_GridFitType_$Impl_$.SUBPIXEL = 2;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.CENTER = 0;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.LEFT = 1;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.NONE = 2;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.RIGHT = 3;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.DYNAMIC = 0;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.INPUT = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.CENTER = 0;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.END = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.JUSTIFY = 2;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.LEFT = 3;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.RIGHT = 4;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.START = 5;
openfl_ui_GameInput.isSupported = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
openfl_ui_Mouse.supportsCursor = true;
openfl_ui_Mouse.supportsNativeCursor = true;
openfl_ui_Mouse.__cursor = "auto";
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.DEFLATE = 0;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.LZMA = 1;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.ZLIB = 2;
openfl_utils__$Endian_Endian_$Impl_$.BIG_ENDIAN = 0;
openfl_utils__$Endian_Endian_$Impl_$.LITTLE_ENDIAN = 1;
spritesheet_data_BehaviorData.uniqueID = 0;
ApplicationMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=lobby.js.map